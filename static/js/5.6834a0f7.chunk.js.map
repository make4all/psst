{"version":3,"sources":["bus.ts","views/dashboard/DataOutputItem.tsx","views/dashboard/ParameterItem.tsx","views/dashboard/DataHandlerItem.tsx","views/dashboard/JDValueItem.tsx","views/dashboard/JDServiceItem.tsx","pages/Dashboard.tsx","sonification/handler/SimpleDataHandler.ts"],"names":["bus","createWebBus","DataOutputItem","props","name","createOutput","outputObject","FormControlLabel","control","Switch","checked","activated","onChange","label","ParameterItem","useState","default","obj","value","setValue","values","type","FormControl","InputLabel","variant","htmlFor","id","NativeSelect","e","newValue","target","handleUpdate","map","display","TextField","size","inputProps","step","DataHandlerItem","addButtonAnchor","setAddButtonAnchor","dataOutputs","setDataOutputs","menuOpen","Boolean","handleMenuClose","handleDataOutputChange","console","log","dataOutputsCopy","output","handlerObject","addOutput","removeOutput","undefined","onParameterChange","active","availableServices","onAddToService","onRemove","Grid","item","md","sm","xs","Card","elevation","sx","border","borderColor","grey","CardHeader","bgcolor","title","Typography","component","action","Box","Button","onClick","event","currentTarget","endIcon","ArrowDropDown","Menu","open","onClose","anchorEl","service","MenuItem","Math","floor","random","Date","now","description","parameters","createHandler","length","CardContent","minHeight","container","spacing","lg","parameter","float","FormLabel","FormGroup","JDValueItem","handlersExist","dataHandlers","currentValue","setCurrentValue","useEffect","register","subscribe","REPORT_UPDATE","throttle","a","raw","unpackedValue","index","format","currentHandlerTemplates","units","onDataHandlerChange","mr","ml","template","dataHandler","key","JDServiceItem","blueGrey","backgroundColor","boxShadow","fontSize","color","add","PlaybackState","SimpleDataHandler","threshold","_threshold","this","sink$","pipe","bufferCount","frames","filter","val","DataHandler","SRV_INFO_MAP","SRV_ACCELEROMETER","d3","domain","SRV_BUTTON","SRV_BUZZER","SRV_GYROSCOPE","SRV_HUMIDITY","SRV_LIGHT_LEVEL","SRV_SOUND_LEVEL","SRV_POTENTIOMETER","SRV_TEMPERATURE","AVAILABLE_DATA_OUTPUT_TEMPLATES","note","NoteSonify","stereoPannerNode","pan","noise","NoiseSonify","earcon","fo","FileOutput","fetch","then","res","arrayBuffer","buffer","speech","Speech","polite","initializeDataOutput","AVAILABLE_DATA_HANDLER_TEMPLATES","NoteHandler","FilterRangeHandler","frh","RunningExtremaHandler","direction","SlopeParityHandler","SaveTraceButton","useBus","recorder","useMemo","TraceRecorder","start","stop","Link","data","mimeType","busText","describe","traceText","trace","serializeToText","text","window","navigator","userAgent","test","url","document","createElement","body","appendChild","style","href","download","click","downloadUrl","encodeURIComponent","underline","dbg","location","search","DashboardView","services","setServices","alertOpen","setAlertOpen","Stopped","playback","setPlayback","jdServices","useServices","sensor","connected","useChange","_","newServices","jds","specification","classIdentifier","serviceInfo","serviceId","SoundLevelReg","Enabled","sendSetBoolAsync","serviceWrapper","device","v","i","sink","OutputEngine","getInstance","addSink","sinkId","rawSubject","Subject","setStream","jdUnsubscribe","readingRegister","next","Datum","unsubscribe","jdService","join","handleConnect","disconnect","connect","resendPlaybackForOutputEngine","PlayingLive","OutputStateChange","Play","PlayingBuffer","Paused","Stop","handleParameterChange","handleDataHandlerChange","valueId","servicesCopy","getSink","addDataHandler","push","indexToRemove","findIndex","dataHandlerToRemove","splice","removeDataHandler","playbackText","Modal","position","top","left","transform","width","p","IconButton","Close","Alert","mb","flexGrow","AppBar","Toolbar","Container","role","my","mt","height","s","Page","initialBus"],"mappings":"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","file":"static/js/5.6834a0f7.chunk.js","sourcesContent":["import { createWebBus } from 'jacdac-ts'\n\nexport const bus = createWebBus()\n","import { FormControlLabel, Switch } from '@mui/material'\n\nimport { DataOutputWrapper } from '../../pages/Dashboard'\nimport { DatumOutput } from '../../sonification/output/DatumOutput'\n\nexport interface DataOutputProps {\n    name: string\n    createOutput: () => DatumOutput\n    outputObject?: DatumOutput\n    activated: boolean\n    onChange: (name: string, activated: boolean) => void\n}\n\nexport default function DataOutputItem(props: React.Attributes & DataOutputProps): JSX.Element {\n    const { name, createOutput, outputObject } = props\n    return (\n        <FormControlLabel\n            control={\n                <Switch\n                    checked={props.activated}\n                    onChange={() => props.onChange(name, !props.activated)}\n                    name={props.name}\n                />\n            }\n            label={props.name}\n        />\n    )\n}\n","import { FormControl, InputLabel, NativeSelect, TextField } from '@mui/material'\nimport { useState, useEffect } from 'react'\nimport { DataHandler } from '../../sonification/handler/DataHandler'\nimport { DatumOutput } from '../../sonification/output/DatumOutput'\n\nexport interface ParameterItemProps {\n    name: string\n    type: string\n    default?: (obj?: DataHandler | DatumOutput) => number\n    values?: { display: string; value: number }[]\n    obj?: DataHandler | DatumOutput\n    handleUpdate: (value: number, obj?: DataHandler | DatumOutput) => void\n}\n\nexport default function ParameterItem(props: React.Attributes & ParameterItemProps): JSX.Element {\n    const [value, setValue] = useState<number | undefined>(props.default?.(props.obj))\n\n    const { name, values } = props\n\n    return (\n        <div>\n            {props.type === 'list' ? (\n                <FormControl>\n                    <InputLabel variant=\"standard\" htmlFor=\"demo-view-select\" id=\"demo-view-label\">\n                        {name}\n                    </InputLabel>\n                    <NativeSelect\n                        aria-label=\"Choose demo\"\n                        id=\"demo-view-select\"\n                        value={value}\n                        onChange={(e) => {\n                            const newValue = +e.target.value\n                            props.handleUpdate(newValue, props.obj)\n                            setValue(newValue)\n                        }}\n                    >\n                        {values?.map((e) => (\n                            <option value={e.value} key={e.value}>\n                                {e.display}\n                            </option>\n                        ))}\n                    </NativeSelect>\n                </FormControl>\n            ) : (\n                <TextField\n                    id={`text-${name}-value`}\n                    aria-label={`${name} value`}\n                    label={name}\n                    variant=\"outlined\"\n                    size=\"small\"\n                    type=\"number\"\n                    inputProps={{ step: '0.1' }}\n                    value={value}\n                    onChange={(e) => {\n                        const newValue = +e.target.value\n                        if (typeof value === 'number') {\n                            props.handleUpdate(newValue, props.obj)\n                            setValue(newValue)\n                        }\n                    }}\n                />\n            )}\n        </div>\n    )\n}\n","import { useState, useEffect } from 'react'\n\nimport {\n    Box,\n    Button,\n    Card,\n    CardContent,\n    CardHeader,\n    FormControl,\n    FormGroup,\n    FormLabel,\n    Grid,\n    InputLabel,\n    Menu,\n    MenuItem,\n    NativeSelect,\n    Typography,\n} from '@mui/material'\nimport { ArrowDropDown } from '@mui/icons-material'\n\nimport { grey } from '@mui/material/colors'\nimport { DataHandlerWrapper, DataOutputWrapper, JDServiceWrapper, ParameterWrapper } from '../../pages/Dashboard'\n\nimport { DataHandler } from '../../sonification/handler/DataHandler'\nimport DataOutputItem from './DataOutputItem'\nimport ParameterItem from './ParameterItem'\n\nexport interface DataHandlerItemProps {\n    name: string\n    description: string\n    dataOutputs: DataOutputWrapper[]\n    active: boolean\n    onRemove?: () => void\n    onAddToService?: (add: boolean, serviceId: string, valueId: string, template: DataHandlerWrapper) => void\n    onParameterChange?: () => void\n    parameters?: ParameterWrapper[]\n    createHandler: (domain: [number, number]) => DataHandler\n    handlerObject?: DataHandler\n    availableServices?: JDServiceWrapper[]\n}\n\nexport default function DataHandlerItem(props: React.Attributes & DataHandlerItemProps): JSX.Element {\n    const [addButtonAnchor, setAddButtonAnchor] = useState<null | HTMLElement>(null)\n    const [dataOutputs, setDataOutputs] = useState<DataOutputWrapper[]>(props.dataOutputs)\n    const menuOpen = Boolean(addButtonAnchor)\n\n    const handleAddButtonClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n        setAddButtonAnchor(event.currentTarget)\n    }\n    const handleMenuClose = () => {\n        setAddButtonAnchor(null)\n    }\n\n    const handleDataOutputChange = (name: string, activated: boolean) => {\n        console.log(name, activated)\n\n        const dataOutputsCopy = dataOutputs.map((output) => {\n            if (output.name === name) {\n                if (activated) {\n                    output.outputObject = output.createOutput()\n                    props.handlerObject?.addOutput(output.outputObject)\n                } else if (output.outputObject) {\n                    props.handlerObject?.removeOutput(output.outputObject)\n                    output.outputObject = undefined\n                }\n            }\n            return { ...output }\n        })\n        setDataOutputs(dataOutputsCopy)\n        props.onParameterChange?.()\n    }\n\n    const { active, availableServices, onAddToService, onRemove } = props\n\n    return (\n        <Grid item md={6} sm={12} xs={12}>\n            <Card\n                elevation={active ? 0 : 1}\n                sx={{\n                    border: '2px solid',\n                    borderColor: grey[200],\n                }}\n            >\n                <CardHeader\n                    sx={{ bgcolor: grey[200] }}\n                    title={\n                        <Typography variant=\"subtitle1\" component=\"span\">\n                            {props.name}\n                        </Typography>\n                    }\n                    action={\n                        !active && availableServices ? (\n                            <Box>\n                                <Button\n                                    id=\"btn-data-handler-add-to-stream\"\n                                    aria-controls={menuOpen ? 'menu-data-handler-stream-list' : undefined}\n                                    aria-haspopup=\"true\"\n                                    aria-expanded={menuOpen ? 'true' : undefined}\n                                    variant=\"contained\"\n                                    onClick={handleAddButtonClick}\n                                    endIcon={<ArrowDropDown />}\n                                >\n                                    Choose Sensor to Add\n                                </Button>\n                                <Menu\n                                    open={menuOpen}\n                                    onClose={handleMenuClose}\n                                    anchorEl={addButtonAnchor}\n                                    id=\"menu-data-handler-stream-list\"\n                                >\n                                    {availableServices.map((service) =>\n                                        service.values.map((value) => (\n                                            <MenuItem\n                                                key={value.id}\n                                                onClick={() => {\n                                                    onAddToService?.(true, service.id, value.id, {\n                                                        name: props.name,\n                                                        id: `${props.name}-${Math.floor(Math.random() * Date.now())}`,\n                                                        description: props.description,\n                                                        dataOutputs: dataOutputs,\n                                                        parameters: props.parameters,\n                                                        createHandler: props.createHandler,\n                                                    })\n                                                    handleMenuClose()\n                                                }}\n                                            >\n                                                {(service.values.length > 1 ? `${value.name} - ` : '') + service.name}\n                                            </MenuItem>\n                                        )),\n                                    )}\n                                </Menu>\n                            </Box>\n                        ) : (\n                            <Button\n                                variant=\"outlined\"\n                                onClick={() => {\n                                    onRemove?.()\n                                }}\n                            >\n                                Remove\n                            </Button>\n                        )\n                    }\n                />\n                <CardContent sx={{ minHeight: 140 }}>\n                    <Grid container spacing={1}>\n                        <Grid item xs={6} lg={8}>\n                            <Typography variant=\"body2\">{props.description}</Typography>\n                            <div>\n                                {props.parameters?.map((parameter) => {\n                                    return <ParameterItem key={parameter.name} {...parameter} obj={props.handlerObject} />\n                                })}\n                            </div>\n                            <div>\n                                {dataOutputs?.map((output) => {\n                                    return output.parameters?.map((parameter) => {\n                                        return <ParameterItem key={parameter.name} {...parameter} obj={output.outputObject} />\n                                    })\n                                })}\n                            </div>\n                        </Grid>\n                        <Grid item xs={6} lg={4}>\n                            <FormControl component=\"fieldset\" sx={{ float: 'right' }}>\n                                <FormLabel component=\"legend\">Choose Data Outputs</FormLabel>\n                                <FormGroup>\n                                    {dataOutputs?.map((output) => {\n                                        return (\n                                            <DataOutputItem\n                                                key={output.id}\n                                                name={output.name}\n                                                outputObject={output.outputObject}\n                                                createOutput={output.createOutput}\n                                                activated={!!output.outputObject}\n                                                onChange={handleDataOutputChange}\n                                            />\n                                        )\n                                    })}\n                                </FormGroup>\n                            </FormControl>\n                        </Grid>\n                    </Grid>\n                </CardContent>\n            </Card>\n        </Grid>\n    )\n}\n","import { useState, useEffect } from 'react'\n\nimport { Box, Button, Card, CardContent, CardHeader, Grid, Menu, MenuItem, Typography } from '@mui/material'\nimport { ArrowDropDown } from '@mui/icons-material'\nimport { AVAILABLE_DATA_OUTPUT_TEMPLATES, DataHandlerWrapper, DataOutputWrapper } from '../../pages/Dashboard'\n\nimport DataHandlerItem from './DataHandlerItem'\n\nimport { REPORT_UPDATE, throttle, JDRegister } from 'jacdac-ts'\n\nexport interface JDValueItemProps {\n    name: string\n    id: string\n    index: number\n    units: string\n    format: (value: number) => string\n    register: JDRegister\n    dataHandlers: DataHandlerWrapper[]\n    currentHandlerTemplates: DataHandlerWrapper[]\n    onDataHandlerChange?: (add: boolean, handler: DataHandlerWrapper) => void\n    onParameterChange?: () => void\n}\n\nexport default function JDValueItem(props: React.Attributes & JDValueItemProps): JSX.Element {\n    const handlersExist = props.dataHandlers.length !== 0\n\n    const [addButtonAnchor, setAddButtonAnchor] = useState<null | HTMLElement>(null)\n    const [currentValue, setCurrentValue] = useState<string>('0')\n    const menuOpen = Boolean(addButtonAnchor)\n\n    useEffect(() => {\n        props.register.subscribe(\n            REPORT_UPDATE,\n            throttle(async () => {\n                const raw = props.register.unpackedValue[props.index]\n                setCurrentValue(props.format(raw))\n            }, 100),\n        )\n    }, [props.register])\n\n    const handleAddButtonClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n        setAddButtonAnchor(event.currentTarget)\n    }\n    const handleMenuClose = () => {\n        setAddButtonAnchor(null)\n    }\n\n    const { currentHandlerTemplates, name, units, onDataHandlerChange, onParameterChange } = props\n\n    return (\n        <Grid item xs={12} sm={handlersExist ? 12 : 6} md={handlersExist ? 12 : 4}>\n            <Card>\n                <CardHeader\n                    title={\n                        <Box>\n                            <Typography sx={{ mr: 1 }} variant=\"subtitle1\" component=\"span\">\n                                {name}\n                            </Typography>\n                            <Typography variant=\"h5\" component=\"span\">\n                                {currentValue}\n                            </Typography>\n                            <Typography sx={{ ml: 1 }} variant=\"subtitle1\" component=\"span\">\n                                {units}\n                            </Typography>\n                        </Box>\n                    }\n                    action={\n                        <Box>\n                            <Button\n                                id=\"btn-value-add-handler\"\n                                aria-controls={menuOpen ? 'menu-value-handler-list' : undefined}\n                                aria-haspopup=\"true\"\n                                aria-expanded={menuOpen ? 'true' : undefined}\n                                variant=\"contained\"\n                                onClick={handleAddButtonClick}\n                                endIcon={<ArrowDropDown />}\n                            >\n                                Add Handler\n                            </Button>\n                            <Menu\n                                open={menuOpen}\n                                onClose={handleMenuClose}\n                                anchorEl={addButtonAnchor}\n                                id=\"menu-value-handler-list\"\n                            >\n                                {currentHandlerTemplates.map((template) => (\n                                    <MenuItem\n                                        key={template.id}\n                                        onClick={() => {\n                                            onDataHandlerChange?.(true, { ...template })\n                                            handleMenuClose()\n                                        }}\n                                    >\n                                        {template.name}\n                                    </MenuItem>\n                                ))}\n                            </Menu>\n                        </Box>\n                    }\n                />\n                {props.dataHandlers.length === 0 ? undefined : (\n                    <CardContent>\n                        <Grid container spacing={1}>\n                            {props.dataHandlers.map((dataHandler, index) => (\n                                <DataHandlerItem\n                                    {...dataHandler}\n                                    active={true}\n                                    key={dataHandler.id}\n                                    onParameterChange={onParameterChange}\n                                    onRemove={() => {\n                                        onDataHandlerChange?.(false, dataHandler)\n                                    }}\n                                />\n                            ))}\n                        </Grid>\n                    </CardContent>\n                )}\n            </Card>\n        </Grid>\n    )\n}\n","import { Card, CardContent, CardHeader, Grid, Typography } from '@mui/material'\n\nimport { blueGrey } from '@mui/material/colors'\nimport { DataHandlerWrapper, JDValueWrapper } from '../../pages/Dashboard'\nimport JDValueItem from './JDValueItem'\n\nexport interface JDServiceItemProps {\n    name: string\n    id: string\n    values: JDValueWrapper[]\n    currentHandlerTemplates: DataHandlerWrapper[]\n    onDataHandlerChange?: (add: boolean, serviceId: string, valueId: string, template: DataHandlerWrapper) => void\n    onParameterChange?: () => void\n}\n\nexport default function JDServiceItem(props: React.Attributes & JDServiceItemProps): JSX.Element {\n    const { onDataHandlerChange, onParameterChange } = props\n\n    return (\n        <Grid item xs={12}>\n            <Card\n                sx={{\n                    border: '2px solid',\n                    borderColor: blueGrey[50],\n                    backgroundColor: blueGrey[50],\n                    boxShadow: 'none',\n                }}\n            >\n                <CardHeader\n                    sx={{ backgroundColor: '#fff' }}\n                    title={\n                        <Typography variant=\"subtitle1\" component=\"h4\" sx={{ fontSize: '1.25rem', color: '#122740' }}>\n                            {props.name}\n                        </Typography>\n                    }\n                />\n                <CardContent>\n                    <Grid container spacing={2}>\n                        {props.values.map((value, index) => (\n                            <JDValueItem\n                                {...value}\n                                key={value.id}\n                                currentHandlerTemplates={props.currentHandlerTemplates}\n                                onDataHandlerChange={(add: boolean, template: DataHandlerWrapper) => {\n                                    onDataHandlerChange?.(add, props.id, value.id, template)\n                                }}\n                                onParameterChange={onParameterChange}\n                            />\n                        ))}\n                    </Grid>\n                </CardContent>\n            </Card>\n        </Grid>\n    )\n}\n","import { OutputEngine } from '../sonification/OutputEngine'\n\nimport { Subject } from 'rxjs'\n\nimport { useState, useEffect, useMemo } from 'react'\n\nimport '../styles/dashboard.css'\n\nimport * as d3 from 'd3'\n\nimport { bus } from '../bus'\n\nimport { JDRegister, JDService, REPORT_UPDATE, SoundLevelReg, TraceRecorder } from 'jacdac-ts'\nimport { JacdacProvider, useServices, useChange, useBus } from 'react-jacdac'\n\nimport {\n    SRV_ACCELEROMETER,\n    SRV_BUTTON,\n    SRV_BUZZER,\n    SRV_GYROSCOPE,\n    SRV_HUMIDITY,\n    SRV_LIGHT_LEVEL,\n    SRV_POTENTIOMETER,\n    SRV_SOUND_LEVEL,\n    SRV_TEMPERATURE,\n} from 'jacdac-ts'\n\nimport {\n    Alert,\n    AppBar,\n    Box,\n    Button,\n    Container,\n    Grid,\n    IconButton,\n    Typography,\n    Toolbar,\n    Modal,\n    CardHeader,\n    Link,\n} from '@mui/material'\n\nimport { Close } from '@mui/icons-material'\n\nimport DataHandlerItem from '../views/dashboard/DataHandlerItem'\nimport JDServiceItem from '../views/dashboard/JDServiceItem'\n\nimport { DataHandler } from '../sonification/handler/DataHandler'\nimport { DatumOutput } from '../sonification/output/DatumOutput'\n\nimport { NoteSonify } from '../sonification/output/NoteSonify'\nimport { NoiseSonify } from '../sonification/output/NoiseSonify'\nimport { Speech } from '../sonification/output/Speech'\nimport { NoteHandler } from '../sonification/handler/NoteHandler'\nimport { OutputStateChange } from '../sonification/OutputConstants'\nimport { Datum } from '../sonification/Datum'\nimport { FilterRangeHandler } from '../sonification/handler/FilterRangeHandler'\nimport { RunningExtremaHandler } from '../sonification/handler/RunningExtremaHandler'\nimport { SlopeParityHandler } from '../sonification/handler/SlopeParityHandler'\nimport { FileOutput } from '../sonification/output/FileOutput'\nimport { SimpleDataHandler } from '../sonification/handler/SimpleDataHandler'\n\nexport interface JDServiceWrapper {\n    name: string\n    id: string\n    serviceObject?: JDService\n    values: JDValueWrapper[]\n}\n\nexport interface JDValueWrapper {\n    name: string\n    id: string\n    index: number\n    sinkId: number\n    domain: [number, number]\n    units: string\n    format: (value: number) => string\n    register: JDRegister\n    dataHandlers: DataHandlerWrapper[]\n    unsubscribe?: () => void\n}\n\nexport interface DataHandlerWrapper {\n    name: string\n    id: string\n    description: string\n    dataOutputs: DataOutputWrapper[]\n    handlerObject?: DataHandler\n    createHandler: (domain: [number, number]) => DataHandler\n    unsubscribe?: () => void\n    parameters?: ParameterWrapper[]\n}\n\nexport interface DataOutputWrapper {\n    name: string\n    id: string\n    createOutput: () => DatumOutput\n    outputObject?: DatumOutput\n    parameters?: ParameterWrapper[]\n}\n\nexport interface ParameterWrapper {\n    name: string\n    type: string\n    default?: (obj?: DataHandler | DatumOutput) => number\n    values?: { display: string; value: number }[]\n    handleUpdate: (value: number, obj?: DataHandler | DatumOutput) => void\n}\n\nexport enum PlaybackState {\n    PlayingLive,\n    PlayingBuffer,\n    Paused,\n    Stopped,\n}\n\nconst SRV_INFO_MAP = {\n    [SRV_ACCELEROMETER]: { values: ['x', 'y', 'z'], units: 'g', format: d3.format('.2f'), domain: [-2, 2] },\n    [SRV_BUTTON]: { values: [''], units: '', format: d3.format('.0d'), domain: [0, 1] },\n    [SRV_BUZZER]: { values: [''], units: '', format: d3.format('.0d'), domain: [0, 1] },\n    [SRV_GYROSCOPE]: { values: ['x', 'y', 'z'], units: '°/s', format: d3.format('.2f'), domain: [-500, 500] },\n    [SRV_HUMIDITY]: { values: [''], units: '%RH', format: d3.format('.1f'), domain: [0, 100] },\n    [SRV_LIGHT_LEVEL]: { values: [''], units: '', format: d3.format('.0%'), domain: [0, 1] },\n    [SRV_SOUND_LEVEL]: { values: [''], units: '', format: d3.format('.2f'), domain: [0, 1] },\n    [SRV_POTENTIOMETER]: { values: [''], units: '', format: d3.format('.0%'), domain: [0, 1] },\n    [SRV_TEMPERATURE]: { values: [''], units: '°C', format: d3.format('.1f'), domain: [-20, 60] },\n}\n\nexport const AVAILABLE_DATA_OUTPUT_TEMPLATES = {\n    note: {\n        name: 'Note',\n        id: `Note-${Math.floor(Math.random() * Date.now())}`,\n        createOutput: () => new NoteSonify(),\n        parameters: [\n            {\n                name: 'Stereo Pan',\n                type: 'list',\n                default: (obj?: DataHandler | DatumOutput) => 0,\n                values: [\n                    { display: 'Both', value: 0 },\n                    { display: 'Left', value: -1 },\n                    { display: 'Right', value: 1 },\n                ],\n                handleUpdate: (value: number, obj?: DataHandler | DatumOutput) => {\n                    if (obj) {\n                        const ns = obj as NoteSonify\n                        ns.stereoPannerNode.pan.value = value\n                    }\n                },\n            },\n        ],\n    },\n    noise: {\n        name: 'White Noise',\n        id: `White Noise-${Math.floor(Math.random() * Date.now())}`,\n        createOutput: () => new NoiseSonify(),\n    },\n    earcon: {\n        name: 'Earcon',\n        id: `Earcon-${Math.floor(Math.random() * Date.now())}`,\n        createOutput: () => {\n            const fo = new FileOutput()\n            // Use long beep as the default\n            fetch(`./assets/shortbeep.wav`)\n                .then((res) => res.arrayBuffer())\n                .then((buffer: ArrayBuffer) => {\n                    fo.buffer = buffer\n                })\n            return fo\n        },\n        parameters: [\n            {\n                name: 'Earcon to Play',\n                type: 'list',\n                default: (obj?: DataHandler | DatumOutput) => 0,\n                values: [\n                    { display: 'Short Beep', value: 0 },\n                    { display: 'Long Beep', value: 1 },\n                    { display: 'Bell', value: 2 },\n                    { display: 'Whistle Up', value: 3 },\n                    { display: 'Whistle Down', value: 4 },\n                ],\n                handleUpdate: (value: number, obj?: DataHandler | DatumOutput) => {\n                    if (obj) {\n                        const file_list = [\n                            'shortbeep.wav',\n                            'beep.wav',\n                            'bell.mp3',\n                            'whistle%20up.wav',\n                            'whistle%20down.wav',\n                        ]\n                        const fo = obj as FileOutput\n                        fetch(`./assets/${file_list[value]}`)\n                            .then((res) => res.arrayBuffer())\n                            .then((buffer: ArrayBuffer) => {\n                                fo.buffer = buffer\n                            })\n                    }\n                },\n            },\n        ],\n    },\n    speech: {\n        name: 'Speech',\n        id: `Speech-${Math.floor(Math.random() * Date.now())}`,\n        createOutput: () => new Speech(),\n        parameters: [\n            {\n                name: 'Interrupt when new point arrives?',\n                type: 'list',\n                default: (obj?: DataHandler | DatumOutput) => 0,\n                values: [\n                    { display: 'Yes', value: 0 },\n                    { display: 'No', value: 1 },\n                ],\n                handleUpdate: (value: number, obj?: DataHandler | DatumOutput) => {\n                    if (obj) {\n                        const sp = obj as Speech\n                        sp.polite = value == 1 ? true : false\n                    }\n                },\n            }\n        ]\n    },\n}\n\nconst initializeDataOutput = (output: DataOutputWrapper): DataOutputWrapper => {\n    return { ...output, outputObject: output.createOutput() }\n}\n\nexport const AVAILABLE_DATA_HANDLER_TEMPLATES: DataHandlerWrapper[] = [\n    {\n        name: 'Note Handler',\n        id: `Note Handler-${Math.floor(Math.random() * Date.now())}`,\n        description: 'Converts data to an audible note range.',\n        dataOutputs: [initializeDataOutput(AVAILABLE_DATA_OUTPUT_TEMPLATES.note)],\n        createHandler: (domain: [number, number]) => new NoteHandler(domain),\n    },\n    {\n        name: 'Filter Range Handler',\n        id: `Filter Range Handler-${Math.floor(Math.random() * Date.now())}`,\n        description: \"Filters data within the provided range. If within range, sent to this handler's outputs.\",\n        dataOutputs: [\n            initializeDataOutput(AVAILABLE_DATA_OUTPUT_TEMPLATES.noise),\n            AVAILABLE_DATA_OUTPUT_TEMPLATES.earcon,\n        ],\n        createHandler: (domain: [number, number]) =>\n            new FilterRangeHandler([\n                (domain[1] - domain[0]) * 0.4 + domain[0],\n                (domain[1] - domain[0]) * 0.6 + domain[0],\n            ]),\n        parameters: [\n            {\n                name: 'Min',\n                type: 'number',\n                default: (obj?: DataHandler | DatumOutput) => {\n                    if (obj) {\n                        const frh = obj as FilterRangeHandler\n                        return frh.domain[0]\n                    } else {\n                        return 0.4\n                    }\n                },\n                handleUpdate: (value: number, obj?: DataHandler | DatumOutput) => {\n                    if (obj) {\n                        const frh = obj as FilterRangeHandler\n                        frh.domain = [value, frh.domain[1]]\n                    }\n                },\n            },\n            {\n                name: 'Max',\n                type: 'number',\n                default: (obj?: DataHandler | DatumOutput) => {\n                    if (obj) {\n                        const frh = obj as FilterRangeHandler\n                        return frh.domain[1]\n                    } else {\n                        return 0.6\n                    }\n                },\n                handleUpdate: (value: number, obj?: DataHandler | DatumOutput) => {\n                    if (obj) {\n                        const frh = obj as FilterRangeHandler\n                        frh.domain = [frh.domain[0], value]\n                    }\n                },\n            },\n        ],\n    },\n    {\n        name: 'Extrema Handler',\n        id: `Extrema Handler-${Math.floor(Math.random() * Date.now())}`,\n        description: 'Finds the new extrema value (maximum and/or minimum) in the data stream.',\n        dataOutputs: [\n            AVAILABLE_DATA_OUTPUT_TEMPLATES.earcon,\n            initializeDataOutput(AVAILABLE_DATA_OUTPUT_TEMPLATES.speech),\n        ],\n        createHandler: (domain: [number, number]) => new RunningExtremaHandler(),\n        parameters: [\n            {\n                name: 'Extrema to Find',\n                type: 'list',\n                default: (obj?: DataHandler | DatumOutput) => 0,\n                values: [\n                    { display: 'Maximum and Minimum', value: 0 },\n                    { display: 'Maximum Only', value: 1 },\n                    { display: 'Minimum Only', value: -1 },\n                ],\n                handleUpdate: (value: number, obj?: DataHandler | DatumOutput) => {\n                    if (obj) {\n                        const reh = obj as RunningExtremaHandler\n                        reh.direction = value\n                    }\n                },\n            },\n        ],\n    },\n    // { name: 'Outlier Detection Handler', description: 'Description of outlier detection handler' },\n    // { name: 'Slope Handler', description: 'Description of slope handler', createHandler: () => new Slope() },\n    {\n        name: 'Slope Change Handler',\n        id: `Slope Change Handler-${Math.floor(Math.random() * Date.now())}`,\n        description:\n            'Finds direction of slope changes in the data stream. When the data goes from increasing to decreasing, and vise-versa.',\n        dataOutputs: [\n            AVAILABLE_DATA_OUTPUT_TEMPLATES.earcon,\n            initializeDataOutput(AVAILABLE_DATA_OUTPUT_TEMPLATES.speech),\n        ],\n        createHandler: (domain: [number, number]) => new SlopeParityHandler(),\n        parameters: [\n            {\n                name: 'Direction to Find',\n                type: 'list',\n                default: (obj?: DataHandler | DatumOutput) => 0,\n                values: [\n                    { display: 'Postive and Negative', value: 0 },\n                    { display: 'Positive Only', value: 1 },\n                    { display: 'Negative Only', value: -1 },\n                ],\n                handleUpdate: (value: number, obj?: DataHandler | DatumOutput) => {\n                    if (obj) {\n                        const sph = obj as SlopeParityHandler\n                        sph.direction = value\n                    }\n                },\n            },\n        ],\n    },\n\n    {\n        name: 'Simple Handler',\n        id: `Simple Handler-${Math.floor(Math.random() * Date.now())}`,\n        description: 'Outputs the raw data stream without processing.',\n        dataOutputs: [initializeDataOutput(AVAILABLE_DATA_OUTPUT_TEMPLATES.speech)],\n        createHandler: (domain: [number, number]) => new SimpleDataHandler(),\n    },\n]\n\nfunction saveText(name: string, data: string, mimeType?: string) {\n    if (!mimeType) {\n        if (/\\.(csv|txt)/i.test(name)) mimeType = 'text/plain'\n        else if (/\\.json/i.test(name)) mimeType = 'application/json'\n    }\n    const url = `data:${mimeType || 'text/plain'};charset=utf-8,${encodeURIComponent(data)}`\n    downloadUrl(name, url)\n\n    function downloadUrl(name: string, url: string) {\n        const a = document.createElement('a') as HTMLAnchorElement\n        document.body.appendChild(a)\n        a.style.display = 'none'\n        a.href = url\n        a.download = name\n        a.click()\n    }\n}\n\nfunction SaveTraceButton() {\n    const bus = useBus()\n    const recorder = useMemo(() => new TraceRecorder(bus), [])\n    useEffect(() => {\n        recorder.start()\n        return () => {\n            recorder.stop()\n        }\n    }, [recorder])\n    const onClick = () => {\n        const busText = bus.describe()\n        const traceText = recorder.trace.serializeToText()\n        const text = `# Jacdac Trace \n        \nTo import, go to https://aka.ms/jacdac, open device tree and click import icon.\n\n## bus\n\n\\`\\`\\`yaml\n${busText}\n\\`\\`\\`\n\n## packets\n\n\\`\\`\\`\n${traceText}\n\\`\\`\\`\n\n## environment\n\n\\`\\`\\`yaml\nuser-agent: ${typeof window !== undefined && window.navigator.userAgent}\n\\`\\`\\`\n\n`\n        saveText('trace.jd.txt', text)\n    }\n\n    return (\n        <Link\n            title=\"save trace and environment information in a file\"\n            component=\"button\"\n            onClick={onClick}\n            underline=\"hover\"\n        >\n            save trace\n        </Link>\n    )\n}\n\nconst dbg = typeof window !== 'undefined' && /dbg=1/i.test(window.location.search)\nexport function DashboardView() {\n    const [services, setServices] = useState<JDServiceWrapper[]>([])\n    const [alertOpen, setAlertOpen] = useState(false)\n    const [playback, setPlayback] = useState(PlaybackState.Stopped)\n\n    const jdServices = useServices({ sensor: true })\n    const bus = useBus()\n    const connected = useChange(bus, (_) => _.connected)\n\n    useEffect(() => {\n        const newServices = jdServices\n            .filter((jds) => SRV_INFO_MAP[jds.specification.classIdentifier])\n            .map((jds) => {\n                const serviceInfo = SRV_INFO_MAP[jds.specification.classIdentifier]\n                const serviceId = jds.id\n                if (jds.specification.classIdentifier === SRV_SOUND_LEVEL) {\n                    // If sound level service, turn on sound level\n                    const enabledRegister = jds.register(SoundLevelReg.Enabled)\n                    enabledRegister.sendSetBoolAsync(true, true)\n                }\n                const serviceWrapper = {\n                    name: `${jds.specification.name} ${jds.device.name}`,\n                    id: serviceId,\n                    values: serviceInfo.values.map((v, i) => {\n                        const sink = OutputEngine.getInstance().addSink(\n                            `JacDac Service = ${jds.specification.name}; Index = ${i}`,\n                        )\n                        const sinkId = sink.id\n\n                        const rawSubject = new Subject<Datum>()\n\n                        OutputEngine.getInstance().setStream(sinkId, rawSubject)\n\n                        const jdUnsubscribe = jds.readingRegister.subscribe(REPORT_UPDATE, () => {\n                            // console.log(jds.specification.name, v, jds.readingRegister.unpackedValue[i])\n                            rawSubject.next(new Datum(sinkId, jds.readingRegister.unpackedValue[i]))\n                        })\n\n                        const unsubscribe = () => {\n                            // Is this going to create a memory leak?\n                            // .. do I have to remove pointers to the Observables?\n                            jdUnsubscribe()\n                        }\n                        return {\n                            name: v,\n                            id: `${serviceId}:${i}`,\n                            index: i,\n                            sinkId: sink.id,\n                            units: serviceInfo.units,\n                            format: serviceInfo.format,\n                            domain: serviceInfo.domain,\n                            register: jds.readingRegister,\n                            dataHandlers: [],\n                            unsubscribe,\n                        }\n                    }),\n                }\n                console.log(serviceWrapper)\n                return serviceWrapper\n            })\n        setServices(newServices)\n    }, [jdServices.map((jdService) => jdService.id).join(' ')])\n\n    useEffect(() => {\n        setAlertOpen(connected)\n    }, [connected])\n\n    const handleConnect = async () => {\n        if (connected) {\n            console.log('disconnect')\n            await bus.disconnect()\n        } else {\n            console.log('connect')\n            await bus.connect()\n        }\n    }\n\n    const handlePlaybackClick = () => {\n        switch (playback) {\n            case PlaybackState.PlayingLive:\n                OutputEngine.getInstance().next(OutputStateChange.Stop)\n                setPlayback(PlaybackState.Stopped)\n                break\n            case PlaybackState.PlayingBuffer:\n                break\n            case PlaybackState.Paused:\n                break\n            case PlaybackState.Stopped:\n                OutputEngine.getInstance().next(OutputStateChange.Play)\n                setPlayback(PlaybackState.PlayingLive)\n                break\n        }\n    }\n\n    const resendPlaybackForOutputEngine = () => {\n        switch (playback) {\n            case PlaybackState.PlayingLive:\n                OutputEngine.getInstance().next(OutputStateChange.Play)\n                break\n            case PlaybackState.PlayingBuffer:\n                break\n            case PlaybackState.Paused:\n                break\n            case PlaybackState.Stopped:\n                OutputEngine.getInstance().next(OutputStateChange.Stop)\n                break\n        }\n    }\n\n    const handleParameterChange = () => {\n        resendPlaybackForOutputEngine()\n    }\n\n    const handleDataHandlerChange = (\n        add: boolean,\n        serviceId: string,\n        valueId: string,\n        template: DataHandlerWrapper,\n    ) => {\n        console.log(add, serviceId, valueId, template)\n        const servicesCopy = services.map((service) => {\n            if (serviceId === service.id) {\n                const values = service.values.map((value) => {\n                    if (valueId === value.id) {\n                        const sink = OutputEngine.getInstance().getSink(value.sinkId)\n                        if (add) {\n                            const handlerObject = template.createHandler?.(value.domain)\n\n                            if (handlerObject) {\n                                const dataOutputsCopy = template.dataOutputs.map((output) => {\n                                    const outputObject = output.outputObject ? output.createOutput() : undefined\n                                    if (outputObject) {\n                                        handlerObject.addOutput(outputObject)\n                                    }\n                                    return { ...output, outputObject }\n                                })\n                                sink.addDataHandler(handlerObject)\n\n                                value.dataHandlers.push({\n                                    ...template,\n                                    id: `${template.name}-${Math.floor(Math.random() * Date.now())}`,\n                                    dataOutputs: dataOutputsCopy,\n                                    handlerObject,\n                                })\n                            }\n                        } else {\n                            const indexToRemove = value.dataHandlers.findIndex(\n                                (dataHandler) => dataHandler.id === template.id,\n                            )\n                            const dataHandlerToRemove = value.dataHandlers[indexToRemove]\n                            dataHandlerToRemove.unsubscribe?.()\n                            value.dataHandlers.splice(indexToRemove, 1)\n\n                            if (dataHandlerToRemove.handlerObject) {\n                                sink.removeDataHandler(dataHandlerToRemove.handlerObject)\n                            }\n                        }\n                        return { ...value }\n                    }\n                    return value\n                })\n                return { ...service, values }\n            }\n            return service\n        })\n        console.log(servicesCopy)\n        setServices(servicesCopy)\n        resendPlaybackForOutputEngine()\n    }\n\n    const playbackText = playback == PlaybackState.Stopped || playback == PlaybackState.Paused ? 'Play' : 'Stop'\n\n    const modalContentStyle = {\n        position: 'absolute' as 'absolute',\n        top: '50%',\n        left: '50%',\n        transform: 'translate(-50%, -50%)',\n        width: 440,\n        bgcolor: 'background.paper',\n        border: '2px solid #000',\n        boxShadow: 24,\n        p: 4,\n    }\n\n    return (\n        <>\n            <Modal\n                open={alertOpen}\n                onClose={() => {\n                    setAlertOpen(false)\n                }}\n                aria-labelledby=\"modal-modal-title\"\n                aria-describedby=\"modal-modal-description\"\n            >\n                <Box sx={modalContentStyle}>\n                    <div>\n                        <CardHeader\n                            title={\n                                <Typography id=\"modal-modal-title\" variant=\"h6\" component=\"h2\">\n                                    JacDac Connected\n                                </Typography>\n                            }\n                            action={\n                                <IconButton\n                                    aria-label=\"close\"\n                                    color=\"inherit\"\n                                    size=\"small\"\n                                    onClick={() => {\n                                        setAlertOpen(false)\n                                    }}\n                                >\n                                    <Close fontSize=\"inherit\" />\n                                </IconButton>\n                            }\n                        ></CardHeader>\n                    </div>\n\n                    <Alert sx={{ mb: 2 }}>\n                        Your device has been successfully connected. Now you can hear your sensor data!\n                    </Alert>\n                </Box>\n            </Modal>\n            <Box sx={{ flexGrow: 1 }}>\n                <AppBar position=\"static\">\n                    <Toolbar>\n                        <Typography variant=\"h4\" color=\"inherit\" component=\"h1\">\n                            PSST\n                        </Typography>\n                    </Toolbar>\n                </AppBar>\n            </Box>\n            <Container>\n                <Box role=\"region\" aria-aria-labelledby=\"header-connect-device\" sx={{ my: 2 }}>\n                    <Typography id=\"header-connect-device\" variant=\"h5\" component=\"h2\">\n                        Connect your device\n                    </Typography>\n                    <Box sx={{ my: 2 }}>\n                        <Button variant=\"contained\" onClick={handleConnect}>\n                            {connected ? 'Disconnect' : 'Connect'}\n                        </Button>\n                    </Box>\n                </Box>\n                <Box>\n                    {!connected ? undefined : (\n                        <Box>\n                            <Box role=\"region\" aria-aria-labelledby=\"header-hear-data\" sx={{ mb: 2, mt: 4 }}>\n                                <Typography id=\"header-hear-data\" variant=\"h5\" component=\"h2\">\n                                    Hear your sensor data\n                                </Typography>\n                                <div\n                                    style={{ width: '1px', height: '1px', position: 'absolute', left: '-200px' }}\n                                    aria-live=\"polite\"\n                                    aria-atomic=\"true\"\n                                    aria-relevant=\"additions removals\"\n                                >\n                                    <Typography variant=\"h6\" component=\"h3\">\n                                        List of {services.length} sensor services connected:\n                                    </Typography>\n                                    <ul>\n                                        {services.map((s) => (\n                                            <li key={s.id}>{s.name}</li>\n                                        ))}\n                                    </ul>\n                                </div>\n                                <Grid container spacing={2} sx={{ my: 1 }}>\n                                    {services.map((service) => (\n                                        <JDServiceItem\n                                            {...service}\n                                            id={service.id}\n                                            key={service.id}\n                                            currentHandlerTemplates={AVAILABLE_DATA_HANDLER_TEMPLATES}\n                                            onDataHandlerChange={handleDataHandlerChange}\n                                            onParameterChange={handleParameterChange}\n                                        />\n                                    ))}\n                                </Grid>\n                            </Box>\n                            <Box role=\"region\" aria-aria-labelledby=\"header-play-data\" sx={{ mb: 2, mt: 4 }}>\n                                <Typography id=\"header-play-data\" variant=\"h5\" component=\"h3\">\n                                    Play your data sonification\n                                </Typography>\n                                <Box sx={{ my: 2 }}>\n                                    <Button\n                                        variant=\"contained\"\n                                        size=\"large\"\n                                        sx={{ mr: 2 }}\n                                        onClick={handlePlaybackClick}\n                                    >\n                                        {playbackText}\n                                    </Button>\n                                    {/* <Button variant=\"contained\" size=\"large\" sx={{ mx: 2 }}>\n\n                                        Go Back\n                                    </Button>\n                                    <Input\n                                        id=\"input-number-go-back-time\"\n                                        sx={{ width: '15ch' }}\n                                        defaultValue={5}\n                                        endAdornment={<InputAdornment position=\"end\">seconds</InputAdornment>}\n                                        inputProps={{\n                                            'aria-label': 'go back time',\n                                            type: 'number',\n                                        }}\n                                    /> */}\n\n                                </Box>\n                            </Box>\n                            <Box role=\"region\" aria-aria-labelledby=\"header-configure-add\" sx={{ mb: 2, mt: 4 }}>\n                                <Typography id=\"header-configure-add\" variant=\"h5\" component=\"h3\">\n                                    Configure and add sonifiers\n                                </Typography>\n                                <Grid container spacing={2} sx={{ my: 1 }}>\n                                    {AVAILABLE_DATA_HANDLER_TEMPLATES.map((template, index) => (\n                                        <DataHandlerItem\n                                            {...template}\n                                            active={false}\n                                            key={template.id}\n                                            availableServices={services}\n                                            onAddToService={handleDataHandlerChange}\n                                        />\n                                    ))}\n                                </Grid>\n                            </Box>\n                        </Box>\n                    )}\n                </Box>\n                <footer>{dbg && <SaveTraceButton />}</footer>\n            </Container>\n        </>\n    )\n}\n\nexport default function Page() {\n    return (\n        <JacdacProvider initialBus={bus}>\n            <DashboardView />\n        </JacdacProvider>\n    )\n}\n","import { DataSink } from '../DataSink'\nimport { Datum } from '../Datum'\nimport { DatumOutput } from '../output/DatumOutput'\nimport { DataHandler } from './DataHandler'\nimport { bufferCount, filter, map, Observable, tap } from 'rxjs'\nimport { getSonificationLoggingLevel, OutputStateChange, SonificationLevel, SonificationLoggingLevel } from '../OutputConstants'\n\nconst DEBUG = true\n\n/**\n * A DataHandler that notifies if a set of point/s are seen\n  */\nexport class SimpleDataHandler extends DataHandler {\n    /**\n     * a value denoting the number of points that the user should be notified after. defaults to 1 if not specified in the constructor. The user is then notified for every point.\n     */\n    private _threshold: number\n    public get threshold(): number {\n        return this._threshold\n    }\n    public set threshold(value: number) {\n        this._threshold = value\n    }\n    /**\n     * Constructor\n     *\n     * @param sink. DataSink that is providing data to this Handler.\n     * @param output. Optional output for this data\n     * @param threshold:number Defaults to 1 if not provided\n     */\n    constructor(output?: DatumOutput, threshold: number = 1) {\n        super(output)\n        // if (interestPoints) this._interestPoints = interestPoints\n        // else this._interestPoints = [0]\n        this._threshold = threshold\n    }\n\n    /**\n     * Set up a subscription so we are notified about events\n     * Override this if the data needs to be modified in some way\n     *\n     * @param sink The sink that is producing data for us\n     */\n     public setupSubscription(sink$: Observable<OutputStateChange | Datum>) {\n        super.setupSubscription(\n            sink$.pipe(bufferCount(this.threshold), \nmap((frames) => {\n    return frames[frames.length-1]\n}\n\n    ),                \n            filter((val) => {\n                    return true\n                }),\n            ),\n        )\n    }\n\n    /**\n     * @returns A string describing this class including its range.\n     */\n    public toString(): string {\n        return `SimpleDataHandler: notifying of all points`\n    }\n}\n\n//////////// DEBUGGING //////////////////\nimport { tag } from 'rxjs-spy/operators/tag'\n\nconst debug = (level: number, message: string, watch: boolean) => (source: Observable<any>) => {\n    if (watch) {\n        return source.pipe(\n            tap((val) => {\n                debugStatic(level, message + ': ' + val)\n            }),\n            tag(message),\n        )\n    } else {\n        return source.pipe(\n            tap((val) => {\n                debugStatic(level, message + ': ' + val)\n            }),\n        )\n    }\n}\n\nconst debugStatic = (level: number, message: string) => {\n    if (DEBUG) {\n        if (level >= getSonificationLoggingLevel()) {\n            console.log(message)\n        } else console.log('debug message dumped')\n    }\n}"],"sourceRoot":""}