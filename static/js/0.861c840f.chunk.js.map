{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/isNativeFunction.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/wrapRegExp.js","../node_modules/jacdac-ts/dist/jacdac.mjs","../../src/context/Context.tsx","../../src/hooks/useBus.ts","../../src/hooks/useEventRaised.ts","../../src/hooks/useChange.ts","../../src/hooks/useDeviceSpecifications.ts","../../src/hooks/useEvent.ts","../../src/hooks/useRoles.ts","../../src/hooks/useServices.ts","../node_modules/use-subscription/index.js","../node_modules/use-subscription/cjs/use-subscription.production.min.js"],"names":["Class","_cache","Map","undefined","fn","Function","toString","call","indexOf","TypeError","has","get","set","Wrapper","construct","arguments","getPrototypeOf","this","constructor","prototype","Object","create","value","enumerable","writable","configurable","setPrototypeOf","_wrapRegExp","re","groups","BabelRegExp","_RegExp","RegExp","_super","_groups","WeakMap","flags","_this","buildGroups","result","g","keys","reduce","name","inherits","exec","str","Symbol","replace","substitution","_","args","push","apply","length","SystemCmd","SystemCmd2","SystemReg","SystemReg2","SystemEvent","SystemEvent2","SRV_ACCELEROMETER","SRV_AZURE_IOT_HUB_HEALTH","SRV_BAROMETER","SRV_BIT_RADIO","SRV_BOOTLOADER","SRV_BRAILLE_DISPLAY","SRV_BUTTON","ButtonEvent","ButtonEvent2","SRV_BUZZER","SRV_CHARACTER_SCREEN","SRV_COLOR","SRV_COMPASS","SRV_CONTROL","ControlCmd","ControlCmd2","ControlReg","ControlReg2","SRV_DASHBOARD","SRV_DISTANCE","SRV_DMX","SRV_DOT_MATRIX","SRV_E_CO2","SRV_FLEX","SRV_GAMEPAD","SRV_GYROSCOPE","SRV_HEART_RATE","SRV_HID_KEYBOARD","SRV_HID_MOUSE","HidMouseButtonEvent","HidMouseButtonEvent2","SRV_HUMIDITY","SRV_ILLUMINANCE","SRV_INFRASTRUCTURE","SRV_LED","SRV_LED_DISPLAY","SRV_LED_STRIP","SRV_LIGHT_BULB","SRV_LIGHT_LEVEL","SRV_LOGGER","SRV_MATRIX_KEYPAD","SRV_MOTION","SRV_MOTOR","SRV_POTENTIOMETER","SRV_POWER","SRV_POWER_SUPPLY","SRV_PROTO_TEST","SRV_PROXY","SRV_PULSE_OXIMETER","SRV_RAIN_GAUGE","SRV_REAL_TIME_CLOCK","SRV_REFLECTED_LIGHT","SRV_RELAY","SRV_RNG","SRV_ROLE_MANAGER","SRV_ROTARY_ENCODER","SRV_SERVO","SRV_SETTINGS","SRV_SEVEN_SEGMENT_DISPLAY","SRV_SOIL_MOISTURE","SRV_SOLENOID","SRV_SOUND_LEVEL","SoundLevelReg","SoundLevelReg2","SRV_SOUND_PLAYER","SRV_SOUND_SPECTRUM","SRV_SPEECH_SYNTHESIS","SRV_SWITCH","SRV_TEMPERATURE","SRV_TRAFFIC_LIGHT","SRV_TVOC","SRV_UNIQUE_BRAIN","SRV_UV_INDEX","SRV_VIBRATION_MOTOR","SRV_WATER_LEVEL","SRV_WEIGHT_SCALE","SRV_WIFI","SRV_WIND_DIRECTION","SRV_WIND_SPEED","CMD_GET_REG","CMD_SET_REG","CMD_EVENT_COUNTER_MASK","CMD_REG_MASK","JD_SERIAL_MAX_PAYLOAD_SIZE","JD_SERVICE_INDEX_CTRL","CONNECTION_STATE","CONNECT","LOST","CONNECTING","DISCONNECT","CHANGE","EVENT","REFRESH","SERVICE_PROVIDER_REMOVED","DATA","CLOSE","DEVICE_DISCONNECT","DEVICE_ANNOUNCE","DEVICE_CHANGE","SELF_ANNOUNCE","PACKET_SEND","PACKET_PROCESS","PACKET_RECEIVE","PACKET_EVENT","PACKET_REPORT","PACKET_DATA_NORMALIZE","REPORT_RECEIVE","REPORT_UPDATE","ERROR","REGISTER_NODE_NAME","EVENT_NODE_NAME","SERVICE_NODE_NAME","DEVICE_NODE_NAME","FIELD_NODE_NAME","USB_TRANSPORT","BLUETOOTH_TRANSPORT","SERIAL_TRANSPORT","REGISTER_PRE_GET","BLUETOOTH_JACDAC_SERVICE","ROLE_UNBOUND","JACDAC_ERROR","TIMEOUT_ERROR_CODE","DOCS_ROOT","isMixinService","serviceClass2","JDError","message","jacdacName","Error","errorCode","e","jacdacCode","test","Flags","throwError","msg","cancel","__cancel","isCancelError","delay","millis","Promise","resolve","setTimeout","memcpy","trg","trgOff","src","srcOff","len","i","strcmp","a","b","bufferEq","offset","hash","buf","bits","h","fnv1","idiv","data","Math","imul","crc","p","crc2","x","ALIGN","n","stringToUint8Array","input","res","Uint8Array","charCodeAt","uint8ArrayToString","String","fromCharCode","fromUTF8","binstr","escaped","k","charAt","decodeURIComponent","toUTF8","cesu8","code","next","isNaN","diagnostics","trace","webUSB","webSerial","webBluetooth","PromiseBuffer","waiting","available","f","v","shift","timeout","reject","then","idx","splice","PromiseQueue","promises","id","arr","cleanup","err","toFullHex","map","slice","join","toHex2","bytes","sep","r","fromHex","hex","parseInt","isSet","hexNum","write32","pos","write16","read32","read16","isBufferEmpty","bufferToString","stringToBuffer","bufferConcat","arrayConcatMany","arrs","filter","sz","Array","assert","cond","debugData","console","debug","throttle","handler","delay2","enableCall","roundWithPrecision","digits","round","d","pow","Number","EPSILON","ellipse","text","maxChars","suffix","pick","values2","find","cryptoRandomUint32","window","vals","Uint32Array","crypto","getRandomValues","anyRandomUint32","random","randomBytes","randomDeviceId","devId","fmtInfo","fmt","size","fmtInfoCore","signed","swap","isFloat","sizeOfNumberFormat","format","getNumber","inf","reverse","Float32Array","buffer","Float64Array","setNumber","_serviceSpecifications","status","shortId","camelName","shortName","extends","notes","short","commands","registers","events","classIdentifier","enums","ReadingThreshold","storage","members","Neutral","Inactive","Active","StatusCodes","Ready","Initializing","Calibrating","Sleeping","WaitingForInput","CalibrationNeeded","constants","announce_interval","packets","kind","identifier","description","fields","hasReport","secondary","type","isSimpleType","packFormat","unit","defaultValue","typicalMax","typicalMin","volatile","startRepeats","optional","tags","identifierName","derived","internal","long","group","Button","Left","Up","Right","Down","A","B","Menu","Select","Reset","Exit","ConnectionStatus","Connected","Disconnected","Connecting","Disconnecting","restricted","Format","Aztec","Code128","Code39","Code93","Codabar","DataMatrix","Ean13","Ean8","ITF","Pdf417","QrCode","UpcA","UpcE","absoluteMin","absoluteMax","preferredInterval","unique","NoError","PacketTooSmall","OutOfFlashableRange","InvalidPageOffset","NotPageAligned","maxBytes","lowLevel","client","Variant","LCD","OLED","Braille","TextDirection","LeftToRight","RightToLeft","AnnounceFlags","isFlags","RestartCounterSteady","RestartCounter1","RestartCounter2","RestartCounter4","RestartCounter8","StatusLightNone","StatusLightMono","StatusLightRgbNoFade","StatusLightRgbFade","SupportsACK","SupportsBroadcast","SupportsFrames","IsClient","SupportsReliableCommands","pipeType","Ultrasonic","Infrared","LiDAR","Laser","LED","VOC","NDIR","Buttons","X","Y","Thumb","ArcadeBall","ArcadeStick","Gamepad","Finger","Chest","Wrist","Pump","WebCam","Modifiers","None","LeftControl","LeftShift","LeftAlt","LeftGUI","RightControl","RightShift","RightAlt","RightGUI","Action","Press","Middle","Click","DoubleClick","CommandStatus","OK","NotFound","Busy","MessageFlags","ToBeContinued","ThroughHole","SMD","Power","Bead","LightType","WS2812B_GRB","APA102","SK9822","Strip","Ring","Stick","Jewel","Matrix","max_pixels_length","PhotoResistor","ReverseBiasedLED","Priority","Debug","Log","Warning","Silent","Membrane","Keyboard","Elastomer","ElastomerLEDPixel","ModelFormat","TFLite","ML4F","EdgeImpulseCompiled","PIR","Slider","Rotary","PowerStatus","Disallowed","Powering","Overload","Overprovision","Computer","Crystal","Cuckoo","InfraredDigital","InfraredAnalog","Electromechanical","SolidState","Reed","Quantum","ADCNoise","WebCrypto","SampleType","U8","I8","U16","I16","U32","I32","encoding","Resistive","Capacitive","PushPull","Valve","Latch","Status","Idle","Recording","Playing","Slide","Tilt","PushButton","Tactile","Toggle","Proximity","Magnetic","FootButton","TcpError","InvalidCommand","InvalidCommandPayload","Outdoor","Indoor","Body","UVA_UVB","Visible_IR","Unknown","Working","Faulty","FingerprintType","FallCurve","CurrentSense","Custom","VoltageMeasurementType","Absolute","Differential","ContactPhotoElectric","NonContactPhotoElectric","Food","Jewelry","APFlags","HasPassword","WPS","HasSecondaryChannelAbove","HasSecondaryChannelBelow","IEEE_802_11B","IEEE_802_11A","IEEE_802_11G","IEEE_802_11N","IEEE_802_11AC","IEEE_802_11AX","IEEE_802_LongRange","isOptional","_serviceSpecificationMap","_customServiceSpecifications","identifierToUrlPath","toLowerCase","isInstanceOf","requiredClassIdentifier","_a","classSpec","serviceSpecificationFromClassIdentifier","some","extend","extendSpec","serviceSpecificationFromName","s","values","ser","srv","isSensor","spec","pkt","isReading","isRegister2","isConstRegister","isEvent","isIntegerType","tp","numberFormatFromStorageType","numberFormatToStorageType","nf","clampToStorage","storageTypeRange","min","max","ch_z","numberFormatOfType","bufferSlice","start","end","TokenParser","fp","div","isArray","endp","word","dotIdx","c0","sz0","sz1","c1","nfmt","jdunpackCore","repeat","repeatRes","off","fp0","parser","parse","endoff","subbuf","zerop","jdunpack","jdpackCore","dataItem","fmt0","st","jdpack","prettyUnit2","u","prettyDuration","ms","floor","m","shortDeviceId","devid","decodeMember","service","pktInfo","member","us","numValue","scaledValue","humanValue","abs","enumInfo","isInt","info","scaleIntToFloat","device","port","curr","key","val","reverseLookup","did","ptr","JSON","stringify","bus","hexDump","toFixed","decodeMembers","startRep","findIndex","fidx","decoded","wrapDecodedMembers","syntheticPktInfo","addr","decodePacket","isReport","isCRCAck","serviceCommand","decodeCRCack","isSet2","isRegisterSet","isGet","isRegisterGet","error","regInfo","recoded","decodeRegister","isCommand","evCode","eventCode","evInfo","eventCounter","decodeEvent","cmdInfo","decodeCommand","decodePacketData","isPipe","cmd","pinfo","split","servId","dir","meta","toUpperCase","decodePipe","serviceClass","serv","serviceName","num2str","toAscii","c","toArray","chunk","warn","_Packet","_meta","_nextKey","_header","_data","deviceIdentifier","idb","isMultiCommand","_decoded","frameFlags","ack","requiresAck","serviceIndex","serviceClassAt","isAnnounce","lastServiceUpdate","timestamp","deviceId","fromBinary","toBuffer","stripped","assignDevice","sendPacketAsync","dev","sendCoreAsync","service_class","JD_FRAME_FLAG_IDENTIFIER_IS_SERVICE_CLASS","friendlyName","service_name","sc","serv_id","cmdname","pkt2","_b","_c","_d","pref","reg","regName","serviceSpec","commandName","timestamp2","service_command","from","frame","skipCrc","frameToPackets","nums","Packet","computed","actual","psz","stack","serializeToTrace","padEnd","t","descr","opts","frame_flags","devname","friendlyDeviceName","friendlyServiceName","friendlyCommandName","sender","skipResetIn","pdesc","skipRepeatedAnnounce","serviceClasses","isRepeatedEvent","v0","uintData","v1","intData","showTime","printPacket","Trace","options","maxLength","packet","copy","clone","startTimestamp","pkts","unshift","forEach","normalizeEventNames","eventNames","nextNodeId","JDEventSource","nodeId","listeners","eventStats","newListenerStats","eventName","eventName2","addListenerInternal","removeListenerInternal","once","eventListeners","listener","listener2","stackTrace","emit","EventObservable","observe","subscribe","unsubscribe","eventEmitter","observer","on","JDNode","_nodeData","event","arg","current","parent","JDServiceMemberNode","isPacket","_notImplemented","_specification","nodeKind","specification","qualifiedName","JDField","index","parts","JDRegister","_lastSetTimestamp","Infinity","_lastGetTimestamp","_lastGetAttempts","_needsRefresh","_lastReportPkt","emitPropagated","_fields","field","autoRefresh","notImplemented","registersUseAcks","scheduleRefresh","sendCmdAsync","sendSetAsync","sendSetPackedAsync","defaultName","prettyName","repeatFields","rdata","r2","i2","field2","value2","name2","unpackedToObject","unpackedValue","intOfBuffer","uintOfBuffer","intValue","skipIfValue","withTimeout","sendGetAsync","catch","processReport","clearGetTimestamp","register","updated","compareTo","JDEvent","_count","packFormat2","JDClient","unsubscribers","unmounted","log","warn2","OutPipe","hosted","sendData","items","converter","item","send","close","sendPktWithAck","free","processPacket","chunkSize","idbuf","onProgress","sendCmdAwaitResponseAsync","jdpacked","resp","pipePort","pipe","InPipeReader","done","signalled","signal","output","mount","readAll","readData","n2","_handlePacket","bind","allocPort","selfDevice","_port","localPipe","isOpen","selfDeviceId","unmount","JDService","_reports","_clients","statusCode","services","_role","registerIdentifier","serviceLength","_twin","server","twin","_readingRegister","_valueRegister","isValue","_intensityRegister","isIntensity","stringValue","refresh","_registers","regs","ignoreNacks","registerCode","_events","ev","onlyHeader","handleRes","processEvent","regCode","setNotImplemented","inp","openCommand","recv","trgbToValues","trgb","LEDController","command","to","interval","DeviceStatsMonitor","_receivedPackets","_restarts","_announce","fill","received","total","restarts","_dataIndex","dropped","announce","oldCurrent","JDDevice","stats","connected","_lost","_identifying","created","lastSeen","_source","_replay","replay","_anonymizedId","ignoredServices","isPhysical","instanceName","_servicesData","announceFlags","_shortId","ctrl","version","firmwareVersion","productIdentifier","uintValue","bootloaderProductIdentifier","passive","_services","lost","_firmwareUpdater","clearData","sendStopStreaming","_eventCounter","announced","_ports","ex","hasService","force","_statusLight","refreshFirmwareInfo","initServices","sensor","mixins","isMixin","payload","processAnnouncement","w0","w1","restarted","servicesChanged","processRestart","ec","ahead","behind","markRepeatedEvent","statusLightFlags","statusLight","blink","sendCtrlCommand","retry","uptime","lastDataTimestamp","_ackAwaiting","drops","resends","cleanUp","rep","numdone","aa","okCb","scheduler","resend","numdrop","retriesLeft","errCb","initAcks","__ack","setAckError","numPkts","WallClockScheduler","_now","performance","now","Date","_startTime","delta","handle","clearTimeout","setInterval","clearInterval","bl_announce","sendAsMultiCommandAsync","defaultFieldPayload","JDRegisterServer","skipBoundaryCheck","skipErrorInjection","serviceSpecification","vi","resetData","fieldi","listenerCount","skipChangeEvent","readOnly","shouldNormalize","normalize","valueProcessor","errorRegister","vs","changed","lastSetTime","JDServiceServer","_locked","variant","valueValues","intensityValues","intensityProcessor","registerValues","isActive","addRegister","intensity","sendEvent","addCommand","handleCalibrate","setValues","handleTwinPacket","_device","_twinCleanup","tw","twinReg","handlePacket","reset","rid","createEventCmd","delayedSend","calibrate","SensorServer","lastStream","lastErrorReadingChanged","readingValues","streamingInterval","preferredStreamingInterval","readingError","reading","streamingSamples","refreshRegisters","_e","samples","dateToClock","getFullYear","getMonth","getDate","getDay","getHours","getMinutes","getSeconds","RealTimeClockServer","lastSecond","drift","precision","handleSetTime","refreshTime","Transport","disposed","_connectionState","_checkPulse","checkPulse","_cleanups","connectObservable","_a2","disconnected","_b2","document","visibilityState","connect","disconnectObservable","disconnect","_bus","state","_connectionTime","_lastReceivedTime","connectionState","safeBoot","devices","firmwareUpdater","reconnect","transportSendPacketAsync","background","_connectPromise","_disconnectPromise","setConnectionState","transportConnectAsync","old","new","errorHandler","transportDisconnectAsync","finally","fromFrame","context","exception","transport","BusStatsMonitor","_prev","acks","_previ","_temp","handlePacketSend","handlePacketProcess","handleSelfAnnounce","ignoreInfrastructure","simulators","serviceProviders","transports","header","accumulate","ControlServer","statusLightColor","resetIn","startTime","deviceDescription","mcuTemperature","identify","handleReset","handleSetStatusLight","restartCounter","packetCount","resetTimestamp","lastSet","toRed","toGreen","toBlue","JDServerServiceProvider","template","_restartCounter","_packetCount","controlService","updateServices","newServices","_delayedPackets","processDelayedPackets","dp","sort","l","devIdMatch","multiCommandClass","npkt","cloneForDevice","stop","ProtocolTestServer","init","rwBytes","handleReportPipe","rwi","roi","ci","ei","rw","ro","respondForEach","_ButtonServer","analog","INACTIVE_VALUE","handleRefresh","_threshold","threshold","_downTime","_nextHold","HOLD_TIME","time","ACTIVE_VALUE","ButtonServer","BuzzerServer","volume","handlePlayTone","period","duration","frequency","_BuzzerServer","PLAY_TONE","CharacterScreenServer","rows","columns","textDirection","brightness","standardGamepadMapping","GamepadServer","buttonsAvailable","buttons","currentButtons","y","newButtons","updateReading","button","gamepad","axes","pressed","newX","newY","isAnalog","axeLeftRight","axeUpDown","oldButtons","DotMatrixServer","dots","updateDotsBuffer","rgb","hsv","hue","sat","brightness_floor","color_amplitude","section","rampup_adj_with_floor","rampdown_adj_with_floor","mulcol","c2","clamp","SCALE0","LedStripServer","pxbuffer","prog_mode","prog_tmpmode","range_start","range_end","range_len","range_ptr","prog_ptr","prog_size","prog_data","dirty","inited","power_enable","numColumns","maxPower","maxPixels","numPixels","actualBrightness","lightType","numRepeats","requested_intensity","allocRxBuffer","handleRun","numpixels","maxpixels","pi","maxpower","prev_intensity","current_full","current_prev","di","current_limit","inten","prog","dst","defl","prev","fr","prog_fetch","prog_fetch_color","reset_range","ok","set_next","usehsv","prog_set","colidx","col0","col1","colstep","colpos","fade1","fade0","col","first","middle","last","tmp","tmp1","tmp2","prog_fetch_num","prog_fetch_cmd","animationFrame","prog_fade","prog_rot","fetch_mode","prog_process","is_enabled","jd_power_enable","limit_intensity","sync_config","MatrixKeypadServer","labels","valuei","MotorServer","duty","enabled","loadTorque","loadSpeed","LevelDetector","inactiveThreshold","activeThreshold","update","_state","level","active","setState","inactive","AnalogSensorServer","minReading","maxReading","readingResolution","levelDetector","RainGaugeServer","_tiltCount","_level","bucketSize","precipitationPrecision","fraction","tilt","bucket","ReflectedLightServer","RotaryEncoderServer","clicksPerTurn","clicks","position","ServoServer","minAngle","maxAngle","responseSpeed","stallTorque","angle","currentAngle","minAngle2","maxAngle2","SettingsServer","store","handleGet","handleSet","handleDelete","handleListKeys","handleList","handleClear","settings","read","secret","getPayload","save","SpeechSynthesisServer","synthesis","speechSynthesis","paused","pitch","rate","lang","handleSpeak","handleCancel","utterance","SpeechSynthesisUtterance","speak","SwitchServer","switchOn","switchOff","TrafficLightServer","red","orange","green","LEDServer","ledCount","luminousIntensity","waveLength","color","updateColor","handleAnimate","_animation","blue","speed","progress","alpha","oneAlpha","newRed","newGreen","newBlue","SoundPlayerServer","sounds","handleListSounds","handlePlay","sound","onPlay","RandomNumberGeneratorServer","CompassServer","DMXServer","handleSend","inIFrame","self","top","getStringOffset","packetType","RadioPacket","RADIO_MAX_PACKET_SIZE","PACKET_PREFIX_LENGTH","MAX_PAYLOAD_LENGTH","BitRadioServer","transmissionPower","frequencyBand","handleSendString","handleSendNumber","handleSendValue","handleSendBuffer","rpkt","mkPacket","stringPayload","sendRadioPacket","numberPayload","bufferPayload","serial","broadcast","rssi","groupId","bufferData","postMessage","PowerServer","overload","CapacitiveButtonServer","HIDKeyboardServer","handleKey","_lastKey","rest","selectors","j","o","q","w","z","$","enter","escape","backspace","tab","space","capslock","f1","f2","f3","f4","f5","f6","f7","f8","f9","f10","f11","f12","printscreen","scrolllock","pause","insert","home","pageup","delete","pagedown","arrowright","arrowleft","arrowdown","arrowup","numlock","numpaddivide","numpadmultiply","numpadsubstract","numpadadd","numpadenter","numpad1","numpad2","numpad3","numpad4","numpad5","numpad6","numpad7","numpad8","numpad9","numpad0","numpaddecimal","numpadequal","f13","f14","f15","f16","f17","f18","f19","f20","f21","f22","f23","f24","execute","help","contextmenu","select","again","undo","cut","paste","mute","volumeup","volumedown","numpadcomma","HIDMouseServer","handleMove","handleSetButton","handleWheel","_lastCommand","dx","dy","setLastCommand","btns","renderHidMouseButtons","toLocaleLowerCase","parsePropertyBag","separator","kv","splitPair","AzureIoTHubHealthServer","connStringSetting","isReal","hubName","hubDeviceId","connectionStatus","connectionString","handleConnect","handleDisconnect","handleSetConnectionString","newConnectionString","connStringParts","setConnectionStatus","setConnectionString","stringData","VibrationMotorServer","_animationStep","handleVibrate","pattern","elapsed","dt","_VibrationMotorServer","VIBRATE_PATTERN","WifiServer","_lastScanResults","scanResults","_knownNetworks","knownNetworks","ssid","ipAddress","eui48","handleScan","handleReconnect","handleLastScanResults","handleListKnownNetworks","handleAddNetwork","handleForgetAllNetworks","handleForgetNetwork","handleSetNetworkPriority","handleIpChange","handleEnabledChange","ip","kn","scannedKnownNetworks","scan","channel","bssid","priority","password","network","scanned","currentSsid","network2","AccelerometerServer","maxForce","BrailleDisplayServer","patterns","SCALE02","_providerDefinitions","LedDisplayServer","pixels","PowerSupplyServer","outputVoltage","minVoltage","maxVoltage","indoorThermometerOptions","outdoorThermometerOptions","outdoorHumidityOptions","soilThermometerOptions","medicalThermometerOptions","barometerOptions","sonarOptions","SG90_RESPONSE_SPEED","microServoOptions","microServo270Options","microServo360Options","windDirectionOptions","windSpeedOptions","eCO2Options","CO2Options","tvocOptions","microbitSounds","soundLevel","soundSpectrum","initProviders","config","GAMEPAD_DPAD_BUTTONS","GAMEPAD_DPAD_A_BUTTONS","factory","pwr","addServiceProvider","definition","lock","others","sp","stableSimulatorDeviceId","serviceProviderDefinitionFromServiceClass","provider","JDServiceClient","statusCodeChanged","_RoleManagerClient","_roles","_needRefresh","_lastRefreshAttempt","changeEvent","startRefreshRoles","timeOutId","debounceAsync","refreshRoles","handleChange","assignRoles","clearRoles","collectRoles","previousRolesHash","roles","devidbuf","role","unroledSrvs","assignRole","previous","todos","list","groupBy","hostDefinition","todo","RoleManagerClient","devices_default","company","repo","productIdentifiers","designIdentifier","firmwareSource","hardwareDesign","link","vendorId","firmwares","url","bootloader","sequence","driveName","firmwareFormat","ledAnimation","looksRandom","hh","DeviceCatalog","_specifications","specifications","includeDeprecated","includeExperimental","spec2","vendorIds","genFirmwareId","deviceCatalog","specificationFromProductIdentifier","genServId","JDBus","_transports","_bridges","_devices","_lastPingLoggerTime","_lastResetInTime","_minLoggerPriority","_gcDevicesFrozen","_serviceProviders","_streaming","_passive","_client","_dashboard","_proxy","parentOrigin","disableRoleManager","dashboard","proxy","_roleManagerClient","tr","addTransport","handleRealTimeClockSync","handleRoleManager","BroadcastChannel","unsubConnectionState","handleVisibilityChange","handleBroadcastMessage","ctr","addEventListener","_unsubscribeBroadcastChannel","removeEventListener","preConnect","bridge","removeBridge","all","configureBroadcastChannel","_announceInterval","backgroundRefreshRegisters","_gcInterval","gcDevices","dispose","_safeBootInterval","sendStayInBootloaderCommand","every","host","devs","resetTime","_a3","count","node","_f","_g","_h","syncTime","setRoleManagerService","_firmwareBlobs","blobs","ignoreSimulators","findServiceProvider","physical","removeDevice","devi","skipCreate","d2","devicesFrozen","lostCutoff","disconnectedCutoff","disconnectDevice","sendReportAsync","sendAnnounce","sendResetIn","sendPingLoggers","rst","readingRegisters","readingRegister","_refreshRegistersInterval","handleRefreshRegisters","needsRefresh","lastGetAttempts","noDataYet","age","lastGetTimestamp","backoff","intervalRegister","preferredIntervalRegister","streamingSamplesRegister","lastSetTimestamp","promise","tid","TraceRecorder","maxRecordingLength","_subscription","recording","_trace","addPacket","JDBridge","infrastructure","bridgeId","packetSent","packetProcessed","handleSendPacket","newBus","addBridge","dispatchPackets","sendPacket","_JacscriptManagerClient","PROGRAM_CHANGE","panicEvent","PROGRAM_PANIC","bytecode","sendBytes","boolValue","JacscriptManagerClient","isWebBluetoothSupported","navigator","bluetooth","requestDevice","bleRequestDevice","bleGetDevices","getDevices","BluetoothTransport","handleDisconnected","handleCharacteristicChanged","filters","namePrefix","optionalServices","gatt","_server","getPrimaryService","_service","getCharacteristic","_rxCharacteristic","_txCharacteristic","startNotifications","totalChunks","ceil","remainingChunks","sent","writeValueWithoutResponse","_rxBuffer","packetData","_rxChunkCounter","createBluetoothTransport","HF2_DEVICE_MAJOR","HF2Proto","io","eventHandlers","msgs","cmdSeq","frames","onData","onSerial","handleEvent","seq","numSkipped","handleReturnAsync","shiftAsync","enqueue","sendMsgAsync","loop","talkAsync","words","encodeU32LE","onEvent","evid","iserr","checkMode","mode","disconnectAsync","MICROBIT_V2_VENDOR_ID","CMSISProto","sendQ","_lastInterval","recvTo","stopRecvToLoop","xchgAddr","_onJDMsg","cb","recvPacketAsync","cmds","recvAsync","response","micros","setBaud","lastXchg","numev","readBytes","writeWord","triggerIRQ","sendFree","currSend","bbody","writeWords","bhead","lastSend","readSerial","dapDelay","pendingSerial","beg","lastPendingSerial","decodeString","setupTAR","reqHd","MAX","req","overhang","ptrTX","dataBytes","lastCh","ch","jdmode","readWords","numPending","frmsz","words2","memStart","p0","p1","checkSize","check","a0","a1","irqn","startRecvToLoop","talkStringAsync","setBaudRate","freq","ini","talkHexAsync","readDP","mask","findExchange","xchg","xchgLoop","USB_FILTERS","classCode","subclassCode","productId","USBIO","readLoopStarted","ready","rawMode","onError","isMicrobit","epIn","epOut","clearDev","recvPacketCoreAsync","final","transferIn","endpointNumber","controlTransferIn","requestType","recipient","request","iface","interfaceNumber","productName","transferOut","controlTransferOut","altIface","manufacturerName","subcl","configuration","interfaces","alt","alternates","interfaceClass","interfaceSubclass","serialNumber","tryReconnectAsync","requestDeviceAsync","openDeviceAsync","proto","mkProto","postConnectAsync","checkDevice","open","selectConfiguration","endpoints","direction","packetSize","claimInterface","readLoop","WebSerialIO","cancelStreams","getInfo","usbVendorId","usbProductId","devInfo","reader","releaseLock","writer","readpkt","readable","getReader","write","matchFilter","matchVendorId","getPorts","ports","filtered","WEB_SERIAL_FILTERS","requestPort","baudRate","bufferSize","getWriter","EventTargetObservable","element","isWebUSBSupported","usb","usbRequestDevice","usbGetDevices","WebUSBTransport","connectAsync","hf2","onJDMessage","handleFrame","sendJDMessageAsync","createUSBTransport","isWebSerialSupported","WebSerialTransport","mkTransport","createWebSerialTransport","defaultOptions2","IFrameBridge","targetOrigin","handleMessage","receivePacket","startDevTools","location","href","createWebBus","usbOptions","serialOptions","bluetoothOptions","iframeTargetOrigin","iframeBridge","createIFrameBridge","RoleManager","addServices","removeServices","bindServices","bound","serviceId","saveRoles","newRoles","oldBound","isBound","oldHash","supportedNewRoles","preferreds","Set","preferredDeviceId","preferredServiceIndex","add","newRole","existingRole","bindingChanged","otherBinding","emitBoundEvents","binding","other","updateRoles","unboundServices","boundServices","theOne","newOne","localeCompare","bindRole","JacdacContext","createContext","JacdacProvider","props","initialBus","connectOnStart","children","useMemo","firstConnect","useRef","useEffect","React","Provider","useBus","useContext","useEventRaised","query","deps","subscription","getCurrentValue","callback","useSubscription","useChange","useEvent","updates","useServices","displayName","module","exports","require","useState","useDebugValue"],"mappings":"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","file":"static/js/0.861c840f.chunk.js","sourcesContent":["import getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport setPrototypeOf from \"@babel/runtime/helpers/esm/setPrototypeOf\";\nimport isNativeFunction from \"@babel/runtime/helpers/esm/isNativeFunction\";\nimport construct from \"@babel/runtime/helpers/esm/construct\";\nexport default function _wrapNativeSuper(Class) {\n  var _cache = typeof Map === \"function\" ? new Map() : undefined;\n\n  _wrapNativeSuper = function _wrapNativeSuper(Class) {\n    if (Class === null || !isNativeFunction(Class)) return Class;\n\n    if (typeof Class !== \"function\") {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    if (typeof _cache !== \"undefined\") {\n      if (_cache.has(Class)) return _cache.get(Class);\n\n      _cache.set(Class, Wrapper);\n    }\n\n    function Wrapper() {\n      return construct(Class, arguments, getPrototypeOf(this).constructor);\n    }\n\n    Wrapper.prototype = Object.create(Class.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    return setPrototypeOf(Wrapper, Class);\n  };\n\n  return _wrapNativeSuper(Class);\n}","export default function _isNativeFunction(fn) {\n  return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n}","import _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport wrapNativeSuper from \"@babel/runtime/helpers/esm/wrapNativeSuper\";\nimport getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport inherits from \"@babel/runtime/helpers/esm/inherits\";\nexport default function _wrapRegExp(re, groups) {\n  _wrapRegExp = function _wrapRegExp(re, groups) {\n    return new BabelRegExp(re, undefined, groups);\n  };\n\n  var _RegExp = wrapNativeSuper(RegExp);\n\n  var _super = RegExp.prototype;\n\n  var _groups = new WeakMap();\n\n  function BabelRegExp(re, flags, groups) {\n    var _this = _RegExp.call(this, re, flags);\n\n    _groups.set(_this, groups || _groups.get(re));\n\n    return _this;\n  }\n\n  inherits(BabelRegExp, _RegExp);\n\n  BabelRegExp.prototype.exec = function (str) {\n    var result = _super.exec.call(this, str);\n\n    if (result) result.groups = buildGroups(result, this);\n    return result;\n  };\n\n  BabelRegExp.prototype[Symbol.replace] = function (str, substitution) {\n    if (typeof substitution === \"string\") {\n      var groups = _groups.get(this);\n\n      return _super[Symbol.replace].call(this, str, substitution.replace(/\\$<([^>]+)>/g, function (_, name) {\n        return \"$\" + groups[name];\n      }));\n    } else if (typeof substitution === \"function\") {\n      var _this = this;\n\n      return _super[Symbol.replace].call(this, str, function () {\n        var args = [];\n        args.push.apply(args, arguments);\n\n        if (_typeof(args[args.length - 1]) !== \"object\") {\n          args.push(buildGroups(args, _this));\n        }\n\n        return substitution.apply(this, args);\n      });\n    } else {\n      return _super[Symbol.replace].call(this, str, substitution);\n    }\n  };\n\n  function buildGroups(result, re) {\n    var g = _groups.get(re);\n\n    return Object.keys(g).reduce(function (groups, name) {\n      groups[name] = result[g[name]];\n      return groups;\n    }, Object.create(null));\n  }\n\n  return _wrapRegExp.apply(this, arguments);\n}","var __require = /* @__PURE__ */ ((x) => typeof require !== \"undefined\" ? require : typeof Proxy !== \"undefined\" ? new Proxy(x, {\n  get: (a, b) => (typeof require !== \"undefined\" ? require : a)[b]\n}) : x)(function(x) {\n  if (typeof require !== \"undefined\")\n    return require.apply(this, arguments);\n  throw new Error('Dynamic require of \"' + x + '\" is not supported');\n});\n\n// jacdac-spec/dist/specconstants.ts\nvar ANNOUNCE_INTERVAL = 500;\nvar SystemReadingThreshold = /* @__PURE__ */ ((SystemReadingThreshold2) => {\n  SystemReadingThreshold2[SystemReadingThreshold2[\"Neutral\"] = 1] = \"Neutral\";\n  SystemReadingThreshold2[SystemReadingThreshold2[\"Inactive\"] = 2] = \"Inactive\";\n  SystemReadingThreshold2[SystemReadingThreshold2[\"Active\"] = 3] = \"Active\";\n  return SystemReadingThreshold2;\n})(SystemReadingThreshold || {});\nvar SystemStatusCodes = /* @__PURE__ */ ((SystemStatusCodes3) => {\n  SystemStatusCodes3[SystemStatusCodes3[\"Ready\"] = 0] = \"Ready\";\n  SystemStatusCodes3[SystemStatusCodes3[\"Initializing\"] = 1] = \"Initializing\";\n  SystemStatusCodes3[SystemStatusCodes3[\"Calibrating\"] = 2] = \"Calibrating\";\n  SystemStatusCodes3[SystemStatusCodes3[\"Sleeping\"] = 3] = \"Sleeping\";\n  SystemStatusCodes3[SystemStatusCodes3[\"WaitingForInput\"] = 4] = \"WaitingForInput\";\n  SystemStatusCodes3[SystemStatusCodes3[\"CalibrationNeeded\"] = 100] = \"CalibrationNeeded\";\n  return SystemStatusCodes3;\n})(SystemStatusCodes || {});\nvar SystemCmd = /* @__PURE__ */ ((SystemCmd2) => {\n  SystemCmd2[SystemCmd2[\"Announce\"] = 0] = \"Announce\";\n  SystemCmd2[SystemCmd2[\"GetRegister\"] = 4096] = \"GetRegister\";\n  SystemCmd2[SystemCmd2[\"SetRegister\"] = 8192] = \"SetRegister\";\n  SystemCmd2[SystemCmd2[\"Calibrate\"] = 2] = \"Calibrate\";\n  SystemCmd2[SystemCmd2[\"CommandNotImplemented\"] = 3] = \"CommandNotImplemented\";\n  return SystemCmd2;\n})(SystemCmd || {});\nvar SystemReg = /* @__PURE__ */ ((SystemReg2) => {\n  SystemReg2[SystemReg2[\"Intensity\"] = 1] = \"Intensity\";\n  SystemReg2[SystemReg2[\"Value\"] = 2] = \"Value\";\n  SystemReg2[SystemReg2[\"MinValue\"] = 272] = \"MinValue\";\n  SystemReg2[SystemReg2[\"MaxValue\"] = 273] = \"MaxValue\";\n  SystemReg2[SystemReg2[\"MaxPower\"] = 7] = \"MaxPower\";\n  SystemReg2[SystemReg2[\"StreamingSamples\"] = 3] = \"StreamingSamples\";\n  SystemReg2[SystemReg2[\"StreamingInterval\"] = 4] = \"StreamingInterval\";\n  SystemReg2[SystemReg2[\"Reading\"] = 257] = \"Reading\";\n  SystemReg2[SystemReg2[\"ReadingRange\"] = 8] = \"ReadingRange\";\n  SystemReg2[SystemReg2[\"SupportedRanges\"] = 266] = \"SupportedRanges\";\n  SystemReg2[SystemReg2[\"MinReading\"] = 260] = \"MinReading\";\n  SystemReg2[SystemReg2[\"MaxReading\"] = 261] = \"MaxReading\";\n  SystemReg2[SystemReg2[\"ReadingError\"] = 262] = \"ReadingError\";\n  SystemReg2[SystemReg2[\"ReadingResolution\"] = 264] = \"ReadingResolution\";\n  SystemReg2[SystemReg2[\"InactiveThreshold\"] = 5] = \"InactiveThreshold\";\n  SystemReg2[SystemReg2[\"ActiveThreshold\"] = 6] = \"ActiveThreshold\";\n  SystemReg2[SystemReg2[\"StreamingPreferredInterval\"] = 258] = \"StreamingPreferredInterval\";\n  SystemReg2[SystemReg2[\"Variant\"] = 263] = \"Variant\";\n  SystemReg2[SystemReg2[\"StatusCode\"] = 259] = \"StatusCode\";\n  SystemReg2[SystemReg2[\"InstanceName\"] = 265] = \"InstanceName\";\n  return SystemReg2;\n})(SystemReg || {});\nvar SystemEvent = /* @__PURE__ */ ((SystemEvent2) => {\n  SystemEvent2[SystemEvent2[\"Active\"] = 1] = \"Active\";\n  SystemEvent2[SystemEvent2[\"Inactive\"] = 2] = \"Inactive\";\n  SystemEvent2[SystemEvent2[\"Change\"] = 3] = \"Change\";\n  SystemEvent2[SystemEvent2[\"StatusCodeChanged\"] = 4] = \"StatusCodeChanged\";\n  SystemEvent2[SystemEvent2[\"Neutral\"] = 7] = \"Neutral\";\n  return SystemEvent2;\n})(SystemEvent || {});\nvar BaseCmd = /* @__PURE__ */ ((BaseCmd2) => {\n  BaseCmd2[BaseCmd2[\"CommandNotImplemented\"] = 3] = \"CommandNotImplemented\";\n  return BaseCmd2;\n})(BaseCmd || {});\nvar BaseReg = /* @__PURE__ */ ((BaseReg2) => {\n  BaseReg2[BaseReg2[\"InstanceName\"] = 265] = \"InstanceName\";\n  BaseReg2[BaseReg2[\"StatusCode\"] = 259] = \"StatusCode\";\n  return BaseReg2;\n})(BaseReg || {});\nvar BaseEvent = /* @__PURE__ */ ((BaseEvent2) => {\n  BaseEvent2[BaseEvent2[\"StatusCodeChanged\"] = 4] = \"StatusCodeChanged\";\n  return BaseEvent2;\n})(BaseEvent || {});\nvar SensorReg = /* @__PURE__ */ ((SensorReg2) => {\n  SensorReg2[SensorReg2[\"StreamingSamples\"] = 3] = \"StreamingSamples\";\n  SensorReg2[SensorReg2[\"StreamingInterval\"] = 4] = \"StreamingInterval\";\n  SensorReg2[SensorReg2[\"StreamingPreferredInterval\"] = 258] = \"StreamingPreferredInterval\";\n  return SensorReg2;\n})(SensorReg || {});\nvar SRV_ACCELEROMETER = 521405449;\nvar AccelerometerReg = /* @__PURE__ */ ((AccelerometerReg2) => {\n  AccelerometerReg2[AccelerometerReg2[\"Forces\"] = 257] = \"Forces\";\n  AccelerometerReg2[AccelerometerReg2[\"ForcesError\"] = 262] = \"ForcesError\";\n  AccelerometerReg2[AccelerometerReg2[\"MaxForce\"] = 8] = \"MaxForce\";\n  AccelerometerReg2[AccelerometerReg2[\"MaxForcesSupported\"] = 266] = \"MaxForcesSupported\";\n  return AccelerometerReg2;\n})(AccelerometerReg || {});\nvar AccelerometerEvent = /* @__PURE__ */ ((AccelerometerEvent2) => {\n  AccelerometerEvent2[AccelerometerEvent2[\"TiltUp\"] = 129] = \"TiltUp\";\n  AccelerometerEvent2[AccelerometerEvent2[\"TiltDown\"] = 130] = \"TiltDown\";\n  AccelerometerEvent2[AccelerometerEvent2[\"TiltLeft\"] = 131] = \"TiltLeft\";\n  AccelerometerEvent2[AccelerometerEvent2[\"TiltRight\"] = 132] = \"TiltRight\";\n  AccelerometerEvent2[AccelerometerEvent2[\"FaceUp\"] = 133] = \"FaceUp\";\n  AccelerometerEvent2[AccelerometerEvent2[\"FaceDown\"] = 134] = \"FaceDown\";\n  AccelerometerEvent2[AccelerometerEvent2[\"Freefall\"] = 135] = \"Freefall\";\n  AccelerometerEvent2[AccelerometerEvent2[\"Shake\"] = 139] = \"Shake\";\n  AccelerometerEvent2[AccelerometerEvent2[\"Force2g\"] = 140] = \"Force2g\";\n  AccelerometerEvent2[AccelerometerEvent2[\"Force3g\"] = 136] = \"Force3g\";\n  AccelerometerEvent2[AccelerometerEvent2[\"Force6g\"] = 137] = \"Force6g\";\n  AccelerometerEvent2[AccelerometerEvent2[\"Force8g\"] = 138] = \"Force8g\";\n  return AccelerometerEvent2;\n})(AccelerometerEvent || {});\nvar SRV_ARCADE_GAMEPAD = 501915758;\nvar ArcadeGamepadButton = /* @__PURE__ */ ((ArcadeGamepadButton2) => {\n  ArcadeGamepadButton2[ArcadeGamepadButton2[\"Left\"] = 1] = \"Left\";\n  ArcadeGamepadButton2[ArcadeGamepadButton2[\"Up\"] = 2] = \"Up\";\n  ArcadeGamepadButton2[ArcadeGamepadButton2[\"Right\"] = 3] = \"Right\";\n  ArcadeGamepadButton2[ArcadeGamepadButton2[\"Down\"] = 4] = \"Down\";\n  ArcadeGamepadButton2[ArcadeGamepadButton2[\"A\"] = 5] = \"A\";\n  ArcadeGamepadButton2[ArcadeGamepadButton2[\"B\"] = 6] = \"B\";\n  ArcadeGamepadButton2[ArcadeGamepadButton2[\"Menu\"] = 7] = \"Menu\";\n  ArcadeGamepadButton2[ArcadeGamepadButton2[\"Select\"] = 8] = \"Select\";\n  ArcadeGamepadButton2[ArcadeGamepadButton2[\"Reset\"] = 9] = \"Reset\";\n  ArcadeGamepadButton2[ArcadeGamepadButton2[\"Exit\"] = 10] = \"Exit\";\n  return ArcadeGamepadButton2;\n})(ArcadeGamepadButton || {});\nvar ArcadeGamepadReg = /* @__PURE__ */ ((ArcadeGamepadReg2) => {\n  ArcadeGamepadReg2[ArcadeGamepadReg2[\"Buttons\"] = 257] = \"Buttons\";\n  ArcadeGamepadReg2[ArcadeGamepadReg2[\"AvailableButtons\"] = 384] = \"AvailableButtons\";\n  return ArcadeGamepadReg2;\n})(ArcadeGamepadReg || {});\nvar ArcadeGamepadEvent = /* @__PURE__ */ ((ArcadeGamepadEvent2) => {\n  ArcadeGamepadEvent2[ArcadeGamepadEvent2[\"Down\"] = 1] = \"Down\";\n  ArcadeGamepadEvent2[ArcadeGamepadEvent2[\"Up\"] = 2] = \"Up\";\n  return ArcadeGamepadEvent2;\n})(ArcadeGamepadEvent || {});\nvar SRV_ARCADE_SOUND = 533083654;\nvar ArcadeSoundCmd = /* @__PURE__ */ ((ArcadeSoundCmd2) => {\n  ArcadeSoundCmd2[ArcadeSoundCmd2[\"Play\"] = 128] = \"Play\";\n  return ArcadeSoundCmd2;\n})(ArcadeSoundCmd || {});\nvar ArcadeSoundReg = /* @__PURE__ */ ((ArcadeSoundReg2) => {\n  ArcadeSoundReg2[ArcadeSoundReg2[\"SampleRate\"] = 128] = \"SampleRate\";\n  ArcadeSoundReg2[ArcadeSoundReg2[\"BufferSize\"] = 384] = \"BufferSize\";\n  ArcadeSoundReg2[ArcadeSoundReg2[\"BufferPending\"] = 385] = \"BufferPending\";\n  return ArcadeSoundReg2;\n})(ArcadeSoundReg || {});\nvar SRV_AZURE_IOT_HUB_HEALTH = 342028028;\nvar AzureIotHubHealthConnectionStatus = /* @__PURE__ */ ((AzureIotHubHealthConnectionStatus2) => {\n  AzureIotHubHealthConnectionStatus2[AzureIotHubHealthConnectionStatus2[\"Connected\"] = 1] = \"Connected\";\n  AzureIotHubHealthConnectionStatus2[AzureIotHubHealthConnectionStatus2[\"Disconnected\"] = 2] = \"Disconnected\";\n  AzureIotHubHealthConnectionStatus2[AzureIotHubHealthConnectionStatus2[\"Connecting\"] = 3] = \"Connecting\";\n  AzureIotHubHealthConnectionStatus2[AzureIotHubHealthConnectionStatus2[\"Disconnecting\"] = 4] = \"Disconnecting\";\n  return AzureIotHubHealthConnectionStatus2;\n})(AzureIotHubHealthConnectionStatus || {});\nvar AzureIotHubHealthReg = /* @__PURE__ */ ((AzureIotHubHealthReg2) => {\n  AzureIotHubHealthReg2[AzureIotHubHealthReg2[\"HubName\"] = 384] = \"HubName\";\n  AzureIotHubHealthReg2[AzureIotHubHealthReg2[\"HubDeviceId\"] = 385] = \"HubDeviceId\";\n  AzureIotHubHealthReg2[AzureIotHubHealthReg2[\"ConnectionStatus\"] = 386] = \"ConnectionStatus\";\n  return AzureIotHubHealthReg2;\n})(AzureIotHubHealthReg || {});\nvar AzureIotHubHealthCmd = /* @__PURE__ */ ((AzureIotHubHealthCmd2) => {\n  AzureIotHubHealthCmd2[AzureIotHubHealthCmd2[\"Connect\"] = 129] = \"Connect\";\n  AzureIotHubHealthCmd2[AzureIotHubHealthCmd2[\"Disconnect\"] = 130] = \"Disconnect\";\n  AzureIotHubHealthCmd2[AzureIotHubHealthCmd2[\"SetConnectionString\"] = 134] = \"SetConnectionString\";\n  return AzureIotHubHealthCmd2;\n})(AzureIotHubHealthCmd || {});\nvar AzureIotHubHealthEvent = /* @__PURE__ */ ((AzureIotHubHealthEvent2) => {\n  AzureIotHubHealthEvent2[AzureIotHubHealthEvent2[\"ConnectionStatusChange\"] = 3] = \"ConnectionStatusChange\";\n  AzureIotHubHealthEvent2[AzureIotHubHealthEvent2[\"MessageSent\"] = 128] = \"MessageSent\";\n  return AzureIotHubHealthEvent2;\n})(AzureIotHubHealthEvent || {});\nvar SRV_BARCODE_READER = 477339244;\nvar BarcodeReaderFormat = /* @__PURE__ */ ((BarcodeReaderFormat2) => {\n  BarcodeReaderFormat2[BarcodeReaderFormat2[\"Aztec\"] = 1] = \"Aztec\";\n  BarcodeReaderFormat2[BarcodeReaderFormat2[\"Code128\"] = 2] = \"Code128\";\n  BarcodeReaderFormat2[BarcodeReaderFormat2[\"Code39\"] = 3] = \"Code39\";\n  BarcodeReaderFormat2[BarcodeReaderFormat2[\"Code93\"] = 4] = \"Code93\";\n  BarcodeReaderFormat2[BarcodeReaderFormat2[\"Codabar\"] = 5] = \"Codabar\";\n  BarcodeReaderFormat2[BarcodeReaderFormat2[\"DataMatrix\"] = 6] = \"DataMatrix\";\n  BarcodeReaderFormat2[BarcodeReaderFormat2[\"Ean13\"] = 8] = \"Ean13\";\n  BarcodeReaderFormat2[BarcodeReaderFormat2[\"Ean8\"] = 9] = \"Ean8\";\n  BarcodeReaderFormat2[BarcodeReaderFormat2[\"ITF\"] = 10] = \"ITF\";\n  BarcodeReaderFormat2[BarcodeReaderFormat2[\"Pdf417\"] = 11] = \"Pdf417\";\n  BarcodeReaderFormat2[BarcodeReaderFormat2[\"QrCode\"] = 12] = \"QrCode\";\n  BarcodeReaderFormat2[BarcodeReaderFormat2[\"UpcA\"] = 13] = \"UpcA\";\n  BarcodeReaderFormat2[BarcodeReaderFormat2[\"UpcE\"] = 14] = \"UpcE\";\n  return BarcodeReaderFormat2;\n})(BarcodeReaderFormat || {});\nvar BarcodeReaderReg = /* @__PURE__ */ ((BarcodeReaderReg2) => {\n  BarcodeReaderReg2[BarcodeReaderReg2[\"Enabled\"] = 1] = \"Enabled\";\n  BarcodeReaderReg2[BarcodeReaderReg2[\"Formats\"] = 384] = \"Formats\";\n  return BarcodeReaderReg2;\n})(BarcodeReaderReg || {});\nvar BarcodeReaderEvent = /* @__PURE__ */ ((BarcodeReaderEvent2) => {\n  BarcodeReaderEvent2[BarcodeReaderEvent2[\"Detect\"] = 1] = \"Detect\";\n  return BarcodeReaderEvent2;\n})(BarcodeReaderEvent || {});\nvar SRV_BAROMETER = 504462570;\nvar BarometerReg = /* @__PURE__ */ ((BarometerReg2) => {\n  BarometerReg2[BarometerReg2[\"Pressure\"] = 257] = \"Pressure\";\n  BarometerReg2[BarometerReg2[\"PressureError\"] = 262] = \"PressureError\";\n  return BarometerReg2;\n})(BarometerReg || {});\nvar SRV_BIT_RADIO = 449414863;\nvar BitRadioReg = /* @__PURE__ */ ((BitRadioReg2) => {\n  BitRadioReg2[BitRadioReg2[\"Enabled\"] = 1] = \"Enabled\";\n  BitRadioReg2[BitRadioReg2[\"Group\"] = 128] = \"Group\";\n  BitRadioReg2[BitRadioReg2[\"TransmissionPower\"] = 129] = \"TransmissionPower\";\n  BitRadioReg2[BitRadioReg2[\"FrequencyBand\"] = 130] = \"FrequencyBand\";\n  return BitRadioReg2;\n})(BitRadioReg || {});\nvar BitRadioCmd = /* @__PURE__ */ ((BitRadioCmd2) => {\n  BitRadioCmd2[BitRadioCmd2[\"SendString\"] = 128] = \"SendString\";\n  BitRadioCmd2[BitRadioCmd2[\"SendNumber\"] = 129] = \"SendNumber\";\n  BitRadioCmd2[BitRadioCmd2[\"SendValue\"] = 130] = \"SendValue\";\n  BitRadioCmd2[BitRadioCmd2[\"SendBuffer\"] = 131] = \"SendBuffer\";\n  BitRadioCmd2[BitRadioCmd2[\"StringReceived\"] = 144] = \"StringReceived\";\n  BitRadioCmd2[BitRadioCmd2[\"NumberReceived\"] = 145] = \"NumberReceived\";\n  BitRadioCmd2[BitRadioCmd2[\"BufferReceived\"] = 146] = \"BufferReceived\";\n  return BitRadioCmd2;\n})(BitRadioCmd || {});\nvar SRV_BOOTLOADER = 536516936;\nvar BootloaderError = /* @__PURE__ */ ((BootloaderError2) => {\n  BootloaderError2[BootloaderError2[\"NoError\"] = 0] = \"NoError\";\n  BootloaderError2[BootloaderError2[\"PacketTooSmall\"] = 1] = \"PacketTooSmall\";\n  BootloaderError2[BootloaderError2[\"OutOfFlashableRange\"] = 2] = \"OutOfFlashableRange\";\n  BootloaderError2[BootloaderError2[\"InvalidPageOffset\"] = 3] = \"InvalidPageOffset\";\n  BootloaderError2[BootloaderError2[\"NotPageAligned\"] = 4] = \"NotPageAligned\";\n  return BootloaderError2;\n})(BootloaderError || {});\nvar BootloaderCmd = /* @__PURE__ */ ((BootloaderCmd2) => {\n  BootloaderCmd2[BootloaderCmd2[\"Info\"] = 0] = \"Info\";\n  BootloaderCmd2[BootloaderCmd2[\"SetSession\"] = 129] = \"SetSession\";\n  BootloaderCmd2[BootloaderCmd2[\"PageData\"] = 128] = \"PageData\";\n  return BootloaderCmd2;\n})(BootloaderCmd || {});\nvar SRV_BRAILLE_DISPLAY = 331331532;\nvar BrailleDisplayReg = /* @__PURE__ */ ((BrailleDisplayReg2) => {\n  BrailleDisplayReg2[BrailleDisplayReg2[\"Enabled\"] = 1] = \"Enabled\";\n  BrailleDisplayReg2[BrailleDisplayReg2[\"Patterns\"] = 2] = \"Patterns\";\n  BrailleDisplayReg2[BrailleDisplayReg2[\"Length\"] = 385] = \"Length\";\n  return BrailleDisplayReg2;\n})(BrailleDisplayReg || {});\nvar SRV_BRIDGE = 535147631;\nvar BridgeReg = /* @__PURE__ */ ((BridgeReg2) => {\n  BridgeReg2[BridgeReg2[\"Enabled\"] = 1] = \"Enabled\";\n  return BridgeReg2;\n})(BridgeReg || {});\nvar SRV_BUTTON = 343122531;\nvar ButtonReg = /* @__PURE__ */ ((ButtonReg2) => {\n  ButtonReg2[ButtonReg2[\"Pressure\"] = 257] = \"Pressure\";\n  ButtonReg2[ButtonReg2[\"Analog\"] = 384] = \"Analog\";\n  ButtonReg2[ButtonReg2[\"Pressed\"] = 385] = \"Pressed\";\n  return ButtonReg2;\n})(ButtonReg || {});\nvar ButtonEvent = /* @__PURE__ */ ((ButtonEvent2) => {\n  ButtonEvent2[ButtonEvent2[\"Down\"] = 1] = \"Down\";\n  ButtonEvent2[ButtonEvent2[\"Up\"] = 2] = \"Up\";\n  ButtonEvent2[ButtonEvent2[\"Hold\"] = 129] = \"Hold\";\n  return ButtonEvent2;\n})(ButtonEvent || {});\nvar SRV_BUZZER = 458731991;\nvar BuzzerReg = /* @__PURE__ */ ((BuzzerReg2) => {\n  BuzzerReg2[BuzzerReg2[\"Volume\"] = 1] = \"Volume\";\n  return BuzzerReg2;\n})(BuzzerReg || {});\nvar BuzzerCmd = /* @__PURE__ */ ((BuzzerCmd2) => {\n  BuzzerCmd2[BuzzerCmd2[\"PlayTone\"] = 128] = \"PlayTone\";\n  BuzzerCmd2[BuzzerCmd2[\"PlayNote\"] = 129] = \"PlayNote\";\n  return BuzzerCmd2;\n})(BuzzerCmd || {});\nvar SRV_CAPACITIVE_BUTTON = 677752265;\nvar CapacitiveButtonReg = /* @__PURE__ */ ((CapacitiveButtonReg2) => {\n  CapacitiveButtonReg2[CapacitiveButtonReg2[\"Threshold\"] = 6] = \"Threshold\";\n  return CapacitiveButtonReg2;\n})(CapacitiveButtonReg || {});\nvar CapacitiveButtonCmd = /* @__PURE__ */ ((CapacitiveButtonCmd2) => {\n  CapacitiveButtonCmd2[CapacitiveButtonCmd2[\"Calibrate\"] = 2] = \"Calibrate\";\n  return CapacitiveButtonCmd2;\n})(CapacitiveButtonCmd || {});\nvar SRV_CHARACTER_SCREEN = 523748714;\nvar CharacterScreenVariant = /* @__PURE__ */ ((CharacterScreenVariant2) => {\n  CharacterScreenVariant2[CharacterScreenVariant2[\"LCD\"] = 1] = \"LCD\";\n  CharacterScreenVariant2[CharacterScreenVariant2[\"OLED\"] = 2] = \"OLED\";\n  CharacterScreenVariant2[CharacterScreenVariant2[\"Braille\"] = 3] = \"Braille\";\n  return CharacterScreenVariant2;\n})(CharacterScreenVariant || {});\nvar CharacterScreenTextDirection = /* @__PURE__ */ ((CharacterScreenTextDirection2) => {\n  CharacterScreenTextDirection2[CharacterScreenTextDirection2[\"LeftToRight\"] = 1] = \"LeftToRight\";\n  CharacterScreenTextDirection2[CharacterScreenTextDirection2[\"RightToLeft\"] = 2] = \"RightToLeft\";\n  return CharacterScreenTextDirection2;\n})(CharacterScreenTextDirection || {});\nvar CharacterScreenReg = /* @__PURE__ */ ((CharacterScreenReg2) => {\n  CharacterScreenReg2[CharacterScreenReg2[\"Message\"] = 2] = \"Message\";\n  CharacterScreenReg2[CharacterScreenReg2[\"Brightness\"] = 1] = \"Brightness\";\n  CharacterScreenReg2[CharacterScreenReg2[\"Variant\"] = 263] = \"Variant\";\n  CharacterScreenReg2[CharacterScreenReg2[\"TextDirection\"] = 130] = \"TextDirection\";\n  CharacterScreenReg2[CharacterScreenReg2[\"Rows\"] = 384] = \"Rows\";\n  CharacterScreenReg2[CharacterScreenReg2[\"Columns\"] = 385] = \"Columns\";\n  return CharacterScreenReg2;\n})(CharacterScreenReg || {});\nvar SRV_CODAL_MESSAGE_BUS = 304085021;\nvar CodalMessageBusCmd = /* @__PURE__ */ ((CodalMessageBusCmd2) => {\n  CodalMessageBusCmd2[CodalMessageBusCmd2[\"Send\"] = 128] = \"Send\";\n  return CodalMessageBusCmd2;\n})(CodalMessageBusCmd || {});\nvar CodalMessageBusEvent = /* @__PURE__ */ ((CodalMessageBusEvent2) => {\n  CodalMessageBusEvent2[CodalMessageBusEvent2[\"Message\"] = 128] = \"Message\";\n  return CodalMessageBusEvent2;\n})(CodalMessageBusEvent || {});\nvar SRV_COLOR = 372299111;\nvar ColorReg = /* @__PURE__ */ ((ColorReg2) => {\n  ColorReg2[ColorReg2[\"Color\"] = 257] = \"Color\";\n  return ColorReg2;\n})(ColorReg || {});\nvar SRV_COMPASS = 364362175;\nvar CompassReg = /* @__PURE__ */ ((CompassReg2) => {\n  CompassReg2[CompassReg2[\"Heading\"] = 257] = \"Heading\";\n  CompassReg2[CompassReg2[\"Enabled\"] = 1] = \"Enabled\";\n  CompassReg2[CompassReg2[\"HeadingError\"] = 262] = \"HeadingError\";\n  return CompassReg2;\n})(CompassReg || {});\nvar CompassCmd = /* @__PURE__ */ ((CompassCmd2) => {\n  CompassCmd2[CompassCmd2[\"Calibrate\"] = 2] = \"Calibrate\";\n  return CompassCmd2;\n})(CompassCmd || {});\nvar SRV_CONTROL = 0;\nvar ControlAnnounceFlags = /* @__PURE__ */ ((ControlAnnounceFlags2) => {\n  ControlAnnounceFlags2[ControlAnnounceFlags2[\"RestartCounterSteady\"] = 15] = \"RestartCounterSteady\";\n  ControlAnnounceFlags2[ControlAnnounceFlags2[\"RestartCounter1\"] = 1] = \"RestartCounter1\";\n  ControlAnnounceFlags2[ControlAnnounceFlags2[\"RestartCounter2\"] = 2] = \"RestartCounter2\";\n  ControlAnnounceFlags2[ControlAnnounceFlags2[\"RestartCounter4\"] = 4] = \"RestartCounter4\";\n  ControlAnnounceFlags2[ControlAnnounceFlags2[\"RestartCounter8\"] = 8] = \"RestartCounter8\";\n  ControlAnnounceFlags2[ControlAnnounceFlags2[\"StatusLightNone\"] = 0] = \"StatusLightNone\";\n  ControlAnnounceFlags2[ControlAnnounceFlags2[\"StatusLightMono\"] = 16] = \"StatusLightMono\";\n  ControlAnnounceFlags2[ControlAnnounceFlags2[\"StatusLightRgbNoFade\"] = 32] = \"StatusLightRgbNoFade\";\n  ControlAnnounceFlags2[ControlAnnounceFlags2[\"StatusLightRgbFade\"] = 48] = \"StatusLightRgbFade\";\n  ControlAnnounceFlags2[ControlAnnounceFlags2[\"SupportsACK\"] = 256] = \"SupportsACK\";\n  ControlAnnounceFlags2[ControlAnnounceFlags2[\"SupportsBroadcast\"] = 512] = \"SupportsBroadcast\";\n  ControlAnnounceFlags2[ControlAnnounceFlags2[\"SupportsFrames\"] = 1024] = \"SupportsFrames\";\n  ControlAnnounceFlags2[ControlAnnounceFlags2[\"IsClient\"] = 2048] = \"IsClient\";\n  ControlAnnounceFlags2[ControlAnnounceFlags2[\"SupportsReliableCommands\"] = 4096] = \"SupportsReliableCommands\";\n  return ControlAnnounceFlags2;\n})(ControlAnnounceFlags || {});\nvar ControlCmd = /* @__PURE__ */ ((ControlCmd2) => {\n  ControlCmd2[ControlCmd2[\"Services\"] = 0] = \"Services\";\n  ControlCmd2[ControlCmd2[\"Noop\"] = 128] = \"Noop\";\n  ControlCmd2[ControlCmd2[\"Identify\"] = 129] = \"Identify\";\n  ControlCmd2[ControlCmd2[\"Reset\"] = 130] = \"Reset\";\n  ControlCmd2[ControlCmd2[\"FloodPing\"] = 131] = \"FloodPing\";\n  ControlCmd2[ControlCmd2[\"SetStatusLight\"] = 132] = \"SetStatusLight\";\n  ControlCmd2[ControlCmd2[\"Proxy\"] = 133] = \"Proxy\";\n  ControlCmd2[ControlCmd2[\"ReliableCommands\"] = 134] = \"ReliableCommands\";\n  return ControlCmd2;\n})(ControlCmd || {});\nvar ControlReg = /* @__PURE__ */ ((ControlReg2) => {\n  ControlReg2[ControlReg2[\"ResetIn\"] = 128] = \"ResetIn\";\n  ControlReg2[ControlReg2[\"DeviceDescription\"] = 384] = \"DeviceDescription\";\n  ControlReg2[ControlReg2[\"ProductIdentifier\"] = 385] = \"ProductIdentifier\";\n  ControlReg2[ControlReg2[\"BootloaderProductIdentifier\"] = 388] = \"BootloaderProductIdentifier\";\n  ControlReg2[ControlReg2[\"FirmwareVersion\"] = 389] = \"FirmwareVersion\";\n  ControlReg2[ControlReg2[\"McuTemperature\"] = 386] = \"McuTemperature\";\n  ControlReg2[ControlReg2[\"Uptime\"] = 390] = \"Uptime\";\n  return ControlReg2;\n})(ControlReg || {});\nvar SRV_CURRENT_MEASUREMENT = 420661422;\nvar CurrentMeasurementReg = /* @__PURE__ */ ((CurrentMeasurementReg2) => {\n  CurrentMeasurementReg2[CurrentMeasurementReg2[\"MeasurementName\"] = 386] = \"MeasurementName\";\n  CurrentMeasurementReg2[CurrentMeasurementReg2[\"Measurement\"] = 257] = \"Measurement\";\n  return CurrentMeasurementReg2;\n})(CurrentMeasurementReg || {});\nvar SRV_DASHBOARD = 468029703;\nvar SRV_DISTANCE = 337275786;\nvar DistanceVariant = /* @__PURE__ */ ((DistanceVariant2) => {\n  DistanceVariant2[DistanceVariant2[\"Ultrasonic\"] = 1] = \"Ultrasonic\";\n  DistanceVariant2[DistanceVariant2[\"Infrared\"] = 2] = \"Infrared\";\n  DistanceVariant2[DistanceVariant2[\"LiDAR\"] = 3] = \"LiDAR\";\n  DistanceVariant2[DistanceVariant2[\"Laser\"] = 4] = \"Laser\";\n  return DistanceVariant2;\n})(DistanceVariant || {});\nvar DistanceReg = /* @__PURE__ */ ((DistanceReg2) => {\n  DistanceReg2[DistanceReg2[\"Distance\"] = 257] = \"Distance\";\n  DistanceReg2[DistanceReg2[\"DistanceError\"] = 262] = \"DistanceError\";\n  DistanceReg2[DistanceReg2[\"MinRange\"] = 260] = \"MinRange\";\n  DistanceReg2[DistanceReg2[\"MaxRange\"] = 261] = \"MaxRange\";\n  DistanceReg2[DistanceReg2[\"Variant\"] = 263] = \"Variant\";\n  return DistanceReg2;\n})(DistanceReg || {});\nvar SRV_DMX = 298814469;\nvar DmxReg = /* @__PURE__ */ ((DmxReg2) => {\n  DmxReg2[DmxReg2[\"Enabled\"] = 1] = \"Enabled\";\n  return DmxReg2;\n})(DmxReg || {});\nvar DmxCmd = /* @__PURE__ */ ((DmxCmd2) => {\n  DmxCmd2[DmxCmd2[\"Send\"] = 128] = \"Send\";\n  return DmxCmd2;\n})(DmxCmd || {});\nvar SRV_DOT_MATRIX = 286070091;\nvar DotMatrixVariant = /* @__PURE__ */ ((DotMatrixVariant2) => {\n  DotMatrixVariant2[DotMatrixVariant2[\"LED\"] = 1] = \"LED\";\n  DotMatrixVariant2[DotMatrixVariant2[\"Braille\"] = 2] = \"Braille\";\n  return DotMatrixVariant2;\n})(DotMatrixVariant || {});\nvar DotMatrixReg = /* @__PURE__ */ ((DotMatrixReg2) => {\n  DotMatrixReg2[DotMatrixReg2[\"Dots\"] = 2] = \"Dots\";\n  DotMatrixReg2[DotMatrixReg2[\"Brightness\"] = 1] = \"Brightness\";\n  DotMatrixReg2[DotMatrixReg2[\"Rows\"] = 385] = \"Rows\";\n  DotMatrixReg2[DotMatrixReg2[\"Columns\"] = 386] = \"Columns\";\n  DotMatrixReg2[DotMatrixReg2[\"Variant\"] = 263] = \"Variant\";\n  return DotMatrixReg2;\n})(DotMatrixReg || {});\nvar SRV_E_CO2 = 379362758;\nvar ECO2Variant = /* @__PURE__ */ ((ECO2Variant2) => {\n  ECO2Variant2[ECO2Variant2[\"VOC\"] = 1] = \"VOC\";\n  ECO2Variant2[ECO2Variant2[\"NDIR\"] = 2] = \"NDIR\";\n  return ECO2Variant2;\n})(ECO2Variant || {});\nvar ECO2Reg = /* @__PURE__ */ ((ECO2Reg2) => {\n  ECO2Reg2[ECO2Reg2[\"ECO2\"] = 257] = \"ECO2\";\n  ECO2Reg2[ECO2Reg2[\"ECO2Error\"] = 262] = \"ECO2Error\";\n  ECO2Reg2[ECO2Reg2[\"MinECO2\"] = 260] = \"MinECO2\";\n  ECO2Reg2[ECO2Reg2[\"MaxECO2\"] = 261] = \"MaxECO2\";\n  ECO2Reg2[ECO2Reg2[\"Variant\"] = 263] = \"Variant\";\n  return ECO2Reg2;\n})(ECO2Reg || {});\nvar SRV_FLEX = 524797638;\nvar FlexReg = /* @__PURE__ */ ((FlexReg2) => {\n  FlexReg2[FlexReg2[\"Bending\"] = 257] = \"Bending\";\n  FlexReg2[FlexReg2[\"Length\"] = 384] = \"Length\";\n  return FlexReg2;\n})(FlexReg || {});\nvar SRV_GAMEPAD = 277836886;\nvar GamepadButtons = /* @__PURE__ */ ((GamepadButtons2) => {\n  GamepadButtons2[GamepadButtons2[\"Left\"] = 1] = \"Left\";\n  GamepadButtons2[GamepadButtons2[\"Up\"] = 2] = \"Up\";\n  GamepadButtons2[GamepadButtons2[\"Right\"] = 4] = \"Right\";\n  GamepadButtons2[GamepadButtons2[\"Down\"] = 8] = \"Down\";\n  GamepadButtons2[GamepadButtons2[\"A\"] = 16] = \"A\";\n  GamepadButtons2[GamepadButtons2[\"B\"] = 32] = \"B\";\n  GamepadButtons2[GamepadButtons2[\"Menu\"] = 64] = \"Menu\";\n  GamepadButtons2[GamepadButtons2[\"Select\"] = 128] = \"Select\";\n  GamepadButtons2[GamepadButtons2[\"Reset\"] = 256] = \"Reset\";\n  GamepadButtons2[GamepadButtons2[\"Exit\"] = 512] = \"Exit\";\n  GamepadButtons2[GamepadButtons2[\"X\"] = 1024] = \"X\";\n  GamepadButtons2[GamepadButtons2[\"Y\"] = 2048] = \"Y\";\n  return GamepadButtons2;\n})(GamepadButtons || {});\nvar GamepadVariant = /* @__PURE__ */ ((GamepadVariant2) => {\n  GamepadVariant2[GamepadVariant2[\"Thumb\"] = 1] = \"Thumb\";\n  GamepadVariant2[GamepadVariant2[\"ArcadeBall\"] = 2] = \"ArcadeBall\";\n  GamepadVariant2[GamepadVariant2[\"ArcadeStick\"] = 3] = \"ArcadeStick\";\n  GamepadVariant2[GamepadVariant2[\"Gamepad\"] = 4] = \"Gamepad\";\n  return GamepadVariant2;\n})(GamepadVariant || {});\nvar GamepadReg = /* @__PURE__ */ ((GamepadReg2) => {\n  GamepadReg2[GamepadReg2[\"Direction\"] = 257] = \"Direction\";\n  GamepadReg2[GamepadReg2[\"Variant\"] = 263] = \"Variant\";\n  GamepadReg2[GamepadReg2[\"ButtonsAvailable\"] = 384] = \"ButtonsAvailable\";\n  return GamepadReg2;\n})(GamepadReg || {});\nvar GamepadEvent = /* @__PURE__ */ ((GamepadEvent2) => {\n  GamepadEvent2[GamepadEvent2[\"ButtonsChanged\"] = 3] = \"ButtonsChanged\";\n  return GamepadEvent2;\n})(GamepadEvent || {});\nvar SRV_GYROSCOPE = 505087730;\nvar GyroscopeReg = /* @__PURE__ */ ((GyroscopeReg2) => {\n  GyroscopeReg2[GyroscopeReg2[\"RotationRates\"] = 257] = \"RotationRates\";\n  GyroscopeReg2[GyroscopeReg2[\"RotationRatesError\"] = 262] = \"RotationRatesError\";\n  GyroscopeReg2[GyroscopeReg2[\"MaxRate\"] = 8] = \"MaxRate\";\n  GyroscopeReg2[GyroscopeReg2[\"MaxRatesSupported\"] = 266] = \"MaxRatesSupported\";\n  return GyroscopeReg2;\n})(GyroscopeReg || {});\nvar SRV_HEART_RATE = 376204740;\nvar HeartRateVariant = /* @__PURE__ */ ((HeartRateVariant2) => {\n  HeartRateVariant2[HeartRateVariant2[\"Finger\"] = 1] = \"Finger\";\n  HeartRateVariant2[HeartRateVariant2[\"Chest\"] = 2] = \"Chest\";\n  HeartRateVariant2[HeartRateVariant2[\"Wrist\"] = 3] = \"Wrist\";\n  HeartRateVariant2[HeartRateVariant2[\"Pump\"] = 4] = \"Pump\";\n  HeartRateVariant2[HeartRateVariant2[\"WebCam\"] = 5] = \"WebCam\";\n  return HeartRateVariant2;\n})(HeartRateVariant || {});\nvar HeartRateReg = /* @__PURE__ */ ((HeartRateReg2) => {\n  HeartRateReg2[HeartRateReg2[\"HeartRate\"] = 257] = \"HeartRate\";\n  HeartRateReg2[HeartRateReg2[\"HeartRateError\"] = 262] = \"HeartRateError\";\n  HeartRateReg2[HeartRateReg2[\"Variant\"] = 263] = \"Variant\";\n  return HeartRateReg2;\n})(HeartRateReg || {});\nvar SRV_HID_KEYBOARD = 414210922;\nvar HidKeyboardModifiers = /* @__PURE__ */ ((HidKeyboardModifiers2) => {\n  HidKeyboardModifiers2[HidKeyboardModifiers2[\"None\"] = 0] = \"None\";\n  HidKeyboardModifiers2[HidKeyboardModifiers2[\"LeftControl\"] = 1] = \"LeftControl\";\n  HidKeyboardModifiers2[HidKeyboardModifiers2[\"LeftShift\"] = 2] = \"LeftShift\";\n  HidKeyboardModifiers2[HidKeyboardModifiers2[\"LeftAlt\"] = 4] = \"LeftAlt\";\n  HidKeyboardModifiers2[HidKeyboardModifiers2[\"LeftGUI\"] = 8] = \"LeftGUI\";\n  HidKeyboardModifiers2[HidKeyboardModifiers2[\"RightControl\"] = 16] = \"RightControl\";\n  HidKeyboardModifiers2[HidKeyboardModifiers2[\"RightShift\"] = 32] = \"RightShift\";\n  HidKeyboardModifiers2[HidKeyboardModifiers2[\"RightAlt\"] = 64] = \"RightAlt\";\n  HidKeyboardModifiers2[HidKeyboardModifiers2[\"RightGUI\"] = 128] = \"RightGUI\";\n  return HidKeyboardModifiers2;\n})(HidKeyboardModifiers || {});\nvar HidKeyboardAction = /* @__PURE__ */ ((HidKeyboardAction3) => {\n  HidKeyboardAction3[HidKeyboardAction3[\"Press\"] = 0] = \"Press\";\n  HidKeyboardAction3[HidKeyboardAction3[\"Up\"] = 1] = \"Up\";\n  HidKeyboardAction3[HidKeyboardAction3[\"Down\"] = 2] = \"Down\";\n  return HidKeyboardAction3;\n})(HidKeyboardAction || {});\nvar HidKeyboardCmd = /* @__PURE__ */ ((HidKeyboardCmd2) => {\n  HidKeyboardCmd2[HidKeyboardCmd2[\"Key\"] = 128] = \"Key\";\n  HidKeyboardCmd2[HidKeyboardCmd2[\"Clear\"] = 129] = \"Clear\";\n  return HidKeyboardCmd2;\n})(HidKeyboardCmd || {});\nvar SRV_HID_MOUSE = 411425820;\nvar HidMouseButton = /* @__PURE__ */ ((HidMouseButton2) => {\n  HidMouseButton2[HidMouseButton2[\"Left\"] = 1] = \"Left\";\n  HidMouseButton2[HidMouseButton2[\"Right\"] = 2] = \"Right\";\n  HidMouseButton2[HidMouseButton2[\"Middle\"] = 4] = \"Middle\";\n  return HidMouseButton2;\n})(HidMouseButton || {});\nvar HidMouseButtonEvent = /* @__PURE__ */ ((HidMouseButtonEvent2) => {\n  HidMouseButtonEvent2[HidMouseButtonEvent2[\"Up\"] = 1] = \"Up\";\n  HidMouseButtonEvent2[HidMouseButtonEvent2[\"Down\"] = 2] = \"Down\";\n  HidMouseButtonEvent2[HidMouseButtonEvent2[\"Click\"] = 3] = \"Click\";\n  HidMouseButtonEvent2[HidMouseButtonEvent2[\"DoubleClick\"] = 4] = \"DoubleClick\";\n  return HidMouseButtonEvent2;\n})(HidMouseButtonEvent || {});\nvar HidMouseCmd = /* @__PURE__ */ ((HidMouseCmd2) => {\n  HidMouseCmd2[HidMouseCmd2[\"SetButton\"] = 128] = \"SetButton\";\n  HidMouseCmd2[HidMouseCmd2[\"Move\"] = 129] = \"Move\";\n  HidMouseCmd2[HidMouseCmd2[\"Wheel\"] = 130] = \"Wheel\";\n  return HidMouseCmd2;\n})(HidMouseCmd || {});\nvar SRV_HUMIDITY = 382210232;\nvar HumidityReg = /* @__PURE__ */ ((HumidityReg2) => {\n  HumidityReg2[HumidityReg2[\"Humidity\"] = 257] = \"Humidity\";\n  HumidityReg2[HumidityReg2[\"HumidityError\"] = 262] = \"HumidityError\";\n  HumidityReg2[HumidityReg2[\"MinHumidity\"] = 260] = \"MinHumidity\";\n  HumidityReg2[HumidityReg2[\"MaxHumidity\"] = 261] = \"MaxHumidity\";\n  return HumidityReg2;\n})(HumidityReg || {});\nvar SRV_ILLUMINANCE = 510577394;\nvar IlluminanceReg = /* @__PURE__ */ ((IlluminanceReg2) => {\n  IlluminanceReg2[IlluminanceReg2[\"Illuminance\"] = 257] = \"Illuminance\";\n  IlluminanceReg2[IlluminanceReg2[\"IlluminanceError\"] = 262] = \"IlluminanceError\";\n  return IlluminanceReg2;\n})(IlluminanceReg || {});\nvar SRV_INDEXED_SCREEN = 385496805;\nvar IndexedScreenCmd = /* @__PURE__ */ ((IndexedScreenCmd2) => {\n  IndexedScreenCmd2[IndexedScreenCmd2[\"StartUpdate\"] = 129] = \"StartUpdate\";\n  IndexedScreenCmd2[IndexedScreenCmd2[\"SetPixels\"] = 131] = \"SetPixels\";\n  return IndexedScreenCmd2;\n})(IndexedScreenCmd || {});\nvar IndexedScreenReg = /* @__PURE__ */ ((IndexedScreenReg2) => {\n  IndexedScreenReg2[IndexedScreenReg2[\"Brightness\"] = 1] = \"Brightness\";\n  IndexedScreenReg2[IndexedScreenReg2[\"Palette\"] = 128] = \"Palette\";\n  IndexedScreenReg2[IndexedScreenReg2[\"BitsPerPixel\"] = 384] = \"BitsPerPixel\";\n  IndexedScreenReg2[IndexedScreenReg2[\"Width\"] = 385] = \"Width\";\n  IndexedScreenReg2[IndexedScreenReg2[\"Height\"] = 386] = \"Height\";\n  IndexedScreenReg2[IndexedScreenReg2[\"WidthMajor\"] = 129] = \"WidthMajor\";\n  IndexedScreenReg2[IndexedScreenReg2[\"UpSampling\"] = 130] = \"UpSampling\";\n  IndexedScreenReg2[IndexedScreenReg2[\"Rotation\"] = 131] = \"Rotation\";\n  return IndexedScreenReg2;\n})(IndexedScreenReg || {});\nvar SRV_INFRASTRUCTURE = 504728043;\nvar SRV_JACSCRIPT_CLOUD = 341864092;\nvar JacscriptCloudCommandStatus = /* @__PURE__ */ ((JacscriptCloudCommandStatus2) => {\n  JacscriptCloudCommandStatus2[JacscriptCloudCommandStatus2[\"OK\"] = 200] = \"OK\";\n  JacscriptCloudCommandStatus2[JacscriptCloudCommandStatus2[\"NotFound\"] = 404] = \"NotFound\";\n  JacscriptCloudCommandStatus2[JacscriptCloudCommandStatus2[\"Busy\"] = 429] = \"Busy\";\n  return JacscriptCloudCommandStatus2;\n})(JacscriptCloudCommandStatus || {});\nvar JacscriptCloudCmd = /* @__PURE__ */ ((JacscriptCloudCmd2) => {\n  JacscriptCloudCmd2[JacscriptCloudCmd2[\"Upload\"] = 128] = \"Upload\";\n  JacscriptCloudCmd2[JacscriptCloudCmd2[\"GetTwin\"] = 129] = \"GetTwin\";\n  JacscriptCloudCmd2[JacscriptCloudCmd2[\"AckCloudCommand\"] = 131] = \"AckCloudCommand\";\n  return JacscriptCloudCmd2;\n})(JacscriptCloudCmd || {});\nvar JacscriptCloudReg = /* @__PURE__ */ ((JacscriptCloudReg2) => {\n  JacscriptCloudReg2[JacscriptCloudReg2[\"Connected\"] = 384] = \"Connected\";\n  return JacscriptCloudReg2;\n})(JacscriptCloudReg || {});\nvar JacscriptCloudEvent = /* @__PURE__ */ ((JacscriptCloudEvent2) => {\n  JacscriptCloudEvent2[JacscriptCloudEvent2[\"CloudCommand\"] = 129] = \"CloudCommand\";\n  JacscriptCloudEvent2[JacscriptCloudEvent2[\"TwinChange\"] = 3] = \"TwinChange\";\n  return JacscriptCloudEvent2;\n})(JacscriptCloudEvent || {});\nvar SRV_JACSCRIPT_CONDITION = 295074157;\nvar JacscriptConditionCmd = /* @__PURE__ */ ((JacscriptConditionCmd2) => {\n  JacscriptConditionCmd2[JacscriptConditionCmd2[\"Signal\"] = 128] = \"Signal\";\n  return JacscriptConditionCmd2;\n})(JacscriptConditionCmd || {});\nvar JacscriptConditionEvent = /* @__PURE__ */ ((JacscriptConditionEvent2) => {\n  JacscriptConditionEvent2[JacscriptConditionEvent2[\"Signalled\"] = 3] = \"Signalled\";\n  return JacscriptConditionEvent2;\n})(JacscriptConditionEvent || {});\nvar SRV_JACSCRIPT_MANAGER = 288680491;\nvar JacscriptManagerMessageFlags = /* @__PURE__ */ ((JacscriptManagerMessageFlags2) => {\n  JacscriptManagerMessageFlags2[JacscriptManagerMessageFlags2[\"ToBeContinued\"] = 1] = \"ToBeContinued\";\n  return JacscriptManagerMessageFlags2;\n})(JacscriptManagerMessageFlags || {});\nvar JacscriptManagerCmd = /* @__PURE__ */ ((JacscriptManagerCmd2) => {\n  JacscriptManagerCmd2[JacscriptManagerCmd2[\"DeployBytecode\"] = 128] = \"DeployBytecode\";\n  JacscriptManagerCmd2[JacscriptManagerCmd2[\"ReadBytecode\"] = 129] = \"ReadBytecode\";\n  JacscriptManagerCmd2[JacscriptManagerCmd2[\"LogMessage\"] = 130] = \"LogMessage\";\n  return JacscriptManagerCmd2;\n})(JacscriptManagerCmd || {});\nvar JacscriptManagerReg = /* @__PURE__ */ ((JacscriptManagerReg2) => {\n  JacscriptManagerReg2[JacscriptManagerReg2[\"Running\"] = 128] = \"Running\";\n  JacscriptManagerReg2[JacscriptManagerReg2[\"Autostart\"] = 129] = \"Autostart\";\n  JacscriptManagerReg2[JacscriptManagerReg2[\"Logging\"] = 130] = \"Logging\";\n  JacscriptManagerReg2[JacscriptManagerReg2[\"ProgramSize\"] = 384] = \"ProgramSize\";\n  JacscriptManagerReg2[JacscriptManagerReg2[\"ProgramHash\"] = 385] = \"ProgramHash\";\n  return JacscriptManagerReg2;\n})(JacscriptManagerReg || {});\nvar JacscriptManagerEvent = /* @__PURE__ */ ((JacscriptManagerEvent2) => {\n  JacscriptManagerEvent2[JacscriptManagerEvent2[\"ProgramPanic\"] = 128] = \"ProgramPanic\";\n  JacscriptManagerEvent2[JacscriptManagerEvent2[\"ProgramChange\"] = 3] = \"ProgramChange\";\n  return JacscriptManagerEvent2;\n})(JacscriptManagerEvent || {});\nvar SRV_LED = 506480888;\nvar LedVariant = /* @__PURE__ */ ((LedVariant2) => {\n  LedVariant2[LedVariant2[\"ThroughHole\"] = 1] = \"ThroughHole\";\n  LedVariant2[LedVariant2[\"SMD\"] = 2] = \"SMD\";\n  LedVariant2[LedVariant2[\"Power\"] = 3] = \"Power\";\n  LedVariant2[LedVariant2[\"Bead\"] = 4] = \"Bead\";\n  return LedVariant2;\n})(LedVariant || {});\nvar LedCmd = /* @__PURE__ */ ((LedCmd2) => {\n  LedCmd2[LedCmd2[\"Animate\"] = 128] = \"Animate\";\n  return LedCmd2;\n})(LedCmd || {});\nvar LedReg = /* @__PURE__ */ ((LedReg2) => {\n  LedReg2[LedReg2[\"Color\"] = 384] = \"Color\";\n  LedReg2[LedReg2[\"MaxPower\"] = 7] = \"MaxPower\";\n  LedReg2[LedReg2[\"LedCount\"] = 387] = \"LedCount\";\n  LedReg2[LedReg2[\"WaveLength\"] = 385] = \"WaveLength\";\n  LedReg2[LedReg2[\"LuminousIntensity\"] = 386] = \"LuminousIntensity\";\n  LedReg2[LedReg2[\"Variant\"] = 263] = \"Variant\";\n  return LedReg2;\n})(LedReg || {});\nvar SRV_LED_DISPLAY = 369743088;\nvar MAX_PIXELS_LENGTH = 64;\nvar LedDisplayLightType = /* @__PURE__ */ ((LedDisplayLightType2) => {\n  LedDisplayLightType2[LedDisplayLightType2[\"WS2812B_GRB\"] = 0] = \"WS2812B_GRB\";\n  LedDisplayLightType2[LedDisplayLightType2[\"APA102\"] = 16] = \"APA102\";\n  LedDisplayLightType2[LedDisplayLightType2[\"SK9822\"] = 17] = \"SK9822\";\n  return LedDisplayLightType2;\n})(LedDisplayLightType || {});\nvar LedDisplayVariant = /* @__PURE__ */ ((LedDisplayVariant2) => {\n  LedDisplayVariant2[LedDisplayVariant2[\"Strip\"] = 1] = \"Strip\";\n  LedDisplayVariant2[LedDisplayVariant2[\"Ring\"] = 2] = \"Ring\";\n  LedDisplayVariant2[LedDisplayVariant2[\"Stick\"] = 3] = \"Stick\";\n  LedDisplayVariant2[LedDisplayVariant2[\"Jewel\"] = 4] = \"Jewel\";\n  LedDisplayVariant2[LedDisplayVariant2[\"Matrix\"] = 5] = \"Matrix\";\n  return LedDisplayVariant2;\n})(LedDisplayVariant || {});\nvar LedDisplayReg = /* @__PURE__ */ ((LedDisplayReg2) => {\n  LedDisplayReg2[LedDisplayReg2[\"Pixels\"] = 2] = \"Pixels\";\n  LedDisplayReg2[LedDisplayReg2[\"Brightness\"] = 1] = \"Brightness\";\n  LedDisplayReg2[LedDisplayReg2[\"ActualBrightness\"] = 384] = \"ActualBrightness\";\n  LedDisplayReg2[LedDisplayReg2[\"LightType\"] = 385] = \"LightType\";\n  LedDisplayReg2[LedDisplayReg2[\"NumPixels\"] = 386] = \"NumPixels\";\n  LedDisplayReg2[LedDisplayReg2[\"NumColumns\"] = 387] = \"NumColumns\";\n  LedDisplayReg2[LedDisplayReg2[\"MaxPower\"] = 7] = \"MaxPower\";\n  LedDisplayReg2[LedDisplayReg2[\"Variant\"] = 263] = \"Variant\";\n  return LedDisplayReg2;\n})(LedDisplayReg || {});\nvar SRV_LED_STRIP = 309264608;\nvar LedStripLightType = /* @__PURE__ */ ((LedStripLightType2) => {\n  LedStripLightType2[LedStripLightType2[\"WS2812B_GRB\"] = 0] = \"WS2812B_GRB\";\n  LedStripLightType2[LedStripLightType2[\"APA102\"] = 16] = \"APA102\";\n  LedStripLightType2[LedStripLightType2[\"SK9822\"] = 17] = \"SK9822\";\n  return LedStripLightType2;\n})(LedStripLightType || {});\nvar LedStripVariant = /* @__PURE__ */ ((LedStripVariant3) => {\n  LedStripVariant3[LedStripVariant3[\"Strip\"] = 1] = \"Strip\";\n  LedStripVariant3[LedStripVariant3[\"Ring\"] = 2] = \"Ring\";\n  LedStripVariant3[LedStripVariant3[\"Stick\"] = 3] = \"Stick\";\n  LedStripVariant3[LedStripVariant3[\"Jewel\"] = 4] = \"Jewel\";\n  LedStripVariant3[LedStripVariant3[\"Matrix\"] = 5] = \"Matrix\";\n  return LedStripVariant3;\n})(LedStripVariant || {});\nvar LedStripReg = /* @__PURE__ */ ((LedStripReg2) => {\n  LedStripReg2[LedStripReg2[\"Brightness\"] = 1] = \"Brightness\";\n  LedStripReg2[LedStripReg2[\"ActualBrightness\"] = 384] = \"ActualBrightness\";\n  LedStripReg2[LedStripReg2[\"LightType\"] = 128] = \"LightType\";\n  LedStripReg2[LedStripReg2[\"NumPixels\"] = 129] = \"NumPixels\";\n  LedStripReg2[LedStripReg2[\"NumColumns\"] = 131] = \"NumColumns\";\n  LedStripReg2[LedStripReg2[\"MaxPower\"] = 7] = \"MaxPower\";\n  LedStripReg2[LedStripReg2[\"MaxPixels\"] = 385] = \"MaxPixels\";\n  LedStripReg2[LedStripReg2[\"NumRepeats\"] = 130] = \"NumRepeats\";\n  LedStripReg2[LedStripReg2[\"Variant\"] = 263] = \"Variant\";\n  return LedStripReg2;\n})(LedStripReg || {});\nvar LedStripCmd = /* @__PURE__ */ ((LedStripCmd2) => {\n  LedStripCmd2[LedStripCmd2[\"Run\"] = 129] = \"Run\";\n  return LedStripCmd2;\n})(LedStripCmd || {});\nvar SRV_LIGHT_BULB = 480970060;\nvar LightBulbReg = /* @__PURE__ */ ((LightBulbReg2) => {\n  LightBulbReg2[LightBulbReg2[\"Brightness\"] = 1] = \"Brightness\";\n  LightBulbReg2[LightBulbReg2[\"Dimmable\"] = 384] = \"Dimmable\";\n  return LightBulbReg2;\n})(LightBulbReg || {});\nvar SRV_LIGHT_LEVEL = 400333340;\nvar LightLevelVariant = /* @__PURE__ */ ((LightLevelVariant2) => {\n  LightLevelVariant2[LightLevelVariant2[\"PhotoResistor\"] = 1] = \"PhotoResistor\";\n  LightLevelVariant2[LightLevelVariant2[\"ReverseBiasedLED\"] = 2] = \"ReverseBiasedLED\";\n  return LightLevelVariant2;\n})(LightLevelVariant || {});\nvar LightLevelReg = /* @__PURE__ */ ((LightLevelReg2) => {\n  LightLevelReg2[LightLevelReg2[\"LightLevel\"] = 257] = \"LightLevel\";\n  LightLevelReg2[LightLevelReg2[\"LightLevelError\"] = 262] = \"LightLevelError\";\n  LightLevelReg2[LightLevelReg2[\"Variant\"] = 263] = \"Variant\";\n  return LightLevelReg2;\n})(LightLevelReg || {});\nvar SRV_LOGGER = 316415946;\nvar LoggerPriority = /* @__PURE__ */ ((LoggerPriority2) => {\n  LoggerPriority2[LoggerPriority2[\"Debug\"] = 0] = \"Debug\";\n  LoggerPriority2[LoggerPriority2[\"Log\"] = 1] = \"Log\";\n  LoggerPriority2[LoggerPriority2[\"Warning\"] = 2] = \"Warning\";\n  LoggerPriority2[LoggerPriority2[\"Error\"] = 3] = \"Error\";\n  LoggerPriority2[LoggerPriority2[\"Silent\"] = 4] = \"Silent\";\n  return LoggerPriority2;\n})(LoggerPriority || {});\nvar LoggerReg = /* @__PURE__ */ ((LoggerReg2) => {\n  LoggerReg2[LoggerReg2[\"MinPriority\"] = 128] = \"MinPriority\";\n  return LoggerReg2;\n})(LoggerReg || {});\nvar LoggerCmd = /* @__PURE__ */ ((LoggerCmd3) => {\n  LoggerCmd3[LoggerCmd3[\"Debug\"] = 128] = \"Debug\";\n  LoggerCmd3[LoggerCmd3[\"Log\"] = 129] = \"Log\";\n  LoggerCmd3[LoggerCmd3[\"Warn\"] = 130] = \"Warn\";\n  LoggerCmd3[LoggerCmd3[\"Error\"] = 131] = \"Error\";\n  return LoggerCmd3;\n})(LoggerCmd || {});\nvar SRV_MAGNETOMETER = 318935176;\nvar MagnetometerReg = /* @__PURE__ */ ((MagnetometerReg2) => {\n  MagnetometerReg2[MagnetometerReg2[\"Forces\"] = 257] = \"Forces\";\n  MagnetometerReg2[MagnetometerReg2[\"ForcesError\"] = 262] = \"ForcesError\";\n  return MagnetometerReg2;\n})(MagnetometerReg || {});\nvar MagnetometerCmd = /* @__PURE__ */ ((MagnetometerCmd2) => {\n  MagnetometerCmd2[MagnetometerCmd2[\"Calibrate\"] = 2] = \"Calibrate\";\n  return MagnetometerCmd2;\n})(MagnetometerCmd || {});\nvar SRV_MATRIX_KEYPAD = 319172040;\nvar MatrixKeypadVariant = /* @__PURE__ */ ((MatrixKeypadVariant2) => {\n  MatrixKeypadVariant2[MatrixKeypadVariant2[\"Membrane\"] = 1] = \"Membrane\";\n  MatrixKeypadVariant2[MatrixKeypadVariant2[\"Keyboard\"] = 2] = \"Keyboard\";\n  MatrixKeypadVariant2[MatrixKeypadVariant2[\"Elastomer\"] = 3] = \"Elastomer\";\n  MatrixKeypadVariant2[MatrixKeypadVariant2[\"ElastomerLEDPixel\"] = 4] = \"ElastomerLEDPixel\";\n  return MatrixKeypadVariant2;\n})(MatrixKeypadVariant || {});\nvar MatrixKeypadReg = /* @__PURE__ */ ((MatrixKeypadReg2) => {\n  MatrixKeypadReg2[MatrixKeypadReg2[\"Pressed\"] = 257] = \"Pressed\";\n  MatrixKeypadReg2[MatrixKeypadReg2[\"Rows\"] = 384] = \"Rows\";\n  MatrixKeypadReg2[MatrixKeypadReg2[\"Columns\"] = 385] = \"Columns\";\n  MatrixKeypadReg2[MatrixKeypadReg2[\"Labels\"] = 386] = \"Labels\";\n  MatrixKeypadReg2[MatrixKeypadReg2[\"Variant\"] = 263] = \"Variant\";\n  return MatrixKeypadReg2;\n})(MatrixKeypadReg || {});\nvar MatrixKeypadEvent = /* @__PURE__ */ ((MatrixKeypadEvent2) => {\n  MatrixKeypadEvent2[MatrixKeypadEvent2[\"Down\"] = 1] = \"Down\";\n  MatrixKeypadEvent2[MatrixKeypadEvent2[\"Up\"] = 2] = \"Up\";\n  MatrixKeypadEvent2[MatrixKeypadEvent2[\"Click\"] = 128] = \"Click\";\n  MatrixKeypadEvent2[MatrixKeypadEvent2[\"LongClick\"] = 129] = \"LongClick\";\n  return MatrixKeypadEvent2;\n})(MatrixKeypadEvent || {});\nvar SRV_MICROPHONE = 289254534;\nvar MicrophoneCmd = /* @__PURE__ */ ((MicrophoneCmd2) => {\n  MicrophoneCmd2[MicrophoneCmd2[\"Sample\"] = 129] = \"Sample\";\n  return MicrophoneCmd2;\n})(MicrophoneCmd || {});\nvar MicrophoneReg = /* @__PURE__ */ ((MicrophoneReg2) => {\n  MicrophoneReg2[MicrophoneReg2[\"SamplingPeriod\"] = 128] = \"SamplingPeriod\";\n  return MicrophoneReg2;\n})(MicrophoneReg || {});\nvar SRV_MIDI_OUTPUT = 444894423;\nvar MidiOutputReg = /* @__PURE__ */ ((MidiOutputReg2) => {\n  MidiOutputReg2[MidiOutputReg2[\"Enabled\"] = 1] = \"Enabled\";\n  return MidiOutputReg2;\n})(MidiOutputReg || {});\nvar MidiOutputCmd = /* @__PURE__ */ ((MidiOutputCmd2) => {\n  MidiOutputCmd2[MidiOutputCmd2[\"Clear\"] = 128] = \"Clear\";\n  MidiOutputCmd2[MidiOutputCmd2[\"Send\"] = 129] = \"Send\";\n  return MidiOutputCmd2;\n})(MidiOutputCmd || {});\nvar SRV_MODEL_RUNNER = 336566904;\nvar ModelRunnerModelFormat = /* @__PURE__ */ ((ModelRunnerModelFormat2) => {\n  ModelRunnerModelFormat2[ModelRunnerModelFormat2[\"TFLite\"] = 860636756] = \"TFLite\";\n  ModelRunnerModelFormat2[ModelRunnerModelFormat2[\"ML4F\"] = 809963362] = \"ML4F\";\n  ModelRunnerModelFormat2[ModelRunnerModelFormat2[\"EdgeImpulseCompiled\"] = 810961221] = \"EdgeImpulseCompiled\";\n  return ModelRunnerModelFormat2;\n})(ModelRunnerModelFormat || {});\nvar ModelRunnerCmd = /* @__PURE__ */ ((ModelRunnerCmd2) => {\n  ModelRunnerCmd2[ModelRunnerCmd2[\"SetModel\"] = 128] = \"SetModel\";\n  ModelRunnerCmd2[ModelRunnerCmd2[\"Predict\"] = 129] = \"Predict\";\n  return ModelRunnerCmd2;\n})(ModelRunnerCmd || {});\nvar ModelRunnerReg = /* @__PURE__ */ ((ModelRunnerReg2) => {\n  ModelRunnerReg2[ModelRunnerReg2[\"AutoInvokeEvery\"] = 128] = \"AutoInvokeEvery\";\n  ModelRunnerReg2[ModelRunnerReg2[\"Outputs\"] = 257] = \"Outputs\";\n  ModelRunnerReg2[ModelRunnerReg2[\"InputShape\"] = 384] = \"InputShape\";\n  ModelRunnerReg2[ModelRunnerReg2[\"OutputShape\"] = 385] = \"OutputShape\";\n  ModelRunnerReg2[ModelRunnerReg2[\"LastRunTime\"] = 386] = \"LastRunTime\";\n  ModelRunnerReg2[ModelRunnerReg2[\"AllocatedArenaSize\"] = 387] = \"AllocatedArenaSize\";\n  ModelRunnerReg2[ModelRunnerReg2[\"ModelSize\"] = 388] = \"ModelSize\";\n  ModelRunnerReg2[ModelRunnerReg2[\"LastError\"] = 389] = \"LastError\";\n  ModelRunnerReg2[ModelRunnerReg2[\"Format\"] = 390] = \"Format\";\n  ModelRunnerReg2[ModelRunnerReg2[\"FormatVersion\"] = 391] = \"FormatVersion\";\n  ModelRunnerReg2[ModelRunnerReg2[\"Parallel\"] = 392] = \"Parallel\";\n  return ModelRunnerReg2;\n})(ModelRunnerReg || {});\nvar SRV_MOTION = 293185353;\nvar MotionVariant = /* @__PURE__ */ ((MotionVariant2) => {\n  MotionVariant2[MotionVariant2[\"PIR\"] = 1] = \"PIR\";\n  return MotionVariant2;\n})(MotionVariant || {});\nvar MotionReg = /* @__PURE__ */ ((MotionReg2) => {\n  MotionReg2[MotionReg2[\"Moving\"] = 257] = \"Moving\";\n  MotionReg2[MotionReg2[\"MaxDistance\"] = 384] = \"MaxDistance\";\n  MotionReg2[MotionReg2[\"Angle\"] = 385] = \"Angle\";\n  MotionReg2[MotionReg2[\"Variant\"] = 263] = \"Variant\";\n  return MotionReg2;\n})(MotionReg || {});\nvar MotionEvent = /* @__PURE__ */ ((MotionEvent2) => {\n  MotionEvent2[MotionEvent2[\"Movement\"] = 1] = \"Movement\";\n  return MotionEvent2;\n})(MotionEvent || {});\nvar SRV_MOTOR = 385895640;\nvar MotorReg = /* @__PURE__ */ ((MotorReg2) => {\n  MotorReg2[MotorReg2[\"Duty\"] = 2] = \"Duty\";\n  MotorReg2[MotorReg2[\"Enabled\"] = 1] = \"Enabled\";\n  MotorReg2[MotorReg2[\"LoadTorque\"] = 384] = \"LoadTorque\";\n  MotorReg2[MotorReg2[\"LoadSpeed\"] = 385] = \"LoadSpeed\";\n  MotorReg2[MotorReg2[\"Reversible\"] = 386] = \"Reversible\";\n  return MotorReg2;\n})(MotorReg || {});\nvar SRV_POTENTIOMETER = 522667846;\nvar PotentiometerVariant = /* @__PURE__ */ ((PotentiometerVariant2) => {\n  PotentiometerVariant2[PotentiometerVariant2[\"Slider\"] = 1] = \"Slider\";\n  PotentiometerVariant2[PotentiometerVariant2[\"Rotary\"] = 2] = \"Rotary\";\n  return PotentiometerVariant2;\n})(PotentiometerVariant || {});\nvar PotentiometerReg = /* @__PURE__ */ ((PotentiometerReg2) => {\n  PotentiometerReg2[PotentiometerReg2[\"Position\"] = 257] = \"Position\";\n  PotentiometerReg2[PotentiometerReg2[\"Variant\"] = 263] = \"Variant\";\n  return PotentiometerReg2;\n})(PotentiometerReg || {});\nvar SRV_POWER = 530893146;\nvar PowerPowerStatus = /* @__PURE__ */ ((PowerPowerStatus2) => {\n  PowerPowerStatus2[PowerPowerStatus2[\"Disallowed\"] = 0] = \"Disallowed\";\n  PowerPowerStatus2[PowerPowerStatus2[\"Powering\"] = 1] = \"Powering\";\n  PowerPowerStatus2[PowerPowerStatus2[\"Overload\"] = 2] = \"Overload\";\n  PowerPowerStatus2[PowerPowerStatus2[\"Overprovision\"] = 3] = \"Overprovision\";\n  return PowerPowerStatus2;\n})(PowerPowerStatus || {});\nvar PowerReg = /* @__PURE__ */ ((PowerReg2) => {\n  PowerReg2[PowerReg2[\"Allowed\"] = 1] = \"Allowed\";\n  PowerReg2[PowerReg2[\"MaxPower\"] = 7] = \"MaxPower\";\n  PowerReg2[PowerReg2[\"PowerStatus\"] = 385] = \"PowerStatus\";\n  PowerReg2[PowerReg2[\"CurrentDraw\"] = 257] = \"CurrentDraw\";\n  PowerReg2[PowerReg2[\"BatteryVoltage\"] = 384] = \"BatteryVoltage\";\n  PowerReg2[PowerReg2[\"BatteryCharge\"] = 386] = \"BatteryCharge\";\n  PowerReg2[PowerReg2[\"BatteryCapacity\"] = 387] = \"BatteryCapacity\";\n  PowerReg2[PowerReg2[\"KeepOnPulseDuration\"] = 128] = \"KeepOnPulseDuration\";\n  PowerReg2[PowerReg2[\"KeepOnPulsePeriod\"] = 129] = \"KeepOnPulsePeriod\";\n  return PowerReg2;\n})(PowerReg || {});\nvar PowerCmd = /* @__PURE__ */ ((PowerCmd2) => {\n  PowerCmd2[PowerCmd2[\"Shutdown\"] = 128] = \"Shutdown\";\n  return PowerCmd2;\n})(PowerCmd || {});\nvar PowerEvent = /* @__PURE__ */ ((PowerEvent2) => {\n  PowerEvent2[PowerEvent2[\"PowerStatusChanged\"] = 3] = \"PowerStatusChanged\";\n  return PowerEvent2;\n})(PowerEvent || {});\nvar SRV_POWER_SUPPLY = 524302175;\nvar PowerSupplyReg = /* @__PURE__ */ ((PowerSupplyReg2) => {\n  PowerSupplyReg2[PowerSupplyReg2[\"Enabled\"] = 1] = \"Enabled\";\n  PowerSupplyReg2[PowerSupplyReg2[\"OutputVoltage\"] = 2] = \"OutputVoltage\";\n  PowerSupplyReg2[PowerSupplyReg2[\"MinimumVoltage\"] = 272] = \"MinimumVoltage\";\n  PowerSupplyReg2[PowerSupplyReg2[\"MaximumVoltage\"] = 273] = \"MaximumVoltage\";\n  return PowerSupplyReg2;\n})(PowerSupplyReg || {});\nvar SRV_PRESSURE_BUTTON = 672612547;\nvar PressureButtonReg = /* @__PURE__ */ ((PressureButtonReg2) => {\n  PressureButtonReg2[PressureButtonReg2[\"Threshold\"] = 6] = \"Threshold\";\n  return PressureButtonReg2;\n})(PressureButtonReg || {});\nvar SRV_PROTO_TEST = 382158442;\nvar ProtoTestReg = /* @__PURE__ */ ((ProtoTestReg2) => {\n  ProtoTestReg2[ProtoTestReg2[\"RwBool\"] = 129] = \"RwBool\";\n  ProtoTestReg2[ProtoTestReg2[\"RoBool\"] = 385] = \"RoBool\";\n  ProtoTestReg2[ProtoTestReg2[\"RwU32\"] = 130] = \"RwU32\";\n  ProtoTestReg2[ProtoTestReg2[\"RoU32\"] = 386] = \"RoU32\";\n  ProtoTestReg2[ProtoTestReg2[\"RwI32\"] = 131] = \"RwI32\";\n  ProtoTestReg2[ProtoTestReg2[\"RoI32\"] = 387] = \"RoI32\";\n  ProtoTestReg2[ProtoTestReg2[\"RwString\"] = 132] = \"RwString\";\n  ProtoTestReg2[ProtoTestReg2[\"RoString\"] = 388] = \"RoString\";\n  ProtoTestReg2[ProtoTestReg2[\"RwBytes\"] = 133] = \"RwBytes\";\n  ProtoTestReg2[ProtoTestReg2[\"RoBytes\"] = 389] = \"RoBytes\";\n  ProtoTestReg2[ProtoTestReg2[\"RwI8U8U16I32\"] = 134] = \"RwI8U8U16I32\";\n  ProtoTestReg2[ProtoTestReg2[\"RoI8U8U16I32\"] = 390] = \"RoI8U8U16I32\";\n  ProtoTestReg2[ProtoTestReg2[\"RwU8String\"] = 135] = \"RwU8String\";\n  ProtoTestReg2[ProtoTestReg2[\"RoU8String\"] = 391] = \"RoU8String\";\n  return ProtoTestReg2;\n})(ProtoTestReg || {});\nvar ProtoTestEvent = /* @__PURE__ */ ((ProtoTestEvent2) => {\n  ProtoTestEvent2[ProtoTestEvent2[\"EBool\"] = 129] = \"EBool\";\n  ProtoTestEvent2[ProtoTestEvent2[\"EU32\"] = 130] = \"EU32\";\n  ProtoTestEvent2[ProtoTestEvent2[\"EI32\"] = 131] = \"EI32\";\n  ProtoTestEvent2[ProtoTestEvent2[\"EString\"] = 132] = \"EString\";\n  ProtoTestEvent2[ProtoTestEvent2[\"EBytes\"] = 133] = \"EBytes\";\n  ProtoTestEvent2[ProtoTestEvent2[\"EI8U8U16I32\"] = 134] = \"EI8U8U16I32\";\n  ProtoTestEvent2[ProtoTestEvent2[\"EU8String\"] = 135] = \"EU8String\";\n  return ProtoTestEvent2;\n})(ProtoTestEvent || {});\nvar ProtoTestCmd = /* @__PURE__ */ ((ProtoTestCmd2) => {\n  ProtoTestCmd2[ProtoTestCmd2[\"CBool\"] = 129] = \"CBool\";\n  ProtoTestCmd2[ProtoTestCmd2[\"CU32\"] = 130] = \"CU32\";\n  ProtoTestCmd2[ProtoTestCmd2[\"CI32\"] = 131] = \"CI32\";\n  ProtoTestCmd2[ProtoTestCmd2[\"CString\"] = 132] = \"CString\";\n  ProtoTestCmd2[ProtoTestCmd2[\"CBytes\"] = 133] = \"CBytes\";\n  ProtoTestCmd2[ProtoTestCmd2[\"CI8U8U16I32\"] = 134] = \"CI8U8U16I32\";\n  ProtoTestCmd2[ProtoTestCmd2[\"CU8String\"] = 135] = \"CU8String\";\n  ProtoTestCmd2[ProtoTestCmd2[\"CReportPipe\"] = 144] = \"CReportPipe\";\n  return ProtoTestCmd2;\n})(ProtoTestCmd || {});\nvar SRV_PROXY = 384932169;\nvar SRV_PULSE_OXIMETER = 280710838;\nvar PulseOximeterReg = /* @__PURE__ */ ((PulseOximeterReg2) => {\n  PulseOximeterReg2[PulseOximeterReg2[\"Oxygen\"] = 257] = \"Oxygen\";\n  PulseOximeterReg2[PulseOximeterReg2[\"OxygenError\"] = 262] = \"OxygenError\";\n  return PulseOximeterReg2;\n})(PulseOximeterReg || {});\nvar SRV_RAIN_GAUGE = 326323349;\nvar RainGaugeReg = /* @__PURE__ */ ((RainGaugeReg2) => {\n  RainGaugeReg2[RainGaugeReg2[\"Precipitation\"] = 257] = \"Precipitation\";\n  RainGaugeReg2[RainGaugeReg2[\"PrecipitationPrecision\"] = 264] = \"PrecipitationPrecision\";\n  return RainGaugeReg2;\n})(RainGaugeReg || {});\nvar SRV_REAL_TIME_CLOCK = 445323816;\nvar RealTimeClockVariant = /* @__PURE__ */ ((RealTimeClockVariant2) => {\n  RealTimeClockVariant2[RealTimeClockVariant2[\"Computer\"] = 1] = \"Computer\";\n  RealTimeClockVariant2[RealTimeClockVariant2[\"Crystal\"] = 2] = \"Crystal\";\n  RealTimeClockVariant2[RealTimeClockVariant2[\"Cuckoo\"] = 3] = \"Cuckoo\";\n  return RealTimeClockVariant2;\n})(RealTimeClockVariant || {});\nvar RealTimeClockReg = /* @__PURE__ */ ((RealTimeClockReg2) => {\n  RealTimeClockReg2[RealTimeClockReg2[\"LocalTime\"] = 257] = \"LocalTime\";\n  RealTimeClockReg2[RealTimeClockReg2[\"Drift\"] = 384] = \"Drift\";\n  RealTimeClockReg2[RealTimeClockReg2[\"Precision\"] = 385] = \"Precision\";\n  RealTimeClockReg2[RealTimeClockReg2[\"Variant\"] = 263] = \"Variant\";\n  return RealTimeClockReg2;\n})(RealTimeClockReg || {});\nvar RealTimeClockCmd = /* @__PURE__ */ ((RealTimeClockCmd2) => {\n  RealTimeClockCmd2[RealTimeClockCmd2[\"SetTime\"] = 128] = \"SetTime\";\n  return RealTimeClockCmd2;\n})(RealTimeClockCmd || {});\nvar SRV_REFLECTED_LIGHT = 309087410;\nvar ReflectedLightVariant = /* @__PURE__ */ ((ReflectedLightVariant2) => {\n  ReflectedLightVariant2[ReflectedLightVariant2[\"InfraredDigital\"] = 1] = \"InfraredDigital\";\n  ReflectedLightVariant2[ReflectedLightVariant2[\"InfraredAnalog\"] = 2] = \"InfraredAnalog\";\n  return ReflectedLightVariant2;\n})(ReflectedLightVariant || {});\nvar ReflectedLightReg = /* @__PURE__ */ ((ReflectedLightReg2) => {\n  ReflectedLightReg2[ReflectedLightReg2[\"Brightness\"] = 257] = \"Brightness\";\n  ReflectedLightReg2[ReflectedLightReg2[\"Variant\"] = 263] = \"Variant\";\n  return ReflectedLightReg2;\n})(ReflectedLightReg || {});\nvar SRV_RELAY = 406840918;\nvar RelayVariant = /* @__PURE__ */ ((RelayVariant2) => {\n  RelayVariant2[RelayVariant2[\"Electromechanical\"] = 1] = \"Electromechanical\";\n  RelayVariant2[RelayVariant2[\"SolidState\"] = 2] = \"SolidState\";\n  RelayVariant2[RelayVariant2[\"Reed\"] = 3] = \"Reed\";\n  return RelayVariant2;\n})(RelayVariant || {});\nvar RelayReg = /* @__PURE__ */ ((RelayReg2) => {\n  RelayReg2[RelayReg2[\"Active\"] = 1] = \"Active\";\n  RelayReg2[RelayReg2[\"Variant\"] = 263] = \"Variant\";\n  RelayReg2[RelayReg2[\"MaxSwitchingCurrent\"] = 384] = \"MaxSwitchingCurrent\";\n  return RelayReg2;\n})(RelayReg || {});\nvar SRV_RNG = 394916002;\nvar RngVariant = /* @__PURE__ */ ((RngVariant2) => {\n  RngVariant2[RngVariant2[\"Quantum\"] = 1] = \"Quantum\";\n  RngVariant2[RngVariant2[\"ADCNoise\"] = 2] = \"ADCNoise\";\n  RngVariant2[RngVariant2[\"WebCrypto\"] = 3] = \"WebCrypto\";\n  return RngVariant2;\n})(RngVariant || {});\nvar RngReg = /* @__PURE__ */ ((RngReg2) => {\n  RngReg2[RngReg2[\"Random\"] = 384] = \"Random\";\n  RngReg2[RngReg2[\"Variant\"] = 263] = \"Variant\";\n  return RngReg2;\n})(RngReg || {});\nvar SRV_ROLE_MANAGER = 508264038;\nvar RoleManagerReg = /* @__PURE__ */ ((RoleManagerReg2) => {\n  RoleManagerReg2[RoleManagerReg2[\"AutoBind\"] = 128] = \"AutoBind\";\n  RoleManagerReg2[RoleManagerReg2[\"AllRolesAllocated\"] = 385] = \"AllRolesAllocated\";\n  return RoleManagerReg2;\n})(RoleManagerReg || {});\nvar RoleManagerCmd = /* @__PURE__ */ ((RoleManagerCmd2) => {\n  RoleManagerCmd2[RoleManagerCmd2[\"SetRole\"] = 129] = \"SetRole\";\n  RoleManagerCmd2[RoleManagerCmd2[\"ClearAllRoles\"] = 132] = \"ClearAllRoles\";\n  RoleManagerCmd2[RoleManagerCmd2[\"ListRoles\"] = 131] = \"ListRoles\";\n  return RoleManagerCmd2;\n})(RoleManagerCmd || {});\nvar RoleManagerEvent = /* @__PURE__ */ ((RoleManagerEvent2) => {\n  RoleManagerEvent2[RoleManagerEvent2[\"Change\"] = 3] = \"Change\";\n  return RoleManagerEvent2;\n})(RoleManagerEvent || {});\nvar SRV_ROTARY_ENCODER = 284830153;\nvar RotaryEncoderReg = /* @__PURE__ */ ((RotaryEncoderReg2) => {\n  RotaryEncoderReg2[RotaryEncoderReg2[\"Position\"] = 257] = \"Position\";\n  RotaryEncoderReg2[RotaryEncoderReg2[\"ClicksPerTurn\"] = 384] = \"ClicksPerTurn\";\n  RotaryEncoderReg2[RotaryEncoderReg2[\"Clicker\"] = 385] = \"Clicker\";\n  return RotaryEncoderReg2;\n})(RotaryEncoderReg || {});\nvar SRV_ROVER = 435474539;\nvar RoverReg = /* @__PURE__ */ ((RoverReg2) => {\n  RoverReg2[RoverReg2[\"Kinematics\"] = 257] = \"Kinematics\";\n  return RoverReg2;\n})(RoverReg || {});\nvar SRV_SENSOR_AGGREGATOR = 496034245;\nvar SensorAggregatorSampleType = /* @__PURE__ */ ((SensorAggregatorSampleType2) => {\n  SensorAggregatorSampleType2[SensorAggregatorSampleType2[\"U8\"] = 8] = \"U8\";\n  SensorAggregatorSampleType2[SensorAggregatorSampleType2[\"I8\"] = 136] = \"I8\";\n  SensorAggregatorSampleType2[SensorAggregatorSampleType2[\"U16\"] = 16] = \"U16\";\n  SensorAggregatorSampleType2[SensorAggregatorSampleType2[\"I16\"] = 144] = \"I16\";\n  SensorAggregatorSampleType2[SensorAggregatorSampleType2[\"U32\"] = 32] = \"U32\";\n  SensorAggregatorSampleType2[SensorAggregatorSampleType2[\"I32\"] = 160] = \"I32\";\n  return SensorAggregatorSampleType2;\n})(SensorAggregatorSampleType || {});\nvar SensorAggregatorReg = /* @__PURE__ */ ((SensorAggregatorReg2) => {\n  SensorAggregatorReg2[SensorAggregatorReg2[\"Inputs\"] = 128] = \"Inputs\";\n  SensorAggregatorReg2[SensorAggregatorReg2[\"NumSamples\"] = 384] = \"NumSamples\";\n  SensorAggregatorReg2[SensorAggregatorReg2[\"SampleSize\"] = 385] = \"SampleSize\";\n  SensorAggregatorReg2[SensorAggregatorReg2[\"StreamingSamples\"] = 129] = \"StreamingSamples\";\n  SensorAggregatorReg2[SensorAggregatorReg2[\"CurrentSample\"] = 257] = \"CurrentSample\";\n  return SensorAggregatorReg2;\n})(SensorAggregatorReg || {});\nvar SRV_SERVO = 318542083;\nvar ServoReg = /* @__PURE__ */ ((ServoReg2) => {\n  ServoReg2[ServoReg2[\"Angle\"] = 2] = \"Angle\";\n  ServoReg2[ServoReg2[\"Enabled\"] = 1] = \"Enabled\";\n  ServoReg2[ServoReg2[\"Offset\"] = 129] = \"Offset\";\n  ServoReg2[ServoReg2[\"MinAngle\"] = 272] = \"MinAngle\";\n  ServoReg2[ServoReg2[\"MinPulse\"] = 131] = \"MinPulse\";\n  ServoReg2[ServoReg2[\"MaxAngle\"] = 273] = \"MaxAngle\";\n  ServoReg2[ServoReg2[\"MaxPulse\"] = 133] = \"MaxPulse\";\n  ServoReg2[ServoReg2[\"StallTorque\"] = 384] = \"StallTorque\";\n  ServoReg2[ServoReg2[\"ResponseSpeed\"] = 385] = \"ResponseSpeed\";\n  ServoReg2[ServoReg2[\"CurrentAngle\"] = 257] = \"CurrentAngle\";\n  return ServoReg2;\n})(ServoReg || {});\nvar SRV_SETTINGS = 285727818;\nvar SettingsCmd = /* @__PURE__ */ ((SettingsCmd2) => {\n  SettingsCmd2[SettingsCmd2[\"Get\"] = 128] = \"Get\";\n  SettingsCmd2[SettingsCmd2[\"Set\"] = 129] = \"Set\";\n  SettingsCmd2[SettingsCmd2[\"Delete\"] = 132] = \"Delete\";\n  SettingsCmd2[SettingsCmd2[\"ListKeys\"] = 130] = \"ListKeys\";\n  SettingsCmd2[SettingsCmd2[\"List\"] = 131] = \"List\";\n  SettingsCmd2[SettingsCmd2[\"Clear\"] = 133] = \"Clear\";\n  return SettingsCmd2;\n})(SettingsCmd || {});\nvar SettingsEvent = /* @__PURE__ */ ((SettingsEvent2) => {\n  SettingsEvent2[SettingsEvent2[\"Change\"] = 3] = \"Change\";\n  return SettingsEvent2;\n})(SettingsEvent || {});\nvar SRV_SEVEN_SEGMENT_DISPLAY = 425810167;\nvar SevenSegmentDisplayReg = /* @__PURE__ */ ((SevenSegmentDisplayReg2) => {\n  SevenSegmentDisplayReg2[SevenSegmentDisplayReg2[\"Digits\"] = 2] = \"Digits\";\n  SevenSegmentDisplayReg2[SevenSegmentDisplayReg2[\"Brightness\"] = 1] = \"Brightness\";\n  SevenSegmentDisplayReg2[SevenSegmentDisplayReg2[\"DoubleDots\"] = 128] = \"DoubleDots\";\n  SevenSegmentDisplayReg2[SevenSegmentDisplayReg2[\"DigitCount\"] = 384] = \"DigitCount\";\n  SevenSegmentDisplayReg2[SevenSegmentDisplayReg2[\"DecimalPoint\"] = 385] = \"DecimalPoint\";\n  return SevenSegmentDisplayReg2;\n})(SevenSegmentDisplayReg || {});\nvar SevenSegmentDisplayCmd = /* @__PURE__ */ ((SevenSegmentDisplayCmd2) => {\n  SevenSegmentDisplayCmd2[SevenSegmentDisplayCmd2[\"SetNumber\"] = 128] = \"SetNumber\";\n  SevenSegmentDisplayCmd2[SevenSegmentDisplayCmd2[\"SetText\"] = 129] = \"SetText\";\n  return SevenSegmentDisplayCmd2;\n})(SevenSegmentDisplayCmd || {});\nvar SRV_SOIL_MOISTURE = 491430835;\nvar SoilMoistureVariant = /* @__PURE__ */ ((SoilMoistureVariant2) => {\n  SoilMoistureVariant2[SoilMoistureVariant2[\"Resistive\"] = 1] = \"Resistive\";\n  SoilMoistureVariant2[SoilMoistureVariant2[\"Capacitive\"] = 2] = \"Capacitive\";\n  return SoilMoistureVariant2;\n})(SoilMoistureVariant || {});\nvar SoilMoistureReg = /* @__PURE__ */ ((SoilMoistureReg2) => {\n  SoilMoistureReg2[SoilMoistureReg2[\"Moisture\"] = 257] = \"Moisture\";\n  SoilMoistureReg2[SoilMoistureReg2[\"MoistureError\"] = 262] = \"MoistureError\";\n  SoilMoistureReg2[SoilMoistureReg2[\"Variant\"] = 263] = \"Variant\";\n  return SoilMoistureReg2;\n})(SoilMoistureReg || {});\nvar SRV_SOLENOID = 387392458;\nvar SolenoidVariant = /* @__PURE__ */ ((SolenoidVariant2) => {\n  SolenoidVariant2[SolenoidVariant2[\"PushPull\"] = 1] = \"PushPull\";\n  SolenoidVariant2[SolenoidVariant2[\"Valve\"] = 2] = \"Valve\";\n  SolenoidVariant2[SolenoidVariant2[\"Latch\"] = 3] = \"Latch\";\n  return SolenoidVariant2;\n})(SolenoidVariant || {});\nvar SolenoidReg = /* @__PURE__ */ ((SolenoidReg2) => {\n  SolenoidReg2[SolenoidReg2[\"Pulled\"] = 1] = \"Pulled\";\n  SolenoidReg2[SolenoidReg2[\"Variant\"] = 263] = \"Variant\";\n  return SolenoidReg2;\n})(SolenoidReg || {});\nvar SRV_SOUND_LEVEL = 346888797;\nvar SoundLevelReg = /* @__PURE__ */ ((SoundLevelReg2) => {\n  SoundLevelReg2[SoundLevelReg2[\"SoundLevel\"] = 257] = \"SoundLevel\";\n  SoundLevelReg2[SoundLevelReg2[\"Enabled\"] = 1] = \"Enabled\";\n  SoundLevelReg2[SoundLevelReg2[\"LoudThreshold\"] = 6] = \"LoudThreshold\";\n  SoundLevelReg2[SoundLevelReg2[\"QuietThreshold\"] = 5] = \"QuietThreshold\";\n  return SoundLevelReg2;\n})(SoundLevelReg || {});\nvar SoundLevelEvent = /* @__PURE__ */ ((SoundLevelEvent2) => {\n  SoundLevelEvent2[SoundLevelEvent2[\"Loud\"] = 1] = \"Loud\";\n  SoundLevelEvent2[SoundLevelEvent2[\"Quiet\"] = 2] = \"Quiet\";\n  return SoundLevelEvent2;\n})(SoundLevelEvent || {});\nvar SRV_SOUND_PLAYER = 335795e3;\nvar SoundPlayerReg = /* @__PURE__ */ ((SoundPlayerReg2) => {\n  SoundPlayerReg2[SoundPlayerReg2[\"Volume\"] = 1] = \"Volume\";\n  return SoundPlayerReg2;\n})(SoundPlayerReg || {});\nvar SoundPlayerCmd = /* @__PURE__ */ ((SoundPlayerCmd2) => {\n  SoundPlayerCmd2[SoundPlayerCmd2[\"Play\"] = 128] = \"Play\";\n  SoundPlayerCmd2[SoundPlayerCmd2[\"Cancel\"] = 129] = \"Cancel\";\n  SoundPlayerCmd2[SoundPlayerCmd2[\"ListSounds\"] = 130] = \"ListSounds\";\n  return SoundPlayerCmd2;\n})(SoundPlayerCmd || {});\nvar SRV_SOUND_RECORDER_WITH_PLAYBACK = 460504912;\nvar SoundRecorderWithPlaybackStatus = /* @__PURE__ */ ((SoundRecorderWithPlaybackStatus2) => {\n  SoundRecorderWithPlaybackStatus2[SoundRecorderWithPlaybackStatus2[\"Idle\"] = 0] = \"Idle\";\n  SoundRecorderWithPlaybackStatus2[SoundRecorderWithPlaybackStatus2[\"Recording\"] = 1] = \"Recording\";\n  SoundRecorderWithPlaybackStatus2[SoundRecorderWithPlaybackStatus2[\"Playing\"] = 2] = \"Playing\";\n  return SoundRecorderWithPlaybackStatus2;\n})(SoundRecorderWithPlaybackStatus || {});\nvar SoundRecorderWithPlaybackCmd = /* @__PURE__ */ ((SoundRecorderWithPlaybackCmd2) => {\n  SoundRecorderWithPlaybackCmd2[SoundRecorderWithPlaybackCmd2[\"Play\"] = 128] = \"Play\";\n  SoundRecorderWithPlaybackCmd2[SoundRecorderWithPlaybackCmd2[\"Record\"] = 129] = \"Record\";\n  SoundRecorderWithPlaybackCmd2[SoundRecorderWithPlaybackCmd2[\"Cancel\"] = 130] = \"Cancel\";\n  return SoundRecorderWithPlaybackCmd2;\n})(SoundRecorderWithPlaybackCmd || {});\nvar SoundRecorderWithPlaybackReg = /* @__PURE__ */ ((SoundRecorderWithPlaybackReg2) => {\n  SoundRecorderWithPlaybackReg2[SoundRecorderWithPlaybackReg2[\"Status\"] = 384] = \"Status\";\n  SoundRecorderWithPlaybackReg2[SoundRecorderWithPlaybackReg2[\"Time\"] = 385] = \"Time\";\n  SoundRecorderWithPlaybackReg2[SoundRecorderWithPlaybackReg2[\"Volume\"] = 1] = \"Volume\";\n  return SoundRecorderWithPlaybackReg2;\n})(SoundRecorderWithPlaybackReg || {});\nvar SRV_SOUND_SPECTRUM = 360365086;\nvar SoundSpectrumReg = /* @__PURE__ */ ((SoundSpectrumReg2) => {\n  SoundSpectrumReg2[SoundSpectrumReg2[\"FrequencyBins\"] = 257] = \"FrequencyBins\";\n  SoundSpectrumReg2[SoundSpectrumReg2[\"Enabled\"] = 1] = \"Enabled\";\n  SoundSpectrumReg2[SoundSpectrumReg2[\"FftPow2Size\"] = 128] = \"FftPow2Size\";\n  SoundSpectrumReg2[SoundSpectrumReg2[\"MinDecibels\"] = 129] = \"MinDecibels\";\n  SoundSpectrumReg2[SoundSpectrumReg2[\"MaxDecibels\"] = 130] = \"MaxDecibels\";\n  SoundSpectrumReg2[SoundSpectrumReg2[\"SmoothingTimeConstant\"] = 131] = \"SmoothingTimeConstant\";\n  return SoundSpectrumReg2;\n})(SoundSpectrumReg || {});\nvar SRV_SPEECH_SYNTHESIS = 302307733;\nvar SpeechSynthesisReg = /* @__PURE__ */ ((SpeechSynthesisReg2) => {\n  SpeechSynthesisReg2[SpeechSynthesisReg2[\"Enabled\"] = 1] = \"Enabled\";\n  SpeechSynthesisReg2[SpeechSynthesisReg2[\"Lang\"] = 128] = \"Lang\";\n  SpeechSynthesisReg2[SpeechSynthesisReg2[\"Volume\"] = 129] = \"Volume\";\n  SpeechSynthesisReg2[SpeechSynthesisReg2[\"Pitch\"] = 130] = \"Pitch\";\n  SpeechSynthesisReg2[SpeechSynthesisReg2[\"Rate\"] = 131] = \"Rate\";\n  return SpeechSynthesisReg2;\n})(SpeechSynthesisReg || {});\nvar SpeechSynthesisCmd = /* @__PURE__ */ ((SpeechSynthesisCmd2) => {\n  SpeechSynthesisCmd2[SpeechSynthesisCmd2[\"Speak\"] = 128] = \"Speak\";\n  SpeechSynthesisCmd2[SpeechSynthesisCmd2[\"Cancel\"] = 129] = \"Cancel\";\n  return SpeechSynthesisCmd2;\n})(SpeechSynthesisCmd || {});\nvar SRV_SWITCH = 450008066;\nvar SwitchVariant = /* @__PURE__ */ ((SwitchVariant3) => {\n  SwitchVariant3[SwitchVariant3[\"Slide\"] = 1] = \"Slide\";\n  SwitchVariant3[SwitchVariant3[\"Tilt\"] = 2] = \"Tilt\";\n  SwitchVariant3[SwitchVariant3[\"PushButton\"] = 3] = \"PushButton\";\n  SwitchVariant3[SwitchVariant3[\"Tactile\"] = 4] = \"Tactile\";\n  SwitchVariant3[SwitchVariant3[\"Toggle\"] = 5] = \"Toggle\";\n  SwitchVariant3[SwitchVariant3[\"Proximity\"] = 6] = \"Proximity\";\n  SwitchVariant3[SwitchVariant3[\"Magnetic\"] = 7] = \"Magnetic\";\n  SwitchVariant3[SwitchVariant3[\"FootButton\"] = 8] = \"FootButton\";\n  return SwitchVariant3;\n})(SwitchVariant || {});\nvar SwitchReg = /* @__PURE__ */ ((SwitchReg2) => {\n  SwitchReg2[SwitchReg2[\"Active\"] = 257] = \"Active\";\n  SwitchReg2[SwitchReg2[\"Variant\"] = 263] = \"Variant\";\n  return SwitchReg2;\n})(SwitchReg || {});\nvar SwitchEvent = /* @__PURE__ */ ((SwitchEvent2) => {\n  SwitchEvent2[SwitchEvent2[\"On\"] = 1] = \"On\";\n  SwitchEvent2[SwitchEvent2[\"Off\"] = 2] = \"Off\";\n  return SwitchEvent2;\n})(SwitchEvent || {});\nvar SRV_TCP = 457422603;\nvar TcpTcpError = /* @__PURE__ */ ((TcpTcpError2) => {\n  TcpTcpError2[TcpTcpError2[\"InvalidCommand\"] = 1] = \"InvalidCommand\";\n  TcpTcpError2[TcpTcpError2[\"InvalidCommandPayload\"] = 2] = \"InvalidCommandPayload\";\n  return TcpTcpError2;\n})(TcpTcpError || {});\nvar TcpCmd = /* @__PURE__ */ ((TcpCmd2) => {\n  TcpCmd2[TcpCmd2[\"Open\"] = 128] = \"Open\";\n  return TcpCmd2;\n})(TcpCmd || {});\nvar TcpPipeCmd = /* @__PURE__ */ ((TcpPipeCmd2) => {\n  TcpPipeCmd2[TcpPipeCmd2[\"OpenSsl\"] = 1] = \"OpenSsl\";\n  TcpPipeCmd2[TcpPipeCmd2[\"Error\"] = 0] = \"Error\";\n  return TcpPipeCmd2;\n})(TcpPipeCmd || {});\nvar SRV_TEMPERATURE = 337754823;\nvar TemperatureVariant = /* @__PURE__ */ ((TemperatureVariant2) => {\n  TemperatureVariant2[TemperatureVariant2[\"Outdoor\"] = 1] = \"Outdoor\";\n  TemperatureVariant2[TemperatureVariant2[\"Indoor\"] = 2] = \"Indoor\";\n  TemperatureVariant2[TemperatureVariant2[\"Body\"] = 3] = \"Body\";\n  return TemperatureVariant2;\n})(TemperatureVariant || {});\nvar TemperatureReg = /* @__PURE__ */ ((TemperatureReg2) => {\n  TemperatureReg2[TemperatureReg2[\"Temperature\"] = 257] = \"Temperature\";\n  TemperatureReg2[TemperatureReg2[\"MinTemperature\"] = 260] = \"MinTemperature\";\n  TemperatureReg2[TemperatureReg2[\"MaxTemperature\"] = 261] = \"MaxTemperature\";\n  TemperatureReg2[TemperatureReg2[\"TemperatureError\"] = 262] = \"TemperatureError\";\n  TemperatureReg2[TemperatureReg2[\"Variant\"] = 263] = \"Variant\";\n  return TemperatureReg2;\n})(TemperatureReg || {});\nvar SRV_TRAFFIC_LIGHT = 365137307;\nvar TrafficLightReg = /* @__PURE__ */ ((TrafficLightReg2) => {\n  TrafficLightReg2[TrafficLightReg2[\"Red\"] = 128] = \"Red\";\n  TrafficLightReg2[TrafficLightReg2[\"Orange\"] = 129] = \"Orange\";\n  TrafficLightReg2[TrafficLightReg2[\"Green\"] = 130] = \"Green\";\n  return TrafficLightReg2;\n})(TrafficLightReg || {});\nvar SRV_TVOC = 312849815;\nvar TvocReg = /* @__PURE__ */ ((TvocReg2) => {\n  TvocReg2[TvocReg2[\"TVOC\"] = 257] = \"TVOC\";\n  TvocReg2[TvocReg2[\"TVOCError\"] = 262] = \"TVOCError\";\n  TvocReg2[TvocReg2[\"MinTVOC\"] = 260] = \"MinTVOC\";\n  TvocReg2[TvocReg2[\"MaxTVOC\"] = 261] = \"MaxTVOC\";\n  return TvocReg2;\n})(TvocReg || {});\nvar SRV_UNIQUE_BRAIN = 272387813;\nvar SRV_UV_INDEX = 527306128;\nvar UvIndexVariant = /* @__PURE__ */ ((UvIndexVariant2) => {\n  UvIndexVariant2[UvIndexVariant2[\"UVA_UVB\"] = 1] = \"UVA_UVB\";\n  UvIndexVariant2[UvIndexVariant2[\"Visible_IR\"] = 2] = \"Visible_IR\";\n  return UvIndexVariant2;\n})(UvIndexVariant || {});\nvar UvIndexReg = /* @__PURE__ */ ((UvIndexReg2) => {\n  UvIndexReg2[UvIndexReg2[\"UvIndex\"] = 257] = \"UvIndex\";\n  UvIndexReg2[UvIndexReg2[\"UvIndexError\"] = 262] = \"UvIndexError\";\n  UvIndexReg2[UvIndexReg2[\"Variant\"] = 263] = \"Variant\";\n  return UvIndexReg2;\n})(UvIndexReg || {});\nvar SRV_VERIFIED_TELEMETRY = 563381279;\nvar VerifiedTelemetryStatus = /* @__PURE__ */ ((VerifiedTelemetryStatus2) => {\n  VerifiedTelemetryStatus2[VerifiedTelemetryStatus2[\"Unknown\"] = 0] = \"Unknown\";\n  VerifiedTelemetryStatus2[VerifiedTelemetryStatus2[\"Working\"] = 1] = \"Working\";\n  VerifiedTelemetryStatus2[VerifiedTelemetryStatus2[\"Faulty\"] = 2] = \"Faulty\";\n  return VerifiedTelemetryStatus2;\n})(VerifiedTelemetryStatus || {});\nvar VerifiedTelemetryFingerprintType = /* @__PURE__ */ ((VerifiedTelemetryFingerprintType2) => {\n  VerifiedTelemetryFingerprintType2[VerifiedTelemetryFingerprintType2[\"FallCurve\"] = 1] = \"FallCurve\";\n  VerifiedTelemetryFingerprintType2[VerifiedTelemetryFingerprintType2[\"CurrentSense\"] = 2] = \"CurrentSense\";\n  VerifiedTelemetryFingerprintType2[VerifiedTelemetryFingerprintType2[\"Custom\"] = 3] = \"Custom\";\n  return VerifiedTelemetryFingerprintType2;\n})(VerifiedTelemetryFingerprintType || {});\nvar VerifiedTelemetryReg = /* @__PURE__ */ ((VerifiedTelemetryReg2) => {\n  VerifiedTelemetryReg2[VerifiedTelemetryReg2[\"TelemetryStatus\"] = 384] = \"TelemetryStatus\";\n  VerifiedTelemetryReg2[VerifiedTelemetryReg2[\"TelemetryStatusInterval\"] = 128] = \"TelemetryStatusInterval\";\n  VerifiedTelemetryReg2[VerifiedTelemetryReg2[\"FingerprintType\"] = 385] = \"FingerprintType\";\n  VerifiedTelemetryReg2[VerifiedTelemetryReg2[\"FingerprintTemplate\"] = 386] = \"FingerprintTemplate\";\n  return VerifiedTelemetryReg2;\n})(VerifiedTelemetryReg || {});\nvar VerifiedTelemetryCmd = /* @__PURE__ */ ((VerifiedTelemetryCmd2) => {\n  VerifiedTelemetryCmd2[VerifiedTelemetryCmd2[\"ResetFingerprintTemplate\"] = 128] = \"ResetFingerprintTemplate\";\n  VerifiedTelemetryCmd2[VerifiedTelemetryCmd2[\"RetrainFingerprintTemplate\"] = 129] = \"RetrainFingerprintTemplate\";\n  return VerifiedTelemetryCmd2;\n})(VerifiedTelemetryCmd || {});\nvar VerifiedTelemetryEvent = /* @__PURE__ */ ((VerifiedTelemetryEvent2) => {\n  VerifiedTelemetryEvent2[VerifiedTelemetryEvent2[\"TelemetryStatusChange\"] = 3] = \"TelemetryStatusChange\";\n  VerifiedTelemetryEvent2[VerifiedTelemetryEvent2[\"FingerprintTemplateChange\"] = 128] = \"FingerprintTemplateChange\";\n  return VerifiedTelemetryEvent2;\n})(VerifiedTelemetryEvent || {});\nvar SRV_VIBRATION_MOTOR = 406832290;\nvar VibrationMotorCmd = /* @__PURE__ */ ((VibrationMotorCmd2) => {\n  VibrationMotorCmd2[VibrationMotorCmd2[\"Vibrate\"] = 128] = \"Vibrate\";\n  return VibrationMotorCmd2;\n})(VibrationMotorCmd || {});\nvar SRV_VOLTAGE_MEASUREMENT = 372485145;\nvar VoltageMeasurementVoltageMeasurementType = /* @__PURE__ */ ((VoltageMeasurementVoltageMeasurementType2) => {\n  VoltageMeasurementVoltageMeasurementType2[VoltageMeasurementVoltageMeasurementType2[\"Absolute\"] = 0] = \"Absolute\";\n  VoltageMeasurementVoltageMeasurementType2[VoltageMeasurementVoltageMeasurementType2[\"Differential\"] = 1] = \"Differential\";\n  return VoltageMeasurementVoltageMeasurementType2;\n})(VoltageMeasurementVoltageMeasurementType || {});\nvar VoltageMeasurementReg = /* @__PURE__ */ ((VoltageMeasurementReg2) => {\n  VoltageMeasurementReg2[VoltageMeasurementReg2[\"MeasurementType\"] = 385] = \"MeasurementType\";\n  VoltageMeasurementReg2[VoltageMeasurementReg2[\"MeasurementName\"] = 386] = \"MeasurementName\";\n  VoltageMeasurementReg2[VoltageMeasurementReg2[\"Measurement\"] = 257] = \"Measurement\";\n  return VoltageMeasurementReg2;\n})(VoltageMeasurementReg || {});\nvar SRV_WATER_LEVEL = 343630573;\nvar WaterLevelVariant = /* @__PURE__ */ ((WaterLevelVariant2) => {\n  WaterLevelVariant2[WaterLevelVariant2[\"Resistive\"] = 1] = \"Resistive\";\n  WaterLevelVariant2[WaterLevelVariant2[\"ContactPhotoElectric\"] = 2] = \"ContactPhotoElectric\";\n  WaterLevelVariant2[WaterLevelVariant2[\"NonContactPhotoElectric\"] = 3] = \"NonContactPhotoElectric\";\n  return WaterLevelVariant2;\n})(WaterLevelVariant || {});\nvar WaterLevelReg = /* @__PURE__ */ ((WaterLevelReg2) => {\n  WaterLevelReg2[WaterLevelReg2[\"Level\"] = 257] = \"Level\";\n  WaterLevelReg2[WaterLevelReg2[\"LevelError\"] = 262] = \"LevelError\";\n  WaterLevelReg2[WaterLevelReg2[\"Variant\"] = 263] = \"Variant\";\n  return WaterLevelReg2;\n})(WaterLevelReg || {});\nvar SRV_WEIGHT_SCALE = 525160512;\nvar WeightScaleVariant = /* @__PURE__ */ ((WeightScaleVariant2) => {\n  WeightScaleVariant2[WeightScaleVariant2[\"Body\"] = 1] = \"Body\";\n  WeightScaleVariant2[WeightScaleVariant2[\"Food\"] = 2] = \"Food\";\n  WeightScaleVariant2[WeightScaleVariant2[\"Jewelry\"] = 3] = \"Jewelry\";\n  return WeightScaleVariant2;\n})(WeightScaleVariant || {});\nvar WeightScaleReg = /* @__PURE__ */ ((WeightScaleReg2) => {\n  WeightScaleReg2[WeightScaleReg2[\"Weight\"] = 257] = \"Weight\";\n  WeightScaleReg2[WeightScaleReg2[\"WeightError\"] = 262] = \"WeightError\";\n  WeightScaleReg2[WeightScaleReg2[\"ZeroOffset\"] = 128] = \"ZeroOffset\";\n  WeightScaleReg2[WeightScaleReg2[\"Gain\"] = 129] = \"Gain\";\n  WeightScaleReg2[WeightScaleReg2[\"MaxWeight\"] = 261] = \"MaxWeight\";\n  WeightScaleReg2[WeightScaleReg2[\"MinWeight\"] = 260] = \"MinWeight\";\n  WeightScaleReg2[WeightScaleReg2[\"WeightResolution\"] = 264] = \"WeightResolution\";\n  WeightScaleReg2[WeightScaleReg2[\"Variant\"] = 263] = \"Variant\";\n  return WeightScaleReg2;\n})(WeightScaleReg || {});\nvar WeightScaleCmd = /* @__PURE__ */ ((WeightScaleCmd2) => {\n  WeightScaleCmd2[WeightScaleCmd2[\"CalibrateZeroOffset\"] = 128] = \"CalibrateZeroOffset\";\n  WeightScaleCmd2[WeightScaleCmd2[\"CalibrateGain\"] = 129] = \"CalibrateGain\";\n  return WeightScaleCmd2;\n})(WeightScaleCmd || {});\nvar SRV_WIFI = 413852154;\nvar WifiAPFlags = /* @__PURE__ */ ((WifiAPFlags3) => {\n  WifiAPFlags3[WifiAPFlags3[\"HasPassword\"] = 1] = \"HasPassword\";\n  WifiAPFlags3[WifiAPFlags3[\"WPS\"] = 2] = \"WPS\";\n  WifiAPFlags3[WifiAPFlags3[\"HasSecondaryChannelAbove\"] = 4] = \"HasSecondaryChannelAbove\";\n  WifiAPFlags3[WifiAPFlags3[\"HasSecondaryChannelBelow\"] = 8] = \"HasSecondaryChannelBelow\";\n  WifiAPFlags3[WifiAPFlags3[\"IEEE_802_11B\"] = 256] = \"IEEE_802_11B\";\n  WifiAPFlags3[WifiAPFlags3[\"IEEE_802_11A\"] = 512] = \"IEEE_802_11A\";\n  WifiAPFlags3[WifiAPFlags3[\"IEEE_802_11G\"] = 1024] = \"IEEE_802_11G\";\n  WifiAPFlags3[WifiAPFlags3[\"IEEE_802_11N\"] = 2048] = \"IEEE_802_11N\";\n  WifiAPFlags3[WifiAPFlags3[\"IEEE_802_11AC\"] = 4096] = \"IEEE_802_11AC\";\n  WifiAPFlags3[WifiAPFlags3[\"IEEE_802_11AX\"] = 8192] = \"IEEE_802_11AX\";\n  WifiAPFlags3[WifiAPFlags3[\"IEEE_802_LongRange\"] = 32768] = \"IEEE_802_LongRange\";\n  return WifiAPFlags3;\n})(WifiAPFlags || {});\nvar WifiCmd = /* @__PURE__ */ ((WifiCmd2) => {\n  WifiCmd2[WifiCmd2[\"LastScanResults\"] = 128] = \"LastScanResults\";\n  WifiCmd2[WifiCmd2[\"AddNetwork\"] = 129] = \"AddNetwork\";\n  WifiCmd2[WifiCmd2[\"Reconnect\"] = 130] = \"Reconnect\";\n  WifiCmd2[WifiCmd2[\"ForgetNetwork\"] = 131] = \"ForgetNetwork\";\n  WifiCmd2[WifiCmd2[\"ForgetAllNetworks\"] = 132] = \"ForgetAllNetworks\";\n  WifiCmd2[WifiCmd2[\"SetNetworkPriority\"] = 133] = \"SetNetworkPriority\";\n  WifiCmd2[WifiCmd2[\"Scan\"] = 134] = \"Scan\";\n  WifiCmd2[WifiCmd2[\"ListKnownNetworks\"] = 135] = \"ListKnownNetworks\";\n  return WifiCmd2;\n})(WifiCmd || {});\nvar WifiReg = /* @__PURE__ */ ((WifiReg2) => {\n  WifiReg2[WifiReg2[\"Rssi\"] = 257] = \"Rssi\";\n  WifiReg2[WifiReg2[\"Enabled\"] = 1] = \"Enabled\";\n  WifiReg2[WifiReg2[\"IpAddress\"] = 385] = \"IpAddress\";\n  WifiReg2[WifiReg2[\"Eui48\"] = 386] = \"Eui48\";\n  WifiReg2[WifiReg2[\"Ssid\"] = 387] = \"Ssid\";\n  return WifiReg2;\n})(WifiReg || {});\nvar WifiEvent = /* @__PURE__ */ ((WifiEvent2) => {\n  WifiEvent2[WifiEvent2[\"GotIp\"] = 1] = \"GotIp\";\n  WifiEvent2[WifiEvent2[\"LostIp\"] = 2] = \"LostIp\";\n  WifiEvent2[WifiEvent2[\"ScanComplete\"] = 128] = \"ScanComplete\";\n  WifiEvent2[WifiEvent2[\"NetworksChanged\"] = 129] = \"NetworksChanged\";\n  WifiEvent2[WifiEvent2[\"ConnectionFailed\"] = 130] = \"ConnectionFailed\";\n  return WifiEvent2;\n})(WifiEvent || {});\nvar SRV_WIND_DIRECTION = 409725227;\nvar WindDirectionReg = /* @__PURE__ */ ((WindDirectionReg2) => {\n  WindDirectionReg2[WindDirectionReg2[\"WindDirection\"] = 257] = \"WindDirection\";\n  WindDirectionReg2[WindDirectionReg2[\"WindDirectionError\"] = 262] = \"WindDirectionError\";\n  return WindDirectionReg2;\n})(WindDirectionReg || {});\nvar SRV_WIND_SPEED = 458824639;\nvar WindSpeedReg = /* @__PURE__ */ ((WindSpeedReg2) => {\n  WindSpeedReg2[WindSpeedReg2[\"WindSpeed\"] = 257] = \"WindSpeed\";\n  WindSpeedReg2[WindSpeedReg2[\"WindSpeedError\"] = 262] = \"WindSpeedError\";\n  WindSpeedReg2[WindSpeedReg2[\"MaxWindSpeed\"] = 261] = \"MaxWindSpeed\";\n  return WindSpeedReg2;\n})(WindSpeedReg || {});\n\n// src/jdom/constants.ts\nvar CMD_GET_REG = 4096;\nvar CMD_SET_REG = 8192;\nvar CMD_EVENT_MASK = 32768;\nvar CMD_EVENT_CODE_MASK = 255;\nvar CMD_EVENT_COUNTER_POS = 8;\nvar CMD_EVENT_COUNTER_MASK = 127;\nvar CMD_TOP_MASK = 61440;\nvar CMD_REG_MASK = 4095;\nvar ACK_MIN_DELAY = 90;\nvar ACK_MAX_DELAY = 120;\nvar CMD_ADVERTISEMENT_DATA = 0;\nvar PIPE_PORT_SHIFT = 7;\nvar PIPE_COUNTER_MASK = 31;\nvar PIPE_CLOSE_MASK = 32;\nvar PIPE_METADATA_MASK = 64;\nvar JD_SERIAL_HEADER_SIZE = 16;\nvar JD_SERIAL_MAX_PAYLOAD_SIZE = 236;\nvar JD_SERVICE_INDEX_MASK = 63;\nvar JD_SERVICE_INDEX_INV_MASK = 192;\nvar JD_SERVICE_INDEX_CRC_ACK = 63;\nvar JD_SERVICE_INDEX_PIPE = 62;\nvar JD_SERVICE_INDEX_MAX_NORMAL = 48;\nvar JD_SERVICE_INDEX_CTRL = 0;\nvar JD_FRAME_FLAG_COMMAND = 1;\nvar JD_FRAME_FLAG_ACK_REQUESTED = 2;\nvar JD_FRAME_FLAG_IDENTIFIER_IS_SERVICE_CLASS = 4;\nvar JD_ADVERTISEMENT_0_COUNTER_MASK = 15;\nvar JD_ADVERTISEMENT_0_ACK_SUPPORTED = 256;\nvar JD_DEVICE_LOST_DELAY = 1500;\nvar JD_DEVICE_DISCONNECTED_DELAY = 3e3;\nvar RESET_IN_TIME_US = 2e6;\nvar MAX_SERVICES_LENGTH = 59;\nvar NEW_LISTENER = \"newListener\";\nvar REMOVE_LISTENER = \"removeListener\";\nvar CONNECTION_STATE = \"connectionState\";\nvar CONNECT = \"connect\";\nvar LOST = \"lost\";\nvar FOUND = \"found\";\nvar CONNECTING = \"connecting\";\nvar DISCONNECT = \"disconnect\";\nvar DISCONNECTING = \"disconnecting\";\nvar ANNOUNCE = \"announce\";\nvar START = \"start\";\nvar RESTART = \"restart\";\nvar STOP = \"stop\";\nvar CHANGE = \"change\";\nvar EVENT = \"event\";\nvar RENDER = \"render\";\nvar REFRESH = \"refresh\";\nvar MESSAGE = \"message\";\nvar FIRMWARE_BLOBS_CHANGE = \"firmwareBlobsChange\";\nvar LATE = \"late\";\nvar GET_ATTEMPT = \"getAttempt\";\nvar SERVICE_CLIENT_ADDED = `serviceClientAdded`;\nvar SERVICE_CLIENT_REMOVED = `serviceClientRemoved`;\nvar READING_SENT = \"readingSent\";\nvar ROLE_CHANGE = \"roleChange\";\nvar ROLE_MANAGER_CHANGE = \"roleManagerChange\";\nvar SERVICE_PROVIDER_ADDED = `serviceProviderAdded`;\nvar SERVICE_PROVIDER_REMOVED = `serviceProviderRemoved`;\nvar IDENTIFY = \"identify\";\nvar IDENTIFY_DURATION = 2e3;\nvar RESET = \"reset\";\nvar DATA = \"data\";\nvar CLOSE = \"close\";\nvar DEVICE_CONNECT = \"deviceConnect\";\nvar DEVICE_LOST = \"deviceLost\";\nvar DEVICE_FOUND = \"deviceFound\";\nvar DEVICE_DISCONNECT = \"deviceDisconnect\";\nvar DEVICE_ANNOUNCE = \"deviceAnnounce\";\nvar DEVICE_PACKET_ANNOUNCE = \"devicePacketAnnounce\";\nvar DEVICE_RESTART = \"deviceRestart\";\nvar DEVICE_CHANGE = \"deviceChange\";\nvar DEVICE_FIRMWARE_INFO = \"firmwareInfo\";\nvar DEVICE_CLEAN = \"deviceClean\";\nvar SELF_ANNOUNCE = \"selfAnnounce\";\nvar PACKET_SEND = \"packetSend\";\nvar PACKET_SEND_DISCONNECT = \"packetSendDisconnect\";\nvar PACKET_PRE_PROCESS = \"packetPreProcess\";\nvar PACKET_PROCESS = \"packetProcess\";\nvar PACKET_RECEIVE = \"packetReceive\";\nvar PACKET_RECEIVE_ANNOUNCE = \"packetReceiveAnnounce\";\nvar PACKET_RECEIVE_NO_DEVICE = \"packetReceiveNoDevice\";\nvar PACKET_EVENT = \"packetEvent\";\nvar PACKET_REPORT = \"packetReport\";\nvar PACKET_ANNOUNCE = \"packetAnnounce\";\nvar PACKET_INVALID_CRC = \"packetInvalidCrc\";\nvar PACKET_INVALID_DATA = \"packetInvalidData\";\nvar PACKET_DATA_NORMALIZE = \"packetDataNormalize\";\nvar REPORT_RECEIVE = \"reportReceive\";\nvar REPORT_UPDATE = \"reportUpdate\";\nvar COMMAND_RECEIVE = \"commandReceive\";\nvar ERROR = \"error\";\nvar PANIC = \"panic\";\nvar TRACE = \"trace\";\nvar TIMEOUT = \"timeout\";\nvar TIMEOUT_DISCONNECT = \"timeoutDisconnect\";\nvar GLOBALS_UPDATED = \"globalsUpdated\";\nvar PROGRESS = \"progress\";\nvar PACKET_KIND_RW = \"rw\";\nvar PACKET_KIND_RO = \"ro\";\nvar PACKET_KIND_EVENT = \"event\";\nvar PACKET_KIND_ANNOUNCE = \"announce\";\nvar REGISTER_NODE_NAME = \"register\";\nvar REPORT_NODE_NAME = \"report\";\nvar CONST_NODE_NAME = \"const\";\nvar EVENT_NODE_NAME = \"event\";\nvar SERVICE_NODE_NAME = \"service\";\nvar SERVICE_MIXIN_NODE_NAME = \"serviceMixin\";\nvar DEVICE_NODE_NAME = \"device\";\nvar VIRTUAL_DEVICE_NODE_NAME = \"virtualdevice\";\nvar BUS_NODE_NAME = \"bus\";\nvar COMMAND_NODE_NAME = \"command\";\nvar FIELD_NODE_NAME = \"field\";\nvar PIPE_NODE_NAME = \"pipe\";\nvar PIPE_REPORT_NODE_NAME = \"pipe_report\";\nvar CRC_ACK_NODE_NAME = \"crcAck\";\nvar SERVICE_TEST_NODE_NAME = \"serviceTest\";\nvar REGISTER_REFRESH_TIMEOUT = 150;\nvar REGISTER_REFRESH_RETRY_0 = 30;\nvar REGISTER_REFRESH_RETRY_1 = 80;\nvar REGISTER_POLL_STREAMING_INTERVAL = 5e3;\nvar REGISTER_POLL_FIRST_REPORT_INTERVAL = 400;\nvar REGISTER_POLL_REPORT_INTERVAL = 5001;\nvar REGISTER_POLL_REPORT_MAX_INTERVAL = 6e4;\nvar REGISTER_POLL_REPORT_VOLATILE_INTERVAL = 1e3;\nvar REGISTER_POLL_REPORT_VOLATILE_MAX_INTERVAL = 5e3;\nvar REGISTER_OPTIONAL_POLL_COUNT = 3;\nvar STREAMING_DEFAULT_INTERVAL = 50;\nvar FLASH_MAX_DEVICES = 6;\nvar PING_LOGGERS_POLL = 2400;\nvar ROLE_MANAGER_POLL = 1500;\nvar REFRESH_REGISTER_POLL = 50;\nvar USB_TRANSPORT = \"usb\";\nvar BLUETOOTH_TRANSPORT = \"bluetooth\";\nvar SERIAL_TRANSPORT = \"serial\";\nvar PACKETIO_TRANSPORT = \"packetio\";\nvar WEBSOCKET_TRANSPORT = \"web\";\nvar NODESOCKET_TRANSPORT = \"tcp\";\nvar HF2_TIMEOUT = 1e3;\nvar META_ACK = \"ACK\";\nvar META_ACK_FAILED = \"ACK_FAILED\";\nvar META_PIPE = \"PIPE\";\nvar META_GET = \"GET\";\nvar META_TRACE = \"TRACE\";\nvar META_TRACE_DESCRIPTION = \"TRACE_DESCRIPTION\";\nvar META_NOT_IMPLEMENTED = \"NOT_IMPLEMENTED\";\nvar REGISTER_PRE_GET = \"registerPreGet\";\nvar TRACE_FILTER_HORIZON = 100;\nvar EMBED_MIN_ASPECT_RATIO = 1.22;\nvar BLUETOOTH_JACDAC_SERVICE = \"f8530001-a97f-49f5-a554-3e373fbea2d5\";\nvar BLUETOOTH_JACDAC_RX_CHARACTERISTIC = \"f8530002-a97f-49f5-a554-3e373fbea2d5\";\nvar BLUETOOTH_JACDAC_TX_CHARACTERISTIC = \"f8530003-a97f-49f5-a554-3e373fbea2d5\";\nvar BLUETOOTH_JACDAC_DIAG_CHARACTERISTIC = \"f8530004-a97f-49f5-a554-3e373fbea2d5\";\nvar TRANSPORT_CONNECT_RETRY_DELAY = 500;\nvar TRANSPORT_PULSE_TIMEOUT = 6e4;\nvar ERROR_MICROBIT_V1 = \"microbit/v1-not-supported\";\nvar ERROR_MICROBIT_UNKNOWN = \"microbit/unknown-hardware-revision\";\nvar ERROR_MICROBIT_JACDAC_MISSING = \"microbit/jacdac-missing\";\nvar ERROR_MICROBIT_INVALID_MEMORY = \"microbit/invalid-memory\";\nvar ERROR_TRANSPORT_DEVICE_LOCKED = \"transport/device-locked\";\nvar ROLE_BOUND = \"roleBound\";\nvar ROLE_UNBOUND = \"roleUnbound\";\nvar ROLE_HAS_NO_SERVICE = \"roleHasNoService\";\nvar BOUND = \"bound\";\nvar UNBOUND = \"unbound\";\nvar JACDAC_ERROR = \"JacdacError\";\nvar TIMEOUT_ERROR_CODE = \"Timeout\";\nvar TRANSPORT_CLOSED_ERROR_CODE = \"TransportClosed\";\nvar DOCS_ROOT = \"https://microsoft.github.io/jacdac-docs/\";\n\n// jacdac-spec/spectool/jdutils.ts\nfunction isMixinService(serviceClass2) {\n  return (serviceClass2 & 536870912) === 536870912;\n}\nfunction parseIntFloat(spec, w, allowFloat = false) {\n  if (/^-?0x[a-f\\d_]+$/i.test(w) || /^-?[\\d_]+$/.test(w)) {\n    const v = parseInt(w.replace(/_/g, \"\"));\n    if (isNaN(v))\n      throw new Error(\"can't parse int: \" + w);\n    return v;\n  }\n  if (allowFloat && /^-?\\d*(\\.\\d*)?(e(-?)\\d+)?$/.test(w)) {\n    const v = parseFloat(w);\n    if (isNaN(v))\n      throw new Error(\"can't parse float: \" + w);\n    return v;\n  }\n  const ww = w.split(/\\./);\n  if (ww.length != 2) {\n    throw new Error(`expecting int or enum member here`);\n  }\n  const en = spec.enums[ww[0]];\n  if (!en) {\n    throw new Error(`${ww[0]} is not an enum type`);\n  }\n  if (!en.members.hasOwnProperty(ww[1]))\n    throw new Error(`${ww[1]} is not a member of ${ww[0]}`);\n  return en.members[ww[1]] || 0;\n}\n\n// jacdac-spec/spectool/jdspec.ts\nvar DEVICE_IMAGE_WIDTH = 1024;\nvar DEVICE_IMAGE_HEIGHT = 768;\nvar unitDescription = {\n  \"\\xB0\": \"angle\",\n  \"\\xB0/s\": \"rotation rate\",\n  \"\\xB0/s2\": \"rotation acceleration\",\n  m: \"meter\",\n  kg: \"kilogram\",\n  s: \"second\",\n  A: \"ampere\",\n  K: \"kelvin\",\n  cd: \"candela\",\n  mol: \"mole\",\n  Hz: \"hertz\",\n  rad: \"radian\",\n  sr: \"steradian\",\n  N: \"newton\",\n  Pa: \"pascal\",\n  J: \"joule\",\n  W: \"watt\",\n  C: \"coulomb\",\n  V: \"volt\",\n  F: \"farad\",\n  Ohm: \"ohm\",\n  S: \"siemens\",\n  Wb: \"weber\",\n  T: \"tesla\",\n  H: \"henry\",\n  \"\\xB0C\": \"degrees Celsius\",\n  lm: \"lumen\",\n  lx: \"lux\",\n  Bq: \"becquerel\",\n  Gy: \"gray\",\n  Sv: \"sievert\",\n  kat: \"katal\",\n  m2: \"square meter (area)\",\n  m3: \"cubic meter (volume)\",\n  \"m/s\": \"meter per second (velocity)\",\n  \"m/s2\": \"meter per square second (acceleration)\",\n  \"m3/s\": \"cubic meter per second (flow rate)\",\n  \"W/m2\": \"watt per square meter (irradiance)\",\n  \"cd/m2\": \"candela per square meter (luminance)\",\n  bit: \"bit (information content)\",\n  \"bit/s\": \"bit per second (data rate)\",\n  lat: \"degrees latitude\",\n  lon: \"degrees longitude\",\n  pH: \"pH value (acidity; logarithmic quantity)\",\n  dB: \"decibel (logarithmic quantity)\",\n  dBW: \"decibel relative to 1 W (power level)\",\n  count: \"1 (counter value)\",\n  \"/\": \"1 (ratio e.g., value of a switch)\",\n  \"%RH\": \"Percentage (Relative Humidity)\",\n  \"%EL\": \"Percentage (remaining battery energy level)\",\n  EL: \"seconds (remaining battery energy level)\",\n  \"1/s\": \"1 per second (event rate)\",\n  \"S/m\": \"Siemens per meter (conductivity)\",\n  B: \"Byte (information content)\",\n  VA: \"volt-ampere (Apparent Power)\",\n  VAs: \"volt-ampere second (Apparent Energy)\",\n  var: \"volt-ampere reactive (Reactive Power)\",\n  vars: \"volt-ampere-reactive second (Reactive Energy)\",\n  \"J/m\": \"joule per meter (Energy per distance)\",\n  \"kg/m3\": \"kilogram per cubic meter (mass density, mass concentration)\",\n  \"s/60\\xB0\": \"servo speed (time to travel 60\\xB0)\",\n  \"kg/cm\": \"torque\",\n  hsv: \"bit HSV color\",\n  rgb: \"RGB color\",\n  rpm: \"revolutions per minute\",\n  uv: \"UV index\",\n  lux: \"illuminance\",\n  bpm: \"beats per minute\",\n  mcd: \"micro candella\",\n  px: \"pixel\"\n};\nvar secondaryUnitConverters = {\n  ms: { name: \"millisecond\", unit: \"s\", scale: 1 / 1e3, offset: 0 },\n  min: { name: \"minute\", unit: \"s\", scale: 60, offset: 0 },\n  h: { name: \"hour\", unit: \"s\", scale: 3600, offset: 0 },\n  MHz: { name: \"megahertz\", unit: \"Hz\", scale: 1e6, offset: 0 },\n  kW: { name: \"kilowatt\", unit: \"W\", scale: 1e3, offset: 0 },\n  kVA: { name: \"kilovolt-ampere\", unit: \"VA\", scale: 1e3, offset: 0 },\n  kvar: { name: \"kilovar\", unit: \"var\", scale: 1e3, offset: 0 },\n  Ah: { name: \"ampere-hour\", unit: \"C\", scale: 3600, offset: 0 },\n  Wh: { name: \"watt-hour\", unit: \"J\", scale: 3600, offset: 0 },\n  kWh: { name: \"kilowatt-hour\", unit: \"J\", scale: 36e5, offset: 0 },\n  varh: { name: \"var-hour\", unit: \"vars\", scale: 3600, offset: 0 },\n  kvarh: { name: \"kilovar-hour\", unit: \"vars\", scale: 36e5, offset: 0 },\n  kVAh: {\n    name: \"kilovolt-ampere-hour\",\n    unit: \"VAs\",\n    scale: 36e5,\n    offset: 0\n  },\n  \"Wh/km\": {\n    name: \"watt-hour per kilometer\",\n    unit: \"J/m\",\n    scale: 3.6,\n    offset: 0\n  },\n  KiB: { name: \"kibibyte\", unit: \"B\", scale: 1024, offset: 0 },\n  GB: { name: \"gigabyte\", unit: \"B\", scale: 1e9, offset: 0 },\n  \"Mbit/s\": {\n    name: \"megabit per second\",\n    unit: \"bit/s\",\n    scale: 1e6,\n    offset: 0\n  },\n  \"B/s\": { name: \"byte per second\", unit: \"bit/s\", scale: 8, offset: 0 },\n  \"MB/s\": {\n    name: \"megabyte per second\",\n    unit: \"bit/s\",\n    scale: 8e6,\n    offset: 0\n  },\n  mV: { name: \"millivolt\", unit: \"V\", scale: 1 / 1e3, offset: 0 },\n  mA: { name: \"milliampere\", unit: \"A\", scale: 1 / 1e3, offset: 0 },\n  dBm: { name: \"decibel (milliwatt)\", unit: \"dBW\", scale: 1, offset: -30 },\n  \"ug/m3\": {\n    name: \"microgram per cubic meter\",\n    unit: \"kg/m3\",\n    scale: 1e-9,\n    offset: 0\n  },\n  \"mm/h\": {\n    name: \"millimeter per hour\",\n    unit: \"m/s\",\n    scale: 1 / 36e5,\n    offset: 0\n  },\n  \"m/h\": { name: \"meter per hour\", unit: \"m/s\", scale: 1 / 3600, offset: 0 },\n  \"cm/s\": {\n    name: \"centimeter per seconds\",\n    unit: \"m/s\",\n    scale: 1 / 100,\n    offset: 0\n  },\n  ppm: { name: \"parts per million\", unit: \"/\", scale: 1e-6, offset: 0 },\n  ppb: { name: \"parts per billion\", unit: \"/\", scale: 1e-9, offset: 0 },\n  \"/100\": { name: \"percent\", unit: \"/\", scale: 1 / 100, offset: 0 },\n  \"%\": { name: \"percent\", unit: \"/\", scale: 1 / 100, offset: 0 },\n  \"/1000\": { name: \"permille\", unit: \"/\", scale: 1 / 1e3, offset: 0 },\n  hPa: { name: \"hectopascal\", unit: \"Pa\", scale: 100, offset: 0 },\n  mm: { name: \"millimeter\", unit: \"m\", scale: 1 / 1e3, offset: 0 },\n  cm: { name: \"centimeter\", unit: \"m\", scale: 1 / 100, offset: 0 },\n  km: { name: \"kilometer\", unit: \"m\", scale: 1e3, offset: 0 },\n  \"km/h\": {\n    name: \"kilometer per hour\",\n    unit: \"m/s\",\n    scale: 1 / 3.6,\n    offset: 0\n  },\n  \"8ms\": { name: \"8 milliseconds\", unit: \"s\", scale: 8 / 1e3, offset: 0 },\n  nm: { name: \"nanometer\", unit: \"m\", scale: 1e-9, offset: 0 },\n  nT: { name: \"nano Tesla\", unit: \"T\", scale: 1e9, offset: 0 },\n  frac: { name: \"ratio\", unit: \"/\", scale: 1, offset: 0 },\n  us: { name: \"micro seconds\", unit: \"s\", scale: 1e-6, offset: 0 },\n  mWh: { name: \"micro watt-hour\", unit: \"J\", scale: 36e-4, offset: 0 },\n  g: { name: \"earth gravity\", unit: \"m/s2\", scale: 9.80665, offset: 0 },\n  \"#\": { name: \"count\", unit: \"#\", scale: 1, offset: 0 }\n};\nvar encodings = {\n  json: \"JSON\",\n  bitset: \"bitset\"\n};\nfunction resolveUnit(unit) {\n  if (!unit)\n    return { name: \"\", scale: 1, offset: 1 };\n  const su = secondaryUnitConverters[unit];\n  if (su)\n    return su;\n  const name = unitDescription[unit];\n  if (name)\n    return { name, unit, scale: 1, offset: 0 };\n  return void 0;\n}\nfunction units() {\n  const r = [];\n  Object.keys(unitDescription).forEach((k) => {\n    r.push({ name: k, description: unitDescription[k] });\n    Object.keys(secondaryUnitConverters).filter((scd) => secondaryUnitConverters[scd].unit === k).forEach((scd) => r.push({\n      name: scd,\n      description: secondaryUnitConverters[scd].name\n    }));\n  });\n  r.sort((l, r2) => l.name.localeCompare(r2.name));\n  return r;\n}\nvar identifierRanges = {\n  rw: [\n    [1, 127],\n    [128, 255],\n    [512, 3839],\n    [3840, 4095]\n  ],\n  ro: [\n    [256, 383],\n    [384, 511],\n    [512, 3839],\n    [3840, 4095]\n  ],\n  const: [\n    [256, 383],\n    [384, 511],\n    [512, 3839],\n    [3840, 4095]\n  ],\n  command: [\n    [0, 127],\n    [128, 3839],\n    [3840, 4095]\n  ],\n  report: [\n    [0, 127],\n    [128, 3839],\n    [3840, 4095]\n  ],\n  event: [\n    [0, 127],\n    [128, 255]\n  ]\n};\nfunction parseServiceSpecificationMarkdownToJSON(filecontent, includes, filename = \"\") {\n  filecontent = (filecontent || \"\").replace(/\\r/g, \"\");\n  const info = {\n    name: \"\",\n    status: \"experimental\",\n    shortId: filename.replace(/\\.md$/, \"\").replace(/.*\\//, \"\"),\n    camelName: \"\",\n    shortName: \"\",\n    extends: [],\n    notes: {},\n    classIdentifier: 0,\n    enums: {},\n    constants: {},\n    packets: [],\n    tags: []\n  };\n  let backticksType = null;\n  let enumInfo = null;\n  let packetInfo = null;\n  let pipePacket = null;\n  let errors = [];\n  let lineNo = 0;\n  let noteId = \"short\";\n  let lastCmd;\n  let packetsToDescribe;\n  let nextModifier = \"\";\n  const systemInfo = includes == null ? void 0 : includes[\"_system\"];\n  const usedIds = {};\n  for (const prev of values(includes || {})) {\n    if (prev.classIdentifier)\n      usedIds[prev.classIdentifier + \"\"] = prev.name;\n  }\n  try {\n    if (includes[\"_system\"] && includes[\"_base\"])\n      processInclude(\"_base\");\n    for (const line of filecontent.split(/\\n/)) {\n      lineNo++;\n      processLine(line);\n    }\n  } catch (e) {\n    error(\"exception: \" + e.message);\n  }\n  if (errors.length)\n    info.errors = errors;\n  for (const k of Object.keys(info.notes))\n    info.notes[k] = normalizeMD(info.notes[k]);\n  for (const v of info.packets)\n    v.description = normalizeMD(v.description);\n  if (!info.camelName)\n    info.camelName = camelize(info.name.replace(/\\s+/g, \" \").replace(/[ -](.)/g, (f, l) => l.toUpperCase()).replace(/[^\\w]+/g, \"_\"));\n  if (!info.shortName)\n    info.shortName = info.camelName;\n  if (info.camelName == \"system\")\n    info.classIdentifier = 536870897;\n  else if (info.camelName == \"base\")\n    info.classIdentifier = 536870899;\n  else if (info.camelName == \"sensor\")\n    info.classIdentifier = 536870898;\n  if (info.shortName != \"control\" && !info.classIdentifier)\n    error(\"identifier: not specified\");\n  info.packets.forEach((pkt) => pkt.packFormat = packFormat(info, pkt));\n  return info;\n  function processLine(line) {\n    if (backticksType) {\n      if (line.trim() == \"```\") {\n        const prev = backticksType;\n        backticksType = null;\n        if (prev == \"default\")\n          return;\n      }\n    } else {\n      const m = /^```(.*)/.exec(line);\n      if (m) {\n        backticksType = m[1] || \"default\";\n        if (backticksType == \"default\")\n          return;\n      }\n    }\n    const interpret = backticksType == \"default\" || backticksType == null && line.slice(0, 4) == \"    \";\n    if (!interpret) {\n      const m = /^(#+)\\s*(.*)/.exec(line);\n      if (m) {\n        const [, hd, cont] = m;\n        packetsToDescribe = null;\n        const newNoteId = cont.trim().toLowerCase();\n        if (hd == \"#\" && !info.name) {\n          info.name = cont.trim();\n          line = \"\";\n        } else if (newNoteId == \"registers\" || newNoteId == \"commands\" || newNoteId == \"events\" || newNoteId == \"examples\") {\n          noteId = newNoteId;\n          line = \"\";\n        } else {\n          if (noteId == \"short\")\n            noteId = \"long\";\n        }\n      }\n      if (packetsToDescribe) {\n        for (const iface of packetsToDescribe)\n          iface.description += line + \"\\n\";\n      } else {\n        if (line || info.notes[noteId]) {\n          if (!info.notes[noteId])\n            info.notes[noteId] = \"\";\n          info.notes[noteId] += line + \"\\n\";\n        }\n      }\n    } else {\n      if (packetsToDescribe && packetsToDescribe[0].description)\n        packetsToDescribe = null;\n      const expanded = line.replace(/\\/\\/.*/, \"\").replace(/[?@:=,{};]/g, (s) => \" \" + s + \" \").trim();\n      if (!expanded)\n        return;\n      const words = expanded.split(/\\s+/);\n      if (/^[;,]/.test(words[words.length - 1]))\n        words.pop();\n      let cmd = words[0];\n      if (words[1] == \":\" || words[1] == \"=\")\n        cmd = \":\";\n      switch (cmd) {\n        case \"enum\":\n        case \"flags\":\n          startEnum(words);\n          break;\n        case \"define\":\n          constant(words);\n          break;\n        case \"meta\":\n        case \"pipe\":\n        case \"report\":\n        case \"command\":\n        case \"const\":\n        case \"ro\":\n        case \"rw\":\n        case \"event\":\n        case \"client\":\n        case \"volatile\":\n        case \"lowlevel\":\n        case \"unique\":\n        case \"restricted\":\n          startPacket(words);\n          break;\n        case \"}\":\n          if (packetInfo) {\n            finishPacket();\n          } else if (enumInfo) {\n            enumInfo = null;\n          } else {\n            error(\"nothing to end here\");\n          }\n          break;\n        default:\n          if (packetInfo)\n            packetField(words);\n          else if (enumInfo)\n            enumMember(words);\n          else\n            metadataMember(words);\n      }\n    }\n  }\n  function finishPacket() {\n    const paderr = paddingError(packetInfo);\n    if (paderr) {\n      packetInfo.packed = true;\n      error(`${paderr} in ${packetInfo.kind} ${packetInfo.name}`);\n    }\n    let repeats = false;\n    let hadzero = false;\n    for (const p of packetInfo.fields) {\n      if (hadzero) {\n        error(`field ${p.name} in ${packetInfo.kind} ${packetInfo.name} follows a variable-sized field`);\n        break;\n      }\n      if (p.startRepeats) {\n        if (repeats)\n          error(`repeats: can only be specified once; in ${packetInfo.kind} ${packetInfo.name}`);\n        repeats = true;\n      }\n      if (p.storage == 0 && p.type != \"string0\") {\n        if (repeats) {\n          error(`variable-sized field ${p.name} in ${packetInfo.kind} ${packetInfo.name} cannot repeat`);\n          break;\n        }\n        hadzero = true;\n      }\n    }\n    const pid = packetInfo.identifier;\n    const ranges = identifierRanges[packetInfo.kind];\n    if (packetInfo.name != \"set_register\" && packetInfo.name != \"get_register\" && ranges && !ranges.some((range2) => range2[0] <= pid && pid <= range2[1]))\n      error(`${packetInfo.name} identifier 0x${pid.toString(16)} out of range, expected in ${ranges.map((range2) => `[${range2.map((r) => `0x${r.toString(16)}`).join(\", \")}]`).join(\", \")}`);\n    if ([\n      \"reading_error\",\n      \"min_reading\",\n      \"max_reading\",\n      \"reading_resolution\"\n    ].indexOf(packetInfo.identifierName) > -1) {\n      const regid = packetInfo.identifierName;\n      if (packetInfo.fields.length > 1)\n        error(`${regid} must be a number`);\n      const reading = info.packets.find((pkt) => pkt.kind === \"ro\" && pkt.identifierName === \"reading\");\n      if (!reading)\n        error(`${regid} register without a reading register`);\n      else if (packetInfo.fields[0].unit !== reading.fields[0].unit)\n        error(`${regid} unit (${packetInfo.fields[0].unit}) and reading unit (${reading.fields[0].unit}) must match`);\n    }\n    packetInfo = null;\n  }\n  function normalizeMD(md) {\n    return md.replace(/^\\s+/, \"\").replace(/\\s+$/, \"\");\n  }\n  function checkBraces(words) {\n    if (enumInfo || packetInfo)\n      error(\"already in braces\");\n    if (words) {\n      if (words[2] != \"{\")\n        error(`expecting: ${words[0]} NAME {`);\n    }\n    enumInfo = null;\n    packetInfo = null;\n  }\n  function forceSection(sectionId) {\n    if (noteId != sectionId) {\n      error(`this is only allowed in ## ${sectionId} not in ## ${noteId}`);\n    }\n  }\n  function generalKind(k) {\n    switch (k) {\n      case \"const\":\n      case \"ro\":\n      case \"rw\":\n        return \"rw\";\n      default:\n        return k;\n    }\n  }\n  function startPacket(words) {\n    checkBraces(null);\n    let client = void 0;\n    let lowLevel = void 0;\n    let restricted = void 0;\n    let unique2 = void 0;\n    let internal = void 0;\n    let volatile = void 0;\n    function processAttributes() {\n      while (words.length) {\n        if (words[0] === \"restricted\") {\n          restricted = true;\n        } else if (words[0] === \"client\") {\n          client = true;\n        } else if (words[0] === \"lowlevel\") {\n          lowLevel = true;\n        } else if (words[0] === \"unique\") {\n          unique2 = true;\n        } else if (words[0] === \"internal\") {\n          internal = true;\n        } else if (words[0] === \"volatile\") {\n          volatile = true;\n        } else {\n          break;\n        }\n        words.shift();\n      }\n    }\n    processAttributes();\n    const kindSt = words.shift();\n    let kind = \"command\";\n    if (kindSt == \"meta\") {\n      forceSection(\"commands\");\n      let w2 = words.shift();\n      if (w2 == \"pipe\")\n        w2 = words.shift();\n      if (w2 == \"report\" || w2 == \"command\")\n        kind = \"meta_pipe_\" + w2;\n      else\n        error(\"invalid token after meta\");\n    } else if (kindSt == \"pipe\") {\n      forceSection(\"commands\");\n      const w2 = words.shift();\n      if (w2 == \"report\" || w2 == \"command\")\n        kind = \"pipe_\" + w2;\n      else\n        error(\"invalid token after pipe\");\n    } else {\n      kind = kindSt;\n    }\n    processAttributes();\n    if (restricted && kind !== \"command\")\n      error(\"restricted only applies to commands\");\n    if (unique2 && kind !== \"command\")\n      error(\"unique only applies to commands\");\n    if (volatile && kind != \"ro\" && kind != \"rw\")\n      error(\"volatile can only modify ro or rw\");\n    let name = words.shift();\n    const isReport = kind == \"report\";\n    if (isReport && lastCmd && !/^\\w+$/.test(name)) {\n      words.unshift(name);\n      name = lastCmd.name;\n    }\n    packetInfo = {\n      kind,\n      name: normalizeName(name),\n      identifier: void 0,\n      description: \"\",\n      fields: [],\n      internal,\n      client,\n      lowLevel,\n      unique: unique2,\n      volatile,\n      restricted\n    };\n    if (isReport && lastCmd && name == lastCmd.name) {\n      packetInfo.secondary = true;\n      lastCmd.hasReport = true;\n    }\n    if (!packetsToDescribe)\n      packetsToDescribe = [];\n    packetsToDescribe.push(packetInfo);\n    if (words[0] == \"?\") {\n      words.shift();\n      packetInfo.optional = true;\n    }\n    const prev = info.packets.filter((p) => p.name == packetInfo.name);\n    if (prev.length == 0) {\n    } else if (prev.length == 1 && prev[0].kind == \"command\" && packetInfo.kind == \"report\") {\n    } else {\n      error(`packet redefinition ${prev.map((p) => p.name).join(\", \")} `);\n    }\n    if (/pipe/.test(kind)) {\n      if (!pipePacket)\n        error(\"pipe definitions can only occur after the pipe-open packet\");\n      else\n        packetInfo.pipeType = pipePacket.pipeType;\n    }\n    const atat = words.indexOf(\"@\");\n    if (kind == \"pipe_command\" || kind == \"pipe_report\") {\n      packetInfo.identifier = 0;\n    } else if (atat >= 0) {\n      const w = words[atat + 1];\n      let v = parseInt(w);\n      let isSet2 = true;\n      if (isNaN(v)) {\n        v = 0;\n        isSet2 = false;\n        if (systemInfo) {\n          const systemPacket = systemInfo.packets.find((p) => p.name == w);\n          if (systemPacket) {\n            v = systemPacket.identifier;\n            packetInfo.identifierName = w;\n            if (systemPacket.kind != kind)\n              error(`kind mismatch on ${w}: ${systemPacket.kind} vs ${kind}`);\n            else\n              isSet2 = true;\n          } else\n            error(`${w} not found in _system`);\n        } else {\n          error(`${w} cannot be resolved, since _system is missing`);\n        }\n      }\n      if (kind === \"ro\" && (v === 257 || v === 262))\n        packetInfo.volatile = true;\n      let isUser = false;\n      let isSystem = false;\n      let isHigh = 512 <= v && v <= 3839;\n      switch (kind) {\n        case \"const\":\n        case \"ro\":\n          forceSection(\"registers\");\n          isSystem = 256 <= v && v <= 383;\n          isUser = 384 <= v && v <= 511;\n          break;\n        case \"rw\":\n          forceSection(\"registers\");\n          isSystem = 0 <= v && v <= 127;\n          isUser = 128 <= v && v <= 255;\n          break;\n        case \"report\":\n        case \"command\":\n          forceSection(\"commands\");\n          isSystem = 0 <= v && v <= 127;\n          isUser = 128 <= v && v <= 255;\n          isHigh = 256 <= v && v <= 3839;\n          break;\n        case \"event\":\n          forceSection(\"events\");\n          isSystem = 0 <= v && v <= 127;\n          isUser = 128 <= v && v <= 255;\n          break;\n      }\n      if (isUser) {\n      } else if (isSystem) {\n        if (!packetInfo.identifierName)\n          warn3(`${kind} @ ${toHex(v)} should be expressed with a name from _system.md`);\n      } else if (isHigh) {\n        if (!info.highCommands)\n          warn3(`${kind} @ ${toHex(v)} is from the extended range but 'high: 1' missing`);\n      }\n      packetInfo.identifier = v;\n      words.splice(atat, 2);\n    } else {\n      if (isReport && lastCmd)\n        packetInfo.identifier = lastCmd.identifier;\n      else\n        error(`@ not found at ${packetInfo.name}`);\n    }\n    if (info.packets.some((p) => generalKind(p.kind) == generalKind(packetInfo.kind) && (!/pipe/.test(p.kind) || p.pipeType == packetInfo.pipeType) && p.identifier == packetInfo.identifier)) {\n      error(\"packet identifier already used\");\n    }\n    info.packets.push(packetInfo);\n    if (kind == \"command\")\n      lastCmd = packetInfo;\n    else\n      lastCmd = null;\n    if (words[0] == \"=\" || words[0] == \":\") {\n      words.unshift(\"_\");\n      packetField(words);\n      finishPacket();\n    } else {\n      const last = words.shift();\n      if (last == \"{\") {\n        if (words[0] == \"...\")\n          words.shift();\n        if (words[0] == \"}\") {\n          words.shift();\n          finishPacket();\n        }\n        if (words.length)\n          error(`excessive tokens: ${words[0]}...`);\n      } else {\n        if (last === void 0 && kind == \"event\") {\n          finishPacket();\n        } else {\n          error(\"expecting '{'\");\n        }\n      }\n    }\n  }\n  function rangeCheck(tp, v) {\n    const [storage, type, typeShift] = normalizeStorageType(tp);\n    if (isNaN(v))\n      return v;\n    if (storage == 0) {\n      error(`numeric values like ${v} not allowed for ${tp}`);\n      return v;\n    }\n    if (v < 0 && storage > 0) {\n      error(`negative values like ${v} not allowed for ${tp}`);\n      return v;\n    }\n    if (Math.floor(v) != v && typeShift == 0) {\n      error(`only integer values allowed for ${tp}; got ${v}`);\n      return v;\n    }\n    let bits = storage < 0 ? -storage * 8 - 1 : storage * 8;\n    bits -= typeShift || 0;\n    let max = 1;\n    while (bits--)\n      max *= 2;\n    if (-v == max) {\n    } else if (max == 1 && v == 1) {\n    } else {\n      if (Math.abs(v) >= max) {\n        error(`value ${v} is out of range for ${tp}`);\n        return v;\n      }\n    }\n    return v;\n  }\n  function parseVal(words) {\n    const eq = words.shift();\n    if (eq != \"=\" && eq != \":\")\n      error(\"expecting '='\");\n    const val = words.shift();\n    return parseIntCheck(val, true);\n  }\n  function constant(words) {\n    if (words.length != 3) {\n      error(`define syntax is \"define name value\" (${words.join(\" \")}}`);\n      return;\n    }\n    const name = words[1];\n    const svalue = words[2];\n    const hex = /^0x/.test(svalue);\n    const value = hex ? parseInt(svalue, 16) : parseInt(svalue);\n    if (isNaN(value)) {\n      error(\"invalid numeric value for constant\");\n      return;\n    }\n    info.constants[name] = { value, hex };\n  }\n  function packetField(words) {\n    var _a;\n    if (words.length == 2 && (words[0] == \"repeats\" || words[0] == \"segmented\" || words[0] == \"multi-segmented\")) {\n      nextModifier = words[0];\n      return;\n    }\n    const name = normalizeName(words.shift());\n    let defaultValue = void 0;\n    let isOptional = void 0;\n    let op = words.shift();\n    if (op == \"?\") {\n      isOptional = true;\n      op = words.shift();\n    }\n    if (op == \"=\") {\n      defaultValue = parseIntCheck(words.shift(), true);\n      op = words.shift();\n    }\n    if (op != \":\")\n      error(\"expecting ':'\");\n    const tp = words.shift();\n    const [storage, type, typeShift] = normalizeStorageType(tp);\n    const isFloat = typeShift === null || void 0;\n    let tok = words.shift();\n    let unit;\n    let encoding;\n    if (tok != \"{\") {\n      if (type === \"string\" || type === \"bytes\")\n        encoding = normalizeEncoding(tok);\n      else\n        unit = normalizeUnit(tok);\n      tok = words.shift();\n    }\n    if (defaultValue !== void 0)\n      rangeCheck(tp, defaultValue);\n    let shift = typeShift || void 0;\n    if (unit == \"/\") {\n      if (!/^(u0|i1)\\.\\d+$/.test(tp))\n        error(`fraction unit must be used with u0.yyy or i1.yyy data types (got ${tp})`);\n      shift = Math.abs(storage) * 8;\n      if (storage < 0)\n        shift -= 1;\n    }\n    const field = {\n      name,\n      unit,\n      encoding,\n      shift,\n      isFloat,\n      type,\n      storage,\n      isSimpleType: canonicalType(storage) == type || void 0,\n      defaultValue,\n      isOptional,\n      multiSegmented: nextModifier == \"multi-segmented\" || void 0,\n      segmented: nextModifier == \"segmented\" || nextModifier == \"multi-segmented\" || void 0,\n      startRepeats: nextModifier == \"repeats\" || void 0\n    };\n    if (!unit)\n      delete field.unit;\n    if (!encoding)\n      delete field.encoding;\n    if (tok == \"{\") {\n      while (words.length) {\n        tok = words.shift();\n        if (tok == \"}\")\n          break;\n        tok = camelize(tok);\n        switch (tok) {\n          case \"maxBytes\": {\n            ;\n            field[tok] = rangeCheck(\"u8\", parseVal(words));\n            break;\n          }\n          case \"typicalMin\":\n          case \"typicalMax\":\n          case \"absoluteMin\":\n          case \"absoluteMax\": {\n            ;\n            field[tok] = rangeCheck(tp, parseVal(words));\n            break;\n          }\n          case \"preferredInterval\": {\n            if (packetInfo[tok] !== void 0)\n              error(`field ${tok} already set`);\n            packetInfo[tok] = rangeCheck(\"u32\", parseVal(words));\n            break;\n          }\n          default:\n            error(\"unknown constraint: \" + tok);\n            break;\n        }\n        if (words[0] == \",\")\n          words.shift();\n      }\n      if (tok == \"}\")\n        tok = null;\n    }\n    if (tok)\n      error(`excessive tokens at the end of member: ${tok}...`);\n    if (field.typicalMin === void 0 && field.typicalMax !== void 0 && storage > 0)\n      field.typicalMin = 0;\n    if (field.absoluteMin === void 0 && field.absoluteMax !== void 0 && storage > 0)\n      field.absoluteMin = 0;\n    if (!field.storage && field.maxBytes)\n      field.storage = field.maxBytes;\n    if (/pipe/.test(type)) {\n      packetInfo.pipeType = packetInfo.name;\n      if (pipePacket && pipePacket.name == packetInfo.name && packetInfo.kind == \"report\") {\n      } else {\n        pipePacket = packetInfo;\n      }\n    }\n    if (!field.isOptional && ((_a = packetInfo.fields[packetInfo.fields.length - 1]) == null ? void 0 : _a.isOptional)) {\n      error(`all fields after an optional field have to optional`);\n    }\n    packetInfo.fields.push(field);\n    nextModifier = void 0;\n  }\n  function startEnum(words) {\n    checkBraces(null);\n    if (words[2] != \":\" || words[4] != \"{\")\n      error(\"expecting: enum NAME : TYPE {\");\n    enumInfo = {\n      name: normalizeName(words[1]),\n      storage: normalizeStorageType(words[3])[0],\n      isFlags: words[0] == \"flags\" || void 0,\n      members: {}\n    };\n    if (info.enums[enumInfo.name])\n      error(\"enum redefinition\");\n    info.enums[enumInfo.name] = enumInfo;\n  }\n  function enumMember(words) {\n    if (words[1] != \"=\" || words.length != 3)\n      error(`expecting: FIELD_NAME = INTEGER`);\n    enumInfo.members[normalizeName(words[0])] = rangeCheck(canonicalType(enumInfo.storage), parseIntCheck(words[2]));\n  }\n  function parseIntCheck(w, allowFloat = false) {\n    try {\n      return parseIntFloat(info, w, allowFloat);\n    } catch (e) {\n      error(e.message);\n      return 0;\n    }\n  }\n  function looksRandom2(n) {\n    const s = n.toString(16);\n    const h = \"0123456789abcdef\";\n    for (let i = 0; i < h.length; ++i) {\n      const hh = h[i];\n      if (s.indexOf(hh + hh + hh) >= 0)\n        return false;\n    }\n    if (/f00d|dead|deaf|beef/.test(s))\n      return false;\n    return true;\n  }\n  function genRandom() {\n    for (; ; ) {\n      const m = Math.random() * 268435455 | 268435456;\n      if (looksRandom2(m))\n        return m;\n    }\n  }\n  function metadataMember(words) {\n    if (!((words[1] == \"=\" || words[1] == \":\") && (words[0] == \"tags\" || words.length == 3)))\n      error(`expecting: FIELD_NAME = VALUE or FIELD_NAME : VALUE`);\n    switch (words[0]) {\n      case \"extends\":\n        processInclude(words[2]);\n        break;\n      case \"class\":\n      case \"identifier\": {\n        info.classIdentifier = parseIntCheck(words[2]);\n        if (info.name != \"Control\" && info.classIdentifier == 0)\n          info.classIdentifier = 1;\n        const gen = `how about ${toHex(genRandom())}`;\n        if (!(info.classIdentifier == 0 || 268435457 <= info.classIdentifier && info.classIdentifier <= 536870656 || 536870913 <= info.classIdentifier && info.classIdentifier <= 12884901632))\n          error(`class identifier out of range; ${gen}`);\n        if (!looksRandom2(info.classIdentifier))\n          error(`class identifier doesn't look random; ${gen}`);\n        if (usedIds[info.classIdentifier + \"\"])\n          error(`class identifier ${toHex(info.classIdentifier)} already used in ${usedIds[info.classIdentifier + \"\"]}; ${gen}`);\n        break;\n      }\n      case \"camel\":\n        info.camelName = words[2];\n        break;\n      case \"short\":\n        info.shortName = words[2];\n        break;\n      case \"high\":\n        info.highCommands = !!parseIntCheck(words[2]);\n        break;\n      case \"status\":\n        if ([\"stable\", \"experimental\", \"deprecated\", \"rc\"].indexOf(words[2]) > -1)\n          info.status = words[2];\n        else\n          error(\"unknown status\");\n        break;\n      case \"group\":\n        info.group = capitalize(words.slice(2).join(\" \"));\n        break;\n      case \"tags\": {\n        const tags = words.slice(2).filter((w) => w != \",\" && w != \";\");\n        info.tags = info.tags.concat(tags);\n        break;\n      }\n      default:\n        error(\"unknown metadata field: \" + words[0]);\n        break;\n    }\n  }\n  function processInclude(name) {\n    if (name == \"_system\")\n      return;\n    const inner = includes[name];\n    if (!inner)\n      return error(\"include file not found: \" + name);\n    if (info.packets.some((pkt) => !pkt.derived) || values(info.enums).some((e) => !e.derived))\n      error(\"extends: only allowed on top of the .md file\");\n    if (inner.errors)\n      errors = errors.concat(inner.errors);\n    const innerEnums = clone2(inner.enums);\n    Object.keys(innerEnums).filter((k) => !info.enums[k]).forEach((k) => {\n      const ie = innerEnums[k];\n      ie.derived = name;\n      info.enums[k] = ie;\n    });\n    const innerPackets = clone2(inner.packets.filter((pkt) => !info.packets.find((ipkt) => ipkt.kind === pkt.kind && ipkt.identifier === pkt.identifier)));\n    innerPackets.forEach((pkt) => pkt.derived = name);\n    info.packets = [...info.packets, ...innerPackets];\n    if (inner.highCommands)\n      info.highCommands = true;\n    info.extends = inner.extends.concat([name]);\n  }\n  function clone2(v) {\n    return JSON.parse(JSON.stringify(v));\n  }\n  function error(msg) {\n    if (!msg)\n      msg = \"syntax error\";\n    if (errors.some((e) => e.line == lineNo && e.message == msg))\n      return;\n    errors.push({ file: filename, line: lineNo, message: msg });\n  }\n  function warn3(msg) {\n    if (info.camelName == \"system\")\n      return;\n    if (errors.some((e) => e.line == lineNo && e.message == msg))\n      return;\n    errors.push({ file: filename, line: lineNo, message: msg });\n  }\n  function normalizeName(n) {\n    if (!/^\\w+$/.test(n))\n      error(\"expecting name here\");\n    if (n.length > 31)\n      error(`name '${n}' too long`);\n    return n;\n  }\n  function normalizeStorageType(tp) {\n    if (info.enums[tp])\n      return [info.enums[tp].storage, tp, 0];\n    if (!tp)\n      error(\"expecting type here\");\n    const tp2 = tp.replace(/_t$/, \"\").toLowerCase();\n    const m = /^([ui])(\\d+)\\.(\\d+)$/.exec(tp2);\n    if (m) {\n      const a = parseIntCheck(m[2]);\n      const b = parseIntCheck(m[3]);\n      const len = a + b;\n      if (!(len == 8 || len == 16 || len == 32 || len == 64))\n        error(`fixed point ${tp} can't be ${len} bits`);\n      if (a == 0 && m[1] == \"i\")\n        error(`fixed point ${tp} can't be i0.X; has to be at least i1.X`);\n      return [(m[1] == \"i\" ? -1 : 1) * (len >> 3), tp2, b];\n    }\n    switch (tp2) {\n      case \"bool\":\n        return [1, tp2, 0];\n      case \"i8\":\n      case \"u8\":\n      case \"i16\":\n      case \"u16\":\n      case \"i32\":\n      case \"u32\":\n      case \"i64\":\n      case \"u64\": {\n        let sz = parseIntCheck(tp2.replace(/^./, \"\")) >> 3;\n        if (tp2[0] == \"i\")\n          sz = -sz;\n        return [sz, tp2, 0];\n      }\n      case \"f16\":\n        return [2, tp2, null];\n      case \"f32\":\n        return [4, tp2, null];\n      case \"f64\":\n        return [8, tp2, null];\n      case \"pipe\":\n        return [12, tp2, 0];\n      case \"pipe_port\":\n        return [2, tp2, 0];\n      case \"devid\":\n        return [8, tp2, 0];\n      case \"bytes\":\n      case \"string\":\n      case \"string0\":\n        return [0, tp2, 0];\n      default: {\n        const m2 = /^u8\\[(\\d+)\\]$/.exec(tp2);\n        if (m2)\n          return [parseIntCheck(m2[1]), tp2, 0];\n        error(\"unknown type: \" + tp + \" \" + tp2);\n        return [4, tp2, 0];\n      }\n    }\n  }\n  function normalizeEncoding(unit) {\n    return unit && encodings[unit.toLowerCase()] || void 0;\n  }\n  function normalizeUnit(unit) {\n    if (unit === void 0 || unit === null)\n      return void 0;\n    if (unitDescription[unit] || secondaryUnitConverters[unit])\n      return unit;\n    error(`expecting unit, got '${unit}'`);\n    return void 0;\n  }\n  function paddingError(iface) {\n    let byteOffset = 0;\n    for (const m of iface.fields) {\n      const sz = memberSize(m);\n      if (sz == 0)\n        continue;\n      const pad = sz > 4 ? 4 : sz;\n      if (!/^u8\\[/.test(m.type) && byteOffset % pad != 0)\n        return `need padding of ${pad - byteOffset % pad} byte(s) before ${m.name}`;\n      byteOffset += sz;\n    }\n    return null;\n  }\n}\nfunction values(o) {\n  const r = [];\n  for (const k of Object.keys(o))\n    r.push(o[k]);\n  return r;\n}\nfunction toUpper(name) {\n  return name == null ? void 0 : name.replace(/([a-z])([A-Z])/g, (x, a, b) => a + \"_\" + b).toUpperCase();\n}\nfunction toLower(name) {\n  return name == null ? void 0 : name.replace(/([a-z])([A-Z])/g, (x, a, b) => a + \"_\" + b).toLowerCase();\n}\nfunction packed(iface) {\n  if (!iface.packed)\n    return \"\";\n  else\n    return \" __attribute__((packed))\";\n}\nfunction cStorage(tp) {\n  if (tp == 0 || [1, 2, 4, 8].indexOf(Math.abs(tp)) < 0)\n    return \"bytes\";\n  if (tp < 0)\n    return `int${-tp * 8}_t`;\n  else\n    return `uint${tp * 8}_t`;\n}\nfunction cSharpStorage(tp) {\n  if (tp == 0 || [1, 2, 4, 8].indexOf(Math.abs(tp)) < 0)\n    return \"bytes\";\n  switch (tp) {\n    case -1:\n      return \"sbyte\";\n    case 1:\n      return \"byte\";\n    case -2:\n      return \"short\";\n    case 2:\n      return \"ushort\";\n    case -4:\n      return \"int\";\n    case 4:\n      return \"uint\";\n  }\n  return `unknown({${tp})`;\n}\nfunction canonicalType(tp) {\n  if (tp == 0)\n    return \"bytes\";\n  if (tp < 0)\n    return `i${-tp * 8}`;\n  else\n    return `u${tp * 8}`;\n}\nfunction isRegister(k) {\n  return k == \"ro\" || k == \"rw\" || k == \"const\";\n}\nfunction toHex(n) {\n  if (n === void 0)\n    return \"\";\n  if (n < 0)\n    return \"-\" + toHex(n);\n  return \"0x\" + n.toString(16);\n}\nfunction unitPref(f) {\n  if (!f.unit)\n    return \"\";\n  else\n    return prettyUnit(f.unit) + \" \";\n}\nfunction prettyUnit(u) {\n  switch (u) {\n    case \"us\":\n      return \"\\u03BCs\";\n    case \"C\":\n      return \"\\xB0C\";\n    case \"/\":\n      return \"ratio\";\n    default:\n      return u;\n  }\n}\nfunction toPython(info, language) {\n  const r = [`# Autogenerated constants for ${info.name} service`];\n  if (Object.keys(info.enums).length)\n    r.push(\"from enum import IntEnum\");\n  const docsLength = r.length;\n  const desktop = language === \"py\";\n  const packFormats = {};\n  if (desktop)\n    r.push(\"from jacdac.constants import *\");\n  let pref = \"JD_\" + toUpper(info.shortName) + \"_\";\n  if (info.shortId[0] == \"_\")\n    pref = \"JD_\";\n  if (info.shortId[0] != \"_\")\n    r.push(`JD_SERVICE_CLASS_${toUpper(info.shortName)} = const(${toHex(info.classIdentifier)})`);\n  for (const cst in info.constants) {\n    const { value, hex } = info.constants[cst];\n    r.push(`JD_${toUpper(cst)} = const(${hex ? value.toString() : toHex(value)})\n`);\n  }\n  if (Object.keys(info.enums).length) {\n    for (const en of values(info.enums).filter((en2) => !en2.derived)) {\n      r.push(\"\");\n      r.push(\"\");\n      r.push(`class ${upperCamel(info.shortName)}${upperCamel(en.name)}(IntEnum):`);\n      for (const k of Object.keys(en.members))\n        r.push(`    ${toUpper(k)} = const(${toHex(en.members[k])})`);\n    }\n    r.push(\"\");\n    r.push(\"\");\n  }\n  let useIdentifiers = false;\n  for (const pkt of info.packets) {\n    if (pkt.derived)\n      continue;\n    if (!pkt.secondary && pkt.kind != \"pipe_command\" && pkt.kind != \"pipe_report\") {\n      let inner = \"CMD\";\n      if (isRegister(pkt.kind))\n        inner = \"REG\";\n      else if (pkt.kind == \"event\")\n        inner = \"EV\";\n      else if (pkt.kind == \"meta_pipe_command\" || pkt.kind == \"meta_pipe_report\")\n        inner = \"PIPE\";\n      let val = toHex(pkt.identifier);\n      if (pkt.identifierName) {\n        val = \"JD_\" + inner + \"_\" + toUpper(pkt.identifierName);\n        useIdentifiers = true;\n      }\n      const name = pref + inner + \"_\" + toUpper(pkt.name);\n      if (name != val) {\n        r.push(`${name} = const(${val})`);\n        if (pkt.packFormat)\n          packFormats[name] = pkt.packFormat;\n      }\n    }\n  }\n  if (desktop && useIdentifiers)\n    r.splice(docsLength + 1, 0, \"from jacdac.system.constants import *\");\n  r.push(`${pref}PACK_FORMATS = {`);\n  r.push(Object.keys(packFormats).map((k) => `    ${k}: \"${packFormats[k]}\"`).join(\",\\n\"));\n  r.push(`}`);\n  r.push(\"\");\n  return r.join(\"\\n\");\n}\nfunction toH(info) {\n  let r = \"// Autogenerated C header file for \" + info.name + \"\\n\";\n  const hdDef = `_JACDAC_SPEC_${toUpper(info.camelName)}_H`;\n  r += `#ifndef ${hdDef}\n`;\n  r += `#define ${hdDef} 1\n`;\n  let pref = \"JD_\" + toUpper(info.shortName) + \"_\";\n  if (info.shortId[0] == \"_\")\n    pref = \"JD_\";\n  if (info.shortId[0] != \"_\")\n    r += `\n#define JD_SERVICE_CLASS_${toUpper(info.shortName)}  ${toHex(info.classIdentifier)}\n`;\n  for (const cst in info.constants) {\n    const { value, hex } = info.constants[cst];\n    r += `#define ${pref}${toUpper(cst)} ${hex ? toHex(value) : value.toString()}\n`;\n  }\n  for (const en of values(info.enums).filter((en2) => !en2.derived)) {\n    const enPref = pref + toUpper(en.name);\n    r += `\n// enum ${en.name} (${cStorage(en.storage)})\n`;\n    for (const k of Object.keys(en.members))\n      r += \"#define \" + enPref + \"_\" + toUpper(k) + \" \" + toHex(en.members[k]) + \"\\n\";\n  }\n  for (const pkt of info.packets) {\n    if (pkt.derived)\n      continue;\n    const cmt = addComment(pkt);\n    r += wrapComment(\"h\", cmt.comment);\n    if (!pkt.secondary && pkt.kind != \"pipe_command\" && pkt.kind != \"pipe_report\") {\n      let inner = \"CMD\";\n      if (isRegister(pkt.kind))\n        inner = \"REG\";\n      else if (pkt.kind == \"event\")\n        inner = \"EV\";\n      else if (pkt.kind == \"meta_pipe_command\" || pkt.kind == \"meta_pipe_report\")\n        inner = \"PIPE\";\n      let val = toHex(pkt.identifier);\n      if (pkt.identifierName)\n        val = \"JD_\" + inner + \"_\" + toUpper(pkt.identifierName);\n      const name = pref + inner + \"_\" + toUpper(pkt.name);\n      if (name != val)\n        r += `#define ${name} ${val}\n`;\n    }\n    const isMetaPipe = pkt.kind == \"meta_pipe_report\" || pkt.kind == \"meta_pipe_command\";\n    if (cmt.needsStruct || isMetaPipe) {\n      let tname = \"jd_\" + toLower(info.camelName) + \"_\" + toLower(pkt.name);\n      if (pkt.kind == \"report\")\n        tname += \"_report\";\n      r += `typedef struct ${tname} {\n`;\n      if (isMetaPipe) {\n        r += `    uint32_t identifier; // ${toHex(pkt.identifier)}\n`;\n      }\n      let unaligned = \"\";\n      for (let i = 0; i < pkt.fields.length; ++i) {\n        const f = pkt.fields[i];\n        let def = \"\";\n        const cst = cStorage(f.storage);\n        const sz = memberSize(f);\n        if (f.type == \"string\" || f.type == \"string0\")\n          def = `char ${f.name}[${sz}]`;\n        else if (cst == \"bytes\")\n          def = `uint8_t ${f.name}[${sz}]`;\n        else\n          def = `${cst} ${f.name}`;\n        if (f.startRepeats && i == pkt.fields.length - 1)\n          def += \"[0]\";\n        def += \";\";\n        if (!f.isSimpleType && f.type != \"devid\")\n          def += \"  // \" + unitPref(f) + f.type;\n        else if (f.unit)\n          def += \" // \" + prettyUnit(f.unit);\n        r += \"    \" + unaligned + def + \"\\n\";\n        if (f.type == \"string0\")\n          unaligned = \"// \";\n      }\n      r += `}${packed(pkt)} ${tname}_t;\n\n`;\n    }\n  }\n  r += \"\\n#endif\\n\";\n  return r;\n}\nfunction camelize(name) {\n  if (!name)\n    return name;\n  return name[0].toLowerCase() + name.slice(1).replace(/\\s+/g, \"_\").replace(/_([a-z0-9])/gi, (_, l) => l.toUpperCase());\n}\nfunction capitalize(name) {\n  if (!name)\n    return name;\n  return name[0].toUpperCase() + name.slice(1);\n}\nfunction upperCamel(name) {\n  name = camelize(name);\n  if (!(name == null ? void 0 : name.length))\n    return name;\n  return name[0].toUpperCase() + name.slice(1);\n}\nfunction snakify(name) {\n  return name == null ? void 0 : name.replace(/([a-z])([A-Z])/g, (_, a, b) => a + \"_\" + b).replace(/\\s+/g, \"_\");\n}\nfunction dashify(name) {\n  if (!name)\n    return name;\n  return snakify(name.replace(/^_+/, \"\")).replace(/(_|\\s)+/g, \"-\").toLowerCase();\n}\nfunction humanify(name) {\n  return name == null ? void 0 : name.replace(/([a-z])([A-Z])/g, (_, a, b) => a + \" \" + b).replace(/(-|_)/g, \" \");\n}\nfunction addComment(pkt) {\n  let comment = \"\";\n  let typeInfo = \"\";\n  let needsStruct = false;\n  if (pkt.fields.length == 0) {\n    if (pkt.kind != \"event\")\n      typeInfo = \"No args\";\n  } else if (pkt.fields.length == 1 && !pkt.fields[0].startRepeats) {\n    const f0 = pkt.fields[0];\n    typeInfo = cStorage(f0.storage);\n    if (!f0.isSimpleType)\n      typeInfo = f0.type + \" (\" + typeInfo + \")\";\n    typeInfo = unitPref(f0) + typeInfo;\n    if (f0.name != \"_\")\n      typeInfo = f0.name + \" \" + typeInfo;\n  } else {\n    needsStruct = true;\n  }\n  if (pkt.fields.length == 1) {\n    if (isRegister(pkt.kind)) {\n      let info = \"\";\n      if (pkt.kind == \"ro\")\n        info = \"Read-only\";\n      else if (pkt.kind == \"const\")\n        info = \"Constant\";\n      else\n        info = \"Read-write\";\n      if (typeInfo)\n        typeInfo = info + \" \" + typeInfo;\n      else\n        typeInfo = info;\n    } else if (typeInfo) {\n      typeInfo = \"Argument: \" + typeInfo;\n    }\n  }\n  if (pkt.kind == \"report\" && pkt.secondary) {\n    comment += \"Report: \" + typeInfo + \"\\n\";\n  } else {\n    if (pkt.description) {\n      let desc = pkt.description.replace(/\\n\\n[^]*/, \"\");\n      if (typeInfo)\n        desc = typeInfo + \". \" + desc;\n      comment = desc + \"\\n\" + comment;\n    }\n  }\n  return {\n    comment,\n    needsStruct\n  };\n}\nfunction wrapComment(lang, comment) {\n  if (lang === \"cs\")\n    return \"\\n/// <summary>\\n/// \" + comment.replace(/\\n+$/, \"\").replace(/\\n/g, \"\\n/// \") + \"\\n/// </summary>\\n\";\n  else\n    return \"\\n/**\\n * \" + comment.replace(/\\n+$/, \"\").replace(/\\n/g, \"\\n * \") + \"\\n */\\n\";\n}\nfunction wrapSnippet(code) {\n  if (!code)\n    return code;\n  return `\n\\`\\`\\`\n${code.replace(/^\\n+/, \"\").replace(/\\n+$/, \"\")}\n\\`\\`\\`\n`;\n}\nvar TYPESCRIPT_STATIC_NAMESPACE = \"jacdac\";\nfunction packFormatForField(info, fld, isStatic, useBooleans) {\n  const sz = memberSize(fld);\n  const szSuff = sz ? `[${sz}]` : ``;\n  let tsType = \"number\";\n  let pyType = \"float\";\n  let csType = \"float\";\n  let fmt = \"\";\n  if (/^[fiu]\\d+(\\.\\d+)?$/.test(fld.type) && 1 <= sz && sz <= 8) {\n    fmt = fld.type;\n    if (/^[iu]\\d+$/.test(fld.type)) {\n      pyType = \"int\";\n      csType = \"int\";\n    }\n    if (/^[u]\\d+$/.test(fld.type)) {\n      csType = \"uint\";\n    }\n  } else if (/^u8\\[\\d*\\]$/.exec(fld.type)) {\n    fmt = \"b\" + szSuff;\n  } else if (info.enums[fld.type]) {\n    fmt = canonicalType(info.enums[fld.type].storage);\n    pyType = tsType = csType = upperCamel(info.camelName) + upperCamel(fld.type);\n    if (isStatic)\n      tsType = TYPESCRIPT_STATIC_NAMESPACE + \".\" + tsType;\n  } else {\n    switch (fld.type) {\n      case \"string\":\n        fmt = \"s\" + szSuff;\n        csType = tsType = \"string\";\n        pyType = \"str\";\n        break;\n      case \"bytes\":\n        fmt = \"b\" + szSuff;\n        break;\n      case \"string0\":\n        fmt = \"z\";\n        csType = tsType = \"string\";\n        pyType = \"str\";\n        break;\n      case \"devid\":\n        fmt = \"b[8]\";\n        break;\n      case \"pipe_port\":\n        fmt = \"u16\";\n        break;\n      case \"pipe\":\n        fmt = \"b[12]\";\n        break;\n      case \"bool\":\n        fmt = \"u8\";\n        if (useBooleans) {\n          tsType = \"boolean\";\n          csType = pyType = \"bool\";\n        }\n        break;\n      default:\n        return null;\n    }\n  }\n  if (tsType == \"number\" && fmt && fmt[0] == \"b\") {\n    tsType = \"Buffer\";\n    pyType = \"bytes\";\n    csType = \"byte[]\";\n  }\n  return { fmt, tsType, pyType, csType };\n}\nfunction packFormat(sinfo, pkt, useBooleans) {\n  var _a;\n  if (pkt.packed || !((_a = pkt.fields) == null ? void 0 : _a.length))\n    return void 0;\n  const fmt = [];\n  for (const fld of pkt.fields) {\n    if (fld.startRepeats)\n      fmt.push(\"r:\");\n    const ff = packFormatForField(sinfo, fld, false, useBooleans);\n    if (!ff)\n      return void 0;\n    fmt.push(ff.fmt);\n  }\n  return fmt.join(\" \");\n}\nfunction packInfo(info, pkt, options) {\n  const {\n    isStatic = false,\n    useBooleans = false,\n    useJDOM = false\n  } = options || {};\n  const { kind } = pkt;\n  const vars = [];\n  const vartp = [];\n  const vartppy = [];\n  const vartpcs = [];\n  let fmt = \"\";\n  let repeats;\n  let reptp;\n  for (let i = 0; i < pkt.fields.length; ++i) {\n    const fld = pkt.fields[i];\n    let isArray = \"\";\n    if (fld.startRepeats) {\n      if (i == pkt.fields.length - 1) {\n        isArray = \"[]\";\n      } else {\n        fmt += \"r: \";\n        repeats = [];\n        reptp = [];\n        vars.push(\"rest\");\n      }\n    }\n    const varname = camelize(fld.name == \"_\" ? pkt.name : fld.name);\n    const f0 = packFormatForField(info, fld, isStatic, useBooleans);\n    if (!f0 || /(reserved|padding)/.test(fld.name)) {\n      if (!f0)\n        console.log(`${pkt.name}/${fld.name} - can't get format for '${fld.type}'`);\n      fmt += `x[${memberSize(fld)}] `;\n    } else {\n      fmt += f0.fmt + isArray + \" \";\n      let tp = f0.tsType;\n      let tpy = f0.pyType;\n      let tcs = f0.csType;\n      if (tp == \"Buffer\" && !isStatic) {\n        tp = \"Uint8Array\";\n        tpy = \"bytes\";\n        tcs = \"byte[]\";\n      }\n      tp += isArray;\n      if (isArray)\n        tpy = \"[\" + tpy + \"]\";\n      if (repeats) {\n        repeats.push(varname);\n        reptp.push(tp);\n      } else {\n        vars.push(varname);\n        vartp.push(tp);\n        vartppy.push(tpy);\n        vartpcs.push(tcs);\n      }\n    }\n  }\n  fmt = fmt.replace(/ *$/, \"\");\n  if (reptp)\n    vartp.push(\"([\" + reptp.join(\", \") + \"])[]\");\n  const pktName = camelize(pkt.name);\n  let buffers = \"\";\n  if (useJDOM) {\n    if (kind === \"command\") {\n      for (let i = 0; i < vars.length; ++i)\n        buffers += `const ${vars[i]}: ${vartp[i]} = ...\n`;\n      buffers += `await service.sendCmdPackedAsync(${capitalize(info.camelName)}Reg.${capitalize(pktName)}, [${vars.join(\", \")}])\n`;\n    } else if (isRegister(kind)) {\n      buffers += \"// get (register to REPORT_UPDATE event to enable background refresh)\\n\";\n      buffers += `const ${pktName}Reg = service.register(${capitalize(info.camelName)}Reg.${capitalize(pktName)})\n`;\n      buffers += `const [${vars.join(\", \")}] : [${vartp.join(\", \")}] = ${pktName}Reg.unpackedValue\n`;\n      if (kind === \"rw\") {\n        buffers += \"// set\\n\";\n        buffers += `await ${pktName}Reg.sendSetPackedAsync([${vars.join(\", \")}])\n`;\n      }\n    } else if (kind === \"event\") {\n      buffers += `const ${pktName}Event = service.event(${capitalize(info.camelName)}Event.${capitalize(pktName)})\n`;\n      buffers += `${pktName}Event.on(\"change\", () => {\n    // if you need to read the event values\n    // const values = ${pktName}Event.unpackedValue\n})\n`;\n    }\n  } else {\n    buffers += `const [${vars.join(\", \")}] = jdunpack<[${vartp.join(\", \")}]>(buf, \"${fmt}\")\n`;\n  }\n  if (repeats)\n    buffers += `const [${repeats.join(\", \")}] = rest[0]\n`;\n  buffers = buffers.replace(/\\n*$/, \"\");\n  return {\n    buffers,\n    names: vars,\n    types: vartp,\n    pyTypes: vartppy,\n    csTypes: vartpcs\n  };\n}\nfunction memberSize(fld) {\n  return Math.abs(fld.storage);\n}\nfunction toTypescript(info, language) {\n  const sts = language === \"sts\";\n  const csharp = language === \"cs\";\n  const useNamespace = sts || csharp;\n  const indent = useNamespace ? \"    \" : \"\";\n  const indent2 = indent + \"    \";\n  const numberkw = csharp ? \"uint \" : \"\";\n  const hexkw = csharp ? \"byte[]\" : \"\";\n  const enumkw = csharp ? indent + \"public enum\" : sts ? indent + \"export const enum\" : \"export enum\";\n  const exportkw = csharp ? \"public\" : \"export\";\n  const cskw = csharp ? \";\" : \"\";\n  let r = useNamespace ? `namespace ${csharp ? capitalize(TYPESCRIPT_STATIC_NAMESPACE) : TYPESCRIPT_STATIC_NAMESPACE} {\n` : \"\";\n  if (csharp) {\n    r += `${indent}public static partial class ServiceClasses\n${indent}{\n`;\n  } else\n    r += indent + \"// Service \" + info.name + \" constants\\n\";\n  if (info.shortId[0] != \"_\") {\n    const name = csharp ? capitalize(info.camelName) : `SRV_${snakify(info.camelName).toLocaleUpperCase()}`;\n    r += indent + (csharp ? indent : \"\") + `${exportkw} const ${numberkw}${name} = ${toHex(info.classIdentifier)}${cskw}\n`;\n  }\n  const pref = upperCamel(info.camelName);\n  for (const cst in info.constants) {\n    const { value, hex } = info.constants[cst];\n    r += indent + (csharp ? indent : \"\") + `${exportkw} const ${hex ? hexkw : numberkw}${csharp ? capitalize(camelize(cst)) : toUpper(cst)} = ${hex ? value.toString() : toHex(value)}${cskw}\n`;\n  }\n  if (csharp) {\n    r += indent + `}\n`;\n  }\n  for (const en of values(info.enums)) {\n    const enPref = pref + upperCamel(en.name);\n    r += `\n${csharp && en.isFlags ? \"    [System.Flags]\\n\" : \"\"}${enumkw} ${enPref}${csharp ? `: ${cSharpStorage(en.storage)}` : \"\"} { // ${cStorage(en.storage)}\n`;\n    for (const k of Object.keys(en.members)) {\n      if (sts)\n        r += indent2 + `//% block=\"${humanify(k).toLowerCase()}\"\n`;\n      r += indent2 + k + \" = \" + toHex(en.members[k]) + \",\\n\";\n    }\n    r += indent + \"}\\n\\n\";\n  }\n  const tsEnums = {};\n  for (const pkt of info.packets) {\n    if (pkt.derived)\n      continue;\n    const cmt = addComment(pkt);\n    const pack = pkt.fields.length ? packInfo(info, pkt, {\n      isStatic: sts,\n      useBooleans: false\n    }).buffers : \"\";\n    let inner = \"Cmd\";\n    if (isRegister(pkt.kind))\n      inner = \"Reg\";\n    else if (pkt.kind == \"event\")\n      inner = \"Event\";\n    else if (pkt.kind == \"meta_pipe_command\" || pkt.kind == \"meta_pipe_report\")\n      inner = \"PipeCmd\";\n    else if (pkt.kind == \"pipe_command\" || pkt.kind == \"pipe_report\")\n      inner = \"info\";\n    let text = \"\";\n    let meta = \"\";\n    if (pkt.secondary || inner == \"info\") {\n      if (pack)\n        text = wrapComment(language, `${pkt.kind} ${upperCamel(pkt.name)}${pkt.client ? \"\" : wrapSnippet(pack)}`);\n    } else {\n      const val = toHex(pkt.identifier);\n      if (sts && pkt.kind === \"event\") {\n        meta = `//% block=\"${snakify(pkt.name).replace(/_/g, \" \")}\"\n`;\n      }\n      text = `${wrapComment(language, cmt.comment + (pkt.client ? \"\" : wrapSnippet(pack))) + meta}${upperCamel(pkt.name)} = ${val},\n`;\n    }\n    if (text)\n      tsEnums[inner] = (tsEnums[inner] || \"\") + text;\n    if (csharp && pkt.packFormat) {\n      const packName = inner + \"Pack\";\n      tsEnums[packName] = (tsEnums[packName] || \"\") + `${wrapComment(language, `Pack format for '${pkt.name}' register data.`)}public const string ${upperCamel(pkt.name)}${pkt.secondary ? \"Report\" : \"\"} = \"${pkt.packFormat}\";\n`;\n    }\n  }\n  for (const k of Object.keys(tsEnums)) {\n    if (k == \"info\")\n      r += tsEnums[k].replace(/^/gm, indent) + \"\\n\\n\";\n    else {\n      const inner = tsEnums[k].replace(/^\\n+/, \"\").replace(/\\n$/, \"\").replace(/\\n/g, \"\\n    \" + indent);\n      if (inner.indexOf(\"public const\") > -1)\n        r += `    public static class ${pref}${k} {\n    ${indent}${inner}\n${indent}}\n\n`;\n      else\n        r += `${enumkw} ${pref}${k} ${csharp ? `: ushort ` : \"\"}{\n    ${indent}${inner}\n${indent}}\n\n`;\n    }\n  }\n  if (useNamespace)\n    r += \"}\\n\";\n  return r.replace(/ *$/gm, \"\");\n}\nvar jsKeywords = {\n  switch: 1\n};\nfunction jsQuote(n) {\n  if (jsKeywords[n])\n    n += \"_\";\n  return n;\n}\nfunction toJacscript(info) {\n  let r = `// Service: ${info.name}\n`;\n  const clname = upperCamel(info.camelName) + \"Role\";\n  const baseclass = info.extends.indexOf(\"_sensor\") >= 0 ? \"SensorRole\" : \"Role\";\n  r += `declare class ${clname} extends ${baseclass} {\n`;\n  for (const pkt of info.packets) {\n    if (pkt.derived)\n      continue;\n    const cmt = addComment(pkt);\n    let tp = \"\";\n    const earlyRepeats = pkt.fields.slice(0, pkt.fields.length - 1).some((f) => f.startRepeats);\n    const fields = pkt.fields.map((f) => {\n      const tp2 = f.type == \"string\" || f.type == \"string0\" ? \"string\" : \"number\";\n      if (f.startRepeats && !earlyRepeats)\n        return `...${f.name}: ${tp2}[]`;\n      else\n        return `${f.name}: ${tp2}`;\n    }).join(\", \");\n    if (isRegister(pkt.kind)) {\n      if (cmt.needsStruct) {\n        tp = `JDRegisterArray`;\n        if (pkt.fields.length > 1)\n          tp += ` & { ${fields} }`;\n      } else {\n        if (pkt.fields.length == 1 && pkt.fields[0].type == \"string\")\n          tp = \"JDRegisterString\";\n        else\n          tp = \"JDRegisterNum\";\n      }\n    } else if (pkt.kind == \"event\") {\n      tp = \"JDEvent\";\n    } else if (pkt.kind == \"command\") {\n      r += `    ${camelize(pkt.name)}(${fields}): void\n`;\n    }\n    if (tp)\n      r += `    ${camelize(pkt.name)}: ${tp}\n`;\n  }\n  r += \"}\\n\";\n  if (info.shortId[0] != \"_\") {\n    r += \"declare namespace roles {\\n\";\n    r += `    function ${jsQuote(info.camelName)}(): ${clname}\n`;\n    r += \"}\\n\\n\";\n  } else {\n    r += \"\\n\";\n  }\n  return r.replace(/ *$/gm, \"\");\n}\nfunction generateDeviceSpecificationId(dev) {\n  return escapeDeviceIdentifier(dev.company) + \"-\" + escapeDeviceNameIdentifier(dev.name) + (dev.designIdentifier || \"\") + (dev.version ? `v${dev.version.toLowerCase().replace(/^v/, \"\").replace(/\\./g, \"\")}` : \"\").toLowerCase();\n}\nfunction normalizeDeviceSpecification(dev) {\n  var _a;\n  const productIdentifiers = Array.from((/* @__PURE__ */ new Set([\n    ...dev.productIdentifiers || [],\n    ...((_a = dev.firmwares) == null ? void 0 : _a.map((fw) => fw.productIdentifier).filter((pi) => !!pi)) || []\n  ])).values());\n  const clone2 = {\n    id: generateDeviceSpecificationId(dev),\n    name: dev.name,\n    company: dev.company,\n    description: dev.description,\n    repo: dev.repo,\n    firmwareSource: dev.firmwareSource,\n    hardwareDesign: dev.hardwareDesign,\n    link: dev.link,\n    storeLink: dev.storeLink,\n    services: dev.services,\n    productIdentifiers,\n    transport: dev.transport,\n    tags: dev.tags,\n    firmwares: dev.firmwares,\n    version: dev.version ? dev.version.replace(/^v/, \"\") : void 0,\n    designIdentifier: dev.designIdentifier || void 0,\n    bootloader: dev.bootloader,\n    status: dev.status\n  };\n  const anyClone = clone2;\n  for (const key of Object.keys(anyClone))\n    if (anyClone[key] === void 0)\n      delete anyClone[key];\n  return clone2;\n}\nfunction escapeDeviceIdentifier(text) {\n  if (!text)\n    text = \"\";\n  const escaped = text.trim().toLowerCase().replace(/([^a-z0-9_-])+/gi, \"-\").replace(/\\./g, \"\").replace(/^-+/, \"\").replace(/-+$/, \"\");\n  const id = snakify(escaped);\n  return id;\n}\nfunction escapeDeviceNameIdentifier(text) {\n  return escapeDeviceIdentifier(text).replace(/-/g, \"\");\n}\nfunction converters() {\n  return {\n    json: (j) => JSON.stringify(j, null, 2),\n    c: toH,\n    ts: (j) => toTypescript(j, \"ts\"),\n    sts: (j) => toTypescript(j, \"sts\"),\n    cs: (j) => toTypescript(j, \"cs\"),\n    py: (j) => toPython(j, \"py\"),\n    jacs: toJacscript\n  };\n}\nfunction isNumericType(field) {\n  const tp = field.type;\n  return !field.startRepeats && /^[uif]\\d+(\\.\\d+)?$/.test(tp) && tp != \"pipe_port\" && tp != \"bool\";\n}\n\n// src/jdom/error.ts\nvar JDError = class extends Error {\n  constructor(message, jacdacName) {\n    super(message);\n    this.jacdacName = jacdacName;\n    this.name = JACDAC_ERROR;\n  }\n};\nfunction errorCode(e) {\n  const jacdacCode = e.name === JACDAC_ERROR ? e == null ? void 0 : e.jacdacName : void 0;\n  if (jacdacCode)\n    return jacdacCode;\n  const deviceLocked = e.name == \"NetworkError\" && /unable to claim interface/i.test(e.message);\n  if (deviceLocked)\n    return ERROR_TRANSPORT_DEVICE_LOCKED;\n  return void 0;\n}\n\n// src/jdom/flags.ts\nvar Flags = class {\n};\nFlags.diagnostics = false;\nFlags.trace = false;\nFlags.webUSB = true;\nFlags.webSerial = true;\nFlags.webBluetooth = false;\n\n// src/jdom/utils.ts\nfunction throwError(msg, cancel) {\n  const e = new Error(msg);\n  if (cancel)\n    e.__cancel = true;\n  throw e;\n}\nfunction isCancelError(e) {\n  return !!(e == null ? void 0 : e.__cancel);\n}\nfunction setAckError(e) {\n  if (e)\n    e.__ack = true;\n}\nfunction isAckError(e) {\n  return !!(e == null ? void 0 : e.__ack);\n}\nfunction delay(millis, value) {\n  return new Promise((resolve) => setTimeout(() => resolve(value), millis));\n}\nfunction memcpy(trg, trgOff, src, srcOff, len) {\n  if (srcOff === void 0)\n    srcOff = 0;\n  if (len === void 0)\n    len = src.length - srcOff;\n  for (let i = 0; i < len; ++i)\n    trg[trgOff + i] = src[srcOff + i];\n}\nfunction strcmp(a, b) {\n  if (a == b)\n    return 0;\n  if (a < b)\n    return -1;\n  else\n    return 1;\n}\nfunction bufferEq(a, b, offset = 0) {\n  if (a == b)\n    return true;\n  if (!a || !b || a.length != b.length)\n    return false;\n  for (let i = offset; i < a.length; ++i) {\n    if (a[i] != b[i])\n      return false;\n  }\n  return true;\n}\nfunction hash(buf, bits) {\n  bits |= 0;\n  if (bits < 1)\n    return 0;\n  const h = fnv1(buf);\n  if (bits >= 32)\n    return h >>> 0;\n  else\n    return ((h ^ h >>> bits) & (1 << bits) - 1) >>> 0;\n}\nfunction idiv(a, b) {\n  return (a | 0) / (b | 0) | 0;\n}\nfunction fnv1(data) {\n  let h = 2166136261;\n  for (let i = 0; i < data.length; ++i) {\n    h = Math.imul(h, 16777619) ^ data[i];\n  }\n  return h;\n}\nfunction crc(p) {\n  let crc2 = 65535;\n  for (let i = 0; i < p.length; ++i) {\n    const data = p[i];\n    let x = crc2 >> 8 ^ data;\n    x ^= x >> 4;\n    crc2 = crc2 << 8 ^ x << 12 ^ x << 5 ^ x;\n    crc2 &= 65535;\n  }\n  return crc2;\n}\nfunction ALIGN(n) {\n  return n + 3 & ~3;\n}\nfunction stringToUint8Array(input) {\n  const len = input.length;\n  const res = new Uint8Array(len);\n  for (let i = 0; i < len; ++i)\n    res[i] = input.charCodeAt(i) & 255;\n  return res;\n}\nfunction uint8ArrayToString(input) {\n  const len = input.length;\n  let res = \"\";\n  for (let i = 0; i < len; ++i)\n    res += String.fromCharCode(input[i]);\n  return res;\n}\nfunction fromUTF8(binstr) {\n  if (!binstr)\n    return \"\";\n  let escaped = \"\";\n  for (let i = 0; i < binstr.length; ++i) {\n    const k = binstr.charCodeAt(i) & 255;\n    if (k == 37 || k > 127) {\n      escaped += \"%\" + k.toString(16);\n    } else {\n      escaped += binstr.charAt(i);\n    }\n  }\n  return decodeURIComponent(escaped);\n}\nfunction toUTF8(str, cesu8) {\n  let res = \"\";\n  if (!str)\n    return res;\n  for (let i = 0; i < str.length; ++i) {\n    let code = str.charCodeAt(i);\n    if (code <= 127)\n      res += str.charAt(i);\n    else if (code <= 2047) {\n      res += String.fromCharCode(192 | code >> 6, 128 | code & 63);\n    } else {\n      if (!cesu8 && 55296 <= code && code <= 56319) {\n        const next = str.charCodeAt(++i);\n        if (!isNaN(next))\n          code = 65536 + (code - 55296 << 10) + (next - 56320);\n      }\n      if (code <= 65535)\n        res += String.fromCharCode(224 | code >> 12, 128 | code >> 6 & 63, 128 | code & 63);\n      else\n        res += String.fromCharCode(240 | code >> 18, 128 | code >> 12 & 63, 128 | code >> 6 & 63, 128 | code & 63);\n    }\n  }\n  return res;\n}\nvar PromiseBuffer = class {\n  constructor() {\n    this.waiting = [];\n    this.available = [];\n  }\n  drain() {\n    for (const f of this.waiting) {\n      f(new Error(\"Promise Buffer Reset\"));\n    }\n    this.waiting = [];\n    this.available = [];\n  }\n  pushError(v) {\n    this.push(v);\n  }\n  push(v) {\n    const f = this.waiting.shift();\n    if (f)\n      f(v);\n    else\n      this.available.push(v);\n  }\n  shiftAsync(timeout = 0) {\n    if (this.available.length > 0) {\n      const v = this.available.shift();\n      if (v instanceof Error)\n        return Promise.reject(v);\n      else\n        return Promise.resolve(v);\n    } else\n      return new Promise((resolve, reject) => {\n        const f = (v) => {\n          if (v instanceof Error)\n            reject(v);\n          else\n            resolve(v);\n        };\n        this.waiting.push(f);\n        if (timeout > 0) {\n          delay(timeout).then(() => {\n            const idx = this.waiting.indexOf(f);\n            if (idx >= 0) {\n              this.waiting.splice(idx, 1);\n              reject(new JDError(\"Timeout\", TIMEOUT_ERROR_CODE));\n            }\n          });\n        }\n      });\n  }\n};\nvar PromiseQueue = class {\n  constructor() {\n    this.promises = {};\n  }\n  enqueue(id, f) {\n    return new Promise((resolve, reject) => {\n      let arr = this.promises[id];\n      if (!arr) {\n        arr = this.promises[id] = [];\n      }\n      const cleanup = () => {\n        arr.shift();\n        if (arr.length == 0)\n          delete this.promises[id];\n        else\n          arr[0]();\n      };\n      arr.push(() => f().then((v) => {\n        cleanup();\n        resolve(v);\n      }, (err) => {\n        cleanup();\n        reject(err);\n      }));\n      if (arr.length == 1)\n        arr[0]();\n    });\n  }\n};\nfunction rgbToHtmlColor(rgb2) {\n  return `#${(\"000000\" + rgb2.toString(16)).slice(-6)}`;\n}\nfunction toFullHex(n) {\n  return \"0x\" + n.map((id) => (\"000000000\" + id.toString(16)).slice(-8)).join(\"\");\n}\nfunction toHex2(bytes, sep) {\n  if (!bytes)\n    return void 0;\n  let r = \"\";\n  for (let i = 0; i < bytes.length; ++i) {\n    if (sep && i > 0)\n      r += sep;\n    r += (\"0\" + bytes[i].toString(16)).slice(-2);\n  }\n  return r;\n}\nfunction fromHex(hex) {\n  const r = new Uint8Array(hex.length >> 1);\n  for (let i = 0; i < hex.length; i += 2)\n    r[i >> 1] = parseInt(hex.slice(i, i + 2), 16);\n  return r;\n}\nfunction isSet(v) {\n  return v !== null && v !== void 0;\n}\nfunction toArray(a) {\n  if (!a)\n    return void 0;\n  const r = new Array(a.length);\n  for (let i = 0; i < a.length; ++i)\n    r[i] = a[i];\n  return r;\n}\nfunction hexNum(n) {\n  if (isNaN(n))\n    return void 0;\n  if (n < 0)\n    return \"-\" + hexNum(-n);\n  return \"0x\" + n.toString(16);\n}\nfunction write32(buf, pos, v) {\n  buf[pos + 0] = v >> 0 & 255;\n  buf[pos + 1] = v >> 8 & 255;\n  buf[pos + 2] = v >> 16 & 255;\n  buf[pos + 3] = v >> 24 & 255;\n}\nfunction write24(buf, pos, v) {\n  buf[pos + 0] = v >> 0 & 255;\n  buf[pos + 1] = v >> 8 & 255;\n  buf[pos + 2] = v >> 16 & 255;\n}\nfunction write16(buf, pos, v) {\n  buf[pos + 0] = v >> 0 & 255;\n  buf[pos + 1] = v >> 8 & 255;\n}\nfunction read32(buf, pos) {\n  return (buf[pos] | buf[pos + 1] << 8 | buf[pos + 2] << 16 | buf[pos + 3] << 24) >>> 0;\n}\nfunction read16(buf, pos) {\n  return buf[pos] | buf[pos + 1] << 8;\n}\nfunction encodeU32LE(words) {\n  const r = new Uint8Array(words.length * 4);\n  for (let i = 0; i < words.length; ++i)\n    write32(r, i * 4, words[i]);\n  return r;\n}\nfunction decodeU32LE(buf) {\n  const res = [];\n  for (let i = 0; i < buf.length; i += 4)\n    res.push(read32(buf, i));\n  return res;\n}\nfunction isBufferEmpty(data) {\n  if (!data)\n    return true;\n  const n = data.length;\n  for (let i = 0; i < n; ++i) {\n    if (data[i])\n      return false;\n  }\n  return true;\n}\nfunction bufferToString(buf) {\n  return fromUTF8(uint8ArrayToString(buf));\n}\nfunction stringToBuffer(str) {\n  return stringToUint8Array(toUTF8(str));\n}\nfunction bufferConcat(a, b) {\n  const r = new Uint8Array(a.length + b.length);\n  r.set(a, 0);\n  r.set(b, a.length);\n  return r;\n}\nfunction bufferConcatMany(bufs) {\n  let sz = 0;\n  for (const buf of bufs)\n    sz += buf.length;\n  const r = new Uint8Array(sz);\n  sz = 0;\n  for (const buf of bufs) {\n    r.set(buf, sz);\n    sz += buf.length;\n  }\n  return r;\n}\nfunction arrayConcatMany(arrs) {\n  if (!arrs)\n    return void 0;\n  arrs = arrs.filter((a) => !!(a == null ? void 0 : a.length));\n  let sz = 0;\n  for (const buf of arrs)\n    sz += buf.length;\n  const r = new Array(sz);\n  sz = 0;\n  for (const arr of arrs) {\n    for (let i = 0; i < arr.length; ++i)\n      r[i + sz] = arr[i];\n    sz += arr.length;\n  }\n  return r;\n}\nfunction jsonCopyFrom(trg, src) {\n  const v = clone(src);\n  for (const k of Object.keys(src)) {\n    ;\n    trg[k] = v[k];\n  }\n}\nfunction assert(cond, msg = \"Assertion failed\", debugData) {\n  if (!cond) {\n    if (debugData)\n      console.debug(`assertion filed ${msg}`, debugData);\n    if (Flags.diagnostics)\n      debugger;\n    throw new Error(msg);\n  }\n}\nfunction flatClone(obj) {\n  if (obj == null)\n    return null;\n  const r = {};\n  Object.keys(obj).forEach((k) => {\n    r[k] = obj[k];\n  });\n  return r;\n}\nfunction clone(v) {\n  if (v == null)\n    return null;\n  return JSON.parse(JSON.stringify(v));\n}\nfunction throttle(handler, delay2) {\n  let enableCall = true;\n  return function() {\n    if (!enableCall)\n      return;\n    enableCall = false;\n    handler();\n    setTimeout(() => enableCall = true, delay2);\n  };\n}\nfunction signal() {\n  let resolve;\n  return {\n    signalled: new Promise((r) => {\n      resolve = r;\n    }),\n    signal: () => resolve(true)\n  };\n}\nfunction readBlobToUint8Array(blob) {\n  if (blob == null ? void 0 : blob.arrayBuffer) {\n    return blob.arrayBuffer().then((data) => new Uint8Array(data));\n  }\n  return new Promise((resolve, reject) => {\n    const fileReader = new FileReader();\n    fileReader.onload = () => {\n      resolve(new Uint8Array(fileReader.result));\n    };\n    fileReader.onerror = (e) => {\n      reject(e);\n    };\n    try {\n      fileReader.readAsArrayBuffer(blob);\n    } catch (e) {\n      reject(e);\n    }\n  });\n}\nfunction readBlobToText(blob) {\n  if (blob.text) {\n    return blob.text();\n  }\n  return new Promise((resolve, reject) => {\n    const fileReader = new FileReader();\n    fileReader.onload = () => resolve(fileReader.result);\n    fileReader.onerror = (e) => {\n      reject(e);\n    };\n    try {\n      fileReader.readAsText(blob);\n    } catch (e) {\n      reject(e);\n    }\n  });\n}\nfunction debounce(handler, delay2) {\n  let timeOutId;\n  return function() {\n    if (timeOutId) {\n      clearTimeout(timeOutId);\n    }\n    timeOutId = setTimeout(async () => {\n      handler();\n    }, delay2);\n  };\n}\nfunction debounceAsync(handler, delay2) {\n  let timeOutId;\n  return function() {\n    if (timeOutId) {\n      clearTimeout(timeOutId);\n    }\n    timeOutId = setTimeout(async () => {\n      await handler();\n    }, delay2);\n  };\n}\nfunction JSONTryParse(src, defaultValue) {\n  if (src === void 0)\n    return void 0;\n  if (src === null)\n    return null;\n  try {\n    return JSON.parse(src);\n  } catch (e) {\n    return defaultValue;\n  }\n}\nfunction roundWithPrecision(x, digits, round = Math.round) {\n  digits = digits | 0;\n  if (digits <= 0)\n    return round(x);\n  if (x == 0)\n    return 0;\n  let r = 0;\n  while (r == 0 && digits < 21) {\n    const d = Math.pow(10, digits++);\n    r = round(x * d + Number.EPSILON) / d;\n  }\n  return r;\n}\nfunction renderWithPrecision(x, digits, round = Math.round) {\n  const r = roundWithPrecision(x, digits, round);\n  let rs = r.toLocaleString();\n  if (digits > 0) {\n    let doti = rs.indexOf(\".\");\n    if (doti < 0) {\n      rs += \".\";\n      doti = rs.length - 1;\n    }\n    while (rs.length - 1 - doti < digits)\n      rs += \"0\";\n  }\n  return rs;\n}\nfunction randomRange(min, max) {\n  return Math.round(Math.random() * (max - min) + min);\n}\nfunction unique(values2) {\n  return Array.from(new Set(values2).keys());\n}\nfunction uniqueMap(values2, id, converter) {\n  const r = {};\n  for (let i = 0; i < values2.length; ++i) {\n    const value = values2[i];\n    const idv = id(value);\n    if (!r[idv]) {\n      r[idv] = value;\n    }\n  }\n  return Object.values(r).map(converter);\n}\nfunction toMap(a, keyConverter, valueConverter, ignoreMissingValues) {\n  const m = {};\n  if (a)\n    for (let i = 0; i < a.length; ++i) {\n      const key = keyConverter(a[i], i);\n      if (key === void 0 || key === null)\n        continue;\n      const v = valueConverter(a[i], i);\n      if (ignoreMissingValues && (v === void 0 || v === null))\n        continue;\n      m[key] = v;\n    }\n  return m;\n}\nfunction ellipse(text, maxChars, suffix = \"...\") {\n  if (!isNaN(maxChars) && maxChars > 0 && (text == null ? void 0 : text.length) > maxChars - suffix.length)\n    return text.slice(0, maxChars) + suffix;\n  return text;\n}\nfunction ellipseFirstSentence(text) {\n  const i = text.indexOf(\".\");\n  if (i < 0)\n    return text;\n  else\n    return text.slice(0, i + 1);\n}\nfunction ellipseJoin(values2, maxChars, ellipse2 = \"...\") {\n  let r = \"\";\n  for (let i = 0; i < values2.length && r.length < maxChars; ++i) {\n    if (r)\n      r += \", \";\n    r += values2[i];\n  }\n  if (r.length > maxChars - ellipse2.length)\n    return r.slice(0, maxChars) + ellipse2;\n  else\n    return r;\n}\nfunction arrayShuffle(a) {\n  for (let i = a.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [a[i], a[j]] = [a[j], a[i]];\n  }\n  return a;\n}\nfunction uniqueName(names, name, separator = \"\") {\n  if (names.indexOf(name) < 0)\n    return name;\n  let count = 2;\n  while (names.indexOf(`${name}${separator}${count}`) > -1)\n    count++;\n  return `${name}${separator}${count}`;\n}\nfunction groupBy(list, key) {\n  if (!list)\n    return {};\n  const r = {};\n  list.forEach((item) => {\n    const k = key(item);\n    const a = r[k] || (r[k] = []);\n    a.push(item);\n  });\n  return r;\n}\nfunction pick(...values2) {\n  return values2 == null ? void 0 : values2.find((x) => x !== void 0);\n}\nfunction splitFilter(values2, condition) {\n  const yays = [];\n  const nays = [];\n  const n = values2.length;\n  for (let i = 0; i < n; ++i) {\n    const v = values2[i];\n    if (condition(v))\n      yays.push(v);\n    else\n      nays.push(v);\n  }\n  return [yays, nays];\n}\nfunction range(end) {\n  return Array(end).fill(0).map((_, i) => i);\n}\nfunction toggleBit(data, bitindex) {\n  let byte = data[bitindex >> 3];\n  const bit = bitindex % 8;\n  const on = (byte >> bit & 1) === 1;\n  if (on) {\n    byte &= ~(1 << bit);\n  } else {\n    byte |= 1 << bit;\n  }\n  data[bitindex >> 3] = byte;\n}\nfunction parseIdentifier(value) {\n  if (typeof value === \"string\" && /^0x[0-9a-f]+$/i.test(value)) {\n    return parseInt(value, 16);\n  } else if (typeof value === \"string\" && /^[0-9]+$/i.test(value))\n    return parseInt(value);\n  return Number(value);\n}\n\n// src/jdom/random.ts\nfunction cryptoRandomUint32(length) {\n  if (typeof window === \"undefined\")\n    return void 0;\n  const vals = new Uint32Array(length);\n  window.crypto.getRandomValues(vals);\n  return vals;\n}\nfunction anyRandomUint32(length) {\n  let r = cryptoRandomUint32(length);\n  if (!r) {\n    r = new Uint32Array(length);\n    for (let i = 0; i < r.length; ++i)\n      r[i] = Math.random() * 4294967296 >>> 0;\n  }\n  return r;\n}\nfunction randomUInt(max) {\n  const arr = anyRandomUint32(1);\n  return arr[0] % max;\n}\nfunction randomBytes(n) {\n  const buf = anyRandomUint32(n);\n  const r = new Uint8Array(buf.length);\n  for (let i = 0; i < n; ++i)\n    r[i] = buf[i] & 255;\n  return r;\n}\nfunction randomDeviceId() {\n  const devId = anyRandomUint32(8);\n  for (let i = 0; i < 8; ++i)\n    devId[i] &= 255;\n  return toHex2(devId);\n}\n\n// src/jdom/buffer.ts\nvar NumberFormat = /* @__PURE__ */ ((NumberFormat2) => {\n  NumberFormat2[NumberFormat2[\"Int8LE\"] = 1] = \"Int8LE\";\n  NumberFormat2[NumberFormat2[\"UInt8LE\"] = 2] = \"UInt8LE\";\n  NumberFormat2[NumberFormat2[\"Int16LE\"] = 3] = \"Int16LE\";\n  NumberFormat2[NumberFormat2[\"UInt16LE\"] = 4] = \"UInt16LE\";\n  NumberFormat2[NumberFormat2[\"Int32LE\"] = 5] = \"Int32LE\";\n  NumberFormat2[NumberFormat2[\"Int8BE\"] = 6] = \"Int8BE\";\n  NumberFormat2[NumberFormat2[\"UInt8BE\"] = 7] = \"UInt8BE\";\n  NumberFormat2[NumberFormat2[\"Int16BE\"] = 8] = \"Int16BE\";\n  NumberFormat2[NumberFormat2[\"UInt16BE\"] = 9] = \"UInt16BE\";\n  NumberFormat2[NumberFormat2[\"Int32BE\"] = 10] = \"Int32BE\";\n  NumberFormat2[NumberFormat2[\"UInt32LE\"] = 11] = \"UInt32LE\";\n  NumberFormat2[NumberFormat2[\"UInt32BE\"] = 12] = \"UInt32BE\";\n  NumberFormat2[NumberFormat2[\"Float32LE\"] = 13] = \"Float32LE\";\n  NumberFormat2[NumberFormat2[\"Float64LE\"] = 14] = \"Float64LE\";\n  NumberFormat2[NumberFormat2[\"Float32BE\"] = 15] = \"Float32BE\";\n  NumberFormat2[NumberFormat2[\"Float64BE\"] = 16] = \"Float64BE\";\n  NumberFormat2[NumberFormat2[\"UInt64LE\"] = 17] = \"UInt64LE\";\n  NumberFormat2[NumberFormat2[\"UInt64BE\"] = 18] = \"UInt64BE\";\n  NumberFormat2[NumberFormat2[\"Int64LE\"] = 19] = \"Int64LE\";\n  NumberFormat2[NumberFormat2[\"Int64BE\"] = 20] = \"Int64BE\";\n  return NumberFormat2;\n})(NumberFormat || {});\nfunction fmtInfoCore(fmt) {\n  switch (fmt) {\n    case 1 /* Int8LE */:\n      return -1;\n    case 2 /* UInt8LE */:\n      return 1;\n    case 3 /* Int16LE */:\n      return -2;\n    case 4 /* UInt16LE */:\n      return 2;\n    case 5 /* Int32LE */:\n      return -4;\n    case 11 /* UInt32LE */:\n      return 4;\n    case 19 /* Int64LE */:\n      return -8;\n    case 17 /* UInt64LE */:\n      return 8;\n    case 6 /* Int8BE */:\n      return -10;\n    case 7 /* UInt8BE */:\n      return 10;\n    case 8 /* Int16BE */:\n      return -20;\n    case 9 /* UInt16BE */:\n      return 20;\n    case 10 /* Int32BE */:\n      return -40;\n    case 12 /* UInt32BE */:\n      return 40;\n    case 20 /* Int64BE */:\n      return -80;\n    case 18 /* UInt64BE */:\n      return 80;\n    case 13 /* Float32LE */:\n      return 4;\n    case 15 /* Float32BE */:\n      return 40;\n    case 14 /* Float64LE */:\n      return 8;\n    case 16 /* Float64BE */:\n      return 80;\n    default:\n      throw new Error(\"unknown format\");\n  }\n}\nfunction fmtInfo(fmt) {\n  let size = fmtInfoCore(fmt);\n  let signed = false;\n  if (size < 0) {\n    signed = true;\n    size = -size;\n  }\n  let swap = false;\n  if (size >= 10) {\n    swap = true;\n    size /= 10;\n  }\n  let isFloat = false;\n  switch (fmt) {\n    case 13 /* Float32LE */:\n    case 15 /* Float32BE */:\n    case 14 /* Float64LE */:\n    case 16 /* Float64BE */:\n      isFloat = true;\n      break;\n  }\n  return { size, signed, swap, isFloat };\n}\nfunction sizeOfNumberFormat(format) {\n  switch (format) {\n    case 1 /* Int8LE */:\n    case 2 /* UInt8LE */:\n    case 6 /* Int8BE */:\n    case 7 /* UInt8BE */:\n      return 1;\n    case 3 /* Int16LE */:\n    case 4 /* UInt16LE */:\n    case 8 /* Int16BE */:\n    case 9 /* UInt16BE */:\n      return 2;\n    case 5 /* Int32LE */:\n    case 10 /* Int32BE */:\n    case 12 /* UInt32BE */:\n    case 11 /* UInt32LE */:\n    case 15 /* Float32BE */:\n    case 13 /* Float32LE */:\n      return 4;\n    case 18 /* UInt64BE */:\n    case 20 /* Int64BE */:\n    case 17 /* UInt64LE */:\n    case 19 /* Int64LE */:\n    case 16 /* Float64BE */:\n    case 14 /* Float64LE */:\n      return 8;\n  }\n  return 0;\n}\nfunction getNumber(buf, fmt, offset) {\n  switch (fmt) {\n    case 7 /* UInt8BE */:\n    case 2 /* UInt8LE */:\n      return buf[offset];\n    case 6 /* Int8BE */:\n    case 1 /* Int8LE */:\n      return buf[offset] << 24 >> 24;\n    case 4 /* UInt16LE */:\n      return read16(buf, offset);\n    case 3 /* Int16LE */:\n      return read16(buf, offset) << 16 >> 16;\n    case 11 /* UInt32LE */:\n      return read32(buf, offset);\n    case 5 /* Int32LE */:\n      return read32(buf, offset) >> 0;\n    case 17 /* UInt64LE */:\n      return read32(buf, offset) + read32(buf, offset + 4) * 4294967296;\n    case 19 /* Int64LE */:\n      return read32(buf, offset) + (read32(buf, offset + 4) >> 0) * 4294967296;\n    default: {\n      const inf = fmtInfo(fmt);\n      if (inf.isFloat) {\n        const arr = new Uint8Array(inf.size);\n        for (let i = 0; i < inf.size; ++i) {\n          arr[i] = buf[offset + i];\n        }\n        if (inf.swap)\n          arr.reverse();\n        if (inf.size == 4)\n          return new Float32Array(arr.buffer)[0];\n        else\n          return new Float64Array(arr.buffer)[0];\n      }\n      throw new Error(\"unsupported fmt:\" + fmt);\n    }\n  }\n}\nfunction setNumber(buf, fmt, offset, r) {\n  const inf = fmtInfo(fmt);\n  if (inf.isFloat) {\n    const arr = new Uint8Array(inf.size);\n    if (inf.size == 4)\n      new Float32Array(arr.buffer)[0] = r;\n    else\n      new Float64Array(arr.buffer)[0] = r;\n    if (inf.swap)\n      arr.reverse();\n    for (let i = 0; i < inf.size; ++i) {\n      buf[offset + i] = arr[i];\n    }\n    return;\n  }\n  for (let i = 0; i < inf.size; ++i) {\n    const off = !inf.swap ? offset + i : offset + inf.size - i - 1;\n    buf[off] = r & 255;\n    r >>= 8;\n  }\n}\nfunction uintOfBuffer(data) {\n  let fmt;\n  switch (data.length) {\n    case 0:\n    case 1:\n      fmt = 2 /* UInt8LE */;\n      break;\n    case 2:\n    case 3:\n      fmt = 4 /* UInt16LE */;\n      break;\n    default:\n      fmt = 11 /* UInt32LE */;\n      break;\n  }\n  return getNumber(data, fmt, 0);\n}\nfunction intOfBuffer(data) {\n  let fmt;\n  switch (data.length) {\n    case 0:\n    case 1:\n      fmt = 1 /* Int8LE */;\n      break;\n    case 2:\n    case 3:\n      fmt = 3 /* Int16LE */;\n      break;\n    default:\n      fmt = 5 /* Int32LE */;\n      break;\n  }\n  return getNumber(data, fmt, 0);\n}\nfunction bufferToArray(data, fmt) {\n  const res = [];\n  const sz = sizeOfNumberFormat(fmt);\n  for (let off = 0; off <= data.length - sz; off += sz)\n    res.push(getNumber(data, fmt, off));\n  return res;\n}\nfunction concatBufferArray(chunks) {\n  let sz = 0;\n  for (const ch of chunks)\n    sz += ch.length;\n  const r = new Uint8Array(sz);\n  sz = 0;\n  for (const ch of chunks) {\n    r.set(ch, sz);\n    sz += ch.length;\n  }\n  return r;\n}\nasync function sha256(buffers) {\n  const concat = concatBufferArray(buffers);\n  if (typeof window == \"undefined\" || !window.crypto) {\n    const s = __require(\"crypto\").createHash(\"sha256\");\n    s.update(concat);\n    return Promise.resolve(new Uint8Array(s.digest()));\n  }\n  const r = await window.crypto.subtle.digest(\"SHA-256\", concat);\n  return new Uint8Array(r);\n}\nasync function sha256Hmac(key, msg) {\n  const blockSize = 64;\n  if (key.length > blockSize)\n    key = await sha256([key]);\n  const paddedKey = new Uint8Array(blockSize);\n  paddedKey.set(key, 0);\n  for (let i = 0; i < blockSize; ++i)\n    paddedKey[i] ^= 54;\n  const h0 = await sha256([paddedKey, msg]);\n  for (let i = 0; i < blockSize; ++i)\n    paddedKey[i] ^= 54 ^ 92;\n  return await sha256([paddedKey, h0]);\n}\nfunction fromBase64(encoded) {\n  if (typeof Buffer == \"function\" && typeof Buffer.from == \"function\")\n    return new Uint8Array(Buffer.from(encoded, \"base64\"));\n  else\n    return stringToUint8Array(atob(encoded));\n}\nfunction toBase64(data) {\n  if (typeof Buffer == \"function\" && typeof Buffer.from == \"function\")\n    return Buffer.from(data).toString(\"base64\");\n  else\n    return btoa(uint8ArrayToString(data));\n}\n\n// jacdac-spec/dist/services.json\nvar services_default = [{ name: \"Common registers and commands\", status: \"experimental\", shortId: \"_system\", camelName: \"system\", shortName: \"system\", extends: [], notes: { short: \"This file describes common register and command codes.\\n\\nThese are defined in ranges separate from the per-service ones.\\nNo service actually derives from this file, but services can include packets\\ndefined here.\\nTheir code is listed as say `@ intensity` and not `@ 0x01` (the spectool enforces that).\", commands: \"Command codes are subdivided as follows:\\n* Commands `0x000-0x07f` - common to all services\\n* Commands `0x080-0xeff` - defined per-service\\n* Commands `0xf00-0xfff` - reserved for implementation\\n\\nCommands follow.\", registers: \"Register codes are subdivided as follows:\\n* Registers `0x001-0x07f` - r/w common to all services\\n* Registers `0x080-0x0ff` - r/w defined per-service\\n* Registers `0x100-0x17f` - r/o common to all services\\n* Registers `0x180-0x1ff` - r/o defined per-service\\n* Registers `0x200-0xeff` - custom, defined per-service\\n* Registers `0xf00-0xfff` - reserved for implementation, should not be seen on the wire\\n\\nThe types listed are typical. Check spec for particular service for exact type,\\nand a service-specific name for a register (eg. `value` could be `pulse_length`).\\nAll registers default to `0` unless otherwise indicated.\", events: \"Events codes are 8-bit and are subdivided as follows:\\n* Events `0x00-0x7f` - common to all services\\n* Events `0x80-0xff` - defined per-service\" }, classIdentifier: 536870897, enums: { ReadingThreshold: { name: \"ReadingThreshold\", storage: 1, members: { Neutral: 1, Inactive: 2, Active: 3 } }, StatusCodes: { name: \"StatusCodes\", storage: 2, members: { Ready: 0, Initializing: 1, Calibrating: 2, Sleeping: 3, WaitingForInput: 4, CalibrationNeeded: 100 } } }, constants: { announce_interval: { value: 500, hex: false } }, packets: [{ kind: \"command\", name: \"announce\", identifier: 0, description: \"Enumeration data for control service; service-specific advertisement data otherwise.\\nControl broadcasts it automatically every ``announce_interval``ms, but other service have to be queried to provide it.\", fields: [], hasReport: true }, { kind: \"report\", name: \"announce\", identifier: 0, description: \"Enumeration data for control service; service-specific advertisement data otherwise.\\nControl broadcasts it automatically every ``announce_interval``ms, but other service have to be queried to provide it.\", fields: [], secondary: true }, { kind: \"command\", name: \"get_register\", identifier: 4096, description: \"Registers number `N` is fetched by issuing command `0x1000 | N`.\\nThe report format is the same as the format of the register.\", fields: [], hasReport: true }, { kind: \"report\", name: \"get_register\", identifier: 4096, description: \"Registers number `N` is fetched by issuing command `0x1000 | N`.\\nThe report format is the same as the format of the register.\", fields: [], secondary: true }, { kind: \"command\", name: \"set_register\", identifier: 8192, description: \"Registers number `N` is set by issuing command `0x2000 | N`, with the format\\nthe same as the format of the register.\", fields: [] }, { kind: \"command\", name: \"calibrate\", identifier: 2, description: \"Request to calibrate a sensor. The report indicates the calibration is done.\", fields: [], hasReport: true }, { kind: \"report\", name: \"calibrate\", identifier: 2, description: \"Request to calibrate a sensor. The report indicates the calibration is done.\", fields: [], secondary: true }, { kind: \"report\", name: \"command_not_implemented\", identifier: 3, description: \"This report may be emitted by a server in response to a command (action or register operation)\\nthat it does not understand.\\nThe `service_command` and `packet_crc` fields are copied from the command packet that was unhandled.\\nNote that it's possible to get an ACK, followed by such an error report.\", fields: [{ name: \"service_command\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"packet_crc\", type: \"u16\", storage: 2, isSimpleType: true }], packFormat: \"u16 u16\" }, { kind: \"rw\", name: \"intensity\", identifier: 1, description: \"This is either binary on/off (0 or non-zero), or can be gradual (eg. brightness of an RGB LED strip).\", fields: [{ name: \"_\", type: \"u32\", storage: 4, isSimpleType: true }], packFormat: \"u32\" }, { kind: \"rw\", name: \"value\", identifier: 2, description: \"The primary value of actuator (eg. servo pulse length, or motor duty cycle).\", fields: [{ name: \"_\", type: \"i32\", storage: -4, isSimpleType: true }], packFormat: \"i32\" }, { kind: \"const\", name: \"min_value\", identifier: 272, description: \"The lowest value that can be reported for the value register.\", fields: [{ name: \"_\", type: \"i32\", storage: -4, isSimpleType: true }], packFormat: \"i32\" }, { kind: \"const\", name: \"max_value\", identifier: 273, description: \"The highest value that can be reported for the value register.\", fields: [{ name: \"_\", type: \"i32\", storage: -4, isSimpleType: true }], packFormat: \"i32\" }, { kind: \"rw\", name: \"max_power\", identifier: 7, description: \"Limit the power drawn by the service, in mA.\", fields: [{ name: \"_\", unit: \"mA\", type: \"u16\", storage: 2, isSimpleType: true, defaultValue: 500, typicalMax: 500, typicalMin: 0 }], packFormat: \"u16\" }, { kind: \"rw\", name: \"streaming_samples\", identifier: 3, description: \"Asks device to stream a given number of samples\\n(clients will typically write `255` to this register every second or so, while streaming is required).\", fields: [{ name: \"_\", unit: \"#\", type: \"u8\", storage: 1, isSimpleType: true }], packFormat: \"u8\" }, { kind: \"rw\", name: \"streaming_interval\", identifier: 4, description: \"Period between packets of data when streaming in milliseconds.\", fields: [{ name: \"_\", unit: \"ms\", type: \"u32\", storage: 4, isSimpleType: true, defaultValue: 100 }], packFormat: \"u32\" }, { kind: \"ro\", name: \"reading\", identifier: 257, description: \"Read-only value of the sensor, also reported in streaming.\", fields: [{ name: \"_\", type: \"i32\", storage: -4, isSimpleType: true }], volatile: true, packFormat: \"i32\" }, { kind: \"rw\", name: \"reading_range\", identifier: 8, description: \"For sensors that support it, sets the range (sometimes also described `min`/`max_reading`).\\nTypically only a small set of values is supported.\\nSetting it to `X` will select the smallest possible range that is at least `X`,\\nor if it doesn't exist, the largest supported range.\", fields: [{ name: \"_\", type: \"u32\", storage: 4, isSimpleType: true }], packFormat: \"u32\" }, { kind: \"const\", name: \"supported_ranges\", identifier: 266, description: \"Lists the values supported as `reading_range`.\", fields: [{ name: \"range\", type: \"u32\", storage: 4, isSimpleType: true, startRepeats: true }], packFormat: \"r: u32\" }, { kind: \"const\", name: \"min_reading\", identifier: 260, description: \"The lowest value that can be reported by the sensor.\", fields: [{ name: \"_\", type: \"i32\", storage: -4, isSimpleType: true }], packFormat: \"i32\" }, { kind: \"const\", name: \"max_reading\", identifier: 261, description: \"The highest value that can be reported by the sensor.\", fields: [{ name: \"_\", type: \"i32\", storage: -4, isSimpleType: true }], packFormat: \"i32\" }, { kind: \"ro\", name: \"reading_error\", identifier: 262, description: \"The real value of whatever is measured is between `reading - reading_error` and `reading + reading_error`. It should be computed from the internal state of the sensor. This register is often, but not always `const`. If the register value is modified,\\nsend a report in the same frame of the ``reading`` report.\", fields: [{ name: \"_\", type: \"u32\", storage: 4, isSimpleType: true }], volatile: true, packFormat: \"u32\" }, { kind: \"const\", name: \"reading_resolution\", identifier: 264, description: \"Smallest, yet distinguishable change in reading.\", fields: [{ name: \"_\", type: \"u32\", storage: 4, isSimpleType: true }], packFormat: \"u32\" }, { kind: \"rw\", name: \"inactive_threshold\", identifier: 5, description: \"Threshold when reading data gets inactive and triggers a ``inactive``.\", fields: [{ name: \"_\", type: \"i32\", storage: -4, isSimpleType: true }], packFormat: \"i32\" }, { kind: \"rw\", name: \"active_threshold\", identifier: 6, description: \"Thresholds when reading data gets active and triggers a ``active`` event.\", fields: [{ name: \"_\", type: \"i32\", storage: -4, isSimpleType: true }], packFormat: \"i32\" }, { kind: \"const\", name: \"streaming_preferred_interval\", identifier: 258, description: \"Preferred default streaming interval for sensor in milliseconds.\", fields: [{ name: \"_\", unit: \"ms\", type: \"u32\", storage: 4, isSimpleType: true }], packFormat: \"u32\" }, { kind: \"const\", name: \"variant\", identifier: 263, description: \"The hardware variant of the service.\\nFor services which support this, there's an enum defining the meaning.\", fields: [{ name: \"_\", type: \"u32\", storage: 4, isSimpleType: true }], packFormat: \"u32\" }, { kind: \"ro\", name: \"status_code\", identifier: 259, description: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet.\", fields: [{ name: \"code\", type: \"StatusCodes\", storage: 2 }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, packFormat: \"u16 u16\" }, { kind: \"const\", name: \"instance_name\", identifier: 265, description: \"A friendly name that describes the role of this service instance in the device.\", fields: [{ name: \"_\", type: \"string\", storage: 0 }], optional: true, packFormat: \"s\" }, { kind: \"event\", name: \"active\", identifier: 1, description: \"Notifies that the service has been activated (eg. button pressed, network connected, etc.)\", fields: [] }, { kind: \"event\", name: \"inactive\", identifier: 2, description: \"Notifies that the service has been dis-activated.\", fields: [] }, { kind: \"event\", name: \"change\", identifier: 3, description: \"Notifies that the some state of the service changed.\", fields: [] }, { kind: \"event\", name: \"status_code_changed\", identifier: 4, description: \"Notifies that the status code of the service changed.\", fields: [{ name: \"code\", type: \"StatusCodes\", storage: 2 }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], packFormat: \"u16 u16\" }, { kind: \"event\", name: \"neutral\", identifier: 7, description: \"Notifies that the threshold is back between ``low`` and ``high``.\", fields: [] }], tags: [] }, { name: \"Base service\", status: \"experimental\", shortId: \"_base\", camelName: \"base\", shortName: \"base\", extends: [], notes: { short: \"Base class for all services.\" }, classIdentifier: 536870899, enums: {}, constants: {}, packets: [{ kind: \"report\", name: \"command_not_implemented\", identifier: 3, description: \"This report may be emitted by a server in response to a command (action or register operation)\\nthat it does not understand.\\nThe `service_command` and `packet_crc` fields are copied from the command packet that was unhandled.\\nNote that it's possible to get an ACK, followed by such an error report.\", fields: [{ name: \"service_command\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"packet_crc\", type: \"u16\", storage: 2, isSimpleType: true }], identifierName: \"command_not_implemented\", packFormat: \"u16 u16\" }, { kind: \"const\", name: \"instance_name\", identifier: 265, description: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\", fields: [{ name: \"_\", type: \"string\", storage: 0 }], optional: true, identifierName: \"instance_name\", packFormat: \"s\" }, { kind: \"ro\", name: \"status_code\", identifier: 259, description: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code\", packFormat: \"u16 u16\" }, { kind: \"event\", name: \"status_code_changed\", identifier: 4, description: \"Notifies that the status code of the service changed.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code_changed\", packFormat: \"u16 u16\" }], tags: [] }, { name: \"Sensor\", status: \"experimental\", shortId: \"_sensor\", camelName: \"sensor\", shortName: \"sensor\", extends: [\"_base\"], notes: { short: \"Base class for sensors.\" }, classIdentifier: 536870898, enums: {}, constants: {}, packets: [{ kind: \"report\", name: \"command_not_implemented\", identifier: 3, description: \"This report may be emitted by a server in response to a command (action or register operation)\\nthat it does not understand.\\nThe `service_command` and `packet_crc` fields are copied from the command packet that was unhandled.\\nNote that it's possible to get an ACK, followed by such an error report.\", fields: [{ name: \"service_command\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"packet_crc\", type: \"u16\", storage: 2, isSimpleType: true }], identifierName: \"command_not_implemented\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"const\", name: \"instance_name\", identifier: 265, description: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\", fields: [{ name: \"_\", type: \"string\", storage: 0 }], optional: true, identifierName: \"instance_name\", packFormat: \"s\", derived: \"_base\" }, { kind: \"ro\", name: \"status_code\", identifier: 259, description: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"event\", name: \"status_code_changed\", identifier: 4, description: \"Notifies that the status code of the service changed.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code_changed\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"rw\", name: \"streaming_samples\", identifier: 3, description: \"Asks device to stream a given number of samples\\n(clients will typically write `255` to this register every second or so, while streaming is required).\", fields: [{ name: \"_\", unit: \"#\", type: \"u8\", storage: 1, isSimpleType: true }], internal: true, identifierName: \"streaming_samples\", packFormat: \"u8\" }, { kind: \"rw\", name: \"streaming_interval\", identifier: 4, description: \"Period between packets of data when streaming in milliseconds.\", fields: [{ name: \"_\", unit: \"ms\", type: \"u32\", storage: 4, isSimpleType: true, defaultValue: 100, typicalMin: 1, typicalMax: 6e4 }], identifierName: \"streaming_interval\", packFormat: \"u32\" }, { kind: \"const\", name: \"streaming_preferred_interval\", identifier: 258, description: \"Preferred default streaming interval for sensor in milliseconds.\", fields: [{ name: \"_\", unit: \"ms\", type: \"u32\", storage: 4, isSimpleType: true }], internal: true, optional: true, identifierName: \"streaming_preferred_interval\", packFormat: \"u32\" }], tags: [] }, { name: \"Accelerometer\", status: \"experimental\", shortId: \"accelerometer\", camelName: \"accelerometer\", shortName: \"accelerometer\", extends: [\"_base\", \"_sensor\"], notes: { short: \"A 3-axis accelerometer.\", long: \"## Orientation\\n\\nAn accelerometer module should translate acceleration values as follows:\\n\\n| Orientation           \t| X value (g) \t| Y value (g) \t| Z value (g) \t|\\n|-----------------------\t|-------------\t|-------------\t|-------------\t|\\n| Module lying flat     \t| 0           \t| 0           \t| -1          \t|\\n| Module on left edge   \t| -1          \t| 0           \t| 0           \t|\\n| Module on bottom edge \t| 0           \t| 1           \t| 0           \t|\\n\\nWe recommend an orientation marking on the PCB so that users can mount modules without having to experiment with the device. Left/bottom can be determined by assuming text on silk runs left-to-right.\", events: \"All events are debounced.\" }, classIdentifier: 521405449, enums: {}, constants: {}, packets: [{ kind: \"report\", name: \"command_not_implemented\", identifier: 3, description: \"This report may be emitted by a server in response to a command (action or register operation)\\nthat it does not understand.\\nThe `service_command` and `packet_crc` fields are copied from the command packet that was unhandled.\\nNote that it's possible to get an ACK, followed by such an error report.\", fields: [{ name: \"service_command\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"packet_crc\", type: \"u16\", storage: 2, isSimpleType: true }], identifierName: \"command_not_implemented\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"const\", name: \"instance_name\", identifier: 265, description: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\", fields: [{ name: \"_\", type: \"string\", storage: 0 }], optional: true, identifierName: \"instance_name\", packFormat: \"s\", derived: \"_base\" }, { kind: \"ro\", name: \"status_code\", identifier: 259, description: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"event\", name: \"status_code_changed\", identifier: 4, description: \"Notifies that the status code of the service changed.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code_changed\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"rw\", name: \"streaming_samples\", identifier: 3, description: \"Asks device to stream a given number of samples\\n(clients will typically write `255` to this register every second or so, while streaming is required).\", fields: [{ name: \"_\", unit: \"#\", type: \"u8\", storage: 1, isSimpleType: true }], internal: true, identifierName: \"streaming_samples\", packFormat: \"u8\", derived: \"_sensor\" }, { kind: \"rw\", name: \"streaming_interval\", identifier: 4, description: \"Period between packets of data when streaming in milliseconds.\", fields: [{ name: \"_\", unit: \"ms\", type: \"u32\", storage: 4, isSimpleType: true, defaultValue: 100, typicalMin: 1, typicalMax: 6e4 }], identifierName: \"streaming_interval\", packFormat: \"u32\", derived: \"_sensor\" }, { kind: \"const\", name: \"streaming_preferred_interval\", identifier: 258, description: \"Preferred default streaming interval for sensor in milliseconds.\", fields: [{ name: \"_\", unit: \"ms\", type: \"u32\", storage: 4, isSimpleType: true }], internal: true, optional: true, identifierName: \"streaming_preferred_interval\", packFormat: \"u32\", derived: \"_sensor\" }, { kind: \"ro\", name: \"forces\", identifier: 257, description: \"Indicates the current forces acting on accelerometer.\", fields: [{ name: \"x\", unit: \"g\", shift: 20, type: \"i12.20\", storage: -4 }, { name: \"y\", unit: \"g\", shift: 20, type: \"i12.20\", storage: -4 }, { name: \"z\", unit: \"g\", shift: 20, type: \"i12.20\", storage: -4 }], volatile: true, identifierName: \"reading\", packFormat: \"i12.20 i12.20 i12.20\" }, { kind: \"ro\", name: \"forces_error\", identifier: 262, description: \"Error on the reading value.\", fields: [{ name: \"_\", unit: \"g\", shift: 20, type: \"u12.20\", storage: 4 }], volatile: true, optional: true, identifierName: \"reading_error\", packFormat: \"u12.20\" }, { kind: \"rw\", name: \"max_force\", identifier: 8, description: 'Configures the range forces detected.\\nThe value will be \"rounded up\" to one of `max_forces_supported`.', fields: [{ name: \"_\", unit: \"g\", shift: 20, type: \"u12.20\", storage: 4 }], optional: true, identifierName: \"reading_range\", packFormat: \"u12.20\" }, { kind: \"const\", name: \"max_forces_supported\", identifier: 266, description: \"Lists values supported for writing `max_force`.\", fields: [{ name: \"max_force\", unit: \"g\", shift: 20, type: \"u12.20\", storage: 4, startRepeats: true }], optional: true, identifierName: \"supported_ranges\", packFormat: \"r: u12.20\" }, { kind: \"event\", name: \"tilt_up\", identifier: 129, description: \"Emitted when accelerometer is tilted in the given direction.\", fields: [] }, { kind: \"event\", name: \"tilt_down\", identifier: 130, description: \"Emitted when accelerometer is tilted in the given direction.\", fields: [] }, { kind: \"event\", name: \"tilt_left\", identifier: 131, description: \"Emitted when accelerometer is tilted in the given direction.\", fields: [] }, { kind: \"event\", name: \"tilt_right\", identifier: 132, description: \"Emitted when accelerometer is tilted in the given direction.\", fields: [] }, { kind: \"event\", name: \"face_up\", identifier: 133, description: \"Emitted when accelerometer is laying flat in the given direction.\", fields: [] }, { kind: \"event\", name: \"face_down\", identifier: 134, description: \"Emitted when accelerometer is laying flat in the given direction.\", fields: [] }, { kind: \"event\", name: \"freefall\", identifier: 135, description: \"Emitted when total force acting on accelerometer is much less than 1g.\", fields: [] }, { kind: \"event\", name: \"shake\", identifier: 139, description: \"Emitted when forces change violently a few times.\", fields: [] }, { kind: \"event\", name: \"force_2g\", identifier: 140, description: \"Emitted when force in any direction exceeds given threshold.\", fields: [] }, { kind: \"event\", name: \"force_3g\", identifier: 136, description: \"Emitted when force in any direction exceeds given threshold.\", fields: [] }, { kind: \"event\", name: \"force_6g\", identifier: 137, description: \"Emitted when force in any direction exceeds given threshold.\", fields: [] }, { kind: \"event\", name: \"force_8g\", identifier: 138, description: \"Emitted when force in any direction exceeds given threshold.\", fields: [] }], tags: [\"C\"], group: \"Movement\" }, { name: \"Arcade Gamepad\", status: \"deprecated\", shortId: \"arcadegamepad\", camelName: \"arcadeGamepad\", shortName: \"arcadeGamepad\", extends: [\"_base\", \"_sensor\"], notes: { short: \"This service is deprecated in favor of `gamepad` (although it is currently used by the micro:bit Arcade smart shield).\\nA gamepad with direction and action buttons for one player.\\nIf a device has multiple controllers, it should have multiple gamepad services, using consecutive service identifiers.\" }, classIdentifier: 501915758, enums: { Button: { name: \"Button\", storage: 1, members: { Left: 1, Up: 2, Right: 3, Down: 4, A: 5, B: 6, Menu: 7, Select: 8, Reset: 9, Exit: 10 } } }, constants: {}, packets: [{ kind: \"report\", name: \"command_not_implemented\", identifier: 3, description: \"This report may be emitted by a server in response to a command (action or register operation)\\nthat it does not understand.\\nThe `service_command` and `packet_crc` fields are copied from the command packet that was unhandled.\\nNote that it's possible to get an ACK, followed by such an error report.\", fields: [{ name: \"service_command\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"packet_crc\", type: \"u16\", storage: 2, isSimpleType: true }], identifierName: \"command_not_implemented\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"const\", name: \"instance_name\", identifier: 265, description: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\", fields: [{ name: \"_\", type: \"string\", storage: 0 }], optional: true, identifierName: \"instance_name\", packFormat: \"s\", derived: \"_base\" }, { kind: \"ro\", name: \"status_code\", identifier: 259, description: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"event\", name: \"status_code_changed\", identifier: 4, description: \"Notifies that the status code of the service changed.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code_changed\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"rw\", name: \"streaming_samples\", identifier: 3, description: \"Asks device to stream a given number of samples\\n(clients will typically write `255` to this register every second or so, while streaming is required).\", fields: [{ name: \"_\", unit: \"#\", type: \"u8\", storage: 1, isSimpleType: true }], internal: true, identifierName: \"streaming_samples\", packFormat: \"u8\", derived: \"_sensor\" }, { kind: \"rw\", name: \"streaming_interval\", identifier: 4, description: \"Period between packets of data when streaming in milliseconds.\", fields: [{ name: \"_\", unit: \"ms\", type: \"u32\", storage: 4, isSimpleType: true, defaultValue: 100, typicalMin: 1, typicalMax: 6e4 }], identifierName: \"streaming_interval\", packFormat: \"u32\", derived: \"_sensor\" }, { kind: \"const\", name: \"streaming_preferred_interval\", identifier: 258, description: \"Preferred default streaming interval for sensor in milliseconds.\", fields: [{ name: \"_\", unit: \"ms\", type: \"u32\", storage: 4, isSimpleType: true }], internal: true, optional: true, identifierName: \"streaming_preferred_interval\", packFormat: \"u32\", derived: \"_sensor\" }, { kind: \"ro\", name: \"buttons\", identifier: 257, description: \"Indicates which buttons are currently active (pressed).\\n`pressure` should be `0xff` for digital buttons, and proportional for analog ones.\", fields: [{ name: \"button\", type: \"Button\", storage: 1, startRepeats: true }, { name: \"pressure\", unit: \"/\", shift: 8, type: \"u0.8\", storage: 1 }], volatile: true, identifierName: \"reading\", packFormat: \"r: u8 u0.8\" }, { kind: \"const\", name: \"available_buttons\", identifier: 384, description: \"Indicates number of players supported and which buttons are present on the controller.\", fields: [{ name: \"button\", type: \"Button\", storage: 1, startRepeats: true }], packFormat: \"r: u8\" }, { kind: \"event\", name: \"down\", identifier: 1, description: \"Emitted when button goes from inactive to active.\", fields: [{ name: \"button\", type: \"Button\", storage: 1 }], identifierName: \"active\", packFormat: \"u8\" }, { kind: \"event\", name: \"up\", identifier: 2, description: \"Emitted when button goes from active to inactive.\", fields: [{ name: \"button\", type: \"Button\", storage: 1 }], identifierName: \"inactive\", packFormat: \"u8\" }], tags: [], group: \"Button\" }, { name: \"Arcade Sound\", status: \"experimental\", shortId: \"arcadesound\", camelName: \"arcadeSound\", shortName: \"arcadeSound\", extends: [\"_base\"], notes: { short: \"A sound playing device.\\n\\nThis is typically run over an SPI connection, not regular single-wire Jacdac.\" }, classIdentifier: 533083654, enums: {}, constants: {}, packets: [{ kind: \"report\", name: \"command_not_implemented\", identifier: 3, description: \"This report may be emitted by a server in response to a command (action or register operation)\\nthat it does not understand.\\nThe `service_command` and `packet_crc` fields are copied from the command packet that was unhandled.\\nNote that it's possible to get an ACK, followed by such an error report.\", fields: [{ name: \"service_command\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"packet_crc\", type: \"u16\", storage: 2, isSimpleType: true }], identifierName: \"command_not_implemented\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"const\", name: \"instance_name\", identifier: 265, description: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\", fields: [{ name: \"_\", type: \"string\", storage: 0 }], optional: true, identifierName: \"instance_name\", packFormat: \"s\", derived: \"_base\" }, { kind: \"ro\", name: \"status_code\", identifier: 259, description: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"event\", name: \"status_code_changed\", identifier: 4, description: \"Notifies that the status code of the service changed.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code_changed\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"command\", name: \"play\", identifier: 128, description: \"Play samples, which are single channel, signed 16-bit little endian values.\", fields: [{ name: \"samples\", type: \"bytes\", storage: 0, isSimpleType: true }], packFormat: \"b\" }, { kind: \"rw\", name: \"sample_rate\", identifier: 128, description: \"Get or set playback sample rate (in samples per second).\\nIf you set it, read it back, as the value may be rounded up or down.\", fields: [{ name: \"_\", unit: \"Hz\", shift: 10, type: \"u22.10\", storage: 4, defaultValue: 44100 }], packFormat: \"u22.10\" }, { kind: \"const\", name: \"buffer_size\", identifier: 384, description: \"The size of the internal audio buffer.\", fields: [{ name: \"_\", unit: \"B\", type: \"u32\", storage: 4, isSimpleType: true }], packFormat: \"u32\" }, { kind: \"ro\", name: \"buffer_pending\", identifier: 385, description: \"How much data is still left in the buffer to play.\\nClients should not send more data than `buffer_size - buffer_pending`,\\nbut can keep the `buffer_pending` as low as they want to ensure low latency\\nof audio playback.\", fields: [{ name: \"_\", unit: \"B\", type: \"u32\", storage: 4, isSimpleType: true }], packFormat: \"u32\" }], tags: [\"SPI\"] }, { name: \"Azure IoT Hub Health\", status: \"rc\", shortId: \"azureiothubhealth\", camelName: \"azureIotHubHealth\", shortName: \"azureIotHubHealth\", extends: [\"_base\"], notes: { short: \"Health and diagnostics information about the Azure Iot Hub connection.\" }, classIdentifier: 342028028, enums: { ConnectionStatus: { name: \"ConnectionStatus\", storage: 2, members: { Connected: 1, Disconnected: 2, Connecting: 3, Disconnecting: 4 } } }, constants: {}, packets: [{ kind: \"report\", name: \"command_not_implemented\", identifier: 3, description: \"This report may be emitted by a server in response to a command (action or register operation)\\nthat it does not understand.\\nThe `service_command` and `packet_crc` fields are copied from the command packet that was unhandled.\\nNote that it's possible to get an ACK, followed by such an error report.\", fields: [{ name: \"service_command\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"packet_crc\", type: \"u16\", storage: 2, isSimpleType: true }], identifierName: \"command_not_implemented\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"const\", name: \"instance_name\", identifier: 265, description: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\", fields: [{ name: \"_\", type: \"string\", storage: 0 }], optional: true, identifierName: \"instance_name\", packFormat: \"s\", derived: \"_base\" }, { kind: \"ro\", name: \"status_code\", identifier: 259, description: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"event\", name: \"status_code_changed\", identifier: 4, description: \"Notifies that the status code of the service changed.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code_changed\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"ro\", name: \"hub_name\", identifier: 384, description: \"Something like `my-iot-hub.azure-devices.net` if available.\", fields: [{ name: \"_\", type: \"string\", storage: 0 }], optional: true, packFormat: \"s\" }, { kind: \"ro\", name: \"hub_device_id\", identifier: 385, description: \"Device identifier in Azure Iot Hub if available.\", fields: [{ name: \"_\", type: \"string\", storage: 0 }], optional: true, packFormat: \"s\" }, { kind: \"ro\", name: \"connection_status\", identifier: 386, description: \"Indicates the status of connection. A message beyond the [0..3] range represents an HTTP error code.\", fields: [{ name: \"_\", type: \"ConnectionStatus\", storage: 2 }], packFormat: \"u16\" }, { kind: \"command\", name: \"connect\", identifier: 129, description: \"Starts a connection to the IoT hub service\", fields: [] }, { kind: \"command\", name: \"disconnect\", identifier: 130, description: \"Starts disconnecting from the IoT hub service\", fields: [] }, { kind: \"command\", name: \"set_connection_string\", identifier: 134, description: \"Restricted command to override the existing connection string to the Azure IoT Hub.\", fields: [{ name: \"connection_string\", type: \"string\", storage: 0 }], restricted: true, packFormat: \"s\" }, { kind: \"event\", name: \"connection_status_change\", identifier: 3, description: \"Raised when the connection status changes\", fields: [{ name: \"connection_status\", type: \"ConnectionStatus\", storage: 2 }], identifierName: \"change\", packFormat: \"u16\" }, { kind: \"event\", name: \"message_sent\", identifier: 128, description: \"Raised when a message has been sent to the hub.\", fields: [] }], tags: [], group: \"Iot\" }, { name: \"Barcode reader\", status: \"experimental\", shortId: \"barcodereader\", camelName: \"barcodeReader\", shortName: \"barcodeReader\", extends: [\"_base\"], notes: { short: \"A device that reads various barcodes, like QR codes. For the web, see [BarcodeDetector](https://developer.mozilla.org/en-US/docs/Web/API/BarcodeDetector).\" }, classIdentifier: 477339244, enums: { Format: { name: \"Format\", storage: 1, members: { Aztec: 1, Code128: 2, Code39: 3, Code93: 4, Codabar: 5, DataMatrix: 6, Ean13: 8, Ean8: 9, ITF: 10, Pdf417: 11, QrCode: 12, UpcA: 13, UpcE: 14 } } }, constants: {}, packets: [{ kind: \"report\", name: \"command_not_implemented\", identifier: 3, description: \"This report may be emitted by a server in response to a command (action or register operation)\\nthat it does not understand.\\nThe `service_command` and `packet_crc` fields are copied from the command packet that was unhandled.\\nNote that it's possible to get an ACK, followed by such an error report.\", fields: [{ name: \"service_command\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"packet_crc\", type: \"u16\", storage: 2, isSimpleType: true }], identifierName: \"command_not_implemented\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"const\", name: \"instance_name\", identifier: 265, description: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\", fields: [{ name: \"_\", type: \"string\", storage: 0 }], optional: true, identifierName: \"instance_name\", packFormat: \"s\", derived: \"_base\" }, { kind: \"ro\", name: \"status_code\", identifier: 259, description: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"event\", name: \"status_code_changed\", identifier: 4, description: \"Notifies that the status code of the service changed.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code_changed\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"rw\", name: \"enabled\", identifier: 1, description: \"Turns on or off the detection of barcodes.\", fields: [{ name: \"_\", type: \"bool\", storage: 1 }], identifierName: \"intensity\", packFormat: \"u8\" }, { kind: \"const\", name: \"formats\", identifier: 384, description: \"Reports the list of supported barcode formats, as documented in https://developer.mozilla.org/en-US/docs/Web/API/Barcode_Detection_API.\", fields: [{ name: \"format\", type: \"Format\", storage: 1, startRepeats: true }], optional: true, packFormat: \"r: u8\" }, { kind: \"event\", name: \"detect\", identifier: 1, description: \"Raised when a bar code is detected and decoded. If the reader detects multiple codes, it will issue multiple events.\\nIn case of numeric barcodes, the `data` field should contain the ASCII (which is the same as UTF8 in that case) representation of the number.\", fields: [{ name: \"format\", type: \"Format\", storage: 1 }, { name: \"data\", type: \"string\", storage: 0 }], identifierName: \"active\", packFormat: \"u8 s\" }], tags: [] }, { name: \"Barometer\", status: \"rc\", shortId: \"barometer\", camelName: \"barometer\", shortName: \"barometer\", extends: [\"_base\", \"_sensor\"], notes: { short: \"A sensor measuring air pressure of outside environment.\", registers: \"Default streaming interval is 1s.\" }, classIdentifier: 504462570, enums: {}, constants: {}, packets: [{ kind: \"report\", name: \"command_not_implemented\", identifier: 3, description: \"This report may be emitted by a server in response to a command (action or register operation)\\nthat it does not understand.\\nThe `service_command` and `packet_crc` fields are copied from the command packet that was unhandled.\\nNote that it's possible to get an ACK, followed by such an error report.\", fields: [{ name: \"service_command\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"packet_crc\", type: \"u16\", storage: 2, isSimpleType: true }], identifierName: \"command_not_implemented\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"const\", name: \"instance_name\", identifier: 265, description: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\", fields: [{ name: \"_\", type: \"string\", storage: 0 }], optional: true, identifierName: \"instance_name\", packFormat: \"s\", derived: \"_base\" }, { kind: \"ro\", name: \"status_code\", identifier: 259, description: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"event\", name: \"status_code_changed\", identifier: 4, description: \"Notifies that the status code of the service changed.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code_changed\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"rw\", name: \"streaming_samples\", identifier: 3, description: \"Asks device to stream a given number of samples\\n(clients will typically write `255` to this register every second or so, while streaming is required).\", fields: [{ name: \"_\", unit: \"#\", type: \"u8\", storage: 1, isSimpleType: true }], internal: true, identifierName: \"streaming_samples\", packFormat: \"u8\", derived: \"_sensor\" }, { kind: \"rw\", name: \"streaming_interval\", identifier: 4, description: \"Period between packets of data when streaming in milliseconds.\", fields: [{ name: \"_\", unit: \"ms\", type: \"u32\", storage: 4, isSimpleType: true, defaultValue: 100, typicalMin: 1, typicalMax: 6e4 }], identifierName: \"streaming_interval\", packFormat: \"u32\", derived: \"_sensor\" }, { kind: \"const\", name: \"streaming_preferred_interval\", identifier: 258, description: \"Preferred default streaming interval for sensor in milliseconds.\", fields: [{ name: \"_\", unit: \"ms\", type: \"u32\", storage: 4, isSimpleType: true }], internal: true, optional: true, identifierName: \"streaming_preferred_interval\", packFormat: \"u32\", derived: \"_sensor\" }, { kind: \"ro\", name: \"pressure\", identifier: 257, description: \"The air pressure.\", fields: [{ name: \"_\", unit: \"hPa\", shift: 10, type: \"u22.10\", storage: 4, absoluteMin: 300, absoluteMax: 1100, typicalMin: 940, typicalMax: 1040 }], volatile: true, identifierName: \"reading\", preferredInterval: 6e4, packFormat: \"u22.10\" }, { kind: \"ro\", name: \"pressure_error\", identifier: 262, description: \"The real pressure is between `pressure - pressure_error` and `pressure + pressure_error`.\", fields: [{ name: \"_\", unit: \"hPa\", shift: 10, type: \"u22.10\", storage: 4 }], volatile: true, optional: true, identifierName: \"reading_error\", packFormat: \"u22.10\" }], tags: [\"8bit\"], group: \"Environment\" }, { name: \"bit:radio\", status: \"stable\", shortId: \"bitradio\", camelName: \"bitRadio\", shortName: \"bitRadio\", extends: [\"_base\"], notes: { short: \"Support for sending and receiving packets using the [Bit Radio protocol](https://github.com/microsoft/pxt-common-packages/blob/master/libs/radio/docs/reference/radio.md), typically used between micro:bit devices.\" }, classIdentifier: 449414863, enums: {}, constants: {}, packets: [{ kind: \"report\", name: \"command_not_implemented\", identifier: 3, description: \"This report may be emitted by a server in response to a command (action or register operation)\\nthat it does not understand.\\nThe `service_command` and `packet_crc` fields are copied from the command packet that was unhandled.\\nNote that it's possible to get an ACK, followed by such an error report.\", fields: [{ name: \"service_command\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"packet_crc\", type: \"u16\", storage: 2, isSimpleType: true }], identifierName: \"command_not_implemented\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"const\", name: \"instance_name\", identifier: 265, description: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\", fields: [{ name: \"_\", type: \"string\", storage: 0 }], optional: true, identifierName: \"instance_name\", packFormat: \"s\", derived: \"_base\" }, { kind: \"ro\", name: \"status_code\", identifier: 259, description: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"event\", name: \"status_code_changed\", identifier: 4, description: \"Notifies that the status code of the service changed.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code_changed\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"rw\", name: \"enabled\", identifier: 1, description: \"Turns on/off the radio antenna.\", fields: [{ name: \"_\", type: \"bool\", storage: 1 }], identifierName: \"intensity\", packFormat: \"u8\" }, { kind: \"rw\", name: \"group\", identifier: 128, description: \"Group used to filter packets\", fields: [{ name: \"_\", type: \"u8\", storage: 1, isSimpleType: true }], packFormat: \"u8\" }, { kind: \"rw\", name: \"transmission_power\", identifier: 129, description: \"Antenna power to increase or decrease range.\", fields: [{ name: \"_\", type: \"u8\", storage: 1, isSimpleType: true, defaultValue: 6, absoluteMin: 1, absoluteMax: 7 }], packFormat: \"u8\" }, { kind: \"rw\", name: \"frequency_band\", identifier: 130, description: \"Change the transmission and reception band of the radio to the given channel.\", fields: [{ name: \"_\", type: \"u8\", storage: 1, isSimpleType: true, defaultValue: 7, absoluteMax: 83, absoluteMin: 0 }], packFormat: \"u8\" }, { kind: \"command\", name: \"send_string\", identifier: 128, description: \"Sends a string payload as a radio message, maximum 18 characters.\", fields: [{ name: \"message\", type: \"string\", storage: 0 }], unique: true, packFormat: \"s\" }, { kind: \"command\", name: \"send_number\", identifier: 129, description: \"Sends a double precision number payload as a radio message\", fields: [{ name: \"value\", isFloat: true, type: \"f64\", storage: 8 }], unique: true, packFormat: \"f64\" }, { kind: \"command\", name: \"send_value\", identifier: 130, description: \"Sends a double precision number and a name payload as a radio message\", fields: [{ name: \"value\", isFloat: true, type: \"f64\", storage: 8 }, { name: \"name\", type: \"string\", storage: 0 }], unique: true, packFormat: \"f64 s\" }, { kind: \"command\", name: \"send_buffer\", identifier: 131, description: \"Sends a payload of bytes as a radio message\", fields: [{ name: \"data\", type: \"bytes\", storage: 0, isSimpleType: true }], unique: true, packFormat: \"b\" }, { kind: \"report\", name: \"string_received\", identifier: 144, description: \"Raised when a string packet is received\", fields: [{ name: \"time\", unit: \"ms\", type: \"u32\", storage: 4, isSimpleType: true }, { name: \"device_serial_number\", type: \"u32\", storage: 4, isSimpleType: true }, { name: \"rssi\", unit: \"dB\", type: \"i8\", storage: -1, isSimpleType: true }, { name: \"padding\", type: \"u8[1]\", storage: 1 }, { name: \"message\", type: \"string\", storage: 0 }], packFormat: \"u32 u32 i8 b[1] s\" }, { kind: \"report\", name: \"number_received\", identifier: 145, description: \"Raised when a number packet is received\", fields: [{ name: \"time\", unit: \"ms\", type: \"u32\", storage: 4, isSimpleType: true }, { name: \"device_serial_number\", type: \"u32\", storage: 4, isSimpleType: true }, { name: \"rssi\", unit: \"dB\", type: \"i8\", storage: -1, isSimpleType: true }, { name: \"padding\", type: \"u8[3]\", storage: 3 }, { name: \"value\", isFloat: true, type: \"f64\", storage: 8 }, { name: \"name\", type: \"string\", storage: 0 }], packFormat: \"u32 u32 i8 b[3] f64 s\" }, { kind: \"report\", name: \"buffer_received\", identifier: 146, description: \"Raised when a buffer packet is received\", fields: [{ name: \"time\", unit: \"ms\", type: \"u32\", storage: 4, isSimpleType: true }, { name: \"device_serial_number\", type: \"u32\", storage: 4, isSimpleType: true }, { name: \"rssi\", unit: \"dB\", type: \"i8\", storage: -1, isSimpleType: true }, { name: \"padding\", type: \"u8[1]\", storage: 1 }, { name: \"data\", type: \"bytes\", storage: 0, isSimpleType: true }], packFormat: \"u32 u32 i8 b[1] b\" }], tags: [] }, { name: \"Bootloader\", status: \"stable\", shortId: \"bootloader\", camelName: \"bootloader\", shortName: \"bootloader\", extends: [\"_base\"], notes: { short: \"Allows flashing (reprogramming) devices over Jacdac.\\n\\nThis is typically implemented by having a separate _bootloader_ mode, as opposed to _application_ mode\\non the module to be flashed.\\nThe bootloader mode is entered on every device reset, for about 300ms.\\nThe bootloader will generally not announce itself, until it gets some command.\\nOnce it gets the command, it will stay in application mode.\\n\\nTypically, you ask the module (in application mode) to reset, while sending broadcast\\n`info` commands to all bootloaders every 100ms or so.\\nAlternatively, you ask the the user to disconnect and re-connect the module, while\\nbroadcasting `info` commands.\\nThe second method works even if the application is damaged (eg., due to an aborted flash).\\n\\nWhen device is in bootloader mode, the device ID may change compared to application mode,\\nby flipping the first bit in the first byte of the device identifier.\" }, classIdentifier: 536516936, enums: { Error: { name: \"Error\", storage: 4, members: { NoError: 0, PacketTooSmall: 1, OutOfFlashableRange: 2, InvalidPageOffset: 3, NotPageAligned: 4 } } }, constants: {}, packets: [{ kind: \"report\", name: \"command_not_implemented\", identifier: 3, description: \"This report may be emitted by a server in response to a command (action or register operation)\\nthat it does not understand.\\nThe `service_command` and `packet_crc` fields are copied from the command packet that was unhandled.\\nNote that it's possible to get an ACK, followed by such an error report.\", fields: [{ name: \"service_command\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"packet_crc\", type: \"u16\", storage: 2, isSimpleType: true }], identifierName: \"command_not_implemented\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"const\", name: \"instance_name\", identifier: 265, description: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\", fields: [{ name: \"_\", type: \"string\", storage: 0 }], optional: true, identifierName: \"instance_name\", packFormat: \"s\", derived: \"_base\" }, { kind: \"ro\", name: \"status_code\", identifier: 259, description: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"event\", name: \"status_code_changed\", identifier: 4, description: \"Notifies that the status code of the service changed.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code_changed\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"command\", name: \"info\", identifier: 0, description: 'The `service_class` is always `0x1ffa9948`. The `product_identifier` identifies the kind of firmware\\nthat \"fits\" this device.', fields: [], identifierName: \"announce\", hasReport: true }, { kind: \"report\", name: \"info\", identifier: 0, description: 'The `service_class` is always `0x1ffa9948`. The `product_identifier` identifies the kind of firmware\\nthat \"fits\" this device.', fields: [{ name: \"service_class\", type: \"u32\", storage: 4, isSimpleType: true }, { name: \"page_size\", unit: \"B\", type: \"u32\", storage: 4, isSimpleType: true }, { name: \"flashable_size\", unit: \"B\", type: \"u32\", storage: 4, isSimpleType: true }, { name: \"product_identifier\", type: \"u32\", storage: 4, isSimpleType: true }], secondary: true, packFormat: \"u32 u32 u32 u32\" }, { kind: \"command\", name: \"set_session\", identifier: 129, description: \"The flashing server should generate a random id, and use this command to set it.\", fields: [{ name: \"session_id\", type: \"u32\", storage: 4, isSimpleType: true }], hasReport: true, packFormat: \"u32\" }, { kind: \"report\", name: \"set_session\", identifier: 129, description: \"The flashing server should generate a random id, and use this command to set it.\", fields: [{ name: \"session_id\", type: \"u32\", storage: 4, isSimpleType: true }], secondary: true, packFormat: \"u32\" }, { kind: \"command\", name: \"page_data\", identifier: 128, description: \"Use to send flashing data. A physical page is split into `chunk_max + 1` chunks, where `chunk_no = 0 ... chunk_max`.\\nEach chunk is stored at `page_address + page_offset`. `page_address` has to be equal in all chunks,\\nand is included in response.\\nOnly the last chunk causes writing to flash and elicits response.\\n\\nErrors not listed are also possible. Errors larger than `0xffff` indicate de-synchronization on chunk numbers.\\n\\nWhile this command is technically `unique`, the bootloader client will retry failed pages.\\nBootloaders typically will not support reliable commands delivered over pipes.\", fields: [{ name: \"page_address\", type: \"u32\", storage: 4, isSimpleType: true }, { name: \"page_offset\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"chunk_no\", type: \"u8\", storage: 1, isSimpleType: true }, { name: \"chunk_max\", type: \"u8\", storage: 1, isSimpleType: true }, { name: \"session_id\", type: \"u32\", storage: 4, isSimpleType: true }, { name: \"reserved0\", type: \"u32\", storage: 4, isSimpleType: true }, { name: \"reserved1\", type: \"u32\", storage: 4, isSimpleType: true }, { name: \"reserved2\", type: \"u32\", storage: 4, isSimpleType: true }, { name: \"reserved3\", type: \"u32\", storage: 4, isSimpleType: true }, { name: \"page_data\", type: \"bytes\", storage: 208, isSimpleType: true, maxBytes: 208 }], unique: true, hasReport: true, packFormat: \"u32 u16 u8 u8 u32 u32 u32 u32 u32 b[208]\" }, { kind: \"report\", name: \"page_data\", identifier: 128, description: \"Use to send flashing data. A physical page is split into `chunk_max + 1` chunks, where `chunk_no = 0 ... chunk_max`.\\nEach chunk is stored at `page_address + page_offset`. `page_address` has to be equal in all chunks,\\nand is included in response.\\nOnly the last chunk causes writing to flash and elicits response.\\n\\nErrors not listed are also possible. Errors larger than `0xffff` indicate de-synchronization on chunk numbers.\\n\\nWhile this command is technically `unique`, the bootloader client will retry failed pages.\\nBootloaders typically will not support reliable commands delivered over pipes.\", fields: [{ name: \"session_id\", type: \"u32\", storage: 4, isSimpleType: true }, { name: \"page_error\", type: \"Error\", storage: 4 }, { name: \"page_address\", type: \"u32\", storage: 4, isSimpleType: true }], secondary: true, packFormat: \"u32 u32 u32\" }], tags: [\"C\"] }, { name: \"Braille display\", status: \"experimental\", shortId: \"brailledisplay\", camelName: \"brailleDisplay\", shortName: \"brailleDisplay\", extends: [\"_base\"], notes: { short: \"A Braille pattern display module. This module display [unicode braille patterns](https://www.unicode.org/charts/PDF/U2800.pdf), country specific encoding have to be implemented by the clients.\" }, classIdentifier: 331331532, enums: {}, constants: {}, packets: [{ kind: \"report\", name: \"command_not_implemented\", identifier: 3, description: \"This report may be emitted by a server in response to a command (action or register operation)\\nthat it does not understand.\\nThe `service_command` and `packet_crc` fields are copied from the command packet that was unhandled.\\nNote that it's possible to get an ACK, followed by such an error report.\", fields: [{ name: \"service_command\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"packet_crc\", type: \"u16\", storage: 2, isSimpleType: true }], identifierName: \"command_not_implemented\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"const\", name: \"instance_name\", identifier: 265, description: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\", fields: [{ name: \"_\", type: \"string\", storage: 0 }], optional: true, identifierName: \"instance_name\", packFormat: \"s\", derived: \"_base\" }, { kind: \"ro\", name: \"status_code\", identifier: 259, description: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"event\", name: \"status_code_changed\", identifier: 4, description: \"Notifies that the status code of the service changed.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code_changed\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"rw\", name: \"enabled\", identifier: 1, description: \"Determins if the braille display is active.\", fields: [{ name: \"_\", type: \"bool\", storage: 1 }], identifierName: \"intensity\", packFormat: \"u8\" }, { kind: \"rw\", name: \"patterns\", identifier: 2, description: \"Braille patterns to show. Must be unicode characters between `0x2800` and `0x28ff`.\", fields: [{ name: \"_\", type: \"string\", storage: 0 }], lowLevel: true, identifierName: \"value\", packFormat: \"s\" }, { kind: \"const\", name: \"length\", identifier: 385, description: \"Gets the number of patterns that can be displayed.\", fields: [{ name: \"_\", unit: \"#\", type: \"u8\", storage: 1, isSimpleType: true }], packFormat: \"u8\" }], tags: [], group: \"Display\" }, { name: \"Bridge\", status: \"rc\", shortId: \"bridge\", camelName: \"bridge\", shortName: \"bridge\", extends: [\"_base\"], notes: { short: \"Indicates that the device acts as a bridge to the Jacdac bus.\" }, classIdentifier: 535147631, enums: {}, constants: {}, packets: [{ kind: \"report\", name: \"command_not_implemented\", identifier: 3, description: \"This report may be emitted by a server in response to a command (action or register operation)\\nthat it does not understand.\\nThe `service_command` and `packet_crc` fields are copied from the command packet that was unhandled.\\nNote that it's possible to get an ACK, followed by such an error report.\", fields: [{ name: \"service_command\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"packet_crc\", type: \"u16\", storage: 2, isSimpleType: true }], identifierName: \"command_not_implemented\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"const\", name: \"instance_name\", identifier: 265, description: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\", fields: [{ name: \"_\", type: \"string\", storage: 0 }], optional: true, identifierName: \"instance_name\", packFormat: \"s\", derived: \"_base\" }, { kind: \"ro\", name: \"status_code\", identifier: 259, description: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"event\", name: \"status_code_changed\", identifier: 4, description: \"Notifies that the status code of the service changed.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code_changed\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"rw\", name: \"enabled\", identifier: 1, description: \"Enables or disables the bridge.\", fields: [{ name: \"_\", type: \"bool\", storage: 1 }], identifierName: \"intensity\", packFormat: \"u8\" }], tags: [\"infrastructure\"] }, { name: \"Button\", status: \"stable\", shortId: \"button\", camelName: \"button\", shortName: \"button\", extends: [\"_base\", \"_sensor\"], notes: { short: \"A push-button, which returns to inactive position when not operated anymore.\" }, classIdentifier: 343122531, enums: {}, constants: {}, packets: [{ kind: \"report\", name: \"command_not_implemented\", identifier: 3, description: \"This report may be emitted by a server in response to a command (action or register operation)\\nthat it does not understand.\\nThe `service_command` and `packet_crc` fields are copied from the command packet that was unhandled.\\nNote that it's possible to get an ACK, followed by such an error report.\", fields: [{ name: \"service_command\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"packet_crc\", type: \"u16\", storage: 2, isSimpleType: true }], identifierName: \"command_not_implemented\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"const\", name: \"instance_name\", identifier: 265, description: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\", fields: [{ name: \"_\", type: \"string\", storage: 0 }], optional: true, identifierName: \"instance_name\", packFormat: \"s\", derived: \"_base\" }, { kind: \"ro\", name: \"status_code\", identifier: 259, description: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"event\", name: \"status_code_changed\", identifier: 4, description: \"Notifies that the status code of the service changed.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code_changed\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"rw\", name: \"streaming_samples\", identifier: 3, description: \"Asks device to stream a given number of samples\\n(clients will typically write `255` to this register every second or so, while streaming is required).\", fields: [{ name: \"_\", unit: \"#\", type: \"u8\", storage: 1, isSimpleType: true }], internal: true, identifierName: \"streaming_samples\", packFormat: \"u8\", derived: \"_sensor\" }, { kind: \"rw\", name: \"streaming_interval\", identifier: 4, description: \"Period between packets of data when streaming in milliseconds.\", fields: [{ name: \"_\", unit: \"ms\", type: \"u32\", storage: 4, isSimpleType: true, defaultValue: 100, typicalMin: 1, typicalMax: 6e4 }], identifierName: \"streaming_interval\", packFormat: \"u32\", derived: \"_sensor\" }, { kind: \"const\", name: \"streaming_preferred_interval\", identifier: 258, description: \"Preferred default streaming interval for sensor in milliseconds.\", fields: [{ name: \"_\", unit: \"ms\", type: \"u32\", storage: 4, isSimpleType: true }], internal: true, optional: true, identifierName: \"streaming_preferred_interval\", packFormat: \"u32\", derived: \"_sensor\" }, { kind: \"ro\", name: \"pressure\", identifier: 257, description: \"Indicates the pressure state of the button, where `0` is open.\", fields: [{ name: \"_\", unit: \"/\", shift: 16, type: \"u0.16\", storage: 2 }], lowLevel: true, volatile: true, identifierName: \"reading\", packFormat: \"u0.16\" }, { kind: \"const\", name: \"analog\", identifier: 384, description: \"Indicates if the button provides analog `pressure` readings.\", fields: [{ name: \"_\", type: \"bool\", storage: 1 }], optional: true, packFormat: \"u8\" }, { kind: \"ro\", name: \"pressed\", identifier: 385, description: \"Determines if the button is pressed currently.\\n\\nIf the event `down` is observed, `pressed` is true; if `up` or `hold` are observed, `pressed` is false.\\nTo initialize, wait for any event or timeout to `pressed` is true after 750ms (1.5x hold time).\", fields: [{ name: \"_\", type: \"bool\", storage: 1 }], client: true, packFormat: \"u8\" }, { kind: \"event\", name: \"down\", identifier: 1, description: \"Emitted when button goes from inactive to active.\", fields: [], identifierName: \"active\" }, { kind: \"event\", name: \"up\", identifier: 2, description: \"Emitted when button goes from active to inactive. The 'time' parameter\\nrecords the amount of time between the down and up events.\", fields: [{ name: \"time\", unit: \"ms\", type: \"u32\", storage: 4, isSimpleType: true }], identifierName: \"inactive\", packFormat: \"u32\" }, { kind: \"event\", name: \"hold\", identifier: 129, description: \"Emitted when the press time is greater than 500ms, and then at least every 500ms\\nas long as the button remains pressed. The 'time' parameter records the the amount of time\\nthat the button has been held (since the down event).\", fields: [{ name: \"time\", unit: \"ms\", type: \"u32\", storage: 4, isSimpleType: true }], packFormat: \"u32\" }], tags: [\"C\", \"8bit\", \"padauk\"], group: \"Button\" }, { name: \"Buzzer\", status: \"rc\", shortId: \"buzzer\", camelName: \"buzzer\", shortName: \"buzzer\", extends: [\"_base\"], notes: { short: \"A simple buzzer.\" }, classIdentifier: 458731991, enums: {}, constants: {}, packets: [{ kind: \"report\", name: \"command_not_implemented\", identifier: 3, description: \"This report may be emitted by a server in response to a command (action or register operation)\\nthat it does not understand.\\nThe `service_command` and `packet_crc` fields are copied from the command packet that was unhandled.\\nNote that it's possible to get an ACK, followed by such an error report.\", fields: [{ name: \"service_command\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"packet_crc\", type: \"u16\", storage: 2, isSimpleType: true }], identifierName: \"command_not_implemented\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"const\", name: \"instance_name\", identifier: 265, description: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\", fields: [{ name: \"_\", type: \"string\", storage: 0 }], optional: true, identifierName: \"instance_name\", packFormat: \"s\", derived: \"_base\" }, { kind: \"ro\", name: \"status_code\", identifier: 259, description: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"event\", name: \"status_code_changed\", identifier: 4, description: \"Notifies that the status code of the service changed.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code_changed\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"rw\", name: \"volume\", identifier: 1, description: \"The volume (duty cycle) of the buzzer.\", fields: [{ name: \"_\", unit: \"/\", shift: 8, type: \"u0.8\", storage: 1, defaultValue: 1 }], identifierName: \"intensity\", packFormat: \"u0.8\" }, { kind: \"command\", name: \"play_tone\", identifier: 128, description: \"Play a PWM tone with given period and duty for given duration.\\nThe duty is scaled down with `volume` register.\\nTo play tone at frequency `F` Hz and volume `V` (in `0..1`) you will want\\nto send `P = 1000000 / F` and `D = P * V / 2`.\", fields: [{ name: \"period\", unit: \"us\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"duty\", unit: \"us\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"duration\", unit: \"ms\", type: \"u16\", storage: 2, isSimpleType: true }], lowLevel: true, packFormat: \"u16 u16 u16\" }, { kind: \"command\", name: \"play_note\", identifier: 129, description: \"Play a note at the given frequency and volume.\", fields: [{ name: \"frequency\", unit: \"Hz\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"volume\", unit: \"/\", shift: 16, type: \"u0.16\", storage: 2 }, { name: \"duration\", unit: \"ms\", type: \"u16\", storage: 2, isSimpleType: true }], client: true, packFormat: \"u16 u0.16 u16\" }], tags: [\"C\", \"8bit\"], group: \"Sound\" }, { name: \"Capacitive Button\", status: \"rc\", shortId: \"capacitivebutton\", camelName: \"capacitiveButton\", shortName: \"capacitiveButton\", extends: [\"_base\"], notes: { short: \"A configuration service for a capacitive push-button.\" }, classIdentifier: 677752265, enums: {}, constants: {}, packets: [{ kind: \"report\", name: \"command_not_implemented\", identifier: 3, description: \"This report may be emitted by a server in response to a command (action or register operation)\\nthat it does not understand.\\nThe `service_command` and `packet_crc` fields are copied from the command packet that was unhandled.\\nNote that it's possible to get an ACK, followed by such an error report.\", fields: [{ name: \"service_command\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"packet_crc\", type: \"u16\", storage: 2, isSimpleType: true }], identifierName: \"command_not_implemented\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"const\", name: \"instance_name\", identifier: 265, description: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\", fields: [{ name: \"_\", type: \"string\", storage: 0 }], optional: true, identifierName: \"instance_name\", packFormat: \"s\", derived: \"_base\" }, { kind: \"ro\", name: \"status_code\", identifier: 259, description: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"event\", name: \"status_code_changed\", identifier: 4, description: \"Notifies that the status code of the service changed.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code_changed\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"rw\", name: \"threshold\", identifier: 6, description: \"Indicates the threshold for ``up`` events.\", fields: [{ name: \"_\", unit: \"/\", shift: 16, type: \"u0.16\", storage: 2 }], identifierName: \"active_threshold\", packFormat: \"u0.16\" }, { kind: \"command\", name: \"calibrate\", identifier: 2, description: \"Request to calibrate the capactive. When calibration is requested, the device expects that no object is touching the button. \\nThe report indicates the calibration is done.\", fields: [], identifierName: \"calibrate\", hasReport: true }, { kind: \"report\", name: \"calibrate\", identifier: 2, description: \"Request to calibrate the capactive. When calibration is requested, the device expects that no object is touching the button. \\nThe report indicates the calibration is done.\", fields: [], secondary: true }], tags: [\"8bit\"], group: \"Button\" }, { name: \"Character Screen\", status: \"rc\", shortId: \"characterscreen\", camelName: \"characterScreen\", shortName: \"characterScreen\", extends: [\"_base\"], notes: { short: \"A screen that displays characters, typically a LCD/OLED character screen.\" }, classIdentifier: 523748714, enums: { Variant: { name: \"Variant\", storage: 1, members: { LCD: 1, OLED: 2, Braille: 3 } }, TextDirection: { name: \"TextDirection\", storage: 1, members: { LeftToRight: 1, RightToLeft: 2 } } }, constants: {}, packets: [{ kind: \"report\", name: \"command_not_implemented\", identifier: 3, description: \"This report may be emitted by a server in response to a command (action or register operation)\\nthat it does not understand.\\nThe `service_command` and `packet_crc` fields are copied from the command packet that was unhandled.\\nNote that it's possible to get an ACK, followed by such an error report.\", fields: [{ name: \"service_command\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"packet_crc\", type: \"u16\", storage: 2, isSimpleType: true }], identifierName: \"command_not_implemented\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"const\", name: \"instance_name\", identifier: 265, description: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\", fields: [{ name: \"_\", type: \"string\", storage: 0 }], optional: true, identifierName: \"instance_name\", packFormat: \"s\", derived: \"_base\" }, { kind: \"ro\", name: \"status_code\", identifier: 259, description: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"event\", name: \"status_code_changed\", identifier: 4, description: \"Notifies that the status code of the service changed.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code_changed\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"rw\", name: \"message\", identifier: 2, description: \"Text to show. Use `\\\\n` to break lines.\", fields: [{ name: \"_\", type: \"string\", storage: 0 }], identifierName: \"value\", packFormat: \"s\" }, { kind: \"rw\", name: \"brightness\", identifier: 1, description: \"Brightness of the screen. `0` means off.\", fields: [{ name: \"_\", unit: \"/\", shift: 16, type: \"u0.16\", storage: 2 }], optional: true, identifierName: \"intensity\", packFormat: \"u0.16\" }, { kind: \"const\", name: \"variant\", identifier: 263, description: \"Describes the type of character LED screen.\", fields: [{ name: \"_\", type: \"Variant\", storage: 1 }], optional: true, identifierName: \"variant\", packFormat: \"u8\" }, { kind: \"rw\", name: \"text_direction\", identifier: 130, description: \"Specifies the RTL or LTR direction of the text.\", fields: [{ name: \"_\", type: \"TextDirection\", storage: 1 }], optional: true, packFormat: \"u8\" }, { kind: \"const\", name: \"rows\", identifier: 384, description: \"Gets the number of rows.\", fields: [{ name: \"_\", unit: \"#\", type: \"u8\", storage: 1, isSimpleType: true }], packFormat: \"u8\" }, { kind: \"const\", name: \"columns\", identifier: 385, description: \"Gets the number of columns.\", fields: [{ name: \"_\", unit: \"#\", type: \"u8\", storage: 1, isSimpleType: true }], packFormat: \"u8\" }], tags: [], group: \"Display\" }, { name: \"CODAL Message Bus\", status: \"experimental\", shortId: \"codalmessagebus\", camelName: \"codalMessageBus\", shortName: \"codalMessageBus\", extends: [\"_base\"], notes: { short: \"A service that uses the [CODAL message bus](https://lancaster-university.github.io/microbit-docs/ubit/messageBus/) to send and receive small messages.\\n\\nYou can find known values for `source` in [CODAL repository](https://github.com/lancaster-university/codal-core/blob/master/inc/core/CodalComponent.h)\\nIn MakeCode, you can listen for custom `source`, `value` values using [control.onEvent](https://makecode.microbit.org/reference/control/on-event].\" }, classIdentifier: 304085021, enums: {}, constants: {}, packets: [{ kind: \"report\", name: \"command_not_implemented\", identifier: 3, description: \"This report may be emitted by a server in response to a command (action or register operation)\\nthat it does not understand.\\nThe `service_command` and `packet_crc` fields are copied from the command packet that was unhandled.\\nNote that it's possible to get an ACK, followed by such an error report.\", fields: [{ name: \"service_command\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"packet_crc\", type: \"u16\", storage: 2, isSimpleType: true }], identifierName: \"command_not_implemented\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"const\", name: \"instance_name\", identifier: 265, description: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\", fields: [{ name: \"_\", type: \"string\", storage: 0 }], optional: true, identifierName: \"instance_name\", packFormat: \"s\", derived: \"_base\" }, { kind: \"ro\", name: \"status_code\", identifier: 259, description: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"event\", name: \"status_code_changed\", identifier: 4, description: \"Notifies that the status code of the service changed.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code_changed\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"command\", name: \"send\", identifier: 128, description: \"Send a message on the CODAL bus. If `source` is `0`, it is treated as wildcard.\", fields: [{ name: \"source\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"value\", type: \"u16\", storage: 2, isSimpleType: true }], unique: true, packFormat: \"u16 u16\" }, { kind: \"event\", name: \"message\", identifier: 128, description: \"Raised by the server is triggered by the server. The filtering logic of which event to send over Jacdac is up to the server implementation.\", fields: [{ name: \"source\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"value\", type: \"u16\", storage: 2, isSimpleType: true }], packFormat: \"u16 u16\" }], tags: [] }, { name: \"Color\", status: \"experimental\", shortId: \"color\", camelName: \"color\", shortName: \"color\", extends: [\"_base\", \"_sensor\"], notes: { short: \"Senses RGB colors\" }, classIdentifier: 372299111, enums: {}, constants: {}, packets: [{ kind: \"report\", name: \"command_not_implemented\", identifier: 3, description: \"This report may be emitted by a server in response to a command (action or register operation)\\nthat it does not understand.\\nThe `service_command` and `packet_crc` fields are copied from the command packet that was unhandled.\\nNote that it's possible to get an ACK, followed by such an error report.\", fields: [{ name: \"service_command\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"packet_crc\", type: \"u16\", storage: 2, isSimpleType: true }], identifierName: \"command_not_implemented\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"const\", name: \"instance_name\", identifier: 265, description: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\", fields: [{ name: \"_\", type: \"string\", storage: 0 }], optional: true, identifierName: \"instance_name\", packFormat: \"s\", derived: \"_base\" }, { kind: \"ro\", name: \"status_code\", identifier: 259, description: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"event\", name: \"status_code_changed\", identifier: 4, description: \"Notifies that the status code of the service changed.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code_changed\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"rw\", name: \"streaming_samples\", identifier: 3, description: \"Asks device to stream a given number of samples\\n(clients will typically write `255` to this register every second or so, while streaming is required).\", fields: [{ name: \"_\", unit: \"#\", type: \"u8\", storage: 1, isSimpleType: true }], internal: true, identifierName: \"streaming_samples\", packFormat: \"u8\", derived: \"_sensor\" }, { kind: \"rw\", name: \"streaming_interval\", identifier: 4, description: \"Period between packets of data when streaming in milliseconds.\", fields: [{ name: \"_\", unit: \"ms\", type: \"u32\", storage: 4, isSimpleType: true, defaultValue: 100, typicalMin: 1, typicalMax: 6e4 }], identifierName: \"streaming_interval\", packFormat: \"u32\", derived: \"_sensor\" }, { kind: \"const\", name: \"streaming_preferred_interval\", identifier: 258, description: \"Preferred default streaming interval for sensor in milliseconds.\", fields: [{ name: \"_\", unit: \"ms\", type: \"u32\", storage: 4, isSimpleType: true }], internal: true, optional: true, identifierName: \"streaming_preferred_interval\", packFormat: \"u32\", derived: \"_sensor\" }, { kind: \"ro\", name: \"color\", identifier: 257, description: \"Detected color in the RGB color space.\", fields: [{ name: \"red\", unit: \"/\", shift: 16, type: \"u0.16\", storage: 2 }, { name: \"green\", unit: \"/\", shift: 16, type: \"u0.16\", storage: 2 }, { name: \"blue\", unit: \"/\", shift: 16, type: \"u0.16\", storage: 2 }], volatile: true, identifierName: \"reading\", packFormat: \"u0.16 u0.16 u0.16\" }], tags: [\"8bit\"], group: \"Environment\" }, { name: \"Compass\", status: \"rc\", shortId: \"compass\", camelName: \"compass\", shortName: \"compass\", extends: [\"_base\", \"_sensor\"], notes: { short: \"A sensor that measures the heading.\" }, classIdentifier: 364362175, enums: {}, constants: {}, packets: [{ kind: \"report\", name: \"command_not_implemented\", identifier: 3, description: \"This report may be emitted by a server in response to a command (action or register operation)\\nthat it does not understand.\\nThe `service_command` and `packet_crc` fields are copied from the command packet that was unhandled.\\nNote that it's possible to get an ACK, followed by such an error report.\", fields: [{ name: \"service_command\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"packet_crc\", type: \"u16\", storage: 2, isSimpleType: true }], identifierName: \"command_not_implemented\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"const\", name: \"instance_name\", identifier: 265, description: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\", fields: [{ name: \"_\", type: \"string\", storage: 0 }], optional: true, identifierName: \"instance_name\", packFormat: \"s\", derived: \"_base\" }, { kind: \"ro\", name: \"status_code\", identifier: 259, description: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"event\", name: \"status_code_changed\", identifier: 4, description: \"Notifies that the status code of the service changed.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code_changed\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"rw\", name: \"streaming_samples\", identifier: 3, description: \"Asks device to stream a given number of samples\\n(clients will typically write `255` to this register every second or so, while streaming is required).\", fields: [{ name: \"_\", unit: \"#\", type: \"u8\", storage: 1, isSimpleType: true }], internal: true, identifierName: \"streaming_samples\", packFormat: \"u8\", derived: \"_sensor\" }, { kind: \"rw\", name: \"streaming_interval\", identifier: 4, description: \"Period between packets of data when streaming in milliseconds.\", fields: [{ name: \"_\", unit: \"ms\", type: \"u32\", storage: 4, isSimpleType: true, defaultValue: 100, typicalMin: 1, typicalMax: 6e4 }], identifierName: \"streaming_interval\", packFormat: \"u32\", derived: \"_sensor\" }, { kind: \"const\", name: \"streaming_preferred_interval\", identifier: 258, description: \"Preferred default streaming interval for sensor in milliseconds.\", fields: [{ name: \"_\", unit: \"ms\", type: \"u32\", storage: 4, isSimpleType: true }], internal: true, optional: true, identifierName: \"streaming_preferred_interval\", packFormat: \"u32\", derived: \"_sensor\" }, { kind: \"ro\", name: \"heading\", identifier: 257, description: \"The heading with respect to the magnetic north.\", fields: [{ name: \"_\", unit: \"\\xB0\", shift: 16, type: \"u16.16\", storage: 4, absoluteMin: 0, absoluteMax: 359 }], volatile: true, identifierName: \"reading\", preferredInterval: 1e3, packFormat: \"u16.16\" }, { kind: \"rw\", name: \"enabled\", identifier: 1, description: \"Turn on or off the sensor. Turning on the sensor may start a calibration sequence.\", fields: [{ name: \"_\", type: \"bool\", storage: 1 }], identifierName: \"intensity\", packFormat: \"u8\" }, { kind: \"ro\", name: \"heading_error\", identifier: 262, description: \"Error on the heading reading\", fields: [{ name: \"_\", unit: \"\\xB0\", shift: 16, type: \"u16.16\", storage: 4 }], volatile: true, optional: true, identifierName: \"reading_error\", packFormat: \"u16.16\" }, { kind: \"command\", name: \"calibrate\", identifier: 2, description: \"Starts a calibration sequence for the compass.\", fields: [], identifierName: \"calibrate\" }], tags: [] }, { name: \"Control\", status: \"stable\", shortId: \"control\", camelName: \"control\", shortName: \"control\", extends: [\"_base\"], notes: { short: \"Control service is always service index `0`.\\nIt handles actions common to all services on a device.\\n\\nNote: some of the optional features (including `flood_ping`, `mcu_temperature`, and all string registers)\\nare not implemented in `8bit` version.\" }, classIdentifier: 0, enums: { AnnounceFlags: { name: \"AnnounceFlags\", storage: 2, isFlags: true, members: { RestartCounterSteady: 15, RestartCounter1: 1, RestartCounter2: 2, RestartCounter4: 4, RestartCounter8: 8, StatusLightNone: 0, StatusLightMono: 16, StatusLightRgbNoFade: 32, StatusLightRgbFade: 48, SupportsACK: 256, SupportsBroadcast: 512, SupportsFrames: 1024, IsClient: 2048, SupportsReliableCommands: 4096 } } }, constants: {}, packets: [{ kind: \"report\", name: \"command_not_implemented\", identifier: 3, description: \"This report may be emitted by a server in response to a command (action or register operation)\\nthat it does not understand.\\nThe `service_command` and `packet_crc` fields are copied from the command packet that was unhandled.\\nNote that it's possible to get an ACK, followed by such an error report.\", fields: [{ name: \"service_command\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"packet_crc\", type: \"u16\", storage: 2, isSimpleType: true }], identifierName: \"command_not_implemented\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"const\", name: \"instance_name\", identifier: 265, description: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\", fields: [{ name: \"_\", type: \"string\", storage: 0 }], optional: true, identifierName: \"instance_name\", packFormat: \"s\", derived: \"_base\" }, { kind: \"ro\", name: \"status_code\", identifier: 259, description: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"event\", name: \"status_code_changed\", identifier: 4, description: \"Notifies that the status code of the service changed.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code_changed\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"command\", name: \"services\", identifier: 0, description: \"The `restart_counter` is computed from the `flags & RestartCounterSteady`, starts at `0x1` and increments by one until it reaches `0xf`, then it stays at `0xf`.\\nIf this number ever goes down, it indicates that the device restarted.\\n`service_class` indicates class identifier for each service index (service index `0` is always control, so it's\\nskipped in this enumeration).\\n`packet_count` indicates the number of packets sent by the current device since last announce,\\nincluding the current announce packet (it is always 0 if this feature is not supported).\\nThe command form can be used to induce report, which is otherwise broadcast every 500ms.\", fields: [], identifierName: \"announce\", hasReport: true }, { kind: \"report\", name: \"services\", identifier: 0, description: \"The `restart_counter` is computed from the `flags & RestartCounterSteady`, starts at `0x1` and increments by one until it reaches `0xf`, then it stays at `0xf`.\\nIf this number ever goes down, it indicates that the device restarted.\\n`service_class` indicates class identifier for each service index (service index `0` is always control, so it's\\nskipped in this enumeration).\\n`packet_count` indicates the number of packets sent by the current device since last announce,\\nincluding the current announce packet (it is always 0 if this feature is not supported).\\nThe command form can be used to induce report, which is otherwise broadcast every 500ms.\", fields: [{ name: \"flags\", type: \"AnnounceFlags\", storage: 2 }, { name: \"packet_count\", type: \"u8\", storage: 1, isSimpleType: true }, { name: \"reserved\", type: \"u8\", storage: 1, isSimpleType: true }, { name: \"service_class\", type: \"u32\", storage: 4, isSimpleType: true, startRepeats: true }], secondary: true, packFormat: \"u16 u8 u8 r: u32\" }, { kind: \"command\", name: \"noop\", identifier: 128, description: \"Do nothing. Always ignored. Can be used to test ACKs.\", fields: [] }, { kind: \"command\", name: \"identify\", identifier: 129, description: \"Blink the status LED (262ms on, 262ms off, four times, with the blue LED) or otherwise draw user's attention to device with no status light.\\nFor devices with status light (this can be discovered in the announce flags), the client should\\nsend the sequence of status light command to generate the identify animation.\", fields: [], optional: true }, { kind: \"command\", name: \"reset\", identifier: 130, description: \"Reset device. ACK may or may not be sent.\", fields: [], optional: true }, { kind: \"command\", name: \"flood_ping\", identifier: 131, description: \"The device will respond `num_responses` times, as fast as it can, setting the `counter` field in the report\\nto `start_counter`, then `start_counter + 1`, ..., and finally `start_counter + num_responses - 1`.\\nThe `dummy_payload` is `size` bytes long and contains bytes `0, 1, 2, ...`.\", fields: [{ name: \"num_responses\", type: \"u32\", storage: 4, isSimpleType: true }, { name: \"start_counter\", type: \"u32\", storage: 4, isSimpleType: true }, { name: \"size\", unit: \"B\", type: \"u8\", storage: 1, isSimpleType: true }], unique: true, optional: true, hasReport: true, packFormat: \"u32 u32 u8\" }, { kind: \"report\", name: \"flood_ping\", identifier: 131, description: \"The device will respond `num_responses` times, as fast as it can, setting the `counter` field in the report\\nto `start_counter`, then `start_counter + 1`, ..., and finally `start_counter + num_responses - 1`.\\nThe `dummy_payload` is `size` bytes long and contains bytes `0, 1, 2, ...`.\", fields: [{ name: \"counter\", type: \"u32\", storage: 4, isSimpleType: true }, { name: \"dummy_payload\", type: \"bytes\", storage: 0, isSimpleType: true }], secondary: true, packFormat: \"u32 b\" }, { kind: \"command\", name: \"set_status_light\", identifier: 132, description: \"Initiates a color transition of the status light from its current color to the one specified.\\nThe transition will complete in about `512 / speed` frames\\n(each frame is currently 100ms, so speed of `51` is about 1 second and `26` 0.5 second).\\nAs a special case, if speed is `0` the transition is immediate.\\nIf MCU is not capable of executing transitions, it can consider `speed` to be always `0`.\\nIf a monochrome LEDs is fitted, the average value of `red`, `green`, `blue` is used.\\nIf intensity of a monochrome LED cannot be controlled, any value larger than `0` should be considered\\non, and `0` (for all three channels) should be considered off.\", fields: [{ name: \"to_red\", type: \"u8\", storage: 1, isSimpleType: true }, { name: \"to_green\", type: \"u8\", storage: 1, isSimpleType: true }, { name: \"to_blue\", type: \"u8\", storage: 1, isSimpleType: true }, { name: \"speed\", type: \"u8\", storage: 1, isSimpleType: true }], packFormat: \"u8 u8 u8 u8\" }, { kind: \"command\", name: \"proxy\", identifier: 133, description: \"Force client device into proxy mode.\", fields: [], optional: true }, { kind: \"command\", name: \"reliable_commands\", identifier: 134, description: \"This opens a pipe to the device to provide an alternative, reliable transport of actions\\n(and possibly other commands).\\nThe commands are wrapped as pipe data packets.\\nMultiple invocations of this command with the same `seed` are dropped\\n(and thus the command is not `unique`); otherwise `seed` carries no meaning\\nand should be set to a random value by the client.\\nNote that while the commands sends this way are delivered exactly once, the\\nresponses might get lost.\", fields: [{ name: \"seed\", type: \"u32\", storage: 4, isSimpleType: true }], optional: true, hasReport: true, packFormat: \"u32\" }, { kind: \"report\", name: \"reliable_commands\", identifier: 134, description: \"This opens a pipe to the device to provide an alternative, reliable transport of actions\\n(and possibly other commands).\\nThe commands are wrapped as pipe data packets.\\nMultiple invocations of this command with the same `seed` are dropped\\n(and thus the command is not `unique`); otherwise `seed` carries no meaning\\nand should be set to a random value by the client.\\nNote that while the commands sends this way are delivered exactly once, the\\nresponses might get lost.\", fields: [{ name: \"commands\", type: \"pipe\", storage: 12 }], secondary: true, pipeType: \"reliable_commands\", packFormat: \"b[12]\" }, { kind: \"pipe_command\", name: \"wrapped_command\", identifier: 0, description: \"This opens a pipe to the device to provide an alternative, reliable transport of actions\\n(and possibly other commands).\\nThe commands are wrapped as pipe data packets.\\nMultiple invocations of this command with the same `seed` are dropped\\n(and thus the command is not `unique`); otherwise `seed` carries no meaning\\nand should be set to a random value by the client.\\nNote that while the commands sends this way are delivered exactly once, the\\nresponses might get lost.\", fields: [{ name: \"service_size\", type: \"u8\", storage: 1, isSimpleType: true }, { name: \"service_index\", type: \"u8\", storage: 1, isSimpleType: true }, { name: \"service_command\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"payload\", type: \"bytes\", storage: 0, isSimpleType: true }], pipeType: \"reliable_commands\", packFormat: \"u8 u8 u16 b\" }, { kind: \"rw\", name: \"reset_in\", identifier: 128, description: \"When set to value other than `0`, it asks the device to reset after specified number of microseconds.\\nThis is typically used to implement watchdog functionality, where a brain device sets `reset_in` to\\nsay 1.6s every 0.5s.\", fields: [{ name: \"_\", unit: \"us\", type: \"u32\", storage: 4, isSimpleType: true }], internal: true, optional: true, packFormat: \"u32\" }, { kind: \"const\", name: \"device_description\", identifier: 384, description: \"Identifies the type of hardware (eg., ACME Corp. Servo X-42 Rev C)\", fields: [{ name: \"_\", type: \"string\", storage: 0 }], optional: true, packFormat: \"s\" }, { kind: \"const\", name: \"product_identifier\", identifier: 385, description: \"A numeric code for the string above; used to identify firmware images and devices.\", fields: [{ name: \"_\", type: \"u32\", storage: 4, isSimpleType: true, absoluteMin: 805306368, absoluteMax: 1073741823 }], optional: true, packFormat: \"u32\" }, { kind: \"const\", name: \"bootloader_product_identifier\", identifier: 388, description: \"Typically the same as `product_identifier` unless device was flashed by hand; the bootloader will respond to that code.\", fields: [{ name: \"_\", type: \"u32\", storage: 4, isSimpleType: true, absoluteMin: 805306368, absoluteMax: 1073741823 }], optional: true, packFormat: \"u32\" }, { kind: \"const\", name: \"firmware_version\", identifier: 389, description: \"A string describing firmware version; typically semver.\", fields: [{ name: \"_\", type: \"string\", storage: 0 }], optional: true, packFormat: \"s\" }, { kind: \"ro\", name: \"mcu_temperature\", identifier: 386, description: \"MCU temperature in degrees Celsius (approximate).\", fields: [{ name: \"_\", unit: \"\\xB0C\", type: \"i16\", storage: -2, isSimpleType: true, typicalMin: -10, typicalMax: 150 }], volatile: true, optional: true, preferredInterval: 6e4, packFormat: \"i16\" }, { kind: \"ro\", name: \"uptime\", identifier: 390, description: \"Number of microseconds since boot.\", fields: [{ name: \"_\", unit: \"us\", type: \"u64\", storage: 8, isSimpleType: true }], volatile: true, optional: true, preferredInterval: 6e4, packFormat: \"u64\" }], tags: [\"C\", \"8bit\"] }, { name: \"Current Measurement\", status: \"experimental\", shortId: \"currentmeasurement\", camelName: \"currentMeasurement\", shortName: \"currentMeasurement\", extends: [\"_base\", \"_sensor\"], notes: { short: \"A service that reports a current measurement.\" }, classIdentifier: 420661422, enums: {}, constants: {}, packets: [{ kind: \"report\", name: \"command_not_implemented\", identifier: 3, description: \"This report may be emitted by a server in response to a command (action or register operation)\\nthat it does not understand.\\nThe `service_command` and `packet_crc` fields are copied from the command packet that was unhandled.\\nNote that it's possible to get an ACK, followed by such an error report.\", fields: [{ name: \"service_command\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"packet_crc\", type: \"u16\", storage: 2, isSimpleType: true }], identifierName: \"command_not_implemented\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"const\", name: \"instance_name\", identifier: 265, description: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\", fields: [{ name: \"_\", type: \"string\", storage: 0 }], optional: true, identifierName: \"instance_name\", packFormat: \"s\", derived: \"_base\" }, { kind: \"ro\", name: \"status_code\", identifier: 259, description: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"event\", name: \"status_code_changed\", identifier: 4, description: \"Notifies that the status code of the service changed.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code_changed\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"rw\", name: \"streaming_samples\", identifier: 3, description: \"Asks device to stream a given number of samples\\n(clients will typically write `255` to this register every second or so, while streaming is required).\", fields: [{ name: \"_\", unit: \"#\", type: \"u8\", storage: 1, isSimpleType: true }], internal: true, identifierName: \"streaming_samples\", packFormat: \"u8\", derived: \"_sensor\" }, { kind: \"rw\", name: \"streaming_interval\", identifier: 4, description: \"Period between packets of data when streaming in milliseconds.\", fields: [{ name: \"_\", unit: \"ms\", type: \"u32\", storage: 4, isSimpleType: true, defaultValue: 100, typicalMin: 1, typicalMax: 6e4 }], identifierName: \"streaming_interval\", packFormat: \"u32\", derived: \"_sensor\" }, { kind: \"const\", name: \"streaming_preferred_interval\", identifier: 258, description: \"Preferred default streaming interval for sensor in milliseconds.\", fields: [{ name: \"_\", unit: \"ms\", type: \"u32\", storage: 4, isSimpleType: true }], internal: true, optional: true, identifierName: \"streaming_preferred_interval\", packFormat: \"u32\", derived: \"_sensor\" }, { kind: \"const\", name: \"measurement_name\", identifier: 386, description: \"A string containing the net name that is being measured e.g. `POWER_DUT` or a reference e.g. `DIFF_DEV1_DEV2`. These constants can be used to identify a measurement from client code.\", fields: [{ name: \"_\", type: \"string\", storage: 0 }], packFormat: \"s\" }, { kind: \"ro\", name: \"measurement\", identifier: 257, description: \"The current measurement.\", fields: [{ name: \"_\", unit: \"A\", isFloat: true, type: \"f64\", storage: 8 }], volatile: true, identifierName: \"reading\", packFormat: \"f64\" }], tags: [] }, { name: \"Dashboard\", status: \"stable\", shortId: \"dashboard\", camelName: \"dashboard\", shortName: \"dashboard\", extends: [\"_base\"], notes: { short: \"Device that interacts, configure or inspects with the services on the bus. While a dashboard is on the bus, heuristics like device reset should be disabled.\" }, classIdentifier: 468029703, enums: {}, constants: {}, packets: [{ kind: \"report\", name: \"command_not_implemented\", identifier: 3, description: \"This report may be emitted by a server in response to a command (action or register operation)\\nthat it does not understand.\\nThe `service_command` and `packet_crc` fields are copied from the command packet that was unhandled.\\nNote that it's possible to get an ACK, followed by such an error report.\", fields: [{ name: \"service_command\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"packet_crc\", type: \"u16\", storage: 2, isSimpleType: true }], identifierName: \"command_not_implemented\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"const\", name: \"instance_name\", identifier: 265, description: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\", fields: [{ name: \"_\", type: \"string\", storage: 0 }], optional: true, identifierName: \"instance_name\", packFormat: \"s\", derived: \"_base\" }, { kind: \"ro\", name: \"status_code\", identifier: 259, description: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"event\", name: \"status_code_changed\", identifier: 4, description: \"Notifies that the status code of the service changed.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code_changed\", packFormat: \"u16 u16\", derived: \"_base\" }], tags: [\"infrastructure\"] }, { name: \"Distance\", status: \"rc\", shortId: \"distance\", camelName: \"distance\", shortName: \"distance\", extends: [\"_base\", \"_sensor\"], notes: { short: \"A sensor that determines the distance of an object without any physical contact involved.\" }, classIdentifier: 337275786, enums: { Variant: { name: \"Variant\", storage: 1, members: { Ultrasonic: 1, Infrared: 2, LiDAR: 3, Laser: 4 } } }, constants: {}, packets: [{ kind: \"report\", name: \"command_not_implemented\", identifier: 3, description: \"This report may be emitted by a server in response to a command (action or register operation)\\nthat it does not understand.\\nThe `service_command` and `packet_crc` fields are copied from the command packet that was unhandled.\\nNote that it's possible to get an ACK, followed by such an error report.\", fields: [{ name: \"service_command\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"packet_crc\", type: \"u16\", storage: 2, isSimpleType: true }], identifierName: \"command_not_implemented\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"const\", name: \"instance_name\", identifier: 265, description: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\", fields: [{ name: \"_\", type: \"string\", storage: 0 }], optional: true, identifierName: \"instance_name\", packFormat: \"s\", derived: \"_base\" }, { kind: \"ro\", name: \"status_code\", identifier: 259, description: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"event\", name: \"status_code_changed\", identifier: 4, description: \"Notifies that the status code of the service changed.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code_changed\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"rw\", name: \"streaming_samples\", identifier: 3, description: \"Asks device to stream a given number of samples\\n(clients will typically write `255` to this register every second or so, while streaming is required).\", fields: [{ name: \"_\", unit: \"#\", type: \"u8\", storage: 1, isSimpleType: true }], internal: true, identifierName: \"streaming_samples\", packFormat: \"u8\", derived: \"_sensor\" }, { kind: \"rw\", name: \"streaming_interval\", identifier: 4, description: \"Period between packets of data when streaming in milliseconds.\", fields: [{ name: \"_\", unit: \"ms\", type: \"u32\", storage: 4, isSimpleType: true, defaultValue: 100, typicalMin: 1, typicalMax: 6e4 }], identifierName: \"streaming_interval\", packFormat: \"u32\", derived: \"_sensor\" }, { kind: \"const\", name: \"streaming_preferred_interval\", identifier: 258, description: \"Preferred default streaming interval for sensor in milliseconds.\", fields: [{ name: \"_\", unit: \"ms\", type: \"u32\", storage: 4, isSimpleType: true }], internal: true, optional: true, identifierName: \"streaming_preferred_interval\", packFormat: \"u32\", derived: \"_sensor\" }, { kind: \"ro\", name: \"distance\", identifier: 257, description: \"Current distance from the object\", fields: [{ name: \"_\", unit: \"m\", shift: 16, type: \"u16.16\", storage: 4, typicalMin: 0.02, typicalMax: 4 }], volatile: true, identifierName: \"reading\", packFormat: \"u16.16\" }, { kind: \"ro\", name: \"distance_error\", identifier: 262, description: \"Absolute error on the reading value.\", fields: [{ name: \"_\", unit: \"m\", shift: 16, type: \"u16.16\", storage: 4 }], volatile: true, optional: true, identifierName: \"reading_error\", packFormat: \"u16.16\" }, { kind: \"const\", name: \"min_range\", identifier: 260, description: \"Minimum measurable distance\", fields: [{ name: \"_\", unit: \"m\", shift: 16, type: \"u16.16\", storage: 4 }], optional: true, identifierName: \"min_reading\", packFormat: \"u16.16\" }, { kind: \"const\", name: \"max_range\", identifier: 261, description: \"Maximum measurable distance\", fields: [{ name: \"_\", unit: \"m\", shift: 16, type: \"u16.16\", storage: 4 }], optional: true, identifierName: \"max_reading\", packFormat: \"u16.16\" }, { kind: \"const\", name: \"variant\", identifier: 263, description: \"Determines the type of sensor used.\", fields: [{ name: \"_\", type: \"Variant\", storage: 1 }], optional: true, identifierName: \"variant\", packFormat: \"u8\" }], tags: [\"8bit\"] }, { name: \"DMX\", status: \"experimental\", shortId: \"dmx\", camelName: \"dmx\", shortName: \"dmx\", extends: [\"_base\"], notes: { short: \"A service that can send DMX512-A packets with limited size. This service is designed to allow tinkering with a few DMX devices, but only allows 235 channels. More about DMX at https://en.wikipedia.org/wiki/DMX512.\" }, classIdentifier: 298814469, enums: {}, constants: {}, packets: [{ kind: \"report\", name: \"command_not_implemented\", identifier: 3, description: \"This report may be emitted by a server in response to a command (action or register operation)\\nthat it does not understand.\\nThe `service_command` and `packet_crc` fields are copied from the command packet that was unhandled.\\nNote that it's possible to get an ACK, followed by such an error report.\", fields: [{ name: \"service_command\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"packet_crc\", type: \"u16\", storage: 2, isSimpleType: true }], identifierName: \"command_not_implemented\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"const\", name: \"instance_name\", identifier: 265, description: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\", fields: [{ name: \"_\", type: \"string\", storage: 0 }], optional: true, identifierName: \"instance_name\", packFormat: \"s\", derived: \"_base\" }, { kind: \"ro\", name: \"status_code\", identifier: 259, description: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"event\", name: \"status_code_changed\", identifier: 4, description: \"Notifies that the status code of the service changed.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code_changed\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"rw\", name: \"enabled\", identifier: 1, description: \"Determines if the DMX bridge is active.\", fields: [{ name: \"_\", type: \"bool\", storage: 1 }], identifierName: \"intensity\", packFormat: \"u8\" }, { kind: \"command\", name: \"send\", identifier: 128, description: \"Send a DMX packet, up to 236bytes long, including the start code.\", fields: [{ name: \"channels\", type: \"bytes\", storage: 0, isSimpleType: true }], unique: true, packFormat: \"b\" }], tags: [] }, { name: \"Dot Matrix\", status: \"rc\", shortId: \"dotmatrix\", camelName: \"dotMatrix\", shortName: \"dotMatrix\", extends: [\"_base\"], notes: { short: \"A rectangular dot matrix display, made of monochrome LEDs or Braille pins.\" }, classIdentifier: 286070091, enums: { Variant: { name: \"Variant\", storage: 1, members: { LED: 1, Braille: 2 } } }, constants: {}, packets: [{ kind: \"report\", name: \"command_not_implemented\", identifier: 3, description: \"This report may be emitted by a server in response to a command (action or register operation)\\nthat it does not understand.\\nThe `service_command` and `packet_crc` fields are copied from the command packet that was unhandled.\\nNote that it's possible to get an ACK, followed by such an error report.\", fields: [{ name: \"service_command\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"packet_crc\", type: \"u16\", storage: 2, isSimpleType: true }], identifierName: \"command_not_implemented\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"const\", name: \"instance_name\", identifier: 265, description: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\", fields: [{ name: \"_\", type: \"string\", storage: 0 }], optional: true, identifierName: \"instance_name\", packFormat: \"s\", derived: \"_base\" }, { kind: \"ro\", name: \"status_code\", identifier: 259, description: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"event\", name: \"status_code_changed\", identifier: 4, description: \"Notifies that the status code of the service changed.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code_changed\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"rw\", name: \"dots\", identifier: 2, description: \"The state of the screen where dot on/off state is\\nstored as a bit, column by column. The column should be byte aligned.\", fields: [{ name: \"_\", type: \"bytes\", storage: 0, isSimpleType: true }], identifierName: \"value\", packFormat: \"b\" }, { kind: \"rw\", name: \"brightness\", identifier: 1, description: \"Reads the general brightness of the display, brightness for LEDs. `0` when the screen is off.\", fields: [{ name: \"_\", unit: \"/\", shift: 8, type: \"u0.8\", storage: 1 }], optional: true, identifierName: \"intensity\", packFormat: \"u0.8\" }, { kind: \"const\", name: \"rows\", identifier: 385, description: \"Number of rows on the screen\", fields: [{ name: \"_\", unit: \"#\", type: \"u16\", storage: 2, isSimpleType: true }], packFormat: \"u16\" }, { kind: \"const\", name: \"columns\", identifier: 386, description: \"Number of columns on the screen\", fields: [{ name: \"_\", unit: \"#\", type: \"u16\", storage: 2, isSimpleType: true }], packFormat: \"u16\" }, { kind: \"const\", name: \"variant\", identifier: 263, description: \"Describes the type of matrix used.\", fields: [{ name: \"_\", type: \"Variant\", storage: 1 }], optional: true, identifierName: \"variant\", packFormat: \"u8\" }], tags: [], group: \"Display\" }, { name: \"Equivalent CO\\u2082\", status: \"rc\", shortId: \"eco2\", camelName: \"eCO2\", shortName: \"eCO2\", extends: [\"_base\", \"_sensor\"], notes: { short: \"Measures equivalent CO\\u2082 levels.\" }, classIdentifier: 379362758, enums: { Variant: { name: \"Variant\", storage: 1, members: { VOC: 1, NDIR: 2 } } }, constants: {}, packets: [{ kind: \"report\", name: \"command_not_implemented\", identifier: 3, description: \"This report may be emitted by a server in response to a command (action or register operation)\\nthat it does not understand.\\nThe `service_command` and `packet_crc` fields are copied from the command packet that was unhandled.\\nNote that it's possible to get an ACK, followed by such an error report.\", fields: [{ name: \"service_command\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"packet_crc\", type: \"u16\", storage: 2, isSimpleType: true }], identifierName: \"command_not_implemented\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"const\", name: \"instance_name\", identifier: 265, description: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\", fields: [{ name: \"_\", type: \"string\", storage: 0 }], optional: true, identifierName: \"instance_name\", packFormat: \"s\", derived: \"_base\" }, { kind: \"ro\", name: \"status_code\", identifier: 259, description: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"event\", name: \"status_code_changed\", identifier: 4, description: \"Notifies that the status code of the service changed.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code_changed\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"rw\", name: \"streaming_samples\", identifier: 3, description: \"Asks device to stream a given number of samples\\n(clients will typically write `255` to this register every second or so, while streaming is required).\", fields: [{ name: \"_\", unit: \"#\", type: \"u8\", storage: 1, isSimpleType: true }], internal: true, identifierName: \"streaming_samples\", packFormat: \"u8\", derived: \"_sensor\" }, { kind: \"rw\", name: \"streaming_interval\", identifier: 4, description: \"Period between packets of data when streaming in milliseconds.\", fields: [{ name: \"_\", unit: \"ms\", type: \"u32\", storage: 4, isSimpleType: true, defaultValue: 100, typicalMin: 1, typicalMax: 6e4 }], identifierName: \"streaming_interval\", packFormat: \"u32\", derived: \"_sensor\" }, { kind: \"const\", name: \"streaming_preferred_interval\", identifier: 258, description: \"Preferred default streaming interval for sensor in milliseconds.\", fields: [{ name: \"_\", unit: \"ms\", type: \"u32\", storage: 4, isSimpleType: true }], internal: true, optional: true, identifierName: \"streaming_preferred_interval\", packFormat: \"u32\", derived: \"_sensor\" }, { kind: \"ro\", name: \"e_CO2\", identifier: 257, description: \"Equivalent CO\\u2082 (eCO\\u2082) readings.\", fields: [{ name: \"_\", unit: \"ppm\", shift: 10, type: \"u22.10\", storage: 4, typicalMin: 400, typicalMax: 8192 }], volatile: true, identifierName: \"reading\", preferredInterval: 1e3, packFormat: \"u22.10\" }, { kind: \"ro\", name: \"e_CO2_error\", identifier: 262, description: \"Error on the reading value.\", fields: [{ name: \"_\", unit: \"ppm\", shift: 10, type: \"u22.10\", storage: 4 }], volatile: true, optional: true, identifierName: \"reading_error\", packFormat: \"u22.10\" }, { kind: \"const\", name: \"min_e_CO2\", identifier: 260, description: \"Minimum measurable value\", fields: [{ name: \"_\", unit: \"ppm\", shift: 10, type: \"u22.10\", storage: 4 }], identifierName: \"min_reading\", packFormat: \"u22.10\" }, { kind: \"const\", name: \"max_e_CO2\", identifier: 261, description: \"Minimum measurable value\", fields: [{ name: \"_\", unit: \"ppm\", shift: 10, type: \"u22.10\", storage: 4 }], identifierName: \"max_reading\", packFormat: \"u22.10\" }, { kind: \"const\", name: \"variant\", identifier: 263, description: \"Type of physical sensor and capabilities.\", fields: [{ name: \"_\", type: \"Variant\", storage: 1 }], optional: true, identifierName: \"variant\", packFormat: \"u8\" }], tags: [\"8bit\"], group: \"Environment\" }, { name: \"Flex\", status: \"rc\", shortId: \"flex\", camelName: \"flex\", shortName: \"flex\", extends: [\"_base\", \"_sensor\"], notes: { short: \"A bending or deflection sensor.\" }, classIdentifier: 524797638, enums: {}, constants: {}, packets: [{ kind: \"report\", name: \"command_not_implemented\", identifier: 3, description: \"This report may be emitted by a server in response to a command (action or register operation)\\nthat it does not understand.\\nThe `service_command` and `packet_crc` fields are copied from the command packet that was unhandled.\\nNote that it's possible to get an ACK, followed by such an error report.\", fields: [{ name: \"service_command\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"packet_crc\", type: \"u16\", storage: 2, isSimpleType: true }], identifierName: \"command_not_implemented\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"const\", name: \"instance_name\", identifier: 265, description: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\", fields: [{ name: \"_\", type: \"string\", storage: 0 }], optional: true, identifierName: \"instance_name\", packFormat: \"s\", derived: \"_base\" }, { kind: \"ro\", name: \"status_code\", identifier: 259, description: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"event\", name: \"status_code_changed\", identifier: 4, description: \"Notifies that the status code of the service changed.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code_changed\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"rw\", name: \"streaming_samples\", identifier: 3, description: \"Asks device to stream a given number of samples\\n(clients will typically write `255` to this register every second or so, while streaming is required).\", fields: [{ name: \"_\", unit: \"#\", type: \"u8\", storage: 1, isSimpleType: true }], internal: true, identifierName: \"streaming_samples\", packFormat: \"u8\", derived: \"_sensor\" }, { kind: \"rw\", name: \"streaming_interval\", identifier: 4, description: \"Period between packets of data when streaming in milliseconds.\", fields: [{ name: \"_\", unit: \"ms\", type: \"u32\", storage: 4, isSimpleType: true, defaultValue: 100, typicalMin: 1, typicalMax: 6e4 }], identifierName: \"streaming_interval\", packFormat: \"u32\", derived: \"_sensor\" }, { kind: \"const\", name: \"streaming_preferred_interval\", identifier: 258, description: \"Preferred default streaming interval for sensor in milliseconds.\", fields: [{ name: \"_\", unit: \"ms\", type: \"u32\", storage: 4, isSimpleType: true }], internal: true, optional: true, identifierName: \"streaming_preferred_interval\", packFormat: \"u32\", derived: \"_sensor\" }, { kind: \"ro\", name: \"bending\", identifier: 257, description: \"A measure of the bending.\", fields: [{ name: \"_\", unit: \"/\", shift: 15, type: \"i1.15\", storage: -2 }], volatile: true, identifierName: \"reading\", packFormat: \"i1.15\" }, { kind: \"const\", name: \"length\", identifier: 384, description: \"Length of the flex sensor\", fields: [{ name: \"_\", unit: \"mm\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, packFormat: \"u16\" }], tags: [\"C\", \"8bit\"], group: \"Sensor\" }, { name: \"Gamepad\", status: \"rc\", shortId: \"gamepad\", camelName: \"gamepad\", shortName: \"gamepad\", extends: [\"_base\", \"_sensor\"], notes: { short: \"A two axis directional gamepad with optional buttons.\" }, classIdentifier: 277836886, enums: { Buttons: { name: \"Buttons\", storage: 4, isFlags: true, members: { Left: 1, Up: 2, Right: 4, Down: 8, A: 16, B: 32, Menu: 64, Select: 128, Reset: 256, Exit: 512, X: 1024, Y: 2048 } }, Variant: { name: \"Variant\", storage: 1, members: { Thumb: 1, ArcadeBall: 2, ArcadeStick: 3, Gamepad: 4 } } }, constants: {}, packets: [{ kind: \"report\", name: \"command_not_implemented\", identifier: 3, description: \"This report may be emitted by a server in response to a command (action or register operation)\\nthat it does not understand.\\nThe `service_command` and `packet_crc` fields are copied from the command packet that was unhandled.\\nNote that it's possible to get an ACK, followed by such an error report.\", fields: [{ name: \"service_command\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"packet_crc\", type: \"u16\", storage: 2, isSimpleType: true }], identifierName: \"command_not_implemented\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"const\", name: \"instance_name\", identifier: 265, description: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\", fields: [{ name: \"_\", type: \"string\", storage: 0 }], optional: true, identifierName: \"instance_name\", packFormat: \"s\", derived: \"_base\" }, { kind: \"ro\", name: \"status_code\", identifier: 259, description: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"event\", name: \"status_code_changed\", identifier: 4, description: \"Notifies that the status code of the service changed.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code_changed\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"rw\", name: \"streaming_samples\", identifier: 3, description: \"Asks device to stream a given number of samples\\n(clients will typically write `255` to this register every second or so, while streaming is required).\", fields: [{ name: \"_\", unit: \"#\", type: \"u8\", storage: 1, isSimpleType: true }], internal: true, identifierName: \"streaming_samples\", packFormat: \"u8\", derived: \"_sensor\" }, { kind: \"rw\", name: \"streaming_interval\", identifier: 4, description: \"Period between packets of data when streaming in milliseconds.\", fields: [{ name: \"_\", unit: \"ms\", type: \"u32\", storage: 4, isSimpleType: true, defaultValue: 100, typicalMin: 1, typicalMax: 6e4 }], identifierName: \"streaming_interval\", packFormat: \"u32\", derived: \"_sensor\" }, { kind: \"const\", name: \"streaming_preferred_interval\", identifier: 258, description: \"Preferred default streaming interval for sensor in milliseconds.\", fields: [{ name: \"_\", unit: \"ms\", type: \"u32\", storage: 4, isSimpleType: true }], internal: true, optional: true, identifierName: \"streaming_preferred_interval\", packFormat: \"u32\", derived: \"_sensor\" }, { kind: \"ro\", name: \"direction\", identifier: 257, description: 'If the gamepad is analog, the directional buttons should be \"simulated\", based on gamepad position\\n(`Left` is `{ x = -1, y = 0 }`, `Up` is `{ x = 0, y = -1}`).\\nIf the gamepad is digital, then each direction will read as either `-1`, `0`, or `1` (in fixed representation).\\nThe primary button on the gamepad is `A`.', fields: [{ name: \"buttons\", type: \"Buttons\", storage: 4 }, { name: \"x\", unit: \"/\", shift: 15, type: \"i1.15\", storage: -2 }, { name: \"y\", unit: \"/\", shift: 15, type: \"i1.15\", storage: -2 }], volatile: true, identifierName: \"reading\", packFormat: \"u32 i1.15 i1.15\" }, { kind: \"const\", name: \"variant\", identifier: 263, description: \"The type of physical gamepad.\", fields: [{ name: \"_\", type: \"Variant\", storage: 1 }], optional: true, identifierName: \"variant\", packFormat: \"u8\" }, { kind: \"const\", name: \"buttons_available\", identifier: 384, description: \"Indicates a bitmask of the buttons that are mounted on the gamepad.\\nIf the `Left`/`Up`/`Right`/`Down` buttons are marked as available here, the gamepad is digital.\\nEven when marked as not available, they will still be simulated based on the analog gamepad.\", fields: [{ name: \"_\", type: \"Buttons\", storage: 4 }], packFormat: \"u32\" }, { kind: \"event\", name: \"buttons_changed\", identifier: 3, description: \"Emitted whenever the state of buttons changes.\", fields: [{ name: \"buttons\", type: \"Buttons\", storage: 4 }], identifierName: \"change\", packFormat: \"u32\" }], tags: [\"8bit\", \"padauk\"], group: \"Button\" }, { name: \"Gyroscope\", status: \"rc\", shortId: \"gyroscope\", camelName: \"gyroscope\", shortName: \"gyroscope\", extends: [\"_base\", \"_sensor\"], notes: { short: \"A 3-axis gyroscope.\" }, classIdentifier: 505087730, enums: {}, constants: {}, packets: [{ kind: \"report\", name: \"command_not_implemented\", identifier: 3, description: \"This report may be emitted by a server in response to a command (action or register operation)\\nthat it does not understand.\\nThe `service_command` and `packet_crc` fields are copied from the command packet that was unhandled.\\nNote that it's possible to get an ACK, followed by such an error report.\", fields: [{ name: \"service_command\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"packet_crc\", type: \"u16\", storage: 2, isSimpleType: true }], identifierName: \"command_not_implemented\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"const\", name: \"instance_name\", identifier: 265, description: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\", fields: [{ name: \"_\", type: \"string\", storage: 0 }], optional: true, identifierName: \"instance_name\", packFormat: \"s\", derived: \"_base\" }, { kind: \"ro\", name: \"status_code\", identifier: 259, description: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"event\", name: \"status_code_changed\", identifier: 4, description: \"Notifies that the status code of the service changed.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code_changed\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"rw\", name: \"streaming_samples\", identifier: 3, description: \"Asks device to stream a given number of samples\\n(clients will typically write `255` to this register every second or so, while streaming is required).\", fields: [{ name: \"_\", unit: \"#\", type: \"u8\", storage: 1, isSimpleType: true }], internal: true, identifierName: \"streaming_samples\", packFormat: \"u8\", derived: \"_sensor\" }, { kind: \"rw\", name: \"streaming_interval\", identifier: 4, description: \"Period between packets of data when streaming in milliseconds.\", fields: [{ name: \"_\", unit: \"ms\", type: \"u32\", storage: 4, isSimpleType: true, defaultValue: 100, typicalMin: 1, typicalMax: 6e4 }], identifierName: \"streaming_interval\", packFormat: \"u32\", derived: \"_sensor\" }, { kind: \"const\", name: \"streaming_preferred_interval\", identifier: 258, description: \"Preferred default streaming interval for sensor in milliseconds.\", fields: [{ name: \"_\", unit: \"ms\", type: \"u32\", storage: 4, isSimpleType: true }], internal: true, optional: true, identifierName: \"streaming_preferred_interval\", packFormat: \"u32\", derived: \"_sensor\" }, { kind: \"ro\", name: \"rotation_rates\", identifier: 257, description: \"Indicates the current rates acting on gyroscope.\", fields: [{ name: \"x\", unit: \"\\xB0/s\", shift: 20, type: \"i12.20\", storage: -4 }, { name: \"y\", unit: \"\\xB0/s\", shift: 20, type: \"i12.20\", storage: -4 }, { name: \"z\", unit: \"\\xB0/s\", shift: 20, type: \"i12.20\", storage: -4 }], volatile: true, identifierName: \"reading\", packFormat: \"i12.20 i12.20 i12.20\" }, { kind: \"ro\", name: \"rotation_rates_error\", identifier: 262, description: \"Error on the reading value.\", fields: [{ name: \"_\", unit: \"\\xB0/s\", shift: 20, type: \"u12.20\", storage: 4 }], volatile: true, optional: true, identifierName: \"reading_error\", packFormat: \"u12.20\" }, { kind: \"rw\", name: \"max_rate\", identifier: 8, description: 'Configures the range of rotation rates.\\nThe value will be \"rounded up\" to one of `max_rates_supported`.', fields: [{ name: \"_\", unit: \"\\xB0/s\", shift: 20, type: \"u12.20\", storage: 4 }], optional: true, identifierName: \"reading_range\", packFormat: \"u12.20\" }, { kind: \"const\", name: \"max_rates_supported\", identifier: 266, description: \"Lists values supported for writing `max_rate`.\", fields: [{ name: \"max_rate\", unit: \"\\xB0/s\", shift: 20, type: \"u12.20\", storage: 4, startRepeats: true }], optional: true, identifierName: \"supported_ranges\", packFormat: \"r: u12.20\" }], tags: [], group: \"Movement\" }, { name: \"Heart Rate\", status: \"experimental\", shortId: \"heartrate\", camelName: \"heartRate\", shortName: \"heartRate\", extends: [\"_base\", \"_sensor\"], notes: { short: \"A sensor approximating the heart rate. \\n\\n\\n**Jacdac is NOT suitable for medical devices and should NOT be used in any kind of device to diagnose or treat any medical conditions.**\" }, classIdentifier: 376204740, enums: { Variant: { name: \"Variant\", storage: 1, members: { Finger: 1, Chest: 2, Wrist: 3, Pump: 4, WebCam: 5 } } }, constants: {}, packets: [{ kind: \"report\", name: \"command_not_implemented\", identifier: 3, description: \"This report may be emitted by a server in response to a command (action or register operation)\\nthat it does not understand.\\nThe `service_command` and `packet_crc` fields are copied from the command packet that was unhandled.\\nNote that it's possible to get an ACK, followed by such an error report.\", fields: [{ name: \"service_command\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"packet_crc\", type: \"u16\", storage: 2, isSimpleType: true }], identifierName: \"command_not_implemented\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"const\", name: \"instance_name\", identifier: 265, description: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\", fields: [{ name: \"_\", type: \"string\", storage: 0 }], optional: true, identifierName: \"instance_name\", packFormat: \"s\", derived: \"_base\" }, { kind: \"ro\", name: \"status_code\", identifier: 259, description: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"event\", name: \"status_code_changed\", identifier: 4, description: \"Notifies that the status code of the service changed.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code_changed\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"rw\", name: \"streaming_samples\", identifier: 3, description: \"Asks device to stream a given number of samples\\n(clients will typically write `255` to this register every second or so, while streaming is required).\", fields: [{ name: \"_\", unit: \"#\", type: \"u8\", storage: 1, isSimpleType: true }], internal: true, identifierName: \"streaming_samples\", packFormat: \"u8\", derived: \"_sensor\" }, { kind: \"rw\", name: \"streaming_interval\", identifier: 4, description: \"Period between packets of data when streaming in milliseconds.\", fields: [{ name: \"_\", unit: \"ms\", type: \"u32\", storage: 4, isSimpleType: true, defaultValue: 100, typicalMin: 1, typicalMax: 6e4 }], identifierName: \"streaming_interval\", packFormat: \"u32\", derived: \"_sensor\" }, { kind: \"const\", name: \"streaming_preferred_interval\", identifier: 258, description: \"Preferred default streaming interval for sensor in milliseconds.\", fields: [{ name: \"_\", unit: \"ms\", type: \"u32\", storage: 4, isSimpleType: true }], internal: true, optional: true, identifierName: \"streaming_preferred_interval\", packFormat: \"u32\", derived: \"_sensor\" }, { kind: \"ro\", name: \"heart_rate\", identifier: 257, description: \"The estimated heart rate.\", fields: [{ name: \"_\", unit: \"bpm\", shift: 16, type: \"u16.16\", storage: 4, typicalMin: 30, typicalMax: 200 }], volatile: true, identifierName: \"reading\", preferredInterval: 1e3, packFormat: \"u16.16\" }, { kind: \"ro\", name: \"heart_rate_error\", identifier: 262, description: \"The estimated error on the reported sensor data.\", fields: [{ name: \"_\", unit: \"bpm\", shift: 16, type: \"u16.16\", storage: 4 }], volatile: true, optional: true, identifierName: \"reading_error\", packFormat: \"u16.16\" }, { kind: \"const\", name: \"variant\", identifier: 263, description: \"The type of physical sensor\", fields: [{ name: \"_\", type: \"Variant\", storage: 1 }], optional: true, identifierName: \"variant\", packFormat: \"u8\" }], tags: [\"8bit\"], group: \"Biometric\" }, { name: \"HID Keyboard\", status: \"stable\", shortId: \"hidkeyboard\", camelName: \"hidKeyboard\", shortName: \"hidKeyboard\", extends: [\"_base\"], notes: { short: \"Control a HID keyboard.\\n\\nThe codes for the key (selectors) is defined in the [HID Keyboard\\nspecification](https://usb.org/sites/default/files/hut1_21.pdf), chapter 10 Keyboard/Keypad Page, page 81.\\nModifiers are in page 87.\\n\\nThe device keeps tracks of the key state and is able to clear it all with the clear command.\" }, classIdentifier: 414210922, enums: { Modifiers: { name: \"Modifiers\", storage: 1, isFlags: true, members: { None: 0, LeftControl: 1, LeftShift: 2, LeftAlt: 4, LeftGUI: 8, RightControl: 16, RightShift: 32, RightAlt: 64, RightGUI: 128 } }, Action: { name: \"Action\", storage: 1, members: { Press: 0, Up: 1, Down: 2 } } }, constants: {}, packets: [{ kind: \"report\", name: \"command_not_implemented\", identifier: 3, description: \"This report may be emitted by a server in response to a command (action or register operation)\\nthat it does not understand.\\nThe `service_command` and `packet_crc` fields are copied from the command packet that was unhandled.\\nNote that it's possible to get an ACK, followed by such an error report.\", fields: [{ name: \"service_command\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"packet_crc\", type: \"u16\", storage: 2, isSimpleType: true }], identifierName: \"command_not_implemented\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"const\", name: \"instance_name\", identifier: 265, description: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\", fields: [{ name: \"_\", type: \"string\", storage: 0 }], optional: true, identifierName: \"instance_name\", packFormat: \"s\", derived: \"_base\" }, { kind: \"ro\", name: \"status_code\", identifier: 259, description: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"event\", name: \"status_code_changed\", identifier: 4, description: \"Notifies that the status code of the service changed.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code_changed\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"command\", name: \"key\", identifier: 128, description: \"Presses a key or a sequence of keys down.\", fields: [{ name: \"selector\", type: \"u16\", storage: 2, isSimpleType: true, startRepeats: true }, { name: \"modifiers\", type: \"Modifiers\", storage: 1 }, { name: \"action\", type: \"Action\", storage: 1 }], lowLevel: true, unique: true, packFormat: \"r: u16 u8 u8\" }, { kind: \"command\", name: \"clear\", identifier: 129, description: \"Clears all pressed keys.\", fields: [] }], tags: [\"8bit\"] }, { name: \"HID Mouse\", status: \"stable\", shortId: \"hidmouse\", camelName: \"hidMouse\", shortName: \"hidMouse\", extends: [\"_base\"], notes: { short: \"Controls a HID mouse.\" }, classIdentifier: 411425820, enums: { Button: { name: \"Button\", storage: 2, isFlags: true, members: { Left: 1, Right: 2, Middle: 4 } }, ButtonEvent: { name: \"ButtonEvent\", storage: 1, members: { Up: 1, Down: 2, Click: 3, DoubleClick: 4 } } }, constants: {}, packets: [{ kind: \"report\", name: \"command_not_implemented\", identifier: 3, description: \"This report may be emitted by a server in response to a command (action or register operation)\\nthat it does not understand.\\nThe `service_command` and `packet_crc` fields are copied from the command packet that was unhandled.\\nNote that it's possible to get an ACK, followed by such an error report.\", fields: [{ name: \"service_command\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"packet_crc\", type: \"u16\", storage: 2, isSimpleType: true }], identifierName: \"command_not_implemented\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"const\", name: \"instance_name\", identifier: 265, description: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\", fields: [{ name: \"_\", type: \"string\", storage: 0 }], optional: true, identifierName: \"instance_name\", packFormat: \"s\", derived: \"_base\" }, { kind: \"ro\", name: \"status_code\", identifier: 259, description: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"event\", name: \"status_code_changed\", identifier: 4, description: \"Notifies that the status code of the service changed.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code_changed\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"command\", name: \"set_button\", identifier: 128, description: \"Sets the up/down state of one or more buttons.\\nA `Click` is the same as `Down` followed by `Up` after 100ms.\\nA `DoubleClick` is two clicks with `150ms` gap between them (that is, `100ms` first click, `150ms` gap, `100ms` second click).\", fields: [{ name: \"buttons\", type: \"Button\", storage: 2 }, { name: \"ev\", type: \"ButtonEvent\", storage: 1 }], unique: true, packFormat: \"u16 u8\" }, { kind: \"command\", name: \"move\", identifier: 129, description: \"Moves the mouse by the distance specified.\\nIf the time is positive, it specifies how long to make the move.\", fields: [{ name: \"dx\", unit: \"#\", type: \"i16\", storage: -2, isSimpleType: true }, { name: \"dy\", unit: \"#\", type: \"i16\", storage: -2, isSimpleType: true }, { name: \"time\", unit: \"ms\", type: \"u16\", storage: 2, isSimpleType: true }], unique: true, packFormat: \"i16 i16 u16\" }, { kind: \"command\", name: \"wheel\", identifier: 130, description: \"Turns the wheel up or down. Positive if scrolling up.\\nIf the time is positive, it specifies how long to make the move.\", fields: [{ name: \"dy\", unit: \"#\", type: \"i16\", storage: -2, isSimpleType: true }, { name: \"time\", unit: \"ms\", type: \"u16\", storage: 2, isSimpleType: true }], unique: true, packFormat: \"i16 u16\" }], tags: [\"8bit\"] }, { name: \"Humidity\", status: \"stable\", shortId: \"humidity\", camelName: \"humidity\", shortName: \"humidity\", extends: [\"_base\", \"_sensor\"], notes: { short: \"A sensor measuring humidity of outside environment.\" }, classIdentifier: 382210232, enums: {}, constants: {}, packets: [{ kind: \"report\", name: \"command_not_implemented\", identifier: 3, description: \"This report may be emitted by a server in response to a command (action or register operation)\\nthat it does not understand.\\nThe `service_command` and `packet_crc` fields are copied from the command packet that was unhandled.\\nNote that it's possible to get an ACK, followed by such an error report.\", fields: [{ name: \"service_command\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"packet_crc\", type: \"u16\", storage: 2, isSimpleType: true }], identifierName: \"command_not_implemented\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"const\", name: \"instance_name\", identifier: 265, description: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\", fields: [{ name: \"_\", type: \"string\", storage: 0 }], optional: true, identifierName: \"instance_name\", packFormat: \"s\", derived: \"_base\" }, { kind: \"ro\", name: \"status_code\", identifier: 259, description: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"event\", name: \"status_code_changed\", identifier: 4, description: \"Notifies that the status code of the service changed.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code_changed\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"rw\", name: \"streaming_samples\", identifier: 3, description: \"Asks device to stream a given number of samples\\n(clients will typically write `255` to this register every second or so, while streaming is required).\", fields: [{ name: \"_\", unit: \"#\", type: \"u8\", storage: 1, isSimpleType: true }], internal: true, identifierName: \"streaming_samples\", packFormat: \"u8\", derived: \"_sensor\" }, { kind: \"rw\", name: \"streaming_interval\", identifier: 4, description: \"Period between packets of data when streaming in milliseconds.\", fields: [{ name: \"_\", unit: \"ms\", type: \"u32\", storage: 4, isSimpleType: true, defaultValue: 100, typicalMin: 1, typicalMax: 6e4 }], identifierName: \"streaming_interval\", packFormat: \"u32\", derived: \"_sensor\" }, { kind: \"const\", name: \"streaming_preferred_interval\", identifier: 258, description: \"Preferred default streaming interval for sensor in milliseconds.\", fields: [{ name: \"_\", unit: \"ms\", type: \"u32\", storage: 4, isSimpleType: true }], internal: true, optional: true, identifierName: \"streaming_preferred_interval\", packFormat: \"u32\", derived: \"_sensor\" }, { kind: \"ro\", name: \"humidity\", identifier: 257, description: \"The relative humidity in percentage of full water saturation.\", fields: [{ name: \"_\", unit: \"%RH\", shift: 10, type: \"u22.10\", storage: 4 }], volatile: true, identifierName: \"reading\", preferredInterval: 5e3, packFormat: \"u22.10\" }, { kind: \"ro\", name: \"humidity_error\", identifier: 262, description: \"The real humidity is between `humidity - humidity_error` and `humidity + humidity_error`.\", fields: [{ name: \"_\", unit: \"%RH\", shift: 10, type: \"u22.10\", storage: 4 }], volatile: true, optional: true, identifierName: \"reading_error\", packFormat: \"u22.10\" }, { kind: \"const\", name: \"min_humidity\", identifier: 260, description: \"Lowest humidity that can be reported.\", fields: [{ name: \"_\", unit: \"%RH\", shift: 10, type: \"u22.10\", storage: 4 }], identifierName: \"min_reading\", packFormat: \"u22.10\" }, { kind: \"const\", name: \"max_humidity\", identifier: 261, description: \"Highest humidity that can be reported.\", fields: [{ name: \"_\", unit: \"%RH\", shift: 10, type: \"u22.10\", storage: 4 }], identifierName: \"max_reading\", packFormat: \"u22.10\" }], tags: [\"C\", \"8bit\"], group: \"Environment\" }, { name: \"Illuminance\", status: \"rc\", shortId: \"illuminance\", camelName: \"illuminance\", shortName: \"illuminance\", extends: [\"_base\", \"_sensor\"], notes: { short: \"Detects the amount of light falling onto a given surface area.\\n\\nNote that this is different from _luminance_, the amount of light that passes through, emits from, or reflects off an object.\" }, classIdentifier: 510577394, enums: {}, constants: {}, packets: [{ kind: \"report\", name: \"command_not_implemented\", identifier: 3, description: \"This report may be emitted by a server in response to a command (action or register operation)\\nthat it does not understand.\\nThe `service_command` and `packet_crc` fields are copied from the command packet that was unhandled.\\nNote that it's possible to get an ACK, followed by such an error report.\", fields: [{ name: \"service_command\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"packet_crc\", type: \"u16\", storage: 2, isSimpleType: true }], identifierName: \"command_not_implemented\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"const\", name: \"instance_name\", identifier: 265, description: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\", fields: [{ name: \"_\", type: \"string\", storage: 0 }], optional: true, identifierName: \"instance_name\", packFormat: \"s\", derived: \"_base\" }, { kind: \"ro\", name: \"status_code\", identifier: 259, description: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"event\", name: \"status_code_changed\", identifier: 4, description: \"Notifies that the status code of the service changed.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code_changed\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"rw\", name: \"streaming_samples\", identifier: 3, description: \"Asks device to stream a given number of samples\\n(clients will typically write `255` to this register every second or so, while streaming is required).\", fields: [{ name: \"_\", unit: \"#\", type: \"u8\", storage: 1, isSimpleType: true }], internal: true, identifierName: \"streaming_samples\", packFormat: \"u8\", derived: \"_sensor\" }, { kind: \"rw\", name: \"streaming_interval\", identifier: 4, description: \"Period between packets of data when streaming in milliseconds.\", fields: [{ name: \"_\", unit: \"ms\", type: \"u32\", storage: 4, isSimpleType: true, defaultValue: 100, typicalMin: 1, typicalMax: 6e4 }], identifierName: \"streaming_interval\", packFormat: \"u32\", derived: \"_sensor\" }, { kind: \"const\", name: \"streaming_preferred_interval\", identifier: 258, description: \"Preferred default streaming interval for sensor in milliseconds.\", fields: [{ name: \"_\", unit: \"ms\", type: \"u32\", storage: 4, isSimpleType: true }], internal: true, optional: true, identifierName: \"streaming_preferred_interval\", packFormat: \"u32\", derived: \"_sensor\" }, { kind: \"ro\", name: \"illuminance\", identifier: 257, description: \"The amount of illuminance, as lumens per square metre.\", fields: [{ name: \"_\", unit: \"lux\", shift: 10, type: \"u22.10\", storage: 4, typicalMax: 1e5, typicalMin: 0 }], volatile: true, identifierName: \"reading\", packFormat: \"u22.10\" }, { kind: \"ro\", name: \"illuminance_error\", identifier: 262, description: \"Error on the reported sensor value.\", fields: [{ name: \"_\", unit: \"lux\", shift: 10, type: \"u22.10\", storage: 4 }], volatile: true, optional: true, identifierName: \"reading_error\", packFormat: \"u22.10\" }], tags: [\"8bit\", \"padauk\"], group: \"Environment\" }, { name: \"Indexed screen\", status: \"rc\", shortId: \"indexedscreen\", camelName: \"indexedScreen\", shortName: \"indexedScreen\", extends: [\"_base\"], notes: { short: \"A screen with indexed colors.\\n\\nThis is often run over an SPI connection, not regular single-wire Jacdac.\" }, classIdentifier: 385496805, enums: {}, constants: {}, packets: [{ kind: \"report\", name: \"command_not_implemented\", identifier: 3, description: \"This report may be emitted by a server in response to a command (action or register operation)\\nthat it does not understand.\\nThe `service_command` and `packet_crc` fields are copied from the command packet that was unhandled.\\nNote that it's possible to get an ACK, followed by such an error report.\", fields: [{ name: \"service_command\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"packet_crc\", type: \"u16\", storage: 2, isSimpleType: true }], identifierName: \"command_not_implemented\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"const\", name: \"instance_name\", identifier: 265, description: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\", fields: [{ name: \"_\", type: \"string\", storage: 0 }], optional: true, identifierName: \"instance_name\", packFormat: \"s\", derived: \"_base\" }, { kind: \"ro\", name: \"status_code\", identifier: 259, description: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"event\", name: \"status_code_changed\", identifier: 4, description: \"Notifies that the status code of the service changed.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code_changed\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"command\", name: \"start_update\", identifier: 129, description: \"Sets the update window for subsequent `set_pixels` commands.\", fields: [{ name: \"x\", unit: \"px\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"y\", unit: \"px\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"width\", unit: \"px\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"height\", unit: \"px\", type: \"u16\", storage: 2, isSimpleType: true }], packFormat: \"u16 u16 u16 u16\" }, { kind: \"command\", name: \"set_pixels\", identifier: 131, description: 'Set pixels in current window, according to current palette.\\nEach \"line\" of data is aligned to a byte.', fields: [{ name: \"pixels\", type: \"bytes\", storage: 0, isSimpleType: true }], unique: true, packFormat: \"b\" }, { kind: \"rw\", name: \"brightness\", identifier: 1, description: \"Set backlight brightness.\\nIf set to `0` the display may go to sleep.\", fields: [{ name: \"_\", unit: \"/\", shift: 8, type: \"u0.8\", storage: 1 }], identifierName: \"intensity\", packFormat: \"u0.8\" }, { kind: \"rw\", name: \"palette\", identifier: 128, description: \"The current palette.\\nThe color entry repeats `1 << bits_per_pixel` times.\\nThis register may be write-only.\", fields: [{ name: \"blue\", type: \"u8\", storage: 1, isSimpleType: true, startRepeats: true }, { name: \"green\", type: \"u8\", storage: 1, isSimpleType: true }, { name: \"red\", type: \"u8\", storage: 1, isSimpleType: true }, { name: \"padding\", type: \"u8\", storage: 1, isSimpleType: true }], packFormat: \"r: u8 u8 u8 u8\" }, { kind: \"const\", name: \"bits_per_pixel\", identifier: 384, description: \"Determines the number of palette entries.\\nTypical values are 1, 2, 4, or 8.\", fields: [{ name: \"_\", unit: \"bit\", type: \"u8\", storage: 1, isSimpleType: true }], packFormat: \"u8\" }, { kind: \"const\", name: \"width\", identifier: 385, description: 'Screen width in \"natural\" orientation.', fields: [{ name: \"_\", unit: \"px\", type: \"u16\", storage: 2, isSimpleType: true }], packFormat: \"u16\" }, { kind: \"const\", name: \"height\", identifier: 386, description: 'Screen height in \"natural\" orientation.', fields: [{ name: \"_\", unit: \"px\", type: \"u16\", storage: 2, isSimpleType: true }], packFormat: \"u16\" }, { kind: \"rw\", name: \"width_major\", identifier: 129, description: 'If true, consecutive pixels in the \"width\" direction are sent next to each other (this is typical for graphics cards).\\nIf false, consecutive pixels in the \"height\" direction are sent next to each other.\\nFor embedded screen controllers, this is typically true iff `width < height`\\n(in other words, it\\'s only true for portrait orientation screens).\\nSome controllers may allow the user to change this (though the refresh order may not be optimal then).\\nThis is independent of the `rotation` register.', fields: [{ name: \"_\", type: \"bool\", storage: 1 }], packFormat: \"u8\" }, { kind: \"rw\", name: \"up_sampling\", identifier: 130, description: \"Every pixel sent over wire is represented by `up_sampling x up_sampling` square of physical pixels.\\nSome displays may allow changing this (which will also result in changes to `width` and `height`).\\nTypical values are 1 and 2.\", fields: [{ name: \"_\", unit: \"px\", type: \"u8\", storage: 1, isSimpleType: true }], packFormat: \"u8\" }, { kind: \"rw\", name: \"rotation\", identifier: 131, description: \"Possible values are 0, 90, 180 and 270 only.\\nWrite to this register do not affect `width` and `height` registers,\\nand may be ignored by some screens.\", fields: [{ name: \"_\", unit: \"\\xB0\", type: \"u16\", storage: 2, isSimpleType: true }], packFormat: \"u16\" }], tags: [\"SPI\"] }, { name: \"Infrastructure\", status: \"stable\", shortId: \"infrastructure\", camelName: \"infrastructure\", shortName: \"infrastructure\", extends: [\"_base\"], notes: { short: \"A service that tags a device as purely infrastructure device.\\n\\n\\nA Jacdac user interface can hide any device that hosts this service.\" }, classIdentifier: 504728043, enums: {}, constants: {}, packets: [{ kind: \"report\", name: \"command_not_implemented\", identifier: 3, description: \"This report may be emitted by a server in response to a command (action or register operation)\\nthat it does not understand.\\nThe `service_command` and `packet_crc` fields are copied from the command packet that was unhandled.\\nNote that it's possible to get an ACK, followed by such an error report.\", fields: [{ name: \"service_command\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"packet_crc\", type: \"u16\", storage: 2, isSimpleType: true }], identifierName: \"command_not_implemented\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"const\", name: \"instance_name\", identifier: 265, description: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\", fields: [{ name: \"_\", type: \"string\", storage: 0 }], optional: true, identifierName: \"instance_name\", packFormat: \"s\", derived: \"_base\" }, { kind: \"ro\", name: \"status_code\", identifier: 259, description: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"event\", name: \"status_code_changed\", identifier: 4, description: \"Notifies that the status code of the service changed.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code_changed\", packFormat: \"u16 u16\", derived: \"_base\" }], tags: [\"infrastructure\"] }, { name: \"Jacscript Cloud\", status: \"experimental\", shortId: \"jacscriptcloud\", camelName: \"jacscriptCloud\", shortName: \"jacscriptCloud\", extends: [\"_base\"], notes: { short: \"Supports cloud connections for Jacscript programs.\\nNote that `f64` values following a label are not necessarily aligned.\" }, classIdentifier: 341864092, enums: { CommandStatus: { name: \"CommandStatus\", storage: 4, members: { OK: 200, NotFound: 404, Busy: 429 } } }, constants: {}, packets: [{ kind: \"report\", name: \"command_not_implemented\", identifier: 3, description: \"This report may be emitted by a server in response to a command (action or register operation)\\nthat it does not understand.\\nThe `service_command` and `packet_crc` fields are copied from the command packet that was unhandled.\\nNote that it's possible to get an ACK, followed by such an error report.\", fields: [{ name: \"service_command\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"packet_crc\", type: \"u16\", storage: 2, isSimpleType: true }], identifierName: \"command_not_implemented\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"const\", name: \"instance_name\", identifier: 265, description: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\", fields: [{ name: \"_\", type: \"string\", storage: 0 }], optional: true, identifierName: \"instance_name\", packFormat: \"s\", derived: \"_base\" }, { kind: \"ro\", name: \"status_code\", identifier: 259, description: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"event\", name: \"status_code_changed\", identifier: 4, description: \"Notifies that the status code of the service changed.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code_changed\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"command\", name: \"upload\", identifier: 128, description: \"Upload a labelled tuple of values to the cloud.\\nThe tuple will be automatically tagged with timestamp and originating device.\", fields: [{ name: \"label\", type: \"string0\", storage: 0 }, { name: \"value\", isFloat: true, type: \"f64\", storage: 8, startRepeats: true }], packFormat: \"z r: f64\" }, { kind: \"command\", name: \"get_twin\", identifier: 129, description: \"Get a numeric field from the current device twin.\\nPath is dot-separated.\", fields: [{ name: \"path\", type: \"string\", storage: 0 }], hasReport: true, packFormat: \"s\" }, { kind: \"report\", name: \"get_twin\", identifier: 129, description: \"Get a numeric field from the current device twin.\\nPath is dot-separated.\", fields: [{ name: \"path\", type: \"string0\", storage: 0 }, { name: \"value\", isFloat: true, type: \"f64\", storage: 8 }], secondary: true, packFormat: \"z f64\" }, { kind: \"command\", name: \"ack_cloud_command\", identifier: 131, description: \"Should be called by jacscript when it finishes handling a `cloud_command`.\", fields: [{ name: \"seq_no\", type: \"u32\", storage: 4, isSimpleType: true }, { name: \"status\", type: \"CommandStatus\", storage: 4 }, { name: \"result\", isFloat: true, type: \"f64\", storage: 8, startRepeats: true }], packFormat: \"u32 u32 r: f64\" }, { kind: \"ro\", name: \"connected\", identifier: 384, description: \"Indicate whether we're currently connected to the cloud server.\\nWhen offline, `upload` commands are queued, and `get_twin` respond with cached values.\", fields: [{ name: \"_\", type: \"bool\", storage: 1 }], packFormat: \"u8\" }, { kind: \"event\", name: \"cloud_command\", identifier: 129, description: \"Emitted when cloud requests jacscript to run some action.\", fields: [{ name: \"seq_no\", type: \"u32\", storage: 4, isSimpleType: true }, { name: \"command\", type: \"string0\", storage: 0 }, { name: \"argument\", isFloat: true, type: \"f64\", storage: 8, startRepeats: true }], packFormat: \"u32 z r: f64\" }, { kind: \"event\", name: \"twin_change\", identifier: 3, description: \"Emitted whenever any of the twin properties change.\", fields: [], identifierName: \"change\" }], tags: [\"infrastructure\"], group: \"Iot\" }, { name: \"Jacscript Condition\", status: \"experimental\", shortId: \"jacscriptcondition\", camelName: \"jacscriptCondition\", shortName: \"jacscriptCondition\", extends: [\"_base\"], notes: { short: \"Conditions are synthetic services used to synchronize threads of executions of a Jacscript VM.\" }, classIdentifier: 295074157, enums: {}, constants: {}, packets: [{ kind: \"report\", name: \"command_not_implemented\", identifier: 3, description: \"This report may be emitted by a server in response to a command (action or register operation)\\nthat it does not understand.\\nThe `service_command` and `packet_crc` fields are copied from the command packet that was unhandled.\\nNote that it's possible to get an ACK, followed by such an error report.\", fields: [{ name: \"service_command\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"packet_crc\", type: \"u16\", storage: 2, isSimpleType: true }], identifierName: \"command_not_implemented\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"const\", name: \"instance_name\", identifier: 265, description: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\", fields: [{ name: \"_\", type: \"string\", storage: 0 }], optional: true, identifierName: \"instance_name\", packFormat: \"s\", derived: \"_base\" }, { kind: \"ro\", name: \"status_code\", identifier: 259, description: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"event\", name: \"status_code_changed\", identifier: 4, description: \"Notifies that the status code of the service changed.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code_changed\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"command\", name: \"signal\", identifier: 128, description: \"Triggers a `signalled` event.\", fields: [] }, { kind: \"event\", name: \"signalled\", identifier: 3, description: \"Triggered by `signal` command.\", fields: [], identifierName: \"change\" }], tags: [\"infrastructure\"] }, { name: \"Jacscript Manager\", status: \"experimental\", shortId: \"jacscriptmanager\", camelName: \"jacscriptManager\", shortName: \"jacscriptManager\", extends: [\"_base\"], notes: { short: \"Allows for deployment and control over Jacscript virtual machine.\\n\\nPrograms start automatically after device restart or uploading of new program.\\nYou can stop programs until next reset by setting the `running` register to `0`.\\n\\nTODO - debug interface:\\n* read-globals command/register\\n* globals-changed pipe\\n* breakpoint command\\n* some performance monitoring?\", events: \"When program is running, `status_code == Ready`.\\nWhen there is a valid program, but it is not running, `status_code == Sleeping`.\\nWhen there is no valid program, `status_code == WaitingForInput`.\" }, classIdentifier: 288680491, enums: { MessageFlags: { name: \"MessageFlags\", storage: 1, members: { ToBeContinued: 1 } } }, constants: {}, packets: [{ kind: \"report\", name: \"command_not_implemented\", identifier: 3, description: \"This report may be emitted by a server in response to a command (action or register operation)\\nthat it does not understand.\\nThe `service_command` and `packet_crc` fields are copied from the command packet that was unhandled.\\nNote that it's possible to get an ACK, followed by such an error report.\", fields: [{ name: \"service_command\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"packet_crc\", type: \"u16\", storage: 2, isSimpleType: true }], identifierName: \"command_not_implemented\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"const\", name: \"instance_name\", identifier: 265, description: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\", fields: [{ name: \"_\", type: \"string\", storage: 0 }], optional: true, identifierName: \"instance_name\", packFormat: \"s\", derived: \"_base\" }, { kind: \"ro\", name: \"status_code\", identifier: 259, description: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"event\", name: \"status_code_changed\", identifier: 4, description: \"Notifies that the status code of the service changed.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code_changed\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"command\", name: \"deploy_bytecode\", identifier: 128, description: \"Open pipe for streaming in the bytecode of the program. The size of the bytecode has to be declared upfront.\\nTo clear the program, use `bytecode_size == 0`.\\nThe bytecode is streamed over regular pipe data packets.\\nThe bytecode shall be fully written into flash upon closing the pipe.\\nIf `autostart` is true, the program will start after being deployed.\\nThe data payloads, including the last one, should have a size that is a multiple of 32 bytes.\\nThus, the initial bytecode_size also needs to be a multiple of 32.\", fields: [{ name: \"bytecode_size\", unit: \"B\", type: \"u32\", storage: 4, isSimpleType: true }], unique: true, hasReport: true, packFormat: \"u32\" }, { kind: \"report\", name: \"deploy_bytecode\", identifier: 128, description: \"Open pipe for streaming in the bytecode of the program. The size of the bytecode has to be declared upfront.\\nTo clear the program, use `bytecode_size == 0`.\\nThe bytecode is streamed over regular pipe data packets.\\nThe bytecode shall be fully written into flash upon closing the pipe.\\nIf `autostart` is true, the program will start after being deployed.\\nThe data payloads, including the last one, should have a size that is a multiple of 32 bytes.\\nThus, the initial bytecode_size also needs to be a multiple of 32.\", fields: [{ name: \"bytecode_port\", type: \"pipe_port\", storage: 2 }], secondary: true, pipeType: \"deploy_bytecode\", packFormat: \"u16\" }, { kind: \"command\", name: \"read_bytecode\", identifier: 129, description: \"Get the current bytecode deployed on device.\", fields: [{ name: \"bytecode\", type: \"pipe\", storage: 12 }], pipeType: \"read_bytecode\", packFormat: \"b[12]\" }, { kind: \"pipe_report\", name: \"bytecode\", identifier: 0, description: \"Get the current bytecode deployed on device.\", fields: [{ name: \"data\", type: \"bytes\", storage: 0, isSimpleType: true }], pipeType: \"read_bytecode\", packFormat: \"b\" }, { kind: \"report\", name: \"log_message\", identifier: 130, description: \"Generated by `console.log()` calls from Jacscript program.\\nThe counter starts at `0`, increments by `1` for each packet and wraps around.\\nIt can be used to detect if some messages are missing.\\nIf message is too long to fit in a single packet, it will be fragmented (this is not implemented yet).\\nIn a fragmented message, all packets except for the last one have `ToBeContinued` flag set.\\nNote that `counter` field will increase in each fragment.\\n`log_message` reports are only sent when `logging == true`.\", fields: [{ name: \"counter\", type: \"u8\", storage: 1, isSimpleType: true }, { name: \"flags\", type: \"MessageFlags\", storage: 1 }, { name: \"message\", type: \"string\", storage: 0 }], packFormat: \"u8 u8 s\" }, { kind: \"rw\", name: \"running\", identifier: 128, description: \"Indicates if the program is currently running.\\nTo restart the program, stop it (write `0`), read back the register to make sure it's stopped,\\nstart it, and read back.\", fields: [{ name: \"_\", type: \"bool\", storage: 1 }], packFormat: \"u8\" }, { kind: \"rw\", name: \"autostart\", identifier: 129, description: \"Indicates wheather the program should be re-started upon `reboot()` or `panic()`.\\nDefaults to `true`.\", fields: [{ name: \"_\", type: \"bool\", storage: 1 }], packFormat: \"u8\" }, { kind: \"rw\", name: \"logging\", identifier: 130, description: \"`log_message` reports are only sent when this is `true`.\\nIt defaults to `false`.\", fields: [{ name: \"_\", type: \"bool\", storage: 1 }], packFormat: \"u8\" }, { kind: \"ro\", name: \"program_size\", identifier: 384, description: \"The size of current program.\", fields: [{ name: \"_\", type: \"u32\", storage: 4, isSimpleType: true }], packFormat: \"u32\" }, { kind: \"ro\", name: \"program_hash\", identifier: 385, description: \"Return FNV1A hash of the current bytecode.\", fields: [{ name: \"_\", type: \"u32\", storage: 4, isSimpleType: true }], packFormat: \"u32\" }, { kind: \"event\", name: \"program_panic\", identifier: 128, description: \"Emitted when the program calls `panic(panic_code)` or `reboot()` (`panic_code == 0` in that case).\\nThe byte offset in byte code of the call is given in `program_counter`.\\nThe program will restart immediately when `panic_code == 0` or in a few seconds otherwise.\", fields: [{ name: \"panic_code\", type: \"u32\", storage: 4, isSimpleType: true }, { name: \"program_counter\", type: \"u32\", storage: 4, isSimpleType: true }], packFormat: \"u32 u32\" }, { kind: \"event\", name: \"program_change\", identifier: 3, description: \"Emitted after bytecode of the program has changed.\", fields: [], identifierName: \"change\" }], tags: [] }, { name: \"LED\", status: \"rc\", shortId: \"led\", camelName: \"led\", shortName: \"led\", extends: [\"_base\"], notes: { short: \"A controller for 1 or more monochrome or RGB LEDs connected in parallel.\" }, classIdentifier: 506480888, enums: { Variant: { name: \"Variant\", storage: 1, members: { ThroughHole: 1, SMD: 2, Power: 3, Bead: 4 } } }, constants: {}, packets: [{ kind: \"report\", name: \"command_not_implemented\", identifier: 3, description: \"This report may be emitted by a server in response to a command (action or register operation)\\nthat it does not understand.\\nThe `service_command` and `packet_crc` fields are copied from the command packet that was unhandled.\\nNote that it's possible to get an ACK, followed by such an error report.\", fields: [{ name: \"service_command\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"packet_crc\", type: \"u16\", storage: 2, isSimpleType: true }], identifierName: \"command_not_implemented\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"const\", name: \"instance_name\", identifier: 265, description: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\", fields: [{ name: \"_\", type: \"string\", storage: 0 }], optional: true, identifierName: \"instance_name\", packFormat: \"s\", derived: \"_base\" }, { kind: \"ro\", name: \"status_code\", identifier: 259, description: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"event\", name: \"status_code_changed\", identifier: 4, description: \"Notifies that the status code of the service changed.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code_changed\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"command\", name: \"animate\", identifier: 128, description: \"This has the same semantics as `set_status_light` in the control service.\", fields: [{ name: \"to_red\", type: \"u8\", storage: 1, isSimpleType: true }, { name: \"to_green\", type: \"u8\", storage: 1, isSimpleType: true }, { name: \"to_blue\", type: \"u8\", storage: 1, isSimpleType: true }, { name: \"speed\", type: \"u8\", storage: 1, isSimpleType: true }], packFormat: \"u8 u8 u8 u8\" }, { kind: \"ro\", name: \"color\", identifier: 384, description: \"The current color of the LED.\", fields: [{ name: \"red\", type: \"u8\", storage: 1, isSimpleType: true }, { name: \"green\", type: \"u8\", storage: 1, isSimpleType: true }, { name: \"blue\", type: \"u8\", storage: 1, isSimpleType: true }], packFormat: \"u8 u8 u8\" }, { kind: \"rw\", name: \"max_power\", identifier: 7, description: \"Limit the power drawn by the light-strip (and controller).\", fields: [{ name: \"_\", unit: \"mA\", type: \"u16\", storage: 2, isSimpleType: true, defaultValue: 100 }], optional: true, identifierName: \"max_power\", packFormat: \"u16\" }, { kind: \"const\", name: \"led_count\", identifier: 387, description: \"If known, specifies the number of LEDs in parallel on this device.\", fields: [{ name: \"_\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, packFormat: \"u16\" }, { kind: \"const\", name: \"wave_length\", identifier: 385, description: \"If monochrome LED, specifies the wave length of the LED.\", fields: [{ name: \"_\", unit: \"nm\", type: \"u16\", storage: 2, isSimpleType: true, typicalMin: 365, typicalMax: 885 }], optional: true, packFormat: \"u16\" }, { kind: \"const\", name: \"luminous_intensity\", identifier: 386, description: \"The luminous intensity of the LED, at full value, in micro candella.\", fields: [{ name: \"_\", unit: \"mcd\", type: \"u16\", storage: 2, isSimpleType: true, typicalMin: 10, typicalMax: 5e3 }], optional: true, packFormat: \"u16\" }, { kind: \"const\", name: \"variant\", identifier: 263, description: \"The physical type of LED.\", fields: [{ name: \"_\", type: \"Variant\", storage: 1 }], optional: true, identifierName: \"variant\", packFormat: \"u8\" }], tags: [\"8bit\", \"padauk\"], group: \"Light\" }, { name: \"LED Display\", status: \"rc\", shortId: \"leddisplay\", camelName: \"ledDisplay\", shortName: \"ledDisplay\", extends: [\"_base\"], notes: { short: \"A controller for small displays of individually controlled RGB LEDs.\\n\\nThis service handles displays with 64 or less LEDs.\\nUse the [LED strip service](/services/ledstrip) for longer light strips.\" }, classIdentifier: 369743088, enums: { LightType: { name: \"LightType\", storage: 1, members: { WS2812B_GRB: 0, APA102: 16, SK9822: 17 } }, Variant: { name: \"Variant\", storage: 1, members: { Strip: 1, Ring: 2, Stick: 3, Jewel: 4, Matrix: 5 } } }, constants: { max_pixels_length: { value: 64, hex: false } }, packets: [{ kind: \"report\", name: \"command_not_implemented\", identifier: 3, description: \"This report may be emitted by a server in response to a command (action or register operation)\\nthat it does not understand.\\nThe `service_command` and `packet_crc` fields are copied from the command packet that was unhandled.\\nNote that it's possible to get an ACK, followed by such an error report.\", fields: [{ name: \"service_command\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"packet_crc\", type: \"u16\", storage: 2, isSimpleType: true }], identifierName: \"command_not_implemented\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"const\", name: \"instance_name\", identifier: 265, description: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\", fields: [{ name: \"_\", type: \"string\", storage: 0 }], optional: true, identifierName: \"instance_name\", packFormat: \"s\", derived: \"_base\" }, { kind: \"ro\", name: \"status_code\", identifier: 259, description: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"event\", name: \"status_code_changed\", identifier: 4, description: \"Notifies that the status code of the service changed.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code_changed\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"rw\", name: \"pixels\", identifier: 2, description: \"A buffer of 24bit RGB color entries for each LED, in R, G, B order.\", fields: [{ name: \"_\", type: \"bytes\", storage: 0, isSimpleType: true }], identifierName: \"value\", packFormat: \"b\" }, { kind: \"rw\", name: \"brightness\", identifier: 1, description: \"Set the luminosity of the strip.\\nAt `0` the power to the strip is completely shut down.\", fields: [{ name: \"_\", unit: \"/\", shift: 8, type: \"u0.8\", storage: 1, defaultValue: 0.05 }], identifierName: \"intensity\", packFormat: \"u0.8\" }, { kind: \"ro\", name: \"actual_brightness\", identifier: 384, description: \"This is the luminosity actually applied to the strip.\\nMay be lower than `brightness` if power-limited by the `max_power` register.\\nIt will rise slowly (few seconds) back to `brightness` is limits are no longer required.\", fields: [{ name: \"_\", unit: \"/\", shift: 8, type: \"u0.8\", storage: 1 }], packFormat: \"u0.8\" }, { kind: \"const\", name: \"light_type\", identifier: 385, description: \"Specifies the type of light strip connected to controller.\", fields: [{ name: \"_\", type: \"LightType\", storage: 1 }], packFormat: \"u8\" }, { kind: \"const\", name: \"num_pixels\", identifier: 386, description: \"Specifies the number of pixels in the strip.\", fields: [{ name: \"_\", unit: \"#\", type: \"u16\", storage: 2, isSimpleType: true }], packFormat: \"u16\" }, { kind: \"const\", name: \"num_columns\", identifier: 387, description: \"If the LED pixel strip is a matrix, specifies the number of columns.\", fields: [{ name: \"_\", unit: \"#\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, packFormat: \"u16\" }, { kind: \"rw\", name: \"max_power\", identifier: 7, description: \"Limit the power drawn by the light-strip (and controller).\", fields: [{ name: \"_\", unit: \"mA\", type: \"u16\", storage: 2, isSimpleType: true, defaultValue: 200 }], identifierName: \"max_power\", packFormat: \"u16\" }, { kind: \"const\", name: \"variant\", identifier: 263, description: \"Specifies the shape of the light strip.\", fields: [{ name: \"_\", type: \"Variant\", storage: 1 }], optional: true, identifierName: \"variant\", packFormat: \"u8\" }], tags: [], group: \"Light\" }, { name: \"LED Strip\", status: \"rc\", shortId: \"ledstrip\", camelName: \"ledStrip\", shortName: \"ledStrip\", extends: [\"_base\"], notes: { short: \"A controller for strips of individually controlled RGB LEDs.\", long: \"## Light programs\\n\\nWith 1 mbit Jacdac, we can transmit under 2k of data per animation frame (at 20fps).\\nIf transmitting raw data that would be around 500 pixels, which is not enough for many\\ninstallations and it would completely clog the network.\\n\\nThus, light service defines a domain-specific language for describing light animations\\nand efficiently transmitting them over wire. For short LED displays, less than 64 LEDs, \\nyou can also use the [LED display service](/services/leddisplay).\\n\\nLight commands are not Jacdac commands.\\nLight commands are efficiently encoded as sequences of bytes and typically sent as payload\\nof `run` command.\\n\\nDefinitions:\\n\\n-   `P` - position in the strip\\n-   `R` - number of repetitions of the command\\n-   `N` - number of pixels affected by the command\\n-   `C` - single color designation\\n-   `C+` - sequence of color designations\\n\\nUpdate modes:\\n\\n-   `0` - replace\\n-   `1` - add RGB\\n-   `2` - subtract RGB\\n-   `3` - multiply RGB (by c/128); each pixel value will change by at least 1\\n\\nProgram commands:\\n\\n-   `0xD0: setall C+` - set all pixels in current range to given color pattern\\n-   `0xD1: fade C+` - set pixels in current range to colors between colors in sequence\\n-   `0xD2: fadehsv C+` - similar to `fade()`, but colors are specified and faded in HSV\\n-   `0xD3: rotfwd K` - rotate (shift) pixels by `K` positions away from the connector\\n-   `0xD4: rotback K` - same, but towards the connector\\n-   `0xD5: show M=50` - send buffer to strip and wait `M` milliseconds\\n-   `0xD6: range P=0 N=length W=1 S=0` - range from pixel `P`, `N` pixels long (currently unsupported: every `W` pixels skip `S` pixels)\\n-   `0xD7: mode K=0` - set update mode\\n-   `0xD8: tmpmode K=0` - set update mode for next command only\\n-   `0xCF: setone P C` - set one pixel at `P` (in current range) to given color\\n-   `mult V` - macro to multiply current range by given value (float)\\n\\nA number `k` is encoded as follows:\\n\\n-   `0 <= k < 128` -> `k`\\n-   `128 <= k < 16383` -> `0x80 | (k >> 8), k & 0xff`\\n-   bigger and negative numbers are not supported\\n\\nThus, bytes `0xC0-0xFF` are free to use for commands.\\n\\nFormats:\\n\\n-   `0xC1, R, G, B` - single color parameter\\n-   `0xC2, R0, G0, B0, R1, G1, B1` - two color parameter\\n-   `0xC3, R0, G0, B0, R1, G1, B1, R2, G2, B2` - three color parameter\\n-   `0xC0, N, R0, G0, B0, ..., R(N-1), G(N-1), B(N-1)` - `N` color parameter\\n-   `0xCF, <number>, R, G, B` - `set1` special format\\n\\nCommands are encoded as command byte, followed by parameters in the order\\nfrom the command definition.\\n\\nThe `setone()` command has irregular encoding to save space - it is byte `0xCF` followed by encoded\\nnumber, and followed by 3 bytes of color.\" }, classIdentifier: 309264608, enums: { LightType: { name: \"LightType\", storage: 1, members: { WS2812B_GRB: 0, APA102: 16, SK9822: 17 } }, Variant: { name: \"Variant\", storage: 1, members: { Strip: 1, Ring: 2, Stick: 3, Jewel: 4, Matrix: 5 } } }, constants: {}, packets: [{ kind: \"report\", name: \"command_not_implemented\", identifier: 3, description: \"This report may be emitted by a server in response to a command (action or register operation)\\nthat it does not understand.\\nThe `service_command` and `packet_crc` fields are copied from the command packet that was unhandled.\\nNote that it's possible to get an ACK, followed by such an error report.\", fields: [{ name: \"service_command\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"packet_crc\", type: \"u16\", storage: 2, isSimpleType: true }], identifierName: \"command_not_implemented\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"const\", name: \"instance_name\", identifier: 265, description: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\", fields: [{ name: \"_\", type: \"string\", storage: 0 }], optional: true, identifierName: \"instance_name\", packFormat: \"s\", derived: \"_base\" }, { kind: \"ro\", name: \"status_code\", identifier: 259, description: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"event\", name: \"status_code_changed\", identifier: 4, description: \"Notifies that the status code of the service changed.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code_changed\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"rw\", name: \"brightness\", identifier: 1, description: \"Set the luminosity of the strip.\\nAt `0` the power to the strip is completely shut down.\", fields: [{ name: \"_\", unit: \"/\", shift: 8, type: \"u0.8\", storage: 1, defaultValue: 0.05 }], identifierName: \"intensity\", packFormat: \"u0.8\" }, { kind: \"ro\", name: \"actual_brightness\", identifier: 384, description: \"This is the luminosity actually applied to the strip.\\nMay be lower than `brightness` if power-limited by the `max_power` register.\\nIt will rise slowly (few seconds) back to `brightness` is limits are no longer required.\", fields: [{ name: \"_\", unit: \"/\", shift: 8, type: \"u0.8\", storage: 1 }], packFormat: \"u0.8\" }, { kind: \"rw\", name: \"light_type\", identifier: 128, description: \"Specifies the type of light strip connected to controller.\\nControllers which are sold with lights should default to the correct type\\nand could not allow change.\", fields: [{ name: \"_\", type: \"LightType\", storage: 1 }], packFormat: \"u8\" }, { kind: \"rw\", name: \"num_pixels\", identifier: 129, description: \"Specifies the number of pixels in the strip.\\nControllers which are sold with lights should default to the correct length\\nand could not allow change. Increasing length at runtime leads to ineffective use of memory and may lead to controller reboot.\", fields: [{ name: \"_\", unit: \"#\", type: \"u16\", storage: 2, isSimpleType: true, defaultValue: 15 }], packFormat: \"u16\" }, { kind: \"rw\", name: \"num_columns\", identifier: 131, description: \"If the LED pixel strip is a matrix, specifies the number of columns. Otherwise, a square shape is assumed. Controllers which are sold with lights should default to the correct length\\nand could not allow change. Increasing length at runtime leads to ineffective use of memory and may lead to controller reboot.\", fields: [{ name: \"_\", unit: \"#\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, packFormat: \"u16\" }, { kind: \"rw\", name: \"max_power\", identifier: 7, description: \"Limit the power drawn by the light-strip (and controller).\", fields: [{ name: \"_\", unit: \"mA\", type: \"u16\", storage: 2, isSimpleType: true, defaultValue: 200 }], identifierName: \"max_power\", packFormat: \"u16\" }, { kind: \"const\", name: \"max_pixels\", identifier: 385, description: \"The maximum supported number of pixels.\\nAll writes to `num_pixels` are clamped to `max_pixels`.\", fields: [{ name: \"_\", unit: \"#\", type: \"u16\", storage: 2, isSimpleType: true }], packFormat: \"u16\" }, { kind: \"rw\", name: \"num_repeats\", identifier: 130, description: \"How many times to repeat the program passed in `run` command.\\nShould be set before the `run` command.\\nSetting to `0` means to repeat forever.\", fields: [{ name: \"_\", unit: \"#\", type: \"u16\", storage: 2, isSimpleType: true, defaultValue: 1 }], packFormat: \"u16\" }, { kind: \"const\", name: \"variant\", identifier: 263, description: \"Specifies the shape of the light strip.\", fields: [{ name: \"_\", type: \"Variant\", storage: 1 }], optional: true, identifierName: \"variant\", packFormat: \"u8\" }, { kind: \"command\", name: \"run\", identifier: 129, description: 'Run the given light \"program\". See service description for details.', fields: [{ name: \"program\", type: \"bytes\", storage: 0, isSimpleType: true }], unique: true, packFormat: \"b\" }], tags: [\"C\"], group: \"Light\" }, { name: \"Light bulb\", status: \"rc\", shortId: \"lightbulb\", camelName: \"lightBulb\", shortName: \"lightBulb\", extends: [\"_base\"], notes: { short: \"A light bulb controller.\" }, classIdentifier: 480970060, enums: {}, constants: {}, packets: [{ kind: \"report\", name: \"command_not_implemented\", identifier: 3, description: \"This report may be emitted by a server in response to a command (action or register operation)\\nthat it does not understand.\\nThe `service_command` and `packet_crc` fields are copied from the command packet that was unhandled.\\nNote that it's possible to get an ACK, followed by such an error report.\", fields: [{ name: \"service_command\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"packet_crc\", type: \"u16\", storage: 2, isSimpleType: true }], identifierName: \"command_not_implemented\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"const\", name: \"instance_name\", identifier: 265, description: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\", fields: [{ name: \"_\", type: \"string\", storage: 0 }], optional: true, identifierName: \"instance_name\", packFormat: \"s\", derived: \"_base\" }, { kind: \"ro\", name: \"status_code\", identifier: 259, description: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"event\", name: \"status_code_changed\", identifier: 4, description: \"Notifies that the status code of the service changed.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code_changed\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"rw\", name: \"brightness\", identifier: 1, description: \"Indicates the brightness of the light bulb. Zero means completely off and 0xffff means completely on.\\nFor non-dimmable lights, the value should be clamp to 0xffff for any non-zero value.\", fields: [{ name: \"_\", unit: \"/\", shift: 16, type: \"u0.16\", storage: 2 }], identifierName: \"intensity\", packFormat: \"u0.16\" }, { kind: \"const\", name: \"dimmable\", identifier: 384, description: \"Indicates if the light supports dimming.\", fields: [{ name: \"_\", type: \"bool\", storage: 1 }], optional: true, packFormat: \"u8\" }], tags: [], group: \"Light\" }, { name: \"Light level\", status: \"rc\", shortId: \"lightlevel\", camelName: \"lightLevel\", shortName: \"lightLevel\", extends: [\"_base\", \"_sensor\"], notes: { short: \"A sensor that measures luminosity level.\" }, classIdentifier: 400333340, enums: { Variant: { name: \"Variant\", storage: 1, members: { PhotoResistor: 1, ReverseBiasedLED: 2 } } }, constants: {}, packets: [{ kind: \"report\", name: \"command_not_implemented\", identifier: 3, description: \"This report may be emitted by a server in response to a command (action or register operation)\\nthat it does not understand.\\nThe `service_command` and `packet_crc` fields are copied from the command packet that was unhandled.\\nNote that it's possible to get an ACK, followed by such an error report.\", fields: [{ name: \"service_command\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"packet_crc\", type: \"u16\", storage: 2, isSimpleType: true }], identifierName: \"command_not_implemented\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"const\", name: \"instance_name\", identifier: 265, description: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\", fields: [{ name: \"_\", type: \"string\", storage: 0 }], optional: true, identifierName: \"instance_name\", packFormat: \"s\", derived: \"_base\" }, { kind: \"ro\", name: \"status_code\", identifier: 259, description: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"event\", name: \"status_code_changed\", identifier: 4, description: \"Notifies that the status code of the service changed.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code_changed\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"rw\", name: \"streaming_samples\", identifier: 3, description: \"Asks device to stream a given number of samples\\n(clients will typically write `255` to this register every second or so, while streaming is required).\", fields: [{ name: \"_\", unit: \"#\", type: \"u8\", storage: 1, isSimpleType: true }], internal: true, identifierName: \"streaming_samples\", packFormat: \"u8\", derived: \"_sensor\" }, { kind: \"rw\", name: \"streaming_interval\", identifier: 4, description: \"Period between packets of data when streaming in milliseconds.\", fields: [{ name: \"_\", unit: \"ms\", type: \"u32\", storage: 4, isSimpleType: true, defaultValue: 100, typicalMin: 1, typicalMax: 6e4 }], identifierName: \"streaming_interval\", packFormat: \"u32\", derived: \"_sensor\" }, { kind: \"const\", name: \"streaming_preferred_interval\", identifier: 258, description: \"Preferred default streaming interval for sensor in milliseconds.\", fields: [{ name: \"_\", unit: \"ms\", type: \"u32\", storage: 4, isSimpleType: true }], internal: true, optional: true, identifierName: \"streaming_preferred_interval\", packFormat: \"u32\", derived: \"_sensor\" }, { kind: \"ro\", name: \"light_level\", identifier: 257, description: \"Detect light level\", fields: [{ name: \"_\", unit: \"/\", shift: 16, type: \"u0.16\", storage: 2 }], volatile: true, identifierName: \"reading\", packFormat: \"u0.16\" }, { kind: \"ro\", name: \"light_level_error\", identifier: 262, description: \"Absolute estimated error of the reading value\", fields: [{ name: \"_\", unit: \"/\", shift: 16, type: \"u0.16\", storage: 2 }], volatile: true, optional: true, identifierName: \"reading_error\", packFormat: \"u0.16\" }, { kind: \"const\", name: \"variant\", identifier: 263, description: \"The type of physical sensor.\", fields: [{ name: \"_\", type: \"Variant\", storage: 1 }], optional: true, identifierName: \"variant\", packFormat: \"u8\" }], tags: [\"8bit\", \"padauk\"], group: \"Environment\" }, { name: \"Logger\", status: \"stable\", shortId: \"logger\", camelName: \"logger\", shortName: \"logger\", extends: [\"_base\"], notes: { short: \"A service which can report messages to the bus.\" }, classIdentifier: 316415946, enums: { Priority: { name: \"Priority\", storage: 1, members: { Debug: 0, Log: 1, Warning: 2, Error: 3, Silent: 4 } } }, constants: {}, packets: [{ kind: \"report\", name: \"command_not_implemented\", identifier: 3, description: \"This report may be emitted by a server in response to a command (action or register operation)\\nthat it does not understand.\\nThe `service_command` and `packet_crc` fields are copied from the command packet that was unhandled.\\nNote that it's possible to get an ACK, followed by such an error report.\", fields: [{ name: \"service_command\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"packet_crc\", type: \"u16\", storage: 2, isSimpleType: true }], identifierName: \"command_not_implemented\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"const\", name: \"instance_name\", identifier: 265, description: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\", fields: [{ name: \"_\", type: \"string\", storage: 0 }], optional: true, identifierName: \"instance_name\", packFormat: \"s\", derived: \"_base\" }, { kind: \"ro\", name: \"status_code\", identifier: 259, description: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"event\", name: \"status_code_changed\", identifier: 4, description: \"Notifies that the status code of the service changed.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code_changed\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"rw\", name: \"min_priority\", identifier: 128, description: \"Messages with level lower than this won't be emitted. The default setting may vary.\\nLoggers should revert this to their default setting if the register has not been\\nupdated in 3000ms, and also keep the lowest setting they have seen in the last 1500ms.\\nThus, clients should write this register every 1000ms and ignore messages which are\\ntoo verbose for them.\", fields: [{ name: \"_\", type: \"Priority\", storage: 1, defaultValue: 1 }], packFormat: \"u8\" }, { kind: \"report\", name: \"debug\", identifier: 128, description: \"Report a message.\", fields: [{ name: \"message\", type: \"string\", storage: 0 }], packFormat: \"s\" }, { kind: \"report\", name: \"log\", identifier: 129, description: \"Report a message.\", fields: [{ name: \"message\", type: \"string\", storage: 0 }], packFormat: \"s\" }, { kind: \"report\", name: \"warn\", identifier: 130, description: \"Report a message.\", fields: [{ name: \"message\", type: \"string\", storage: 0 }], packFormat: \"s\" }, { kind: \"report\", name: \"error\", identifier: 131, description: \"Report a message.\", fields: [{ name: \"message\", type: \"string\", storage: 0 }], packFormat: \"s\" }], tags: [\"infrastructure\", \"C\"] }, { name: \"Magnetometer\", status: \"rc\", shortId: \"magnetomer\", camelName: \"magnetometer\", shortName: \"magnetometer\", extends: [\"_base\", \"_sensor\"], notes: { short: \"A 3-axis magnetometer.\" }, classIdentifier: 318935176, enums: {}, constants: {}, packets: [{ kind: \"report\", name: \"command_not_implemented\", identifier: 3, description: \"This report may be emitted by a server in response to a command (action or register operation)\\nthat it does not understand.\\nThe `service_command` and `packet_crc` fields are copied from the command packet that was unhandled.\\nNote that it's possible to get an ACK, followed by such an error report.\", fields: [{ name: \"service_command\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"packet_crc\", type: \"u16\", storage: 2, isSimpleType: true }], identifierName: \"command_not_implemented\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"const\", name: \"instance_name\", identifier: 265, description: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\", fields: [{ name: \"_\", type: \"string\", storage: 0 }], optional: true, identifierName: \"instance_name\", packFormat: \"s\", derived: \"_base\" }, { kind: \"ro\", name: \"status_code\", identifier: 259, description: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"event\", name: \"status_code_changed\", identifier: 4, description: \"Notifies that the status code of the service changed.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code_changed\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"rw\", name: \"streaming_samples\", identifier: 3, description: \"Asks device to stream a given number of samples\\n(clients will typically write `255` to this register every second or so, while streaming is required).\", fields: [{ name: \"_\", unit: \"#\", type: \"u8\", storage: 1, isSimpleType: true }], internal: true, identifierName: \"streaming_samples\", packFormat: \"u8\", derived: \"_sensor\" }, { kind: \"rw\", name: \"streaming_interval\", identifier: 4, description: \"Period between packets of data when streaming in milliseconds.\", fields: [{ name: \"_\", unit: \"ms\", type: \"u32\", storage: 4, isSimpleType: true, defaultValue: 100, typicalMin: 1, typicalMax: 6e4 }], identifierName: \"streaming_interval\", packFormat: \"u32\", derived: \"_sensor\" }, { kind: \"const\", name: \"streaming_preferred_interval\", identifier: 258, description: \"Preferred default streaming interval for sensor in milliseconds.\", fields: [{ name: \"_\", unit: \"ms\", type: \"u32\", storage: 4, isSimpleType: true }], internal: true, optional: true, identifierName: \"streaming_preferred_interval\", packFormat: \"u32\", derived: \"_sensor\" }, { kind: \"ro\", name: \"forces\", identifier: 257, description: \"Indicates the current magnetic field on magnetometer.\\nFor reference: `1 mgauss` is `100 nT` (and `1 gauss` is `100 000 nT`).\", fields: [{ name: \"x\", unit: \"nT\", type: \"i32\", storage: -4, isSimpleType: true }, { name: \"y\", unit: \"nT\", type: \"i32\", storage: -4, isSimpleType: true }, { name: \"z\", unit: \"nT\", type: \"i32\", storage: -4, isSimpleType: true }], volatile: true, identifierName: \"reading\", packFormat: \"i32 i32 i32\" }, { kind: \"ro\", name: \"forces_error\", identifier: 262, description: \"Absolute estimated error on the readings.\", fields: [{ name: \"_\", unit: \"nT\", type: \"i32\", storage: -4, isSimpleType: true }], volatile: true, optional: true, identifierName: \"reading_error\", packFormat: \"i32\" }, { kind: \"command\", name: \"calibrate\", identifier: 2, description: \"Forces a calibration sequence where the user/device\\nmight have to rotate to be calibrated.\", fields: [], identifierName: \"calibrate\" }], tags: [] }, { name: \"Matrix Keypad\", status: \"experimental\", shortId: \"matrixkeypad\", camelName: \"matrixKeypad\", shortName: \"matrixKeypad\", extends: [\"_base\", \"_sensor\"], notes: { short: \"A matrix of buttons connected as a keypad\" }, classIdentifier: 319172040, enums: { Variant: { name: \"Variant\", storage: 1, members: { Membrane: 1, Keyboard: 2, Elastomer: 3, ElastomerLEDPixel: 4 } } }, constants: {}, packets: [{ kind: \"report\", name: \"command_not_implemented\", identifier: 3, description: \"This report may be emitted by a server in response to a command (action or register operation)\\nthat it does not understand.\\nThe `service_command` and `packet_crc` fields are copied from the command packet that was unhandled.\\nNote that it's possible to get an ACK, followed by such an error report.\", fields: [{ name: \"service_command\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"packet_crc\", type: \"u16\", storage: 2, isSimpleType: true }], identifierName: \"command_not_implemented\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"const\", name: \"instance_name\", identifier: 265, description: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\", fields: [{ name: \"_\", type: \"string\", storage: 0 }], optional: true, identifierName: \"instance_name\", packFormat: \"s\", derived: \"_base\" }, { kind: \"ro\", name: \"status_code\", identifier: 259, description: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"event\", name: \"status_code_changed\", identifier: 4, description: \"Notifies that the status code of the service changed.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code_changed\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"rw\", name: \"streaming_samples\", identifier: 3, description: \"Asks device to stream a given number of samples\\n(clients will typically write `255` to this register every second or so, while streaming is required).\", fields: [{ name: \"_\", unit: \"#\", type: \"u8\", storage: 1, isSimpleType: true }], internal: true, identifierName: \"streaming_samples\", packFormat: \"u8\", derived: \"_sensor\" }, { kind: \"rw\", name: \"streaming_interval\", identifier: 4, description: \"Period between packets of data when streaming in milliseconds.\", fields: [{ name: \"_\", unit: \"ms\", type: \"u32\", storage: 4, isSimpleType: true, defaultValue: 100, typicalMin: 1, typicalMax: 6e4 }], identifierName: \"streaming_interval\", packFormat: \"u32\", derived: \"_sensor\" }, { kind: \"const\", name: \"streaming_preferred_interval\", identifier: 258, description: \"Preferred default streaming interval for sensor in milliseconds.\", fields: [{ name: \"_\", unit: \"ms\", type: \"u32\", storage: 4, isSimpleType: true }], internal: true, optional: true, identifierName: \"streaming_preferred_interval\", packFormat: \"u32\", derived: \"_sensor\" }, { kind: \"ro\", name: \"pressed\", identifier: 257, description: \"The coordinate of the button currently pressed. Keys are zero-indexed from left to right, top to bottom:\\n``row = index / columns``, ``column = index % columns``.\", fields: [{ name: \"index\", type: \"u8\", storage: 1, isSimpleType: true, startRepeats: true }], volatile: true, identifierName: \"reading\", packFormat: \"r: u8\" }, { kind: \"const\", name: \"rows\", identifier: 384, description: \"Number of rows in the matrix\", fields: [{ name: \"_\", unit: \"#\", type: \"u8\", storage: 1, isSimpleType: true }], packFormat: \"u8\" }, { kind: \"const\", name: \"columns\", identifier: 385, description: \"Number of columns in the matrix\", fields: [{ name: \"_\", unit: \"#\", type: \"u8\", storage: 1, isSimpleType: true }], packFormat: \"u8\" }, { kind: \"const\", name: \"labels\", identifier: 386, description: \"The characters printed on the keys if any, in indexing sequence.\", fields: [{ name: \"label\", type: \"string0\", storage: 0, startRepeats: true }], optional: true, packFormat: \"r: z\" }, { kind: \"const\", name: \"variant\", identifier: 263, description: \"The type of physical keypad. If the variant is ``ElastomerLEDPixel``\\nand the next service on the device is a ``LEDPixel`` service, it is considered\\nas the service controlling the LED pixel on the keypad.\", fields: [{ name: \"_\", type: \"Variant\", storage: 1 }], optional: true, identifierName: \"variant\", packFormat: \"u8\" }, { kind: \"event\", name: \"down\", identifier: 1, description: \"Emitted when a key, at the given index, goes from inactive (`pressed == 0`) to active.\", fields: [{ name: \"_\", type: \"u8\", storage: 1, isSimpleType: true }], identifierName: \"active\", packFormat: \"u8\" }, { kind: \"event\", name: \"up\", identifier: 2, description: \"Emitted when a key, at the given index, goes from active (`pressed == 1`) to inactive.\", fields: [{ name: \"_\", type: \"u8\", storage: 1, isSimpleType: true }], identifierName: \"inactive\", packFormat: \"u8\" }, { kind: \"event\", name: \"click\", identifier: 128, description: \"Emitted together with `up` when the press time was not longer than 500ms.\", fields: [{ name: \"_\", type: \"u8\", storage: 1, isSimpleType: true }], packFormat: \"u8\" }, { kind: \"event\", name: \"long_click\", identifier: 129, description: \"Emitted together with `up` when the press time was more than 500ms.\", fields: [{ name: \"_\", type: \"u8\", storage: 1, isSimpleType: true }], packFormat: \"u8\" }], tags: [], group: \"Button\" }, { name: \"Microphone\", status: \"experimental\", shortId: \"microphone\", camelName: \"microphone\", shortName: \"microphone\", extends: [\"_base\"], notes: { short: \"A single-channel microphone.\" }, classIdentifier: 289254534, enums: {}, constants: {}, packets: [{ kind: \"report\", name: \"command_not_implemented\", identifier: 3, description: \"This report may be emitted by a server in response to a command (action or register operation)\\nthat it does not understand.\\nThe `service_command` and `packet_crc` fields are copied from the command packet that was unhandled.\\nNote that it's possible to get an ACK, followed by such an error report.\", fields: [{ name: \"service_command\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"packet_crc\", type: \"u16\", storage: 2, isSimpleType: true }], identifierName: \"command_not_implemented\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"const\", name: \"instance_name\", identifier: 265, description: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\", fields: [{ name: \"_\", type: \"string\", storage: 0 }], optional: true, identifierName: \"instance_name\", packFormat: \"s\", derived: \"_base\" }, { kind: \"ro\", name: \"status_code\", identifier: 259, description: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"event\", name: \"status_code_changed\", identifier: 4, description: \"Notifies that the status code of the service changed.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code_changed\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"command\", name: \"sample\", identifier: 129, description: \"The samples will be streamed back over the `samples` pipe.\\nIf `num_samples` is `0`, streaming will only stop when the pipe is closed.\\nOtherwise the specified number of samples is streamed.\\nSamples are sent as `i16`.\", fields: [{ name: \"samples\", type: \"pipe\", storage: 12 }, { name: \"num_samples\", type: \"u32\", storage: 4, isSimpleType: true }], pipeType: \"sample\", packFormat: \"b[12] u32\" }, { kind: \"rw\", name: \"sampling_period\", identifier: 128, description: \"Get or set microphone sampling period.\\nSampling rate is `1_000_000 / sampling_period Hz`.\", fields: [{ name: \"_\", unit: \"us\", type: \"u32\", storage: 4, isSimpleType: true }], packFormat: \"u32\" }], tags: [], group: \"Sound\" }, { name: \"MIDI output\", status: \"experimental\", shortId: \"midioutput\", camelName: \"midiOutput\", shortName: \"midiOutput\", extends: [\"_base\"], notes: { short: \"A MIDI output device.\" }, classIdentifier: 444894423, enums: {}, constants: {}, packets: [{ kind: \"report\", name: \"command_not_implemented\", identifier: 3, description: \"This report may be emitted by a server in response to a command (action or register operation)\\nthat it does not understand.\\nThe `service_command` and `packet_crc` fields are copied from the command packet that was unhandled.\\nNote that it's possible to get an ACK, followed by such an error report.\", fields: [{ name: \"service_command\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"packet_crc\", type: \"u16\", storage: 2, isSimpleType: true }], identifierName: \"command_not_implemented\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"const\", name: \"instance_name\", identifier: 265, description: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\", fields: [{ name: \"_\", type: \"string\", storage: 0 }], optional: true, identifierName: \"instance_name\", packFormat: \"s\", derived: \"_base\" }, { kind: \"ro\", name: \"status_code\", identifier: 259, description: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"event\", name: \"status_code_changed\", identifier: 4, description: \"Notifies that the status code of the service changed.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code_changed\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"rw\", name: \"enabled\", identifier: 1, description: \"Opens or closes the port to the MIDI device\", fields: [{ name: \"_\", type: \"bool\", storage: 1 }], identifierName: \"intensity\", packFormat: \"u8\" }, { kind: \"command\", name: \"clear\", identifier: 128, description: \"Clears any pending send data that has not yet been sent from the MIDIOutput's queue.\", fields: [] }, { kind: \"command\", name: \"send\", identifier: 129, description: \"Enqueues the message to be sent to the corresponding MIDI port\", fields: [{ name: \"data\", type: \"bytes\", storage: 0, isSimpleType: true }], unique: true, packFormat: \"b\" }], tags: [], group: \"Sound\" }, { name: \"Model Runner\", status: \"experimental\", shortId: \"modelrunner\", camelName: \"modelRunner\", shortName: \"modelRunner\", extends: [\"_base\"], notes: { short: \"Runs machine learning models.\\n\\nOnly models with a single input tensor and a single output tensor are supported at the moment.\\nInput is provided by Sensor Aggregator service on the same device.\\nMultiple instances of this service may be present, if more than one model format is supported by a device.\" }, classIdentifier: 336566904, enums: { ModelFormat: { name: \"ModelFormat\", storage: 4, members: { TFLite: 860636756, ML4F: 809963362, EdgeImpulseCompiled: 810961221 } } }, constants: {}, packets: [{ kind: \"report\", name: \"command_not_implemented\", identifier: 3, description: \"This report may be emitted by a server in response to a command (action or register operation)\\nthat it does not understand.\\nThe `service_command` and `packet_crc` fields are copied from the command packet that was unhandled.\\nNote that it's possible to get an ACK, followed by such an error report.\", fields: [{ name: \"service_command\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"packet_crc\", type: \"u16\", storage: 2, isSimpleType: true }], identifierName: \"command_not_implemented\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"const\", name: \"instance_name\", identifier: 265, description: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\", fields: [{ name: \"_\", type: \"string\", storage: 0 }], optional: true, identifierName: \"instance_name\", packFormat: \"s\", derived: \"_base\" }, { kind: \"ro\", name: \"status_code\", identifier: 259, description: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"event\", name: \"status_code_changed\", identifier: 4, description: \"Notifies that the status code of the service changed.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code_changed\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"command\", name: \"set_model\", identifier: 128, description: \"Open pipe for streaming in the model. The size of the model has to be declared upfront.\\nThe model is streamed over regular pipe data packets.\\nThe format supported by this instance of the service is specified in `format` register.\\nWhen the pipe is closed, the model is written all into flash, and the device running the service may reset.\", fields: [{ name: \"model_size\", unit: \"B\", type: \"u32\", storage: 4, isSimpleType: true }], unique: true, hasReport: true, packFormat: \"u32\" }, { kind: \"report\", name: \"set_model\", identifier: 128, description: \"Open pipe for streaming in the model. The size of the model has to be declared upfront.\\nThe model is streamed over regular pipe data packets.\\nThe format supported by this instance of the service is specified in `format` register.\\nWhen the pipe is closed, the model is written all into flash, and the device running the service may reset.\", fields: [{ name: \"model_port\", type: \"pipe_port\", storage: 2 }], secondary: true, pipeType: \"set_model\", packFormat: \"u16\" }, { kind: \"command\", name: \"predict\", identifier: 129, description: \"Open channel that can be used to manually invoke the model. When enough data is sent over the `inputs` pipe, the model is invoked,\\nand results are send over the `outputs` pipe.\", fields: [{ name: \"outputs\", type: \"pipe\", storage: 12 }], pipeType: \"predict\", hasReport: true, packFormat: \"b[12]\" }, { kind: \"report\", name: \"predict\", identifier: 129, description: \"Open channel that can be used to manually invoke the model. When enough data is sent over the `inputs` pipe, the model is invoked,\\nand results are send over the `outputs` pipe.\", fields: [{ name: \"inputs\", type: \"pipe_port\", storage: 2 }], secondary: true, pipeType: \"predict\", packFormat: \"u16\" }, { kind: \"rw\", name: \"auto_invoke_every\", identifier: 128, description: \"When register contains `N > 0`, run the model automatically every time new `N` samples are collected.\\nModel may be run less often if it takes longer to run than `N * sampling_interval`.\\nThe `outputs` register will stream its value after each run.\\nThis register is not stored in flash.\", fields: [{ name: \"_\", type: \"u16\", storage: 2, isSimpleType: true }], packFormat: \"u16\" }, { kind: \"ro\", name: \"outputs\", identifier: 257, description: \"Results of last model invocation as `float32` array.\", fields: [{ name: \"output\", isFloat: true, type: \"f32\", storage: 4, startRepeats: true }], volatile: true, identifierName: \"reading\", packFormat: \"r: f32\" }, { kind: \"ro\", name: \"input_shape\", identifier: 384, description: \"The shape of the input tensor.\", fields: [{ name: \"dimension\", type: \"u16\", storage: 2, isSimpleType: true, startRepeats: true }], packFormat: \"r: u16\" }, { kind: \"ro\", name: \"output_shape\", identifier: 385, description: \"The shape of the output tensor.\", fields: [{ name: \"dimension\", type: \"u16\", storage: 2, isSimpleType: true, startRepeats: true }], packFormat: \"r: u16\" }, { kind: \"ro\", name: \"last_run_time\", identifier: 386, description: \"The time consumed in last model execution.\", fields: [{ name: \"_\", unit: \"us\", type: \"u32\", storage: 4, isSimpleType: true }], packFormat: \"u32\" }, { kind: \"ro\", name: \"allocated_arena_size\", identifier: 387, description: \"Number of RAM bytes allocated for model execution.\", fields: [{ name: \"_\", unit: \"B\", type: \"u32\", storage: 4, isSimpleType: true }], packFormat: \"u32\" }, { kind: \"ro\", name: \"model_size\", identifier: 388, description: \"The size of the model in bytes.\", fields: [{ name: \"_\", unit: \"B\", type: \"u32\", storage: 4, isSimpleType: true }], packFormat: \"u32\" }, { kind: \"ro\", name: \"last_error\", identifier: 389, description: \"Textual description of last error when running or loading model (if any).\", fields: [{ name: \"_\", type: \"string\", storage: 0 }], packFormat: \"s\" }, { kind: \"const\", name: \"format\", identifier: 390, description: \"The type of ML models supported by this service.\\n`TFLite` is flatbuffer `.tflite` file.\\n`ML4F` is compiled machine code model for Cortex-M4F.\\nThe format is typically present as first or second little endian word of model file.\", fields: [{ name: \"_\", type: \"ModelFormat\", storage: 4 }], packFormat: \"u32\" }, { kind: \"const\", name: \"format_version\", identifier: 391, description: \"A version number for the format.\", fields: [{ name: \"_\", type: \"u32\", storage: 4, isSimpleType: true }], packFormat: \"u32\" }, { kind: \"const\", name: \"parallel\", identifier: 392, description: \"If present and true this service can run models independently of other\\ninstances of this service on the device.\", fields: [{ name: \"_\", type: \"bool\", storage: 1 }], optional: true, packFormat: \"u8\" }], tags: [] }, { name: \"Motion\", status: \"experimental\", shortId: \"motion\", camelName: \"motion\", shortName: \"motion\", extends: [\"_base\", \"_sensor\"], notes: { short: \"A sensor, typically PIR, that detects object motion within a certain range\" }, classIdentifier: 293185353, enums: { Variant: { name: \"Variant\", storage: 1, members: { PIR: 1 } } }, constants: {}, packets: [{ kind: \"report\", name: \"command_not_implemented\", identifier: 3, description: \"This report may be emitted by a server in response to a command (action or register operation)\\nthat it does not understand.\\nThe `service_command` and `packet_crc` fields are copied from the command packet that was unhandled.\\nNote that it's possible to get an ACK, followed by such an error report.\", fields: [{ name: \"service_command\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"packet_crc\", type: \"u16\", storage: 2, isSimpleType: true }], identifierName: \"command_not_implemented\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"const\", name: \"instance_name\", identifier: 265, description: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\", fields: [{ name: \"_\", type: \"string\", storage: 0 }], optional: true, identifierName: \"instance_name\", packFormat: \"s\", derived: \"_base\" }, { kind: \"ro\", name: \"status_code\", identifier: 259, description: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"event\", name: \"status_code_changed\", identifier: 4, description: \"Notifies that the status code of the service changed.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code_changed\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"rw\", name: \"streaming_samples\", identifier: 3, description: \"Asks device to stream a given number of samples\\n(clients will typically write `255` to this register every second or so, while streaming is required).\", fields: [{ name: \"_\", unit: \"#\", type: \"u8\", storage: 1, isSimpleType: true }], internal: true, identifierName: \"streaming_samples\", packFormat: \"u8\", derived: \"_sensor\" }, { kind: \"rw\", name: \"streaming_interval\", identifier: 4, description: \"Period between packets of data when streaming in milliseconds.\", fields: [{ name: \"_\", unit: \"ms\", type: \"u32\", storage: 4, isSimpleType: true, defaultValue: 100, typicalMin: 1, typicalMax: 6e4 }], identifierName: \"streaming_interval\", packFormat: \"u32\", derived: \"_sensor\" }, { kind: \"const\", name: \"streaming_preferred_interval\", identifier: 258, description: \"Preferred default streaming interval for sensor in milliseconds.\", fields: [{ name: \"_\", unit: \"ms\", type: \"u32\", storage: 4, isSimpleType: true }], internal: true, optional: true, identifierName: \"streaming_preferred_interval\", packFormat: \"u32\", derived: \"_sensor\" }, { kind: \"ro\", name: \"moving\", identifier: 257, description: \"Reports is movement is currently detected by the sensor.\", fields: [{ name: \"_\", type: \"bool\", storage: 1 }], volatile: true, identifierName: \"reading\", preferredInterval: 1e3, packFormat: \"u8\" }, { kind: \"const\", name: \"max_distance\", identifier: 384, description: \"Maximum distance where objects can be detected.\", fields: [{ name: \"_\", unit: \"m\", shift: 16, type: \"u16.16\", storage: 4 }], optional: true, packFormat: \"u16.16\" }, { kind: \"const\", name: \"angle\", identifier: 385, description: \"Opening of the field of view\", fields: [{ name: \"_\", unit: \"\\xB0\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, packFormat: \"u16\" }, { kind: \"const\", name: \"variant\", identifier: 263, description: \"Type of physical sensor\", fields: [{ name: \"_\", type: \"Variant\", storage: 1 }], optional: true, identifierName: \"variant\", packFormat: \"u8\" }, { kind: \"event\", name: \"movement\", identifier: 1, description: \"A movement was detected.\", fields: [], identifierName: \"active\" }], tags: [\"8bit\"], group: \"Movement\" }, { name: \"Motor\", status: \"rc\", shortId: \"motor\", camelName: \"motor\", shortName: \"motor\", extends: [\"_base\"], notes: { short: \"A DC motor.\" }, classIdentifier: 385895640, enums: {}, constants: {}, packets: [{ kind: \"report\", name: \"command_not_implemented\", identifier: 3, description: \"This report may be emitted by a server in response to a command (action or register operation)\\nthat it does not understand.\\nThe `service_command` and `packet_crc` fields are copied from the command packet that was unhandled.\\nNote that it's possible to get an ACK, followed by such an error report.\", fields: [{ name: \"service_command\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"packet_crc\", type: \"u16\", storage: 2, isSimpleType: true }], identifierName: \"command_not_implemented\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"const\", name: \"instance_name\", identifier: 265, description: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\", fields: [{ name: \"_\", type: \"string\", storage: 0 }], optional: true, identifierName: \"instance_name\", packFormat: \"s\", derived: \"_base\" }, { kind: \"ro\", name: \"status_code\", identifier: 259, description: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"event\", name: \"status_code_changed\", identifier: 4, description: \"Notifies that the status code of the service changed.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code_changed\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"rw\", name: \"duty\", identifier: 2, description: \"PWM duty cycle of the motor. Use negative/positive values to run the motor forwards and backwards.\\nPositive is recommended to be clockwise rotation and negative counterclockwise. A duty of ``0`` \\nwhile ``enabled`` acts as brake.\", fields: [{ name: \"_\", unit: \"/\", shift: 15, type: \"i1.15\", storage: -2 }], identifierName: \"value\", packFormat: \"i1.15\" }, { kind: \"rw\", name: \"enabled\", identifier: 1, description: \"Turn the power to the motor on/off.\", fields: [{ name: \"_\", type: \"bool\", storage: 1 }], identifierName: \"intensity\", packFormat: \"u8\" }, { kind: \"const\", name: \"load_torque\", identifier: 384, description: \"Torque required to produce the rated power of an electrical motor at load speed.\", fields: [{ name: \"_\", unit: \"kg/cm\", shift: 16, type: \"u16.16\", storage: 4 }], optional: true, packFormat: \"u16.16\" }, { kind: \"const\", name: \"load_speed\", identifier: 385, description: \"Revolutions per minute of the motor under full load.\", fields: [{ name: \"_\", unit: \"rpm\", shift: 16, type: \"u16.16\", storage: 4 }], optional: true, packFormat: \"u16.16\" }, { kind: \"const\", name: \"reversible\", identifier: 386, description: \"Indicates if the motor can run backwards.\", fields: [{ name: \"_\", type: \"bool\", storage: 1 }], optional: true, packFormat: \"u8\" }], tags: [\"C\", \"8bit\"] }, { name: \"Potentiometer\", status: \"rc\", shortId: \"potentiometer\", camelName: \"potentiometer\", shortName: \"potentiometer\", extends: [\"_base\", \"_sensor\"], notes: { short: \"A slider or rotary potentiometer.\" }, classIdentifier: 522667846, enums: { Variant: { name: \"Variant\", storage: 1, members: { Slider: 1, Rotary: 2 } } }, constants: {}, packets: [{ kind: \"report\", name: \"command_not_implemented\", identifier: 3, description: \"This report may be emitted by a server in response to a command (action or register operation)\\nthat it does not understand.\\nThe `service_command` and `packet_crc` fields are copied from the command packet that was unhandled.\\nNote that it's possible to get an ACK, followed by such an error report.\", fields: [{ name: \"service_command\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"packet_crc\", type: \"u16\", storage: 2, isSimpleType: true }], identifierName: \"command_not_implemented\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"const\", name: \"instance_name\", identifier: 265, description: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\", fields: [{ name: \"_\", type: \"string\", storage: 0 }], optional: true, identifierName: \"instance_name\", packFormat: \"s\", derived: \"_base\" }, { kind: \"ro\", name: \"status_code\", identifier: 259, description: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"event\", name: \"status_code_changed\", identifier: 4, description: \"Notifies that the status code of the service changed.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code_changed\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"rw\", name: \"streaming_samples\", identifier: 3, description: \"Asks device to stream a given number of samples\\n(clients will typically write `255` to this register every second or so, while streaming is required).\", fields: [{ name: \"_\", unit: \"#\", type: \"u8\", storage: 1, isSimpleType: true }], internal: true, identifierName: \"streaming_samples\", packFormat: \"u8\", derived: \"_sensor\" }, { kind: \"rw\", name: \"streaming_interval\", identifier: 4, description: \"Period between packets of data when streaming in milliseconds.\", fields: [{ name: \"_\", unit: \"ms\", type: \"u32\", storage: 4, isSimpleType: true, defaultValue: 100, typicalMin: 1, typicalMax: 6e4 }], identifierName: \"streaming_interval\", packFormat: \"u32\", derived: \"_sensor\" }, { kind: \"const\", name: \"streaming_preferred_interval\", identifier: 258, description: \"Preferred default streaming interval for sensor in milliseconds.\", fields: [{ name: \"_\", unit: \"ms\", type: \"u32\", storage: 4, isSimpleType: true }], internal: true, optional: true, identifierName: \"streaming_preferred_interval\", packFormat: \"u32\", derived: \"_sensor\" }, { kind: \"ro\", name: \"position\", identifier: 257, description: \"The relative position of the slider.\", fields: [{ name: \"_\", unit: \"/\", shift: 16, type: \"u0.16\", storage: 2 }], volatile: true, identifierName: \"reading\", packFormat: \"u0.16\" }, { kind: \"const\", name: \"variant\", identifier: 263, description: \"Specifies the physical layout of the potentiometer.\", fields: [{ name: \"_\", type: \"Variant\", storage: 1 }], optional: true, identifierName: \"variant\", packFormat: \"u8\" }], tags: [\"C\", \"8bit\"], group: \"Slider\" }, { name: \"Power\", status: \"experimental\", shortId: \"power\", camelName: \"power\", shortName: \"power\", extends: [\"_base\"], notes: { short: \"A power-provider service.\", long: \"## Power negotiation protocol\\n\\nThe purpose of the power negotiation is to ensure that there is no more than ~900mA\\ndelivered to the power rail.\\nThis is realized by limiting the number of enabled power provider services to one.\\n\\nNote, that it's also possible to have low-current power providers,\\nwhich are limited to 100mA and do not run a power provider service.\\nThese are **not** accounted for in the power negotiation protocol.\\n\\nPower providers can have multiple _channels_, typically multiple Jacdac ports on the provider.\\nEach channel can be limited to 900mA separately.\\nIn normal operation, the data lines of each channels are connected together.\\nThe ground lines are always connected together.\\nMulti-channel power providers are also called _powered hubs_.\\n\\nWhile channels have separate current limits, there's nothing to prevent the user\\nfrom joining two or more channels outside of the provider using a passive hub.\\nThis would allow more than 900mA of current to be drawn, resulting in cables or components\\ngetting hot and/or malfunctioning.\\nThus, the power negotiation protocol seeks to detect situations where\\nmultiple channels of power provider(s) are bridged together\\nand shut down all but one of the channels involved.\\n\\nThe protocol is built around the power providers periodically sending specially crafted\\n`shutdown` commands in broadcast mode.\\nNote that this is unusual - services typically only send reports.\\n\\nThe `shutdown` commands can be reliably identified based on their first half (more details below).\\nWhen a power provider starts receiving a `shutdown` command, it needs to take\\nsteps to identify which of its channels the command is coming from.\\nThis is typically realized with analog switches between data lines of channels.\\nThe channel which received the `shutdown` command is then shut down.\\nNote that in the case a single-channel provider any received `shutdown` command will cause a shut down.\\n\\nA multi-channel provider needs to also identify when a `shutdown` command it sent from one channel\\nis received on any of its other channels and shut down one of the involved channels.\\n\\nIt is also possible to build a _data bridge_ device, with two or more ports.\\nIt passes through all data except for `shutdown` commands,\\nbut **does not** connect the power lines.\\n\\n### Protocol details\\n\\nThe `shutdown` commands follow a very narrow format:\\n* they need to be the only packet in the frame (and thus we can also call them `shutdown` frames)\\n* the second word of `device_id` needs to be set to `0xAA_AA_AA_AA` (alternating 0 and 1)\\n* the service index is set to `0x3d`\\n* the CRC is therefore fixed\\n* therefore, the packet can be recognized by reading the first 8 bytes (total length is 16 bytes)\\n\\nThe exact byte structure of `shutdown` command is:\\n`15 59 04 05 5A C9 A4 1F AA AA AA AA 00 3D 80 00`\\n\\nThere is one power service per channel.\\nA multi-channel power provider can be implemented as one device with multiple services (typically with one MCU),\\nor many devices with one service each (typically multiple MCUs).\\nThe first option is preferred as it fixes the order of channels,\\nbut the second option may be cheaper to implement.\\n\\nAfter queuing a `shutdown` command, the service enters a grace period\\nuntil the report has been sent on the wire.\\nDuring the grace period incoming `shutdown` commands are ignored.\\n\\n* Upon reset, a power service enables itself, and then only after 0-300ms (random)\\n  sends the first `shutdown` command\\n* Every enabled power service emits `shutdown` commands every 400-600ms (random; first few packets can be even sent more often)\\n* If an enabled power service sees a `shutdown` command from somebody else,\\n  it disables itself (unless in grace period)\\n* If a disabled power service sees no `shutdown` command for more than ~1200ms, it enables itself\\n  (this is when the previous power source is unplugged or otherwise malfunctions)\\n* If a power service has been disabled for around 10s, it enables itself.\\n\\nAdditionally:\\n* While the `allowed` register is set to `0`, the service will not enable itself (nor send `shutdown` commands)\\n* When a current overdraw is detected, the service stop providing power and enters `Overload` state for around 2 seconds,\\n  while still sending `shutdown` commands.\\n\\n### Client notes\\n\\nIf a client hears a `shutdown` command it just means it's on a branch of the\\nnetwork with a (high) power provider.\\nAs clients (brains) typically do not consume much current (as opposed to, say, servos),\\nthe `shutdown` commands are typically irrelevant to them.\\n\\nFor power monitoring, the `power_status_changed` event (and possibly `power_status` register)\\ncan be used.\\nIn particular, user interfaces may alert the user to `Overload` status.\\nThe `Overprovision` status is generally considered normal (eg. when two multi-channel power providers are linked together).\\n\\n### Server implementation notes\\n\\n#### An MCU per channel\\n\\nEvery channel has:\\n* a cheap 8-bit MCU (eg., PMS150C)\\n* a current limiter with latching circuit\\n* an analog switch\\n\\nThe MCU is connected to data line of the channel.\\nThe switch joins the data line of the channel with internal data bus, common to all channels.\\nBoth the switch and the limiter are controlled by the MCU.\\nThe latching circuit on the limiter shuts it down immediately on current overdraw.\\n\\nDuring reception, after the beginning of `shutdown` frame is detected,\\nthe switch is opened for a brief period.\\nIf the `shutdown` frame is received correctly, it means it was on MCU's channel.\\n\\n#### A dedicated MCU for multiple channels\\n\\nEvery channel has:\\n* a current limiter with latching circuit\\n* an analog switch\\n* a wiggle-detection line connecting the MCU to data line of the channel\\n\\nThe MCU here needs at least 4 pins per channel.\\nSwitches and limiters are set up like in the configuration above.\\nThe Jacdac data line of the MCU is connected to internal data bus.\\n\\nWhile a Jacdac packet is being received, the MCU keeps checking if it is a \\nbeginning of the `shutdown` frame.\\nIf that is the case, it opens all switches and checks which one(s) of the channel\\ndata lines wiggle (via the wiggle lines; this can be done with EXTI latches).\\nThe one(s) that wiggle received the `shutdown` frame and need to be disabled.\\n\\nAlso, while sending the `shutdown` frames itself, it needs to be done separately\\nfor each channel, with all the other switches open.\\nIf during that operation we detect wiggle on other channels, then we have detected\\na loop, and the respective channels needs to be disabled.\\n\\n#### A brain-integrated power supply\\n\\nHere, there's only one channel of power and we don't have hard real time requirements,\\nso user-programmable brain can control it.\\nThere is no need for analog switch or wiggle-detection line,\\nbut the current limiter with latching circuit is still needed.\\n\\nThere is nothing special to do during reception of `shutdown` packet.\\nWhen it is received, the current limiter should just be disabled.\\n\\nIdeally, exception/hard-fault handlers on the MCU should also disable the\\ncurrent limiter.\\nSimilarly, the limiter should be disabled while the MCU is in bootloader mode,\\nor otherwise unaware of the power negotiation protocol. \\n\\n### Rationale for the grace period\\n\\nConsider the following scenario:\\n\\n* device A queues `shutdown` command for sending\\n* A receives external `shutdown` packet from B (thus disabling A)\\n* the A `shutdown` command is sent from the queue (thus eventually disabling B)\\n\\nTo avoid that, we make sure that at the precise instant when `shutdown` command is sent,\\nthe power is enabled (and thus will stay enabled until another `shutdown` command arrives).\\nThis could be achieved by inspecting the enable bit, aftering acquiring the line\\nand before starting UART transmission, however that would require breaking abstraction layers.\\nSo instead, we never disable the service, while the `shutdown` packet is queued.\\nThis may lead to delays in disabling power services, but these should be limited due to the\\nrandom nature of the `shutdown` packet spacing.\\n\\n### Rationale for timings\\n\\nThe initial 0-300ms delay is set to spread out the `shutdown` periods of power services,\\nto minimize collisions.\\nThe `shutdown` periods are randomized 400-600ms, instead of a fixed 500ms used for regular\\nservices, for the same reason.\\n\\nThe 1200ms period is set so that droping two `shutdown` packets in a row\\nfrom the current provider will not cause power switch, while missing 3 will.\\n\\nThe 50-60s power switch period is arbitrary, but chosen to limit amount of switching between supplies,\\nwhile keeping it short enough for user to notice any problems such switching may cause.\" }, classIdentifier: 530893146, enums: { PowerStatus: { name: \"PowerStatus\", storage: 1, members: { Disallowed: 0, Powering: 1, Overload: 2, Overprovision: 3 } } }, constants: {}, packets: [{ kind: \"report\", name: \"command_not_implemented\", identifier: 3, description: \"This report may be emitted by a server in response to a command (action or register operation)\\nthat it does not understand.\\nThe `service_command` and `packet_crc` fields are copied from the command packet that was unhandled.\\nNote that it's possible to get an ACK, followed by such an error report.\", fields: [{ name: \"service_command\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"packet_crc\", type: \"u16\", storage: 2, isSimpleType: true }], identifierName: \"command_not_implemented\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"const\", name: \"instance_name\", identifier: 265, description: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\", fields: [{ name: \"_\", type: \"string\", storage: 0 }], optional: true, identifierName: \"instance_name\", packFormat: \"s\", derived: \"_base\" }, { kind: \"ro\", name: \"status_code\", identifier: 259, description: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"event\", name: \"status_code_changed\", identifier: 4, description: \"Notifies that the status code of the service changed.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code_changed\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"rw\", name: \"allowed\", identifier: 1, description: \"Can be used to completely disable the service.\\nWhen allowed, the service may still not be providing power, see \\n`power_status` for the actual current state.\", fields: [{ name: \"_\", type: \"bool\", storage: 1, defaultValue: 1 }], identifierName: \"intensity\", packFormat: \"u8\" }, { kind: \"rw\", name: \"max_power\", identifier: 7, description: \"Limit the power provided by the service. The actual maximum limit will depend on hardware.\\nThis field may be read-only in some implementations - you should read it back after setting.\", fields: [{ name: \"_\", unit: \"mA\", type: \"u16\", storage: 2, isSimpleType: true, defaultValue: 900, typicalMax: 900, typicalMin: 0 }], optional: true, identifierName: \"max_power\", packFormat: \"u16\" }, { kind: \"ro\", name: \"power_status\", identifier: 385, description: \"Indicates whether the power provider is currently providing power (`Powering` state), and if not, why not.\\n`Overprovision` means there was another power provider, and we stopped not to overprovision the bus.\", fields: [{ name: \"_\", type: \"PowerStatus\", storage: 1 }], volatile: true, packFormat: \"u8\" }, { kind: \"ro\", name: \"current_draw\", identifier: 257, description: \"Present current draw from the bus.\", fields: [{ name: \"_\", unit: \"mA\", type: \"u16\", storage: 2, isSimpleType: true }], volatile: true, optional: true, identifierName: \"reading\", packFormat: \"u16\" }, { kind: \"ro\", name: \"battery_voltage\", identifier: 384, description: \"Voltage on input.\", fields: [{ name: \"_\", unit: \"mV\", type: \"u16\", storage: 2, isSimpleType: true, typicalMin: 4500, typicalMax: 5500 }], volatile: true, optional: true, packFormat: \"u16\" }, { kind: \"ro\", name: \"battery_charge\", identifier: 386, description: \"Fraction of charge in the battery.\", fields: [{ name: \"_\", unit: \"/\", shift: 16, type: \"u0.16\", storage: 2 }], volatile: true, optional: true, packFormat: \"u0.16\" }, { kind: \"const\", name: \"battery_capacity\", identifier: 387, description: \"Energy that can be delivered to the bus when battery is fully charged.\\nThis excludes conversion overheads if any.\", fields: [{ name: \"_\", unit: \"mWh\", type: \"u32\", storage: 4, isSimpleType: true }], optional: true, packFormat: \"u32\" }, { kind: \"rw\", name: \"keep_on_pulse_duration\", identifier: 128, description: \"Many USB power packs need current to be drawn from time to time to prevent shutdown.\\nThis regulates how often and for how long such current is drawn.\\nTypically a 1/8W 22 ohm resistor is used as load. This limits the duty cycle to 10%.\", fields: [{ name: \"_\", unit: \"ms\", type: \"u16\", storage: 2, isSimpleType: true, defaultValue: 600 }], optional: true, packFormat: \"u16\" }, { kind: \"rw\", name: \"keep_on_pulse_period\", identifier: 129, description: \"Many USB power packs need current to be drawn from time to time to prevent shutdown.\\nThis regulates how often and for how long such current is drawn.\\nTypically a 1/8W 22 ohm resistor is used as load. This limits the duty cycle to 10%.\", fields: [{ name: \"_\", unit: \"ms\", type: \"u16\", storage: 2, isSimpleType: true, defaultValue: 2e4 }], optional: true, packFormat: \"u16\" }, { kind: \"command\", name: \"shutdown\", identifier: 128, description: \"Sent by the power service periodically, as broadcast.\", fields: [] }, { kind: \"event\", name: \"power_status_changed\", identifier: 3, description: \"Emitted whenever `power_status` changes.\", fields: [{ name: \"power_status\", type: \"PowerStatus\", storage: 1 }], identifierName: \"change\", packFormat: \"u8\" }], tags: [] }, { name: \"Power supply\", status: \"experimental\", shortId: \"powersupply\", camelName: \"powerSupply\", shortName: \"powerSupply\", extends: [\"_base\"], notes: { short: \"A power supply with a fixed or variable voltage range\" }, classIdentifier: 524302175, enums: {}, constants: {}, packets: [{ kind: \"report\", name: \"command_not_implemented\", identifier: 3, description: \"This report may be emitted by a server in response to a command (action or register operation)\\nthat it does not understand.\\nThe `service_command` and `packet_crc` fields are copied from the command packet that was unhandled.\\nNote that it's possible to get an ACK, followed by such an error report.\", fields: [{ name: \"service_command\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"packet_crc\", type: \"u16\", storage: 2, isSimpleType: true }], identifierName: \"command_not_implemented\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"const\", name: \"instance_name\", identifier: 265, description: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\", fields: [{ name: \"_\", type: \"string\", storage: 0 }], optional: true, identifierName: \"instance_name\", packFormat: \"s\", derived: \"_base\" }, { kind: \"ro\", name: \"status_code\", identifier: 259, description: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"event\", name: \"status_code_changed\", identifier: 4, description: \"Notifies that the status code of the service changed.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code_changed\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"rw\", name: \"enabled\", identifier: 1, description: \"Turns the power supply on with `true`, off with `false`.\", fields: [{ name: \"_\", type: \"bool\", storage: 1 }], identifierName: \"intensity\", packFormat: \"u8\" }, { kind: \"rw\", name: \"output_voltage\", identifier: 2, description: \"The current output voltage of the power supply. Values provided must be in the range `minimum_voltage` to `maximum_voltage`\", fields: [{ name: \"_\", unit: \"mV\", shift: 10, type: \"i22.10\", storage: -4 }], identifierName: \"value\", packFormat: \"i22.10\" }, { kind: \"const\", name: \"minimum_voltage\", identifier: 272, description: \"The minimum output voltage of the power supply. For fixed power supplies, `minimum_voltage` should be equal to `maximum_voltage`.\", fields: [{ name: \"_\", unit: \"mV\", shift: 10, type: \"i22.10\", storage: -4 }], identifierName: \"min_value\", packFormat: \"i22.10\" }, { kind: \"const\", name: \"maximum_voltage\", identifier: 273, description: \"The maximum output voltage of the power supply. For fixed power supplies, `minimum_voltage` should be equal to `maximum_voltage`.\", fields: [{ name: \"_\", unit: \"mV\", shift: 10, type: \"i22.10\", storage: -4 }], identifierName: \"max_value\", packFormat: \"i22.10\" }], tags: [] }, { name: \"Pressure Button\", status: \"rc\", shortId: \"pressurebutton\", camelName: \"pressureButton\", shortName: \"pressureButton\", extends: [\"_base\"], notes: { short: \"A pressure sensitive push-button.\" }, classIdentifier: 672612547, enums: {}, constants: {}, packets: [{ kind: \"report\", name: \"command_not_implemented\", identifier: 3, description: \"This report may be emitted by a server in response to a command (action or register operation)\\nthat it does not understand.\\nThe `service_command` and `packet_crc` fields are copied from the command packet that was unhandled.\\nNote that it's possible to get an ACK, followed by such an error report.\", fields: [{ name: \"service_command\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"packet_crc\", type: \"u16\", storage: 2, isSimpleType: true }], identifierName: \"command_not_implemented\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"const\", name: \"instance_name\", identifier: 265, description: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\", fields: [{ name: \"_\", type: \"string\", storage: 0 }], optional: true, identifierName: \"instance_name\", packFormat: \"s\", derived: \"_base\" }, { kind: \"ro\", name: \"status_code\", identifier: 259, description: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"event\", name: \"status_code_changed\", identifier: 4, description: \"Notifies that the status code of the service changed.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code_changed\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"rw\", name: \"threshold\", identifier: 6, description: \"Indicates the threshold for ``up`` events.\", fields: [{ name: \"_\", unit: \"/\", shift: 16, type: \"u0.16\", storage: 2 }], identifierName: \"active_threshold\", packFormat: \"u0.16\" }], tags: [\"8bit\"], group: \"Button\" }, { name: \"Protocol Test\", status: \"experimental\", shortId: \"prototest\", camelName: \"protoTest\", shortName: \"protoTest\", extends: [\"_base\"], notes: { short: \"This is test service to validate the protocol packet transmissions between the browser and a MCU.\\nUse this page if you are porting Jacdac to a new platform.\", long: \"### Test procedure\\n\\nFor each ``rw`` registers, set a random value ``x``\\n  * read ``rw`` and check value is equal to ``x``\\n  * read ``ro`` and check value is equal to ``x``\\n  * listen to ``e`` event and check that data is equal to ``x``\\n  * call ``c`` command with new random value ``y``\\n  * read ``rw`` and check value is equal to ``y``\\n  * do all the above steps with acks\\n\\nFor each ``rw`` registers, there shall also\\nbe an ``event`` and a ``command``. The event\\nshould get raised when the value changes;\\nand the command should set the value.\", registers: \"Every ``rw`` register has a corresponding ``ro`` regisrer\\nand a corresponding ``set_...`` command to also set the value.\" }, classIdentifier: 382158442, enums: {}, constants: {}, packets: [{ kind: \"report\", name: \"command_not_implemented\", identifier: 3, description: \"This report may be emitted by a server in response to a command (action or register operation)\\nthat it does not understand.\\nThe `service_command` and `packet_crc` fields are copied from the command packet that was unhandled.\\nNote that it's possible to get an ACK, followed by such an error report.\", fields: [{ name: \"service_command\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"packet_crc\", type: \"u16\", storage: 2, isSimpleType: true }], identifierName: \"command_not_implemented\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"const\", name: \"instance_name\", identifier: 265, description: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\", fields: [{ name: \"_\", type: \"string\", storage: 0 }], optional: true, identifierName: \"instance_name\", packFormat: \"s\", derived: \"_base\" }, { kind: \"ro\", name: \"status_code\", identifier: 259, description: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"event\", name: \"status_code_changed\", identifier: 4, description: \"Notifies that the status code of the service changed.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code_changed\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"rw\", name: \"rw_bool\", identifier: 129, description: \"A read write bool register.\", fields: [{ name: \"_\", type: \"bool\", storage: 1 }], packFormat: \"u8\" }, { kind: \"ro\", name: \"ro_bool\", identifier: 385, description: \"A read only bool register. Mirrors rw_bool.\", fields: [{ name: \"_\", type: \"bool\", storage: 1 }], packFormat: \"u8\" }, { kind: \"rw\", name: \"rw_u32\", identifier: 130, description: \"A read write u32 register.\", fields: [{ name: \"_\", type: \"u32\", storage: 4, isSimpleType: true }], packFormat: \"u32\" }, { kind: \"ro\", name: \"ro_u32\", identifier: 386, description: \"A read only u32 register.. Mirrors rw_u32.\", fields: [{ name: \"_\", type: \"u32\", storage: 4, isSimpleType: true }], packFormat: \"u32\" }, { kind: \"rw\", name: \"rw_i32\", identifier: 131, description: \"A read write i32 register.\", fields: [{ name: \"_\", type: \"i32\", storage: -4, isSimpleType: true }], packFormat: \"i32\" }, { kind: \"ro\", name: \"ro_i32\", identifier: 387, description: \"A read only i32 register.. Mirrors rw_i32.\", fields: [{ name: \"_\", type: \"i32\", storage: -4, isSimpleType: true }], packFormat: \"i32\" }, { kind: \"rw\", name: \"rw_string\", identifier: 132, description: \"A read write string register.\", fields: [{ name: \"_\", type: \"string\", storage: 0 }], packFormat: \"s\" }, { kind: \"ro\", name: \"ro_string\", identifier: 388, description: \"A read only string register. Mirrors rw_string.\", fields: [{ name: \"_\", type: \"string\", storage: 0 }], packFormat: \"s\" }, { kind: \"rw\", name: \"rw_bytes\", identifier: 133, description: \"A read write string register.\", fields: [{ name: \"_\", type: \"bytes\", storage: 0, isSimpleType: true }], packFormat: \"b\" }, { kind: \"ro\", name: \"ro_bytes\", identifier: 389, description: \"A read only string register. Mirrors ro_bytes.\", fields: [{ name: \"_\", type: \"bytes\", storage: 0, isSimpleType: true }], packFormat: \"b\" }, { kind: \"rw\", name: \"rw_i8_u8_u16_i32\", identifier: 134, description: \"A read write i8, u8, u16, i32 register.\", fields: [{ name: \"i8\", type: \"i8\", storage: -1, isSimpleType: true }, { name: \"u8\", type: \"u8\", storage: 1, isSimpleType: true }, { name: \"u16\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"i32\", type: \"i32\", storage: -4, isSimpleType: true }], packFormat: \"i8 u8 u16 i32\" }, { kind: \"ro\", name: \"ro_i8_u8_u16_i32\", identifier: 390, description: \"A read only i8, u8, u16, i32 register.. Mirrors rw_i8_u8_u16_i32.\", fields: [{ name: \"i8\", type: \"i8\", storage: -1, isSimpleType: true }, { name: \"u8\", type: \"u8\", storage: 1, isSimpleType: true }, { name: \"u16\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"i32\", type: \"i32\", storage: -4, isSimpleType: true }], packFormat: \"i8 u8 u16 i32\" }, { kind: \"rw\", name: \"rw_u8_string\", identifier: 135, description: \"A read write u8, string register.\", fields: [{ name: \"u8\", type: \"u8\", storage: 1, isSimpleType: true }, { name: \"str\", type: \"string\", storage: 0 }], packFormat: \"u8 s\" }, { kind: \"ro\", name: \"ro_u8_string\", identifier: 391, description: \"A read only u8, string register.. Mirrors rw_u8_string.\", fields: [{ name: \"u8\", type: \"u8\", storage: 1, isSimpleType: true }, { name: \"str\", type: \"string\", storage: 0 }], packFormat: \"u8 s\" }, { kind: \"event\", name: \"e_bool\", identifier: 129, description: \"An event raised when rw_bool is modified\", fields: [{ name: \"bo\", type: \"bool\", storage: 1 }], packFormat: \"u8\" }, { kind: \"event\", name: \"e_u32\", identifier: 130, description: \"An event raised when rw_u32 is modified\", fields: [{ name: \"u32\", type: \"u32\", storage: 4, isSimpleType: true }], packFormat: \"u32\" }, { kind: \"event\", name: \"e_i32\", identifier: 131, description: \"An event raised when rw_i32 is modified\", fields: [{ name: \"i32\", type: \"i32\", storage: -4, isSimpleType: true }], packFormat: \"i32\" }, { kind: \"event\", name: \"e_string\", identifier: 132, description: \"An event raised when rw_string is modified\", fields: [{ name: \"str\", type: \"string\", storage: 0 }], packFormat: \"s\" }, { kind: \"event\", name: \"e_bytes\", identifier: 133, description: \"An event raised when rw_bytes is modified\", fields: [{ name: \"bytes\", type: \"bytes\", storage: 0, isSimpleType: true }], packFormat: \"b\" }, { kind: \"event\", name: \"e_i8_u8_u16_i32\", identifier: 134, description: \"An event raised when rw_i8_u8_u16_i32 is modified\", fields: [{ name: \"i8\", type: \"i8\", storage: -1, isSimpleType: true }, { name: \"u8\", type: \"u8\", storage: 1, isSimpleType: true }, { name: \"u16\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"i32\", type: \"i32\", storage: -4, isSimpleType: true }], packFormat: \"i8 u8 u16 i32\" }, { kind: \"event\", name: \"e_u8_string\", identifier: 135, description: \"An event raised when rw_u8_string is modified\", fields: [{ name: \"u8\", type: \"u8\", storage: 1, isSimpleType: true }, { name: \"str\", type: \"string\", storage: 0 }], packFormat: \"u8 s\" }, { kind: \"command\", name: \"c_bool\", identifier: 129, description: \"A command to set rw_bool.\", fields: [{ name: \"bo\", type: \"bool\", storage: 1 }], packFormat: \"u8\" }, { kind: \"command\", name: \"c_u32\", identifier: 130, description: \"A command to set rw_u32.\", fields: [{ name: \"u32\", type: \"u32\", storage: 4, isSimpleType: true }], packFormat: \"u32\" }, { kind: \"command\", name: \"c_i32\", identifier: 131, description: \"A command to set rw_i32.\", fields: [{ name: \"i32\", type: \"i32\", storage: -4, isSimpleType: true }], packFormat: \"i32\" }, { kind: \"command\", name: \"c_string\", identifier: 132, description: \"A command to set rw_string.\", fields: [{ name: \"str\", type: \"string\", storage: 0 }], packFormat: \"s\" }, { kind: \"command\", name: \"c_bytes\", identifier: 133, description: \"A command to set rw_string.\", fields: [{ name: \"bytes\", type: \"bytes\", storage: 0, isSimpleType: true }], packFormat: \"b\" }, { kind: \"command\", name: \"c_i8_u8_u16_i32\", identifier: 134, description: \"A command to set rw_bytes.\", fields: [{ name: \"i8\", type: \"i8\", storage: -1, isSimpleType: true }, { name: \"u8\", type: \"u8\", storage: 1, isSimpleType: true }, { name: \"u16\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"i32\", type: \"i32\", storage: -4, isSimpleType: true }], packFormat: \"i8 u8 u16 i32\" }, { kind: \"command\", name: \"c_u8_string\", identifier: 135, description: \"A command to set rw_u8_string.\", fields: [{ name: \"u8\", type: \"u8\", storage: 1, isSimpleType: true }, { name: \"str\", type: \"string\", storage: 0 }], packFormat: \"u8 s\" }, { kind: \"command\", name: \"c_report_pipe\", identifier: 144, description: \"A command to read the content of rw_bytes, byte per byte, as a pipe.\", fields: [{ name: \"p_bytes\", type: \"pipe\", storage: 12 }], pipeType: \"c_report_pipe\", packFormat: \"b[12]\" }, { kind: \"pipe_report\", name: \"p_bytes\", identifier: 0, description: \"A command to read the content of rw_bytes, byte per byte, as a pipe.\", fields: [{ name: \"byte\", type: \"u8\", storage: 1, isSimpleType: true }], pipeType: \"c_report_pipe\", packFormat: \"u8\" }], tags: [\"infrastructure\"] }, { name: \"Proxy\", status: \"stable\", shortId: \"proxy\", camelName: \"proxy\", shortName: \"proxy\", extends: [\"_base\"], notes: { short: \"A service that tags a device as a packet proxy.\\nA device in proxy mode will proxy Jacdac packets and typically has its core logic halted.\" }, classIdentifier: 384932169, enums: {}, constants: {}, packets: [{ kind: \"report\", name: \"command_not_implemented\", identifier: 3, description: \"This report may be emitted by a server in response to a command (action or register operation)\\nthat it does not understand.\\nThe `service_command` and `packet_crc` fields are copied from the command packet that was unhandled.\\nNote that it's possible to get an ACK, followed by such an error report.\", fields: [{ name: \"service_command\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"packet_crc\", type: \"u16\", storage: 2, isSimpleType: true }], identifierName: \"command_not_implemented\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"const\", name: \"instance_name\", identifier: 265, description: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\", fields: [{ name: \"_\", type: \"string\", storage: 0 }], optional: true, identifierName: \"instance_name\", packFormat: \"s\", derived: \"_base\" }, { kind: \"ro\", name: \"status_code\", identifier: 259, description: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"event\", name: \"status_code_changed\", identifier: 4, description: \"Notifies that the status code of the service changed.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code_changed\", packFormat: \"u16 u16\", derived: \"_base\" }], tags: [\"infrastructure\"] }, { name: \"Pulse Oximeter\", status: \"experimental\", shortId: \"pulseoximeter\", camelName: \"pulseOximeter\", shortName: \"pulseOximeter\", extends: [\"_base\", \"_sensor\"], notes: { short: \"A sensor approximating the oxygen level.\\n\\n**Jacdac is not suitable for medical devices and should NOT be used in any kind of device to diagnose or treat any medical conditions.**\" }, classIdentifier: 280710838, enums: {}, constants: {}, packets: [{ kind: \"report\", name: \"command_not_implemented\", identifier: 3, description: \"This report may be emitted by a server in response to a command (action or register operation)\\nthat it does not understand.\\nThe `service_command` and `packet_crc` fields are copied from the command packet that was unhandled.\\nNote that it's possible to get an ACK, followed by such an error report.\", fields: [{ name: \"service_command\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"packet_crc\", type: \"u16\", storage: 2, isSimpleType: true }], identifierName: \"command_not_implemented\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"const\", name: \"instance_name\", identifier: 265, description: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\", fields: [{ name: \"_\", type: \"string\", storage: 0 }], optional: true, identifierName: \"instance_name\", packFormat: \"s\", derived: \"_base\" }, { kind: \"ro\", name: \"status_code\", identifier: 259, description: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"event\", name: \"status_code_changed\", identifier: 4, description: \"Notifies that the status code of the service changed.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code_changed\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"rw\", name: \"streaming_samples\", identifier: 3, description: \"Asks device to stream a given number of samples\\n(clients will typically write `255` to this register every second or so, while streaming is required).\", fields: [{ name: \"_\", unit: \"#\", type: \"u8\", storage: 1, isSimpleType: true }], internal: true, identifierName: \"streaming_samples\", packFormat: \"u8\", derived: \"_sensor\" }, { kind: \"rw\", name: \"streaming_interval\", identifier: 4, description: \"Period between packets of data when streaming in milliseconds.\", fields: [{ name: \"_\", unit: \"ms\", type: \"u32\", storage: 4, isSimpleType: true, defaultValue: 100, typicalMin: 1, typicalMax: 6e4 }], identifierName: \"streaming_interval\", packFormat: \"u32\", derived: \"_sensor\" }, { kind: \"const\", name: \"streaming_preferred_interval\", identifier: 258, description: \"Preferred default streaming interval for sensor in milliseconds.\", fields: [{ name: \"_\", unit: \"ms\", type: \"u32\", storage: 4, isSimpleType: true }], internal: true, optional: true, identifierName: \"streaming_preferred_interval\", packFormat: \"u32\", derived: \"_sensor\" }, { kind: \"ro\", name: \"oxygen\", identifier: 257, description: \"The estimated oxygen level in blood.\", fields: [{ name: \"_\", unit: \"%\", shift: 8, type: \"u8.8\", storage: 2, typicalMin: 80, typicalMax: 100 }], volatile: true, identifierName: \"reading\", packFormat: \"u8.8\" }, { kind: \"ro\", name: \"oxygen_error\", identifier: 262, description: \"The estimated error on the reported sensor data.\", fields: [{ name: \"_\", unit: \"%\", shift: 8, type: \"u8.8\", storage: 2 }], volatile: true, optional: true, identifierName: \"reading_error\", packFormat: \"u8.8\" }], tags: [\"8bit\"], group: \"Biometric\" }, { name: \"Rain gauge\", status: \"rc\", shortId: \"raingauge\", camelName: \"rainGauge\", shortName: \"rainGauge\", extends: [\"_base\", \"_sensor\"], notes: { short: \"Measures the amount of liquid precipitation over an area in a predefined period of time.\" }, classIdentifier: 326323349, enums: {}, constants: {}, packets: [{ kind: \"report\", name: \"command_not_implemented\", identifier: 3, description: \"This report may be emitted by a server in response to a command (action or register operation)\\nthat it does not understand.\\nThe `service_command` and `packet_crc` fields are copied from the command packet that was unhandled.\\nNote that it's possible to get an ACK, followed by such an error report.\", fields: [{ name: \"service_command\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"packet_crc\", type: \"u16\", storage: 2, isSimpleType: true }], identifierName: \"command_not_implemented\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"const\", name: \"instance_name\", identifier: 265, description: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\", fields: [{ name: \"_\", type: \"string\", storage: 0 }], optional: true, identifierName: \"instance_name\", packFormat: \"s\", derived: \"_base\" }, { kind: \"ro\", name: \"status_code\", identifier: 259, description: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"event\", name: \"status_code_changed\", identifier: 4, description: \"Notifies that the status code of the service changed.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code_changed\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"rw\", name: \"streaming_samples\", identifier: 3, description: \"Asks device to stream a given number of samples\\n(clients will typically write `255` to this register every second or so, while streaming is required).\", fields: [{ name: \"_\", unit: \"#\", type: \"u8\", storage: 1, isSimpleType: true }], internal: true, identifierName: \"streaming_samples\", packFormat: \"u8\", derived: \"_sensor\" }, { kind: \"rw\", name: \"streaming_interval\", identifier: 4, description: \"Period between packets of data when streaming in milliseconds.\", fields: [{ name: \"_\", unit: \"ms\", type: \"u32\", storage: 4, isSimpleType: true, defaultValue: 100, typicalMin: 1, typicalMax: 6e4 }], identifierName: \"streaming_interval\", packFormat: \"u32\", derived: \"_sensor\" }, { kind: \"const\", name: \"streaming_preferred_interval\", identifier: 258, description: \"Preferred default streaming interval for sensor in milliseconds.\", fields: [{ name: \"_\", unit: \"ms\", type: \"u32\", storage: 4, isSimpleType: true }], internal: true, optional: true, identifierName: \"streaming_preferred_interval\", packFormat: \"u32\", derived: \"_sensor\" }, { kind: \"ro\", name: \"precipitation\", identifier: 257, description: \"Total precipitation recorded so far.\", fields: [{ name: \"_\", unit: \"mm\", shift: 16, type: \"u16.16\", storage: 4 }], volatile: true, identifierName: \"reading\", preferredInterval: 6e4, packFormat: \"u16.16\" }, { kind: \"const\", name: \"precipitation_precision\", identifier: 264, description: \"Typically the amount of rain needed for tipping the bucket.\", fields: [{ name: \"_\", unit: \"mm\", shift: 16, type: \"u16.16\", storage: 4 }], optional: true, identifierName: \"reading_resolution\", packFormat: \"u16.16\" }], tags: [\"8bit\"], group: \"Environment\" }, { name: \"Real time clock\", status: \"rc\", shortId: \"realtimeclock\", camelName: \"realTimeClock\", shortName: \"realTimeClock\", extends: [\"_base\", \"_sensor\"], notes: { short: \"Real time clock to support collecting data with precise time stamps.\" }, classIdentifier: 445323816, enums: { Variant: { name: \"Variant\", storage: 1, members: { Computer: 1, Crystal: 2, Cuckoo: 3 } } }, constants: {}, packets: [{ kind: \"report\", name: \"command_not_implemented\", identifier: 3, description: \"This report may be emitted by a server in response to a command (action or register operation)\\nthat it does not understand.\\nThe `service_command` and `packet_crc` fields are copied from the command packet that was unhandled.\\nNote that it's possible to get an ACK, followed by such an error report.\", fields: [{ name: \"service_command\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"packet_crc\", type: \"u16\", storage: 2, isSimpleType: true }], identifierName: \"command_not_implemented\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"const\", name: \"instance_name\", identifier: 265, description: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\", fields: [{ name: \"_\", type: \"string\", storage: 0 }], optional: true, identifierName: \"instance_name\", packFormat: \"s\", derived: \"_base\" }, { kind: \"ro\", name: \"status_code\", identifier: 259, description: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"event\", name: \"status_code_changed\", identifier: 4, description: \"Notifies that the status code of the service changed.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code_changed\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"rw\", name: \"streaming_samples\", identifier: 3, description: \"Asks device to stream a given number of samples\\n(clients will typically write `255` to this register every second or so, while streaming is required).\", fields: [{ name: \"_\", unit: \"#\", type: \"u8\", storage: 1, isSimpleType: true }], internal: true, identifierName: \"streaming_samples\", packFormat: \"u8\", derived: \"_sensor\" }, { kind: \"rw\", name: \"streaming_interval\", identifier: 4, description: \"Period between packets of data when streaming in milliseconds.\", fields: [{ name: \"_\", unit: \"ms\", type: \"u32\", storage: 4, isSimpleType: true, defaultValue: 100, typicalMin: 1, typicalMax: 6e4 }], identifierName: \"streaming_interval\", packFormat: \"u32\", derived: \"_sensor\" }, { kind: \"const\", name: \"streaming_preferred_interval\", identifier: 258, description: \"Preferred default streaming interval for sensor in milliseconds.\", fields: [{ name: \"_\", unit: \"ms\", type: \"u32\", storage: 4, isSimpleType: true }], internal: true, optional: true, identifierName: \"streaming_preferred_interval\", packFormat: \"u32\", derived: \"_sensor\" }, { kind: \"ro\", name: \"local_time\", identifier: 257, description: \"Current time in 24h representation.\\n\\n-   `day_of_month` is day of the month, starting at `1`\\n-   `day_of_week` is day of the week, starting at `1` as monday. Default streaming period is 1 second.\", fields: [{ name: \"year\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"month\", type: \"u8\", storage: 1, isSimpleType: true, absoluteMin: 1, absoluteMax: 12 }, { name: \"day_of_month\", type: \"u8\", storage: 1, isSimpleType: true, absoluteMin: 1, absoluteMax: 31 }, { name: \"day_of_week\", type: \"u8\", storage: 1, isSimpleType: true, absoluteMin: 1, absoluteMax: 7 }, { name: \"hour\", type: \"u8\", storage: 1, isSimpleType: true, absoluteMin: 0, absoluteMax: 23 }, { name: \"min\", type: \"u8\", storage: 1, isSimpleType: true, absoluteMin: 0, absoluteMax: 59 }, { name: \"sec\", type: \"u8\", storage: 1, isSimpleType: true, absoluteMin: 0, absoluteMax: 60 }], volatile: true, identifierName: \"reading\", preferredInterval: 1e3, packFormat: \"u16 u8 u8 u8 u8 u8 u8\" }, { kind: \"ro\", name: \"drift\", identifier: 384, description: \"Time drift since the last call to the `set_time` command.\", fields: [{ name: \"_\", unit: \"s\", shift: 16, type: \"u16.16\", storage: 4 }], volatile: true, optional: true, packFormat: \"u16.16\" }, { kind: \"const\", name: \"precision\", identifier: 385, description: \"Error on the clock, in parts per million of seconds.\", fields: [{ name: \"_\", unit: \"ppm\", shift: 16, type: \"u16.16\", storage: 4 }], optional: true, packFormat: \"u16.16\" }, { kind: \"const\", name: \"variant\", identifier: 263, description: \"The type of physical clock used by the sensor.\", fields: [{ name: \"_\", type: \"Variant\", storage: 1 }], optional: true, identifierName: \"variant\", packFormat: \"u8\" }, { kind: \"command\", name: \"set_time\", identifier: 128, description: \"Sets the current time and resets the error.\", fields: [{ name: \"year\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"month\", type: \"u8\", storage: 1, isSimpleType: true, absoluteMin: 1, absoluteMax: 12 }, { name: \"day_of_month\", type: \"u8\", storage: 1, isSimpleType: true, absoluteMin: 1, absoluteMax: 31 }, { name: \"day_of_week\", type: \"u8\", storage: 1, isSimpleType: true, absoluteMin: 1, absoluteMax: 7 }, { name: \"hour\", type: \"u8\", storage: 1, isSimpleType: true, absoluteMin: 0, absoluteMax: 23 }, { name: \"min\", type: \"u8\", storage: 1, isSimpleType: true, absoluteMin: 0, absoluteMax: 59 }, { name: \"sec\", type: \"u8\", storage: 1, isSimpleType: true, absoluteMin: 0, absoluteMax: 60 }], packFormat: \"u16 u8 u8 u8 u8 u8 u8\" }], tags: [\"8bit\"] }, { name: \"Reflected light\", status: \"rc\", shortId: \"reflectedlight\", camelName: \"reflectedLight\", shortName: \"reflectedLight\", extends: [\"_base\", \"_sensor\"], notes: { short: \"A sensor that detects light and dark surfaces, commonly used for line following robots.\" }, classIdentifier: 309087410, enums: { Variant: { name: \"Variant\", storage: 1, members: { InfraredDigital: 1, InfraredAnalog: 2 } } }, constants: {}, packets: [{ kind: \"report\", name: \"command_not_implemented\", identifier: 3, description: \"This report may be emitted by a server in response to a command (action or register operation)\\nthat it does not understand.\\nThe `service_command` and `packet_crc` fields are copied from the command packet that was unhandled.\\nNote that it's possible to get an ACK, followed by such an error report.\", fields: [{ name: \"service_command\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"packet_crc\", type: \"u16\", storage: 2, isSimpleType: true }], identifierName: \"command_not_implemented\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"const\", name: \"instance_name\", identifier: 265, description: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\", fields: [{ name: \"_\", type: \"string\", storage: 0 }], optional: true, identifierName: \"instance_name\", packFormat: \"s\", derived: \"_base\" }, { kind: \"ro\", name: \"status_code\", identifier: 259, description: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"event\", name: \"status_code_changed\", identifier: 4, description: \"Notifies that the status code of the service changed.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code_changed\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"rw\", name: \"streaming_samples\", identifier: 3, description: \"Asks device to stream a given number of samples\\n(clients will typically write `255` to this register every second or so, while streaming is required).\", fields: [{ name: \"_\", unit: \"#\", type: \"u8\", storage: 1, isSimpleType: true }], internal: true, identifierName: \"streaming_samples\", packFormat: \"u8\", derived: \"_sensor\" }, { kind: \"rw\", name: \"streaming_interval\", identifier: 4, description: \"Period between packets of data when streaming in milliseconds.\", fields: [{ name: \"_\", unit: \"ms\", type: \"u32\", storage: 4, isSimpleType: true, defaultValue: 100, typicalMin: 1, typicalMax: 6e4 }], identifierName: \"streaming_interval\", packFormat: \"u32\", derived: \"_sensor\" }, { kind: \"const\", name: \"streaming_preferred_interval\", identifier: 258, description: \"Preferred default streaming interval for sensor in milliseconds.\", fields: [{ name: \"_\", unit: \"ms\", type: \"u32\", storage: 4, isSimpleType: true }], internal: true, optional: true, identifierName: \"streaming_preferred_interval\", packFormat: \"u32\", derived: \"_sensor\" }, { kind: \"ro\", name: \"brightness\", identifier: 257, description: \"Reports the reflected brightness. It may be a digital value or, for some sensor, analog value.\", fields: [{ name: \"_\", unit: \"/\", shift: 16, type: \"u0.16\", storage: 2 }], volatile: true, identifierName: \"reading\", packFormat: \"u0.16\" }, { kind: \"const\", name: \"variant\", identifier: 263, description: \"Type of physical sensor used\", fields: [{ name: \"_\", type: \"Variant\", storage: 1 }], optional: true, identifierName: \"variant\", packFormat: \"u8\" }], tags: [\"8bit\"], group: \"Environment\" }, { name: \"Relay\", status: \"stable\", shortId: \"relay\", camelName: \"relay\", shortName: \"relay\", extends: [\"_base\"], notes: { short: \"A switching relay.\\n\\nThe contacts should be labelled `NO` (normally open), `COM` (common), and `NC` (normally closed).\\nWhen relay is energized it connects `NO` and `COM`.\\nWhen relay is not energized it connects `NC` and `COM`.\\nSome relays may be missing `NO` or `NC` contacts.\\nWhen relay module is not powered, or is in bootloader mode, it is not energized (connects `NC` and `COM`).\" }, classIdentifier: 406840918, enums: { Variant: { name: \"Variant\", storage: 1, members: { Electromechanical: 1, SolidState: 2, Reed: 3 } } }, constants: {}, packets: [{ kind: \"report\", name: \"command_not_implemented\", identifier: 3, description: \"This report may be emitted by a server in response to a command (action or register operation)\\nthat it does not understand.\\nThe `service_command` and `packet_crc` fields are copied from the command packet that was unhandled.\\nNote that it's possible to get an ACK, followed by such an error report.\", fields: [{ name: \"service_command\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"packet_crc\", type: \"u16\", storage: 2, isSimpleType: true }], identifierName: \"command_not_implemented\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"const\", name: \"instance_name\", identifier: 265, description: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\", fields: [{ name: \"_\", type: \"string\", storage: 0 }], optional: true, identifierName: \"instance_name\", packFormat: \"s\", derived: \"_base\" }, { kind: \"ro\", name: \"status_code\", identifier: 259, description: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"event\", name: \"status_code_changed\", identifier: 4, description: \"Notifies that the status code of the service changed.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code_changed\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"rw\", name: \"active\", identifier: 1, description: \"Indicates whether the relay circuit is currently energized or not.\", fields: [{ name: \"_\", type: \"bool\", storage: 1 }], identifierName: \"intensity\", packFormat: \"u8\" }, { kind: \"const\", name: \"variant\", identifier: 263, description: \"Describes the type of relay used.\", fields: [{ name: \"_\", type: \"Variant\", storage: 1 }], optional: true, identifierName: \"variant\", packFormat: \"u8\" }, { kind: \"const\", name: \"max_switching_current\", identifier: 384, description: \"Maximum switching current for a resistive load.\", fields: [{ name: \"_\", unit: \"mA\", type: \"u32\", storage: 4, isSimpleType: true }], optional: true, packFormat: \"u32\" }], tags: [\"8bit\"] }, { name: \"Random Number Generator\", status: \"rc\", shortId: \"rng\", camelName: \"rng\", shortName: \"rng\", extends: [\"_base\"], notes: { short: \"Generates random numbers using entropy sourced from physical processes.\\n\\nThis typically uses a cryptographical pseudo-random number generator (for example [Fortuna](<https://en.wikipedia.org/wiki/Fortuna_(PRNG)>)),\\nwhich is periodically re-seeded with entropy coming from some hardware source.\" }, classIdentifier: 394916002, enums: { Variant: { name: \"Variant\", storage: 1, members: { Quantum: 1, ADCNoise: 2, WebCrypto: 3 } } }, constants: {}, packets: [{ kind: \"report\", name: \"command_not_implemented\", identifier: 3, description: \"This report may be emitted by a server in response to a command (action or register operation)\\nthat it does not understand.\\nThe `service_command` and `packet_crc` fields are copied from the command packet that was unhandled.\\nNote that it's possible to get an ACK, followed by such an error report.\", fields: [{ name: \"service_command\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"packet_crc\", type: \"u16\", storage: 2, isSimpleType: true }], identifierName: \"command_not_implemented\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"const\", name: \"instance_name\", identifier: 265, description: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\", fields: [{ name: \"_\", type: \"string\", storage: 0 }], optional: true, identifierName: \"instance_name\", packFormat: \"s\", derived: \"_base\" }, { kind: \"ro\", name: \"status_code\", identifier: 259, description: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"event\", name: \"status_code_changed\", identifier: 4, description: \"Notifies that the status code of the service changed.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code_changed\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"ro\", name: \"random\", identifier: 384, description: \"A register that returns a 64 bytes random buffer on every request.\\nThis never blocks for a long time. If you need additional random bytes, keep querying the register.\", fields: [{ name: \"_\", type: \"bytes\", storage: 0, isSimpleType: true }], volatile: true, packFormat: \"b\" }, { kind: \"const\", name: \"variant\", identifier: 263, description: \"The type of algorithm/technique used to generate the number.\\n`Quantum` refers to dedicated hardware device generating random noise due to quantum effects.\\n`ADCNoise` is the noise from quick readings of analog-digital converter, which reads temperature of the MCU or some floating pin.\\n`WebCrypto` refers is used in simulators, where the source of randomness comes from an advanced operating system.\", fields: [{ name: \"_\", type: \"Variant\", storage: 1 }], optional: true, identifierName: \"variant\", packFormat: \"u8\" }], tags: [] }, { name: \"Role Manager\", status: \"experimental\", shortId: \"rolemanager\", camelName: \"roleManager\", shortName: \"roleManager\", extends: [\"_base\"], notes: { short: \"Assign roles to services on the Jacdac bus.\", long: \"## Role allocation\\n\\nInternally, the role manager stores a mapping from role name to `(device_id, service_idx)`.\\nUsers refer to services by using role names (eg., they instantiate an accelerometer client with a given role name).\\nEach client has a role, and roles are unique to clients\\n(ie., one should not have both a gyro and accelerometer service with role `left_leg`).\\n\\nThe simplest recommended automatic role assignment algorithm is as follows:\\n\\n```text\\nroles.sort(strcmp() on UTF-8 representation of role name)\\ndevices.sort(by device identifier (lexicographic on 8 byte string))\\nfor every role\\n  if role is not assigned\\n    for every device\\n      for every service on device\\n        if serviceClass matches role\\n          if service is not assigned to any role\\n            assign service to role\\n```\\n\\nDue to sorting, role names sharing a prefix will tend to be co-located on the single device.\\nFor example, one can have roles `left_leg_acc`, `left_leg_gyro`, `right_leg_acc`, `right_leg_gyro`,\\nand assuming combined gyro+accelerometer sensors, the pairs will tend to be allocated to a single leg,\\nhowever the legs may be reversed.\\nIn such a case the user can swap the physical sensors (note that left leg will always be assigned to\\nsensor with smaller device identifier).\\nAlternatively, the user can manually modify assignment using `set_role` command.\" }, classIdentifier: 508264038, enums: {}, constants: {}, packets: [{ kind: \"report\", name: \"command_not_implemented\", identifier: 3, description: \"This report may be emitted by a server in response to a command (action or register operation)\\nthat it does not understand.\\nThe `service_command` and `packet_crc` fields are copied from the command packet that was unhandled.\\nNote that it's possible to get an ACK, followed by such an error report.\", fields: [{ name: \"service_command\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"packet_crc\", type: \"u16\", storage: 2, isSimpleType: true }], identifierName: \"command_not_implemented\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"const\", name: \"instance_name\", identifier: 265, description: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\", fields: [{ name: \"_\", type: \"string\", storage: 0 }], optional: true, identifierName: \"instance_name\", packFormat: \"s\", derived: \"_base\" }, { kind: \"ro\", name: \"status_code\", identifier: 259, description: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"event\", name: \"status_code_changed\", identifier: 4, description: \"Notifies that the status code of the service changed.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code_changed\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"rw\", name: \"auto_bind\", identifier: 128, description: 'Normally, if some roles are unfilled, and there are idle services that can fulfill them,\\nthe brain device will assign roles (bind) automatically.\\nSuch automatic assignment happens every second or so, and is trying to be smart about\\nco-locating roles that share \"host\" (part before first slash),\\nas well as reasonably stable assignments.\\nOnce user start assigning roles manually using this service, auto-binding should be disabled to avoid confusion.', fields: [{ name: \"_\", type: \"bool\", storage: 1, defaultValue: 1 }], packFormat: \"u8\" }, { kind: \"ro\", name: \"all_roles_allocated\", identifier: 385, description: \"Indicates if all required roles have been allocated to devices.\", fields: [{ name: \"_\", type: \"bool\", storage: 1 }], packFormat: \"u8\" }, { kind: \"command\", name: \"set_role\", identifier: 129, description: \"Set role. Can set to empty to remove role binding.\", fields: [{ name: \"device_id\", type: \"devid\", storage: 8 }, { name: \"service_idx\", type: \"u8\", storage: 1, isSimpleType: true }, { name: \"role\", type: \"string\", storage: 0 }], packFormat: \"b[8] u8 s\" }, { kind: \"command\", name: \"clear_all_roles\", identifier: 132, description: \"Remove all role bindings.\", fields: [] }, { kind: \"command\", name: \"list_roles\", identifier: 131, description: \"List all roles and bindings required by the current program. `device_id` and `service_idx` are `0` if role is unbound.\", fields: [{ name: \"roles\", type: \"pipe\", storage: 12 }], pipeType: \"list_roles\", packFormat: \"b[12]\" }, { kind: \"pipe_report\", name: \"roles\", identifier: 0, description: \"List all roles and bindings required by the current program. `device_id` and `service_idx` are `0` if role is unbound.\", fields: [{ name: \"device_id\", type: \"devid\", storage: 8 }, { name: \"service_class\", type: \"u32\", storage: 4, isSimpleType: true }, { name: \"service_idx\", type: \"u8\", storage: 1, isSimpleType: true }, { name: \"role\", type: \"string\", storage: 0 }], pipeType: \"list_roles\", packFormat: \"b[8] u32 u8 s\" }, { kind: \"event\", name: \"change\", identifier: 3, description: \"Notifies that role bindings have changed.\", fields: [], identifierName: \"change\" }], tags: [\"infrastructure\"] }, { name: \"Rotary encoder\", status: \"rc\", shortId: \"rotaryencoder\", camelName: \"rotaryEncoder\", shortName: \"rotaryEncoder\", extends: [\"_base\", \"_sensor\"], notes: { short: \"An incremental rotary encoder - converts angular motion of a shaft to digital signal.\" }, classIdentifier: 284830153, enums: {}, constants: {}, packets: [{ kind: \"report\", name: \"command_not_implemented\", identifier: 3, description: \"This report may be emitted by a server in response to a command (action or register operation)\\nthat it does not understand.\\nThe `service_command` and `packet_crc` fields are copied from the command packet that was unhandled.\\nNote that it's possible to get an ACK, followed by such an error report.\", fields: [{ name: \"service_command\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"packet_crc\", type: \"u16\", storage: 2, isSimpleType: true }], identifierName: \"command_not_implemented\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"const\", name: \"instance_name\", identifier: 265, description: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\", fields: [{ name: \"_\", type: \"string\", storage: 0 }], optional: true, identifierName: \"instance_name\", packFormat: \"s\", derived: \"_base\" }, { kind: \"ro\", name: \"status_code\", identifier: 259, description: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"event\", name: \"status_code_changed\", identifier: 4, description: \"Notifies that the status code of the service changed.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code_changed\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"rw\", name: \"streaming_samples\", identifier: 3, description: \"Asks device to stream a given number of samples\\n(clients will typically write `255` to this register every second or so, while streaming is required).\", fields: [{ name: \"_\", unit: \"#\", type: \"u8\", storage: 1, isSimpleType: true }], internal: true, identifierName: \"streaming_samples\", packFormat: \"u8\", derived: \"_sensor\" }, { kind: \"rw\", name: \"streaming_interval\", identifier: 4, description: \"Period between packets of data when streaming in milliseconds.\", fields: [{ name: \"_\", unit: \"ms\", type: \"u32\", storage: 4, isSimpleType: true, defaultValue: 100, typicalMin: 1, typicalMax: 6e4 }], identifierName: \"streaming_interval\", packFormat: \"u32\", derived: \"_sensor\" }, { kind: \"const\", name: \"streaming_preferred_interval\", identifier: 258, description: \"Preferred default streaming interval for sensor in milliseconds.\", fields: [{ name: \"_\", unit: \"ms\", type: \"u32\", storage: 4, isSimpleType: true }], internal: true, optional: true, identifierName: \"streaming_preferred_interval\", packFormat: \"u32\", derived: \"_sensor\" }, { kind: \"ro\", name: \"position\", identifier: 257, description: 'Upon device reset starts at `0` (regardless of the shaft position).\\nIncreases by `1` for a clockwise \"click\", by `-1` for counter-clockwise.', fields: [{ name: \"_\", unit: \"#\", type: \"i32\", storage: -4, isSimpleType: true }], volatile: true, identifierName: \"reading\", packFormat: \"i32\" }, { kind: \"const\", name: \"clicks_per_turn\", identifier: 384, description: \"This specifies by how much `position` changes when the crank does 360 degree turn. Typically 12 or 24.\", fields: [{ name: \"_\", unit: \"#\", type: \"u16\", storage: 2, isSimpleType: true }], packFormat: \"u16\" }, { kind: \"const\", name: \"clicker\", identifier: 385, description: \"The encoder is combined with a clicker. If this is the case, the clicker button service\\nshould follow this service in the service list of the device.\", fields: [{ name: \"_\", type: \"bool\", storage: 1 }], optional: true, packFormat: \"u8\" }], tags: [\"C\", \"8bit\"], group: \"Slider\" }, { name: \"Rover\", status: \"experimental\", shortId: \"rover\", camelName: \"rover\", shortName: \"rover\", extends: [\"_base\", \"_sensor\"], notes: { short: \"A roving robot.\" }, classIdentifier: 435474539, enums: {}, constants: {}, packets: [{ kind: \"report\", name: \"command_not_implemented\", identifier: 3, description: \"This report may be emitted by a server in response to a command (action or register operation)\\nthat it does not understand.\\nThe `service_command` and `packet_crc` fields are copied from the command packet that was unhandled.\\nNote that it's possible to get an ACK, followed by such an error report.\", fields: [{ name: \"service_command\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"packet_crc\", type: \"u16\", storage: 2, isSimpleType: true }], identifierName: \"command_not_implemented\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"const\", name: \"instance_name\", identifier: 265, description: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\", fields: [{ name: \"_\", type: \"string\", storage: 0 }], optional: true, identifierName: \"instance_name\", packFormat: \"s\", derived: \"_base\" }, { kind: \"ro\", name: \"status_code\", identifier: 259, description: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"event\", name: \"status_code_changed\", identifier: 4, description: \"Notifies that the status code of the service changed.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code_changed\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"rw\", name: \"streaming_samples\", identifier: 3, description: \"Asks device to stream a given number of samples\\n(clients will typically write `255` to this register every second or so, while streaming is required).\", fields: [{ name: \"_\", unit: \"#\", type: \"u8\", storage: 1, isSimpleType: true }], internal: true, identifierName: \"streaming_samples\", packFormat: \"u8\", derived: \"_sensor\" }, { kind: \"rw\", name: \"streaming_interval\", identifier: 4, description: \"Period between packets of data when streaming in milliseconds.\", fields: [{ name: \"_\", unit: \"ms\", type: \"u32\", storage: 4, isSimpleType: true, defaultValue: 100, typicalMin: 1, typicalMax: 6e4 }], identifierName: \"streaming_interval\", packFormat: \"u32\", derived: \"_sensor\" }, { kind: \"const\", name: \"streaming_preferred_interval\", identifier: 258, description: \"Preferred default streaming interval for sensor in milliseconds.\", fields: [{ name: \"_\", unit: \"ms\", type: \"u32\", storage: 4, isSimpleType: true }], internal: true, optional: true, identifierName: \"streaming_preferred_interval\", packFormat: \"u32\", derived: \"_sensor\" }, { kind: \"ro\", name: \"kinematics\", identifier: 257, description: \"The current position and orientation of the robot.\", fields: [{ name: \"x\", unit: \"cm\", shift: 16, type: \"i16.16\", storage: -4 }, { name: \"y\", unit: \"cm\", shift: 16, type: \"i16.16\", storage: -4 }, { name: \"vx\", unit: \"cm/s\", shift: 16, type: \"i16.16\", storage: -4 }, { name: \"vy\", unit: \"cm/s\", shift: 16, type: \"i16.16\", storage: -4 }, { name: \"heading\", unit: \"\\xB0\", shift: 16, type: \"i16.16\", storage: -4 }], volatile: true, identifierName: \"reading\", packFormat: \"i16.16 i16.16 i16.16 i16.16 i16.16\" }], tags: [] }, { name: \"Sensor Aggregator\", status: \"experimental\", shortId: \"sensoraggregator\", camelName: \"sensorAggregator\", shortName: \"sensorAggregator\", extends: [\"_base\"], notes: { short: \"Aggregate data from multiple sensors into a single stream\\n(often used as input to machine learning models on the same device, see model runner service).\" }, classIdentifier: 496034245, enums: { SampleType: { name: \"SampleType\", storage: 1, members: { U8: 8, I8: 136, U16: 16, I16: 144, U32: 32, I32: 160 } } }, constants: {}, packets: [{ kind: \"report\", name: \"command_not_implemented\", identifier: 3, description: \"This report may be emitted by a server in response to a command (action or register operation)\\nthat it does not understand.\\nThe `service_command` and `packet_crc` fields are copied from the command packet that was unhandled.\\nNote that it's possible to get an ACK, followed by such an error report.\", fields: [{ name: \"service_command\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"packet_crc\", type: \"u16\", storage: 2, isSimpleType: true }], identifierName: \"command_not_implemented\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"const\", name: \"instance_name\", identifier: 265, description: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\", fields: [{ name: \"_\", type: \"string\", storage: 0 }], optional: true, identifierName: \"instance_name\", packFormat: \"s\", derived: \"_base\" }, { kind: \"ro\", name: \"status_code\", identifier: 259, description: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"event\", name: \"status_code_changed\", identifier: 4, description: \"Notifies that the status code of the service changed.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code_changed\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"rw\", name: \"inputs\", identifier: 128, description: \"Set automatic input collection.\\nThese settings are stored in flash.\", fields: [{ name: \"sampling_interval\", unit: \"ms\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"samples_in_window\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"reserved\", type: \"u32\", storage: 4, isSimpleType: true }, { name: \"device_id\", type: \"devid\", storage: 8, startRepeats: true }, { name: \"service_class\", type: \"u32\", storage: 4, isSimpleType: true }, { name: \"service_num\", type: \"u8\", storage: 1, isSimpleType: true }, { name: \"sample_size\", unit: \"B\", type: \"u8\", storage: 1, isSimpleType: true }, { name: \"sample_type\", type: \"SampleType\", storage: 1 }, { name: \"sample_shift\", type: \"i8\", storage: -1, isSimpleType: true }], packFormat: \"u16 u16 u32 r: b[8] u32 u8 u8 u8 i8\" }, { kind: \"ro\", name: \"num_samples\", identifier: 384, description: \"Number of input samples collected so far.\", fields: [{ name: \"_\", type: \"u32\", storage: 4, isSimpleType: true }], packFormat: \"u32\" }, { kind: \"ro\", name: \"sample_size\", identifier: 385, description: \"Size of a single sample.\", fields: [{ name: \"_\", unit: \"B\", type: \"u8\", storage: 1, isSimpleType: true }], packFormat: \"u8\" }, { kind: \"rw\", name: \"streaming_samples\", identifier: 129, description: \"When set to `N`, will stream `N` samples as `current_sample` reading.\", fields: [{ name: \"_\", unit: \"#\", type: \"u32\", storage: 4, isSimpleType: true }], packFormat: \"u32\" }, { kind: \"ro\", name: \"current_sample\", identifier: 257, description: \"Last collected sample.\", fields: [{ name: \"_\", type: \"bytes\", storage: 0, isSimpleType: true }], volatile: true, identifierName: \"reading\", packFormat: \"b\" }], tags: [] }, { name: \"Servo\", status: \"rc\", shortId: \"servo\", camelName: \"servo\", shortName: \"servo\", extends: [\"_base\"], notes: { short: \"Servo is a small motor with arm that can be pointing at a specific direction.\\n\\nThe `min/max_angle/pulse` may be read-only if the servo is permanently affixed to its Jacdac controller.\" }, classIdentifier: 318542083, enums: {}, constants: {}, packets: [{ kind: \"report\", name: \"command_not_implemented\", identifier: 3, description: \"This report may be emitted by a server in response to a command (action or register operation)\\nthat it does not understand.\\nThe `service_command` and `packet_crc` fields are copied from the command packet that was unhandled.\\nNote that it's possible to get an ACK, followed by such an error report.\", fields: [{ name: \"service_command\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"packet_crc\", type: \"u16\", storage: 2, isSimpleType: true }], identifierName: \"command_not_implemented\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"const\", name: \"instance_name\", identifier: 265, description: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\", fields: [{ name: \"_\", type: \"string\", storage: 0 }], optional: true, identifierName: \"instance_name\", packFormat: \"s\", derived: \"_base\" }, { kind: \"ro\", name: \"status_code\", identifier: 259, description: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"event\", name: \"status_code_changed\", identifier: 4, description: \"Notifies that the status code of the service changed.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code_changed\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"rw\", name: \"angle\", identifier: 2, description: \"Specifies the angle of the arm (request).\", fields: [{ name: \"_\", unit: \"\\xB0\", shift: 16, type: \"i16.16\", storage: -4, typicalMin: -90, typicalMax: 90 }], identifierName: \"value\", packFormat: \"i16.16\" }, { kind: \"rw\", name: \"enabled\", identifier: 1, description: \"Turn the power to the servo on/off.\", fields: [{ name: \"_\", type: \"bool\", storage: 1 }], identifierName: \"intensity\", packFormat: \"u8\" }, { kind: \"rw\", name: \"offset\", identifier: 129, description: \"Correction applied to the angle to account for the servo arm drift.\", fields: [{ name: \"_\", unit: \"\\xB0\", shift: 16, type: \"i16.16\", storage: -4 }], packFormat: \"i16.16\" }, { kind: \"const\", name: \"min_angle\", identifier: 272, description: \"Lowest angle that can be set.\", fields: [{ name: \"_\", unit: \"\\xB0\", shift: 16, type: \"i16.16\", storage: -4, defaultValue: -90 }], identifierName: \"min_value\", packFormat: \"i16.16\" }, { kind: \"rw\", name: \"min_pulse\", identifier: 131, description: \"The length of pulse corresponding to lowest angle.\", fields: [{ name: \"_\", unit: \"us\", type: \"u16\", storage: 2, isSimpleType: true, defaultValue: 500 }], packFormat: \"u16\" }, { kind: \"const\", name: \"max_angle\", identifier: 273, description: \"Highest angle that can be set.\", fields: [{ name: \"_\", unit: \"\\xB0\", shift: 16, type: \"i16.16\", storage: -4, defaultValue: 90 }], identifierName: \"max_value\", packFormat: \"i16.16\" }, { kind: \"rw\", name: \"max_pulse\", identifier: 133, description: \"The length of pulse corresponding to highest angle.\", fields: [{ name: \"_\", unit: \"us\", type: \"u16\", storage: 2, isSimpleType: true, defaultValue: 2500 }], packFormat: \"u16\" }, { kind: \"const\", name: \"stall_torque\", identifier: 384, description: \"The servo motor will stop rotating when it is trying to move a ``stall_torque`` weight at a radial distance of ``1.0`` cm.\", fields: [{ name: \"_\", unit: \"kg/cm\", shift: 16, type: \"u16.16\", storage: 4 }], optional: true, packFormat: \"u16.16\" }, { kind: \"const\", name: \"response_speed\", identifier: 385, description: \"Time to move 60\\xB0.\", fields: [{ name: \"_\", unit: \"s/60\\xB0\", shift: 16, type: \"u16.16\", storage: 4 }], optional: true, packFormat: \"u16.16\" }, { kind: \"ro\", name: \"current_angle\", identifier: 257, description: \"The current physical position of the arm.\", fields: [{ name: \"_\", unit: \"\\xB0\", shift: 16, type: \"i16.16\", storage: -4 }], volatile: true, optional: true, identifierName: \"reading\", packFormat: \"i16.16\" }], tags: [\"C\"] }, { name: \"Settings\", status: \"experimental\", shortId: \"settings\", camelName: \"settings\", shortName: \"settings\", extends: [\"_base\"], notes: { short: \"Non-volatile key-value storage interface for storing settings.\", long: \"## Secrets\\n\\nEntries with keys starting with `$` are considered secret.\\nThey can be written normally, but they read as a single `0` byte,\\nunless they are empty, in which case the value returned is also empty.\\nThese are typically used by other services on the same device.\" }, classIdentifier: 285727818, enums: {}, constants: {}, packets: [{ kind: \"report\", name: \"command_not_implemented\", identifier: 3, description: \"This report may be emitted by a server in response to a command (action or register operation)\\nthat it does not understand.\\nThe `service_command` and `packet_crc` fields are copied from the command packet that was unhandled.\\nNote that it's possible to get an ACK, followed by such an error report.\", fields: [{ name: \"service_command\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"packet_crc\", type: \"u16\", storage: 2, isSimpleType: true }], identifierName: \"command_not_implemented\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"const\", name: \"instance_name\", identifier: 265, description: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\", fields: [{ name: \"_\", type: \"string\", storage: 0 }], optional: true, identifierName: \"instance_name\", packFormat: \"s\", derived: \"_base\" }, { kind: \"ro\", name: \"status_code\", identifier: 259, description: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"event\", name: \"status_code_changed\", identifier: 4, description: \"Notifies that the status code of the service changed.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code_changed\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"command\", name: \"get\", identifier: 128, description: \"Get the value of given setting. If no such entry exists, the value returned is empty.\", fields: [{ name: \"key\", type: \"string\", storage: 0 }], hasReport: true, packFormat: \"s\" }, { kind: \"report\", name: \"get\", identifier: 128, description: \"Get the value of given setting. If no such entry exists, the value returned is empty.\", fields: [{ name: \"key\", type: \"string0\", storage: 0 }, { name: \"value\", type: \"bytes\", storage: 0, isSimpleType: true }], secondary: true, packFormat: \"z b\" }, { kind: \"command\", name: \"set\", identifier: 129, description: \"Set the value of a given setting.\", fields: [{ name: \"key\", type: \"string0\", storage: 0 }, { name: \"value\", type: \"bytes\", storage: 0, isSimpleType: true }], restricted: true, packFormat: \"z b\" }, { kind: \"command\", name: \"delete\", identifier: 132, description: \"Delete a given setting.\", fields: [{ name: \"key\", type: \"string\", storage: 0 }], restricted: true, packFormat: \"s\" }, { kind: \"command\", name: \"list_keys\", identifier: 130, description: \"Return keys of all settings.\", fields: [{ name: \"results\", type: \"pipe\", storage: 12 }], pipeType: \"list_keys\", packFormat: \"b[12]\" }, { kind: \"pipe_report\", name: \"listed_key\", identifier: 0, description: \"Return keys of all settings.\", fields: [{ name: \"key\", type: \"string\", storage: 0 }], pipeType: \"list_keys\", packFormat: \"s\" }, { kind: \"command\", name: \"list\", identifier: 131, description: \"Return keys and values of all settings.\", fields: [{ name: \"results\", type: \"pipe\", storage: 12 }], pipeType: \"list\", packFormat: \"b[12]\" }, { kind: \"pipe_report\", name: \"listed_entry\", identifier: 0, description: \"Return keys and values of all settings.\", fields: [{ name: \"key\", type: \"string0\", storage: 0 }, { name: \"value\", type: \"bytes\", storage: 0, isSimpleType: true }], pipeType: \"list\", packFormat: \"z b\" }, { kind: \"command\", name: \"clear\", identifier: 133, description: \"Clears all keys.\", fields: [], restricted: true }, { kind: \"event\", name: \"change\", identifier: 3, description: \"Notifies that some setting have been modified.\", fields: [], identifierName: \"change\" }], tags: [] }, { name: \"7-segment display\", status: \"rc\", shortId: \"sevensegmentdisplay\", camelName: \"sevenSegmentDisplay\", shortName: \"sevenSegmentDisplay\", extends: [\"_base\"], notes: { short: \"A 7-segment numeric display, with one or more digits.\" }, classIdentifier: 425810167, enums: {}, constants: {}, packets: [{ kind: \"report\", name: \"command_not_implemented\", identifier: 3, description: \"This report may be emitted by a server in response to a command (action or register operation)\\nthat it does not understand.\\nThe `service_command` and `packet_crc` fields are copied from the command packet that was unhandled.\\nNote that it's possible to get an ACK, followed by such an error report.\", fields: [{ name: \"service_command\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"packet_crc\", type: \"u16\", storage: 2, isSimpleType: true }], identifierName: \"command_not_implemented\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"const\", name: \"instance_name\", identifier: 265, description: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\", fields: [{ name: \"_\", type: \"string\", storage: 0 }], optional: true, identifierName: \"instance_name\", packFormat: \"s\", derived: \"_base\" }, { kind: \"ro\", name: \"status_code\", identifier: 259, description: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"event\", name: \"status_code_changed\", identifier: 4, description: \"Notifies that the status code of the service changed.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code_changed\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"rw\", name: \"digits\", identifier: 2, description: \"Each byte encodes the display status of a digit using,\\nwhere bit 0 encodes segment `A`, bit 1 encodes segments `B`, ..., bit 6 encodes segments `G`, and bit 7 encodes the decimal point (if present).\\nIf incoming `digits` data is smaller than `digit_count`, the remaining digits will be cleared.\\nThus, sending an empty `digits` payload clears the screen.\\n\\n```text\\n - A -\\n G   B\\n |   |\\n - F -\\n |   |   -\\n E   C  |DP|\\n - D -   -\\n```\", fields: [{ name: \"_\", encoding: \"bitset\", type: \"bytes\", storage: 0, isSimpleType: true }], lowLevel: true, identifierName: \"value\", packFormat: \"b\" }, { kind: \"rw\", name: \"brightness\", identifier: 1, description: \"Controls the brightness of the LEDs. `0` means off.\", fields: [{ name: \"_\", unit: \"/\", shift: 16, type: \"u0.16\", storage: 2 }], identifierName: \"intensity\", packFormat: \"u0.16\" }, { kind: \"rw\", name: \"double_dots\", identifier: 128, description: \"Turn on or off the column LEDs (separating minutes from hours, etc.) in of the segment.\\nIf the column LEDs is not supported, the value remains false.\", fields: [{ name: \"_\", type: \"bool\", storage: 1 }], optional: true, packFormat: \"u8\" }, { kind: \"const\", name: \"digit_count\", identifier: 384, description: \"The number of digits available on the display.\", fields: [{ name: \"_\", type: \"u8\", storage: 1, isSimpleType: true }], packFormat: \"u8\" }, { kind: \"const\", name: \"decimal_point\", identifier: 385, description: \"True if decimal points are available (on all digits).\", fields: [{ name: \"_\", type: \"bool\", storage: 1 }], packFormat: \"u8\" }, { kind: \"command\", name: \"set_number\", identifier: 128, description: \"Shows the number on the screen using the decimal dot if available.\", fields: [{ name: \"value\", isFloat: true, type: \"f64\", storage: 8 }], client: true, packFormat: \"f64\" }, { kind: \"command\", name: \"set_text\", identifier: 129, description: \"Shows the text on the screen. The client may decide to scroll the text if too long.\", fields: [{ name: \"text\", type: \"string\", storage: 0 }], client: true, packFormat: \"s\" }], tags: [\"8bit\"], group: \"Display\" }, { name: \"Soil moisture\", status: \"stable\", shortId: \"soilmoisture\", camelName: \"soilMoisture\", shortName: \"soilMoisture\", extends: [\"_base\", \"_sensor\"], notes: { short: \"A soil moisture sensor.\" }, classIdentifier: 491430835, enums: { Variant: { name: \"Variant\", storage: 1, members: { Resistive: 1, Capacitive: 2 } } }, constants: {}, packets: [{ kind: \"report\", name: \"command_not_implemented\", identifier: 3, description: \"This report may be emitted by a server in response to a command (action or register operation)\\nthat it does not understand.\\nThe `service_command` and `packet_crc` fields are copied from the command packet that was unhandled.\\nNote that it's possible to get an ACK, followed by such an error report.\", fields: [{ name: \"service_command\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"packet_crc\", type: \"u16\", storage: 2, isSimpleType: true }], identifierName: \"command_not_implemented\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"const\", name: \"instance_name\", identifier: 265, description: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\", fields: [{ name: \"_\", type: \"string\", storage: 0 }], optional: true, identifierName: \"instance_name\", packFormat: \"s\", derived: \"_base\" }, { kind: \"ro\", name: \"status_code\", identifier: 259, description: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"event\", name: \"status_code_changed\", identifier: 4, description: \"Notifies that the status code of the service changed.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code_changed\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"rw\", name: \"streaming_samples\", identifier: 3, description: \"Asks device to stream a given number of samples\\n(clients will typically write `255` to this register every second or so, while streaming is required).\", fields: [{ name: \"_\", unit: \"#\", type: \"u8\", storage: 1, isSimpleType: true }], internal: true, identifierName: \"streaming_samples\", packFormat: \"u8\", derived: \"_sensor\" }, { kind: \"rw\", name: \"streaming_interval\", identifier: 4, description: \"Period between packets of data when streaming in milliseconds.\", fields: [{ name: \"_\", unit: \"ms\", type: \"u32\", storage: 4, isSimpleType: true, defaultValue: 100, typicalMin: 1, typicalMax: 6e4 }], identifierName: \"streaming_interval\", packFormat: \"u32\", derived: \"_sensor\" }, { kind: \"const\", name: \"streaming_preferred_interval\", identifier: 258, description: \"Preferred default streaming interval for sensor in milliseconds.\", fields: [{ name: \"_\", unit: \"ms\", type: \"u32\", storage: 4, isSimpleType: true }], internal: true, optional: true, identifierName: \"streaming_preferred_interval\", packFormat: \"u32\", derived: \"_sensor\" }, { kind: \"ro\", name: \"moisture\", identifier: 257, description: \"Indicates the wetness of the soil, from `dry` to `wet`.\", fields: [{ name: \"_\", unit: \"/\", shift: 16, type: \"u0.16\", storage: 2 }], volatile: true, identifierName: \"reading\", preferredInterval: 1e3, packFormat: \"u0.16\" }, { kind: \"ro\", name: \"moisture_error\", identifier: 262, description: \"The error on the moisture reading.\", fields: [{ name: \"_\", unit: \"/\", shift: 16, type: \"u0.16\", storage: 2 }], volatile: true, optional: true, identifierName: \"reading_error\", packFormat: \"u0.16\" }, { kind: \"const\", name: \"variant\", identifier: 263, description: \"Describe the type of physical sensor.\", fields: [{ name: \"_\", type: \"Variant\", storage: 1 }], optional: true, identifierName: \"variant\", packFormat: \"u8\" }], tags: [\"8bit\"], group: \"Environment\" }, { name: \"Solenoid\", status: \"rc\", shortId: \"solenoid\", camelName: \"solenoid\", shortName: \"solenoid\", extends: [\"_base\"], notes: { short: \"A push-pull solenoid is a type of relay that pulls a coil when activated.\" }, classIdentifier: 387392458, enums: { Variant: { name: \"Variant\", storage: 1, members: { PushPull: 1, Valve: 2, Latch: 3 } } }, constants: {}, packets: [{ kind: \"report\", name: \"command_not_implemented\", identifier: 3, description: \"This report may be emitted by a server in response to a command (action or register operation)\\nthat it does not understand.\\nThe `service_command` and `packet_crc` fields are copied from the command packet that was unhandled.\\nNote that it's possible to get an ACK, followed by such an error report.\", fields: [{ name: \"service_command\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"packet_crc\", type: \"u16\", storage: 2, isSimpleType: true }], identifierName: \"command_not_implemented\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"const\", name: \"instance_name\", identifier: 265, description: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\", fields: [{ name: \"_\", type: \"string\", storage: 0 }], optional: true, identifierName: \"instance_name\", packFormat: \"s\", derived: \"_base\" }, { kind: \"ro\", name: \"status_code\", identifier: 259, description: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"event\", name: \"status_code_changed\", identifier: 4, description: \"Notifies that the status code of the service changed.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code_changed\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"rw\", name: \"pulled\", identifier: 1, description: \"Indicates whether the solenoid is energized and pulled (on) or pushed (off).\", fields: [{ name: \"_\", type: \"bool\", storage: 1 }], identifierName: \"intensity\", packFormat: \"u8\" }, { kind: \"const\", name: \"variant\", identifier: 263, description: \"Describes the type of solenoid used.\", fields: [{ name: \"_\", type: \"Variant\", storage: 1 }], optional: true, identifierName: \"variant\", packFormat: \"u8\" }], tags: [\"8bit\"] }, { name: \"Sound level\", status: \"rc\", shortId: \"soundlevel\", camelName: \"soundLevel\", shortName: \"soundLevel\", extends: [\"_base\", \"_sensor\"], notes: { short: \"A sound level detector sensor, gives a relative indication of the sound level.\" }, classIdentifier: 346888797, enums: {}, constants: {}, packets: [{ kind: \"report\", name: \"command_not_implemented\", identifier: 3, description: \"This report may be emitted by a server in response to a command (action or register operation)\\nthat it does not understand.\\nThe `service_command` and `packet_crc` fields are copied from the command packet that was unhandled.\\nNote that it's possible to get an ACK, followed by such an error report.\", fields: [{ name: \"service_command\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"packet_crc\", type: \"u16\", storage: 2, isSimpleType: true }], identifierName: \"command_not_implemented\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"const\", name: \"instance_name\", identifier: 265, description: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\", fields: [{ name: \"_\", type: \"string\", storage: 0 }], optional: true, identifierName: \"instance_name\", packFormat: \"s\", derived: \"_base\" }, { kind: \"ro\", name: \"status_code\", identifier: 259, description: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"event\", name: \"status_code_changed\", identifier: 4, description: \"Notifies that the status code of the service changed.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code_changed\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"rw\", name: \"streaming_samples\", identifier: 3, description: \"Asks device to stream a given number of samples\\n(clients will typically write `255` to this register every second or so, while streaming is required).\", fields: [{ name: \"_\", unit: \"#\", type: \"u8\", storage: 1, isSimpleType: true }], internal: true, identifierName: \"streaming_samples\", packFormat: \"u8\", derived: \"_sensor\" }, { kind: \"rw\", name: \"streaming_interval\", identifier: 4, description: \"Period between packets of data when streaming in milliseconds.\", fields: [{ name: \"_\", unit: \"ms\", type: \"u32\", storage: 4, isSimpleType: true, defaultValue: 100, typicalMin: 1, typicalMax: 6e4 }], identifierName: \"streaming_interval\", packFormat: \"u32\", derived: \"_sensor\" }, { kind: \"const\", name: \"streaming_preferred_interval\", identifier: 258, description: \"Preferred default streaming interval for sensor in milliseconds.\", fields: [{ name: \"_\", unit: \"ms\", type: \"u32\", storage: 4, isSimpleType: true }], internal: true, optional: true, identifierName: \"streaming_preferred_interval\", packFormat: \"u32\", derived: \"_sensor\" }, { kind: \"ro\", name: \"sound_level\", identifier: 257, description: \"The sound level detected by the microphone\", fields: [{ name: \"_\", unit: \"/\", shift: 16, type: \"u0.16\", storage: 2 }], volatile: true, identifierName: \"reading\", packFormat: \"u0.16\" }, { kind: \"rw\", name: \"enabled\", identifier: 1, description: \"Turn on or off the microphone.\", fields: [{ name: \"_\", type: \"bool\", storage: 1 }], identifierName: \"intensity\", packFormat: \"u8\" }, { kind: \"rw\", name: \"loud_threshold\", identifier: 6, description: \"The sound level to trigger a loud event.\", fields: [{ name: \"_\", unit: \"/\", shift: 16, type: \"u0.16\", storage: 2 }], identifierName: \"active_threshold\", packFormat: \"u0.16\" }, { kind: \"rw\", name: \"quiet_threshold\", identifier: 5, description: \"The sound level to trigger a quiet event.\", fields: [{ name: \"_\", unit: \"/\", shift: 16, type: \"u0.16\", storage: 2 }], identifierName: \"inactive_threshold\", packFormat: \"u0.16\" }, { kind: \"event\", name: \"loud\", identifier: 1, description: \"Raised when a loud sound is detected\", fields: [], identifierName: \"active\" }, { kind: \"event\", name: \"quiet\", identifier: 2, description: \"Raised when a period of quietness is detected\", fields: [], identifierName: \"inactive\" }], tags: [\"8bit\"], group: \"Sound\" }, { name: \"Sound player\", status: \"rc\", shortId: \"soundplayer\", camelName: \"soundPlayer\", shortName: \"soundPlayer\", extends: [\"_base\"], notes: { short: \"A device that can play various sounds stored locally. This service is typically paired with a ``storage`` service for storing sounds.\" }, classIdentifier: 335795e3, enums: {}, constants: {}, packets: [{ kind: \"report\", name: \"command_not_implemented\", identifier: 3, description: \"This report may be emitted by a server in response to a command (action or register operation)\\nthat it does not understand.\\nThe `service_command` and `packet_crc` fields are copied from the command packet that was unhandled.\\nNote that it's possible to get an ACK, followed by such an error report.\", fields: [{ name: \"service_command\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"packet_crc\", type: \"u16\", storage: 2, isSimpleType: true }], identifierName: \"command_not_implemented\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"const\", name: \"instance_name\", identifier: 265, description: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\", fields: [{ name: \"_\", type: \"string\", storage: 0 }], optional: true, identifierName: \"instance_name\", packFormat: \"s\", derived: \"_base\" }, { kind: \"ro\", name: \"status_code\", identifier: 259, description: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"event\", name: \"status_code_changed\", identifier: 4, description: \"Notifies that the status code of the service changed.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code_changed\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"rw\", name: \"volume\", identifier: 1, description: \"Global volume of the output. ``0`` means completely off. This volume is mixed with each play volumes.\", fields: [{ name: \"_\", unit: \"/\", shift: 16, type: \"u0.16\", storage: 2 }], optional: true, identifierName: \"intensity\", packFormat: \"u0.16\" }, { kind: \"command\", name: \"play\", identifier: 128, description: \"Starts playing a sound.\", fields: [{ name: \"name\", type: \"string\", storage: 0 }], packFormat: \"s\" }, { kind: \"command\", name: \"cancel\", identifier: 129, description: \"Cancel any sound playing.\", fields: [] }, { kind: \"command\", name: \"list_sounds\", identifier: 130, description: \"Returns the list of sounds available to play.\", fields: [{ name: \"sounds_port\", type: \"pipe\", storage: 12 }], pipeType: \"list_sounds\", packFormat: \"b[12]\" }, { kind: \"pipe_report\", name: \"list_sounds_pipe\", identifier: 0, description: \"Returns the list of sounds available to play.\", fields: [{ name: \"duration\", unit: \"ms\", type: \"u32\", storage: 4, isSimpleType: true }, { name: \"name\", type: \"string\", storage: 0 }], pipeType: \"list_sounds\", packFormat: \"u32 s\" }], tags: [], group: \"Sound\" }, { name: \"Sound Recorder with Playback\", status: \"experimental\", shortId: \"soundrecorderwithplayback\", camelName: \"soundRecorderWithPlayback\", shortName: \"soundRecorderWithPlayback\", extends: [\"_base\"], notes: { short: \"A record and replay module. You can record a few seconds of audio and play it back.\" }, classIdentifier: 460504912, enums: { Status: { name: \"Status\", storage: 1, members: { Idle: 0, Recording: 1, Playing: 2 } } }, constants: {}, packets: [{ kind: \"report\", name: \"command_not_implemented\", identifier: 3, description: \"This report may be emitted by a server in response to a command (action or register operation)\\nthat it does not understand.\\nThe `service_command` and `packet_crc` fields are copied from the command packet that was unhandled.\\nNote that it's possible to get an ACK, followed by such an error report.\", fields: [{ name: \"service_command\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"packet_crc\", type: \"u16\", storage: 2, isSimpleType: true }], identifierName: \"command_not_implemented\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"const\", name: \"instance_name\", identifier: 265, description: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\", fields: [{ name: \"_\", type: \"string\", storage: 0 }], optional: true, identifierName: \"instance_name\", packFormat: \"s\", derived: \"_base\" }, { kind: \"ro\", name: \"status_code\", identifier: 259, description: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"event\", name: \"status_code_changed\", identifier: 4, description: \"Notifies that the status code of the service changed.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code_changed\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"command\", name: \"play\", identifier: 128, description: \"Replay recorded audio.\", fields: [] }, { kind: \"command\", name: \"record\", identifier: 129, description: \"Record audio for N milliseconds.\", fields: [{ name: \"duration\", unit: \"ms\", type: \"u16\", storage: 2, isSimpleType: true }], packFormat: \"u16\" }, { kind: \"command\", name: \"cancel\", identifier: 130, description: \"Cancel record, the `time` register will be updated by already cached data.\", fields: [] }, { kind: \"ro\", name: \"status\", identifier: 384, description: \"Indicate the current status\", fields: [{ name: \"_\", type: \"Status\", storage: 1 }], packFormat: \"u8\" }, { kind: \"ro\", name: \"time\", identifier: 385, description: \"Milliseconds of audio recorded.\", fields: [{ name: \"_\", unit: \"ms\", type: \"u16\", storage: 2, isSimpleType: true }], packFormat: \"u16\" }, { kind: \"rw\", name: \"volume\", identifier: 1, description: \"Playback volume control\", fields: [{ name: \"_\", unit: \"/\", shift: 8, type: \"u0.8\", storage: 1 }], optional: true, identifierName: \"intensity\", packFormat: \"u0.8\" }], tags: [\"8bit\", \"padauk\"], group: \"Sound\" }, { name: \"Sound Spectrum\", status: \"experimental\", shortId: \"soundspectrum\", camelName: \"soundSpectrum\", shortName: \"soundSpectrum\", extends: [\"_base\", \"_sensor\"], notes: { short: \"A microphone that analyzes the sound specturm\" }, classIdentifier: 360365086, enums: {}, constants: {}, packets: [{ kind: \"report\", name: \"command_not_implemented\", identifier: 3, description: \"This report may be emitted by a server in response to a command (action or register operation)\\nthat it does not understand.\\nThe `service_command` and `packet_crc` fields are copied from the command packet that was unhandled.\\nNote that it's possible to get an ACK, followed by such an error report.\", fields: [{ name: \"service_command\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"packet_crc\", type: \"u16\", storage: 2, isSimpleType: true }], identifierName: \"command_not_implemented\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"const\", name: \"instance_name\", identifier: 265, description: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\", fields: [{ name: \"_\", type: \"string\", storage: 0 }], optional: true, identifierName: \"instance_name\", packFormat: \"s\", derived: \"_base\" }, { kind: \"ro\", name: \"status_code\", identifier: 259, description: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"event\", name: \"status_code_changed\", identifier: 4, description: \"Notifies that the status code of the service changed.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code_changed\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"rw\", name: \"streaming_samples\", identifier: 3, description: \"Asks device to stream a given number of samples\\n(clients will typically write `255` to this register every second or so, while streaming is required).\", fields: [{ name: \"_\", unit: \"#\", type: \"u8\", storage: 1, isSimpleType: true }], internal: true, identifierName: \"streaming_samples\", packFormat: \"u8\", derived: \"_sensor\" }, { kind: \"rw\", name: \"streaming_interval\", identifier: 4, description: \"Period between packets of data when streaming in milliseconds.\", fields: [{ name: \"_\", unit: \"ms\", type: \"u32\", storage: 4, isSimpleType: true, defaultValue: 100, typicalMin: 1, typicalMax: 6e4 }], identifierName: \"streaming_interval\", packFormat: \"u32\", derived: \"_sensor\" }, { kind: \"const\", name: \"streaming_preferred_interval\", identifier: 258, description: \"Preferred default streaming interval for sensor in milliseconds.\", fields: [{ name: \"_\", unit: \"ms\", type: \"u32\", storage: 4, isSimpleType: true }], internal: true, optional: true, identifierName: \"streaming_preferred_interval\", packFormat: \"u32\", derived: \"_sensor\" }, { kind: \"ro\", name: \"frequency_bins\", identifier: 257, description: \"The computed frequency data.\", fields: [{ name: \"_\", type: \"bytes\", storage: 0, isSimpleType: true }], volatile: true, identifierName: \"reading\", packFormat: \"b\" }, { kind: \"rw\", name: \"enabled\", identifier: 1, description: \"Turns on/off the micropohone.\", fields: [{ name: \"_\", type: \"bool\", storage: 1 }], identifierName: \"intensity\", packFormat: \"u8\" }, { kind: \"rw\", name: \"fft_pow2_size\", identifier: 128, description: \"The power of 2 used as the size of the FFT to be used to determine the frequency domain.\", fields: [{ name: \"_\", type: \"u8\", storage: 1, isSimpleType: true, defaultValue: 5, absoluteMin: 2, absoluteMax: 7 }], packFormat: \"u8\" }, { kind: \"rw\", name: \"min_decibels\", identifier: 129, description: \"The minimum power value in the scaling range for the FFT analysis data\", fields: [{ name: \"_\", unit: \"dB\", type: \"i16\", storage: -2, isSimpleType: true }], packFormat: \"i16\" }, { kind: \"rw\", name: \"max_decibels\", identifier: 130, description: \"The maximum power value in the scaling range for the FFT analysis data\", fields: [{ name: \"_\", unit: \"dB\", type: \"i16\", storage: -2, isSimpleType: true }], packFormat: \"i16\" }, { kind: \"rw\", name: \"smoothing_time_constant\", identifier: 131, description: 'The averaging constant with the last analysis frame.\\nIf `0` is set, there is no averaging done, whereas a value of `1` means \"overlap the previous and current buffer quite a lot while computing the value\".', fields: [{ name: \"_\", unit: \"/\", shift: 8, type: \"u0.8\", storage: 1, defaultValue: 0.8 }], packFormat: \"u0.8\" }], tags: [], group: \"Sound\" }, { name: \"Speech synthesis\", status: \"rc\", shortId: \"speechsynthesis\", camelName: \"speechSynthesis\", shortName: \"speechSynthesis\", extends: [\"_base\"], notes: { short: \"A speech synthesizer\" }, classIdentifier: 302307733, enums: {}, constants: {}, packets: [{ kind: \"report\", name: \"command_not_implemented\", identifier: 3, description: \"This report may be emitted by a server in response to a command (action or register operation)\\nthat it does not understand.\\nThe `service_command` and `packet_crc` fields are copied from the command packet that was unhandled.\\nNote that it's possible to get an ACK, followed by such an error report.\", fields: [{ name: \"service_command\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"packet_crc\", type: \"u16\", storage: 2, isSimpleType: true }], identifierName: \"command_not_implemented\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"const\", name: \"instance_name\", identifier: 265, description: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\", fields: [{ name: \"_\", type: \"string\", storage: 0 }], optional: true, identifierName: \"instance_name\", packFormat: \"s\", derived: \"_base\" }, { kind: \"ro\", name: \"status_code\", identifier: 259, description: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"event\", name: \"status_code_changed\", identifier: 4, description: \"Notifies that the status code of the service changed.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code_changed\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"rw\", name: \"enabled\", identifier: 1, description: \"Determines if the speech engine is in a non-paused state.\", fields: [{ name: \"_\", type: \"bool\", storage: 1 }], identifierName: \"intensity\", packFormat: \"u8\" }, { kind: \"rw\", name: \"lang\", identifier: 128, description: \"Language used for utterances as defined in https://www.ietf.org/rfc/bcp/bcp47.txt.\", fields: [{ name: \"_\", type: \"string\", storage: 0 }], optional: true, packFormat: \"s\" }, { kind: \"rw\", name: \"volume\", identifier: 129, description: \"Volume for utterances.\", fields: [{ name: \"_\", unit: \"/\", shift: 8, type: \"u0.8\", storage: 1, defaultValue: 1 }], optional: true, packFormat: \"u0.8\" }, { kind: \"rw\", name: \"pitch\", identifier: 130, description: \"Pitch for utterances\", fields: [{ name: \"_\", shift: 16, type: \"u16.16\", storage: 4, defaultValue: 1, absoluteMax: 2, absoluteMin: 0 }], optional: true, packFormat: \"u16.16\" }, { kind: \"rw\", name: \"rate\", identifier: 131, description: \"Rate for utterances\", fields: [{ name: \"_\", shift: 16, type: \"u16.16\", storage: 4, defaultValue: 1, absoluteMin: 0.1, absoluteMax: 10 }], optional: true, packFormat: \"u16.16\" }, { kind: \"command\", name: \"speak\", identifier: 128, description: \"Adds an utterance to the utterance queue; it will be spoken when any other utterances queued before it have been spoken.\", fields: [{ name: \"text\", type: \"string\", storage: 0 }], unique: true, packFormat: \"s\" }, { kind: \"command\", name: \"cancel\", identifier: 129, description: \"Cancels current utterance and all utterances from the utterance queue.\", fields: [] }], tags: [] }, { name: \"Switch\", status: \"rc\", shortId: \"switch\", camelName: \"switch\", shortName: \"switch\", extends: [\"_base\", \"_sensor\"], notes: { short: \"A switch, which keeps its position.\" }, classIdentifier: 450008066, enums: { Variant: { name: \"Variant\", storage: 1, members: { Slide: 1, Tilt: 2, PushButton: 3, Tactile: 4, Toggle: 5, Proximity: 6, Magnetic: 7, FootButton: 8 } } }, constants: {}, packets: [{ kind: \"report\", name: \"command_not_implemented\", identifier: 3, description: \"This report may be emitted by a server in response to a command (action or register operation)\\nthat it does not understand.\\nThe `service_command` and `packet_crc` fields are copied from the command packet that was unhandled.\\nNote that it's possible to get an ACK, followed by such an error report.\", fields: [{ name: \"service_command\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"packet_crc\", type: \"u16\", storage: 2, isSimpleType: true }], identifierName: \"command_not_implemented\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"const\", name: \"instance_name\", identifier: 265, description: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\", fields: [{ name: \"_\", type: \"string\", storage: 0 }], optional: true, identifierName: \"instance_name\", packFormat: \"s\", derived: \"_base\" }, { kind: \"ro\", name: \"status_code\", identifier: 259, description: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"event\", name: \"status_code_changed\", identifier: 4, description: \"Notifies that the status code of the service changed.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code_changed\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"rw\", name: \"streaming_samples\", identifier: 3, description: \"Asks device to stream a given number of samples\\n(clients will typically write `255` to this register every second or so, while streaming is required).\", fields: [{ name: \"_\", unit: \"#\", type: \"u8\", storage: 1, isSimpleType: true }], internal: true, identifierName: \"streaming_samples\", packFormat: \"u8\", derived: \"_sensor\" }, { kind: \"rw\", name: \"streaming_interval\", identifier: 4, description: \"Period between packets of data when streaming in milliseconds.\", fields: [{ name: \"_\", unit: \"ms\", type: \"u32\", storage: 4, isSimpleType: true, defaultValue: 100, typicalMin: 1, typicalMax: 6e4 }], identifierName: \"streaming_interval\", packFormat: \"u32\", derived: \"_sensor\" }, { kind: \"const\", name: \"streaming_preferred_interval\", identifier: 258, description: \"Preferred default streaming interval for sensor in milliseconds.\", fields: [{ name: \"_\", unit: \"ms\", type: \"u32\", storage: 4, isSimpleType: true }], internal: true, optional: true, identifierName: \"streaming_preferred_interval\", packFormat: \"u32\", derived: \"_sensor\" }, { kind: \"ro\", name: \"active\", identifier: 257, description: \"Indicates whether the switch is currently active (on).\", fields: [{ name: \"_\", type: \"bool\", storage: 1 }], volatile: true, identifierName: \"reading\", packFormat: \"u8\" }, { kind: \"const\", name: \"variant\", identifier: 263, description: \"Describes the type of switch used.\", fields: [{ name: \"_\", type: \"Variant\", storage: 1 }], optional: true, identifierName: \"variant\", packFormat: \"u8\" }, { kind: \"event\", name: \"on\", identifier: 1, description: \"Emitted when switch goes from `off` to `on`.\", fields: [], identifierName: \"active\" }, { kind: \"event\", name: \"off\", identifier: 2, description: \"Emitted when switch goes from `on` to `off`.\", fields: [], identifierName: \"inactive\" }], tags: [\"8bit\"], group: \"Button\" }, { name: \"TCP\", status: \"experimental\", shortId: \"tcp\", camelName: \"tcp\", shortName: \"tcp\", extends: [\"_base\"], notes: { short: \"Data transfer over TCP/IP and TLS stream sockets.\", commands: \"## Pipes\" }, classIdentifier: 457422603, enums: { TcpError: { name: \"TcpError\", storage: -4, members: { InvalidCommand: 1, InvalidCommandPayload: 2 } } }, constants: {}, packets: [{ kind: \"report\", name: \"command_not_implemented\", identifier: 3, description: \"This report may be emitted by a server in response to a command (action or register operation)\\nthat it does not understand.\\nThe `service_command` and `packet_crc` fields are copied from the command packet that was unhandled.\\nNote that it's possible to get an ACK, followed by such an error report.\", fields: [{ name: \"service_command\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"packet_crc\", type: \"u16\", storage: 2, isSimpleType: true }], identifierName: \"command_not_implemented\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"const\", name: \"instance_name\", identifier: 265, description: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\", fields: [{ name: \"_\", type: \"string\", storage: 0 }], optional: true, identifierName: \"instance_name\", packFormat: \"s\", derived: \"_base\" }, { kind: \"ro\", name: \"status_code\", identifier: 259, description: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"event\", name: \"status_code_changed\", identifier: 4, description: \"Notifies that the status code of the service changed.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code_changed\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"command\", name: \"open\", identifier: 128, description: \"Open pair of pipes between network peripheral and a controlling device. In/outbound refers to direction from/to internet.\", fields: [{ name: \"inbound\", type: \"pipe\", storage: 12 }], pipeType: \"open\", hasReport: true, packFormat: \"b[12]\" }, { kind: \"report\", name: \"open\", identifier: 128, description: \"Open pair of pipes between network peripheral and a controlling device. In/outbound refers to direction from/to internet.\", fields: [{ name: \"outbound_port\", type: \"pipe_port\", storage: 2 }], secondary: true, pipeType: \"open\", packFormat: \"u16\" }, { kind: \"meta_pipe_command\", name: \"open_ssl\", identifier: 1, description: \"Open an SSL connection to a given host:port pair. Can be issued only once on given pipe.\\nAfter the connection is established, an empty data report is sent.\\nConnection is closed by closing the pipe.\", fields: [{ name: \"tcp_port\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"hostname\", type: \"string\", storage: 0 }], pipeType: \"open\", packFormat: \"u16 s\" }, { kind: \"pipe_command\", name: \"outdata\", identifier: 0, description: \"Bytes to be sent directly over an established TCP or SSL connection.\", fields: [{ name: \"data\", type: \"bytes\", storage: 0, isSimpleType: true }], pipeType: \"open\", packFormat: \"b\" }, { kind: \"pipe_report\", name: \"indata\", identifier: 0, description: \"Bytes read directly from directly over an established TCP or SSL connection.\", fields: [{ name: \"data\", type: \"bytes\", storage: 0, isSimpleType: true }], pipeType: \"open\", packFormat: \"b\" }, { kind: \"meta_pipe_report\", name: \"error\", identifier: 0, description: \"Reported when an error is encountered. Negative error codes come directly from the SSL implementation.\", fields: [{ name: \"error\", type: \"TcpError\", storage: -4 }], pipeType: \"open\", packFormat: \"i32\" }], tags: [] }, { name: \"Temperature\", status: \"rc\", shortId: \"temperature\", camelName: \"temperature\", shortName: \"temperature\", extends: [\"_base\", \"_sensor\"], notes: { short: \"A thermometer measuring outside or inside environment.\" }, classIdentifier: 337754823, enums: { Variant: { name: \"Variant\", storage: 1, members: { Outdoor: 1, Indoor: 2, Body: 3 } } }, constants: {}, packets: [{ kind: \"report\", name: \"command_not_implemented\", identifier: 3, description: \"This report may be emitted by a server in response to a command (action or register operation)\\nthat it does not understand.\\nThe `service_command` and `packet_crc` fields are copied from the command packet that was unhandled.\\nNote that it's possible to get an ACK, followed by such an error report.\", fields: [{ name: \"service_command\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"packet_crc\", type: \"u16\", storage: 2, isSimpleType: true }], identifierName: \"command_not_implemented\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"const\", name: \"instance_name\", identifier: 265, description: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\", fields: [{ name: \"_\", type: \"string\", storage: 0 }], optional: true, identifierName: \"instance_name\", packFormat: \"s\", derived: \"_base\" }, { kind: \"ro\", name: \"status_code\", identifier: 259, description: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"event\", name: \"status_code_changed\", identifier: 4, description: \"Notifies that the status code of the service changed.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code_changed\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"rw\", name: \"streaming_samples\", identifier: 3, description: \"Asks device to stream a given number of samples\\n(clients will typically write `255` to this register every second or so, while streaming is required).\", fields: [{ name: \"_\", unit: \"#\", type: \"u8\", storage: 1, isSimpleType: true }], internal: true, identifierName: \"streaming_samples\", packFormat: \"u8\", derived: \"_sensor\" }, { kind: \"rw\", name: \"streaming_interval\", identifier: 4, description: \"Period between packets of data when streaming in milliseconds.\", fields: [{ name: \"_\", unit: \"ms\", type: \"u32\", storage: 4, isSimpleType: true, defaultValue: 100, typicalMin: 1, typicalMax: 6e4 }], identifierName: \"streaming_interval\", packFormat: \"u32\", derived: \"_sensor\" }, { kind: \"const\", name: \"streaming_preferred_interval\", identifier: 258, description: \"Preferred default streaming interval for sensor in milliseconds.\", fields: [{ name: \"_\", unit: \"ms\", type: \"u32\", storage: 4, isSimpleType: true }], internal: true, optional: true, identifierName: \"streaming_preferred_interval\", packFormat: \"u32\", derived: \"_sensor\" }, { kind: \"ro\", name: \"temperature\", identifier: 257, description: \"The temperature.\", fields: [{ name: \"_\", unit: \"\\xB0C\", shift: 10, type: \"i22.10\", storage: -4 }], volatile: true, identifierName: \"reading\", preferredInterval: 1e3, packFormat: \"i22.10\" }, { kind: \"const\", name: \"min_temperature\", identifier: 260, description: \"Lowest temperature that can be reported.\", fields: [{ name: \"_\", unit: \"\\xB0C\", shift: 10, type: \"i22.10\", storage: -4 }], identifierName: \"min_reading\", packFormat: \"i22.10\" }, { kind: \"const\", name: \"max_temperature\", identifier: 261, description: \"Highest temperature that can be reported.\", fields: [{ name: \"_\", unit: \"\\xB0C\", shift: 10, type: \"i22.10\", storage: -4 }], identifierName: \"max_reading\", packFormat: \"i22.10\" }, { kind: \"ro\", name: \"temperature_error\", identifier: 262, description: \"The real temperature is between `temperature - temperature_error` and `temperature + temperature_error`.\", fields: [{ name: \"_\", unit: \"\\xB0C\", shift: 10, type: \"u22.10\", storage: 4 }], volatile: true, optional: true, identifierName: \"reading_error\", packFormat: \"u22.10\" }, { kind: \"const\", name: \"variant\", identifier: 263, description: \"Specifies the type of thermometer.\", fields: [{ name: \"_\", type: \"Variant\", storage: 1 }], optional: true, identifierName: \"variant\", packFormat: \"u8\" }], tags: [\"C\", \"8bit\"], group: \"Environment\" }, { name: \"Traffic Light\", status: \"rc\", shortId: \"trafficlight\", camelName: \"trafficLight\", shortName: \"trafficLight\", extends: [\"_base\"], notes: { short: \"Controls a mini traffic with a red, orange and green LED.\" }, classIdentifier: 365137307, enums: {}, constants: {}, packets: [{ kind: \"report\", name: \"command_not_implemented\", identifier: 3, description: \"This report may be emitted by a server in response to a command (action or register operation)\\nthat it does not understand.\\nThe `service_command` and `packet_crc` fields are copied from the command packet that was unhandled.\\nNote that it's possible to get an ACK, followed by such an error report.\", fields: [{ name: \"service_command\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"packet_crc\", type: \"u16\", storage: 2, isSimpleType: true }], identifierName: \"command_not_implemented\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"const\", name: \"instance_name\", identifier: 265, description: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\", fields: [{ name: \"_\", type: \"string\", storage: 0 }], optional: true, identifierName: \"instance_name\", packFormat: \"s\", derived: \"_base\" }, { kind: \"ro\", name: \"status_code\", identifier: 259, description: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"event\", name: \"status_code_changed\", identifier: 4, description: \"Notifies that the status code of the service changed.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code_changed\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"rw\", name: \"red\", identifier: 128, description: \"The on/off state of the red light.\", fields: [{ name: \"_\", type: \"bool\", storage: 1 }], packFormat: \"u8\" }, { kind: \"rw\", name: \"orange\", identifier: 129, description: \"The on/off state of the red light.\", fields: [{ name: \"_\", type: \"bool\", storage: 1 }], packFormat: \"u8\" }, { kind: \"rw\", name: \"green\", identifier: 130, description: \"The on/off state of the red light.\", fields: [{ name: \"_\", type: \"bool\", storage: 1 }], packFormat: \"u8\" }], tags: [\"8bit\"] }, { name: \"Total Volatile organic compound\", status: \"stable\", shortId: \"tvoc\", camelName: \"tvoc\", shortName: \"tvoc\", extends: [\"_base\", \"_sensor\"], notes: { short: \"Measures equivalent Total Volatile Organic Compound levels.\" }, classIdentifier: 312849815, enums: {}, constants: {}, packets: [{ kind: \"report\", name: \"command_not_implemented\", identifier: 3, description: \"This report may be emitted by a server in response to a command (action or register operation)\\nthat it does not understand.\\nThe `service_command` and `packet_crc` fields are copied from the command packet that was unhandled.\\nNote that it's possible to get an ACK, followed by such an error report.\", fields: [{ name: \"service_command\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"packet_crc\", type: \"u16\", storage: 2, isSimpleType: true }], identifierName: \"command_not_implemented\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"const\", name: \"instance_name\", identifier: 265, description: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\", fields: [{ name: \"_\", type: \"string\", storage: 0 }], optional: true, identifierName: \"instance_name\", packFormat: \"s\", derived: \"_base\" }, { kind: \"ro\", name: \"status_code\", identifier: 259, description: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"event\", name: \"status_code_changed\", identifier: 4, description: \"Notifies that the status code of the service changed.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code_changed\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"rw\", name: \"streaming_samples\", identifier: 3, description: \"Asks device to stream a given number of samples\\n(clients will typically write `255` to this register every second or so, while streaming is required).\", fields: [{ name: \"_\", unit: \"#\", type: \"u8\", storage: 1, isSimpleType: true }], internal: true, identifierName: \"streaming_samples\", packFormat: \"u8\", derived: \"_sensor\" }, { kind: \"rw\", name: \"streaming_interval\", identifier: 4, description: \"Period between packets of data when streaming in milliseconds.\", fields: [{ name: \"_\", unit: \"ms\", type: \"u32\", storage: 4, isSimpleType: true, defaultValue: 100, typicalMin: 1, typicalMax: 6e4 }], identifierName: \"streaming_interval\", packFormat: \"u32\", derived: \"_sensor\" }, { kind: \"const\", name: \"streaming_preferred_interval\", identifier: 258, description: \"Preferred default streaming interval for sensor in milliseconds.\", fields: [{ name: \"_\", unit: \"ms\", type: \"u32\", storage: 4, isSimpleType: true }], internal: true, optional: true, identifierName: \"streaming_preferred_interval\", packFormat: \"u32\", derived: \"_sensor\" }, { kind: \"ro\", name: \"TVOC\", identifier: 257, description: \"Total volatile organic compound readings in parts per billion.\", fields: [{ name: \"_\", unit: \"ppb\", shift: 10, type: \"u22.10\", storage: 4, absoluteMin: 0, typicalMax: 1187, typicalMin: 0 }], volatile: true, identifierName: \"reading\", packFormat: \"u22.10\" }, { kind: \"ro\", name: \"TVOC_error\", identifier: 262, description: \"Error on the reading data\", fields: [{ name: \"_\", unit: \"ppb\", shift: 10, type: \"u22.10\", storage: 4 }], volatile: true, optional: true, identifierName: \"reading_error\", packFormat: \"u22.10\" }, { kind: \"const\", name: \"min_TVOC\", identifier: 260, description: \"Minimum measurable value\", fields: [{ name: \"_\", unit: \"ppb\", shift: 10, type: \"u22.10\", storage: 4 }], identifierName: \"min_reading\", packFormat: \"u22.10\" }, { kind: \"const\", name: \"max_TVOC\", identifier: 261, description: \"Minimum measurable value.\", fields: [{ name: \"_\", unit: \"ppb\", shift: 10, type: \"u22.10\", storage: 4 }], identifierName: \"max_reading\", packFormat: \"u22.10\" }], tags: [\"8bit\"], group: \"Environment\" }, { name: \"Unique Brain\", status: \"stable\", shortId: \"uniquebrain\", camelName: \"uniqueBrain\", shortName: \"uniqueBrain\", extends: [\"_base\"], notes: { short: \"The presence of this service indicates that this device is a client that controls sensors and actuators.\\nIf a unique brain detects another younger unique brain (determined by reset counter in announce packets),\\nthen the older brain should switch into proxy mode.\" }, classIdentifier: 272387813, enums: {}, constants: {}, packets: [{ kind: \"report\", name: \"command_not_implemented\", identifier: 3, description: \"This report may be emitted by a server in response to a command (action or register operation)\\nthat it does not understand.\\nThe `service_command` and `packet_crc` fields are copied from the command packet that was unhandled.\\nNote that it's possible to get an ACK, followed by such an error report.\", fields: [{ name: \"service_command\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"packet_crc\", type: \"u16\", storage: 2, isSimpleType: true }], identifierName: \"command_not_implemented\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"const\", name: \"instance_name\", identifier: 265, description: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\", fields: [{ name: \"_\", type: \"string\", storage: 0 }], optional: true, identifierName: \"instance_name\", packFormat: \"s\", derived: \"_base\" }, { kind: \"ro\", name: \"status_code\", identifier: 259, description: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"event\", name: \"status_code_changed\", identifier: 4, description: \"Notifies that the status code of the service changed.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code_changed\", packFormat: \"u16 u16\", derived: \"_base\" }], tags: [\"infrastructure\"] }, { name: \"UV index\", status: \"stable\", shortId: \"uvindex\", camelName: \"uvIndex\", shortName: \"uvIndex\", extends: [\"_base\", \"_sensor\"], notes: { short: \"The UV Index is a measure of the intensity of ultraviolet (UV) rays from the Sun.\" }, classIdentifier: 527306128, enums: { Variant: { name: \"Variant\", storage: 1, members: { UVA_UVB: 1, Visible_IR: 2 } } }, constants: {}, packets: [{ kind: \"report\", name: \"command_not_implemented\", identifier: 3, description: \"This report may be emitted by a server in response to a command (action or register operation)\\nthat it does not understand.\\nThe `service_command` and `packet_crc` fields are copied from the command packet that was unhandled.\\nNote that it's possible to get an ACK, followed by such an error report.\", fields: [{ name: \"service_command\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"packet_crc\", type: \"u16\", storage: 2, isSimpleType: true }], identifierName: \"command_not_implemented\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"const\", name: \"instance_name\", identifier: 265, description: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\", fields: [{ name: \"_\", type: \"string\", storage: 0 }], optional: true, identifierName: \"instance_name\", packFormat: \"s\", derived: \"_base\" }, { kind: \"ro\", name: \"status_code\", identifier: 259, description: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"event\", name: \"status_code_changed\", identifier: 4, description: \"Notifies that the status code of the service changed.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code_changed\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"rw\", name: \"streaming_samples\", identifier: 3, description: \"Asks device to stream a given number of samples\\n(clients will typically write `255` to this register every second or so, while streaming is required).\", fields: [{ name: \"_\", unit: \"#\", type: \"u8\", storage: 1, isSimpleType: true }], internal: true, identifierName: \"streaming_samples\", packFormat: \"u8\", derived: \"_sensor\" }, { kind: \"rw\", name: \"streaming_interval\", identifier: 4, description: \"Period between packets of data when streaming in milliseconds.\", fields: [{ name: \"_\", unit: \"ms\", type: \"u32\", storage: 4, isSimpleType: true, defaultValue: 100, typicalMin: 1, typicalMax: 6e4 }], identifierName: \"streaming_interval\", packFormat: \"u32\", derived: \"_sensor\" }, { kind: \"const\", name: \"streaming_preferred_interval\", identifier: 258, description: \"Preferred default streaming interval for sensor in milliseconds.\", fields: [{ name: \"_\", unit: \"ms\", type: \"u32\", storage: 4, isSimpleType: true }], internal: true, optional: true, identifierName: \"streaming_preferred_interval\", packFormat: \"u32\", derived: \"_sensor\" }, { kind: \"ro\", name: \"uv_index\", identifier: 257, description: \"Ultraviolet index, typically refreshed every second.\", fields: [{ name: \"_\", unit: \"uv\", shift: 16, type: \"u16.16\", storage: 4, typicalMax: 11, typicalMin: 0 }], volatile: true, identifierName: \"reading\", packFormat: \"u16.16\" }, { kind: \"ro\", name: \"uv_index_error\", identifier: 262, description: \"Error on the UV measure.\", fields: [{ name: \"_\", unit: \"uv\", shift: 16, type: \"u16.16\", storage: 4 }], volatile: true, optional: true, identifierName: \"reading_error\", packFormat: \"u16.16\" }, { kind: \"const\", name: \"variant\", identifier: 263, description: \"The type of physical sensor and capabilities.\", fields: [{ name: \"_\", type: \"Variant\", storage: 1 }], optional: true, identifierName: \"variant\", packFormat: \"u8\" }], tags: [\"8bit\"], group: \"Environment\" }, { name: \"Verified Telemetry\", status: \"experimental\", shortId: \"verifiedtelemetrysensor\", camelName: \"verifiedTelemetry\", shortName: \"verifiedTelemetry\", extends: [\"_base\"], notes: { short: \"A mixin service that exposes verified telemetry information for a sensor (see https://github.com/Azure/Verified-Telemetry/tree/main/PnPModel).\" }, classIdentifier: 563381279, enums: { Status: { name: \"Status\", storage: 1, members: { Unknown: 0, Working: 1, Faulty: 2 } }, FingerprintType: { name: \"FingerprintType\", storage: 1, members: { FallCurve: 1, CurrentSense: 2, Custom: 3 } } }, constants: {}, packets: [{ kind: \"report\", name: \"command_not_implemented\", identifier: 3, description: \"This report may be emitted by a server in response to a command (action or register operation)\\nthat it does not understand.\\nThe `service_command` and `packet_crc` fields are copied from the command packet that was unhandled.\\nNote that it's possible to get an ACK, followed by such an error report.\", fields: [{ name: \"service_command\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"packet_crc\", type: \"u16\", storage: 2, isSimpleType: true }], identifierName: \"command_not_implemented\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"const\", name: \"instance_name\", identifier: 265, description: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\", fields: [{ name: \"_\", type: \"string\", storage: 0 }], optional: true, identifierName: \"instance_name\", packFormat: \"s\", derived: \"_base\" }, { kind: \"ro\", name: \"status_code\", identifier: 259, description: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"event\", name: \"status_code_changed\", identifier: 4, description: \"Notifies that the status code of the service changed.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code_changed\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"ro\", name: \"telemetry_status\", identifier: 384, description: \"Reads the telemetry working status, where ``true`` is working and ``false`` is faulty.\", fields: [{ name: \"_\", type: \"Status\", storage: 1 }], packFormat: \"u8\" }, { kind: \"rw\", name: \"telemetry_status_interval\", identifier: 128, description: \"Specifies the interval between computing the fingerprint information.\", fields: [{ name: \"_\", unit: \"ms\", type: \"u32\", storage: 4, isSimpleType: true }], optional: true, packFormat: \"u32\" }, { kind: \"const\", name: \"fingerprint_type\", identifier: 385, description: \"Type of the fingerprint.\", fields: [{ name: \"_\", type: \"FingerprintType\", storage: 1 }], packFormat: \"u8\" }, { kind: \"ro\", name: \"fingerprint_template\", identifier: 386, description: \"Template Fingerprint information of a working sensor.\", fields: [{ name: \"confidence\", unit: \"%\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"template\", type: \"bytes\", storage: 0, isSimpleType: true }], packFormat: \"u16 b\" }, { kind: \"command\", name: \"reset_fingerprint_template\", identifier: 128, description: \"This command will clear the template fingerprint of a sensor and collect a new template fingerprint of the attached sensor.\", fields: [] }, { kind: \"command\", name: \"retrain_fingerprint_template\", identifier: 129, description: \"This command will append a new template fingerprint to the `fingerprintTemplate`. Appending more fingerprints will increase the accuracy in detecting the telemetry status.\", fields: [], unique: true }, { kind: \"event\", name: \"telemetry_status_change\", identifier: 3, description: \"The telemetry status of the device was updated.\", fields: [{ name: \"telemetry_status\", type: \"Status\", storage: 1 }], identifierName: \"change\", packFormat: \"u8\" }, { kind: \"event\", name: \"fingerprint_template_change\", identifier: 128, description: \"The fingerprint template was updated\", fields: [] }], tags: [] }, { name: \"Vibration motor\", status: \"rc\", shortId: \"vibrationmotor\", camelName: \"vibrationMotor\", shortName: \"vibrationMotor\", extends: [\"_base\"], notes: { short: \"A vibration motor.\" }, classIdentifier: 406832290, enums: {}, constants: {}, packets: [{ kind: \"report\", name: \"command_not_implemented\", identifier: 3, description: \"This report may be emitted by a server in response to a command (action or register operation)\\nthat it does not understand.\\nThe `service_command` and `packet_crc` fields are copied from the command packet that was unhandled.\\nNote that it's possible to get an ACK, followed by such an error report.\", fields: [{ name: \"service_command\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"packet_crc\", type: \"u16\", storage: 2, isSimpleType: true }], identifierName: \"command_not_implemented\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"const\", name: \"instance_name\", identifier: 265, description: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\", fields: [{ name: \"_\", type: \"string\", storage: 0 }], optional: true, identifierName: \"instance_name\", packFormat: \"s\", derived: \"_base\" }, { kind: \"ro\", name: \"status_code\", identifier: 259, description: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"event\", name: \"status_code_changed\", identifier: 4, description: \"Notifies that the status code of the service changed.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code_changed\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"command\", name: \"vibrate\", identifier: 128, description: \"Starts a sequence of vibration and pauses. To stop any existing vibration, send an empty payload.\", fields: [{ name: \"duration\", unit: \"8ms\", type: \"u8\", storage: 1, isSimpleType: true, startRepeats: true }, { name: \"intensity\", unit: \"/\", shift: 8, type: \"u0.8\", storage: 1 }], packFormat: \"r: u8 u0.8\" }], tags: [] }, { name: \"Voltage Measurement\", status: \"experimental\", shortId: \"voltagemeasurement\", camelName: \"voltageMeasurement\", shortName: \"voltageMeasurement\", extends: [\"_base\", \"_sensor\"], notes: { short: \"A service that reports a voltage measurement.\" }, classIdentifier: 372485145, enums: { VoltageMeasurementType: { name: \"VoltageMeasurementType\", storage: 1, members: { Absolute: 0, Differential: 1 } } }, constants: {}, packets: [{ kind: \"report\", name: \"command_not_implemented\", identifier: 3, description: \"This report may be emitted by a server in response to a command (action or register operation)\\nthat it does not understand.\\nThe `service_command` and `packet_crc` fields are copied from the command packet that was unhandled.\\nNote that it's possible to get an ACK, followed by such an error report.\", fields: [{ name: \"service_command\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"packet_crc\", type: \"u16\", storage: 2, isSimpleType: true }], identifierName: \"command_not_implemented\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"const\", name: \"instance_name\", identifier: 265, description: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\", fields: [{ name: \"_\", type: \"string\", storage: 0 }], optional: true, identifierName: \"instance_name\", packFormat: \"s\", derived: \"_base\" }, { kind: \"ro\", name: \"status_code\", identifier: 259, description: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"event\", name: \"status_code_changed\", identifier: 4, description: \"Notifies that the status code of the service changed.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code_changed\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"rw\", name: \"streaming_samples\", identifier: 3, description: \"Asks device to stream a given number of samples\\n(clients will typically write `255` to this register every second or so, while streaming is required).\", fields: [{ name: \"_\", unit: \"#\", type: \"u8\", storage: 1, isSimpleType: true }], internal: true, identifierName: \"streaming_samples\", packFormat: \"u8\", derived: \"_sensor\" }, { kind: \"rw\", name: \"streaming_interval\", identifier: 4, description: \"Period between packets of data when streaming in milliseconds.\", fields: [{ name: \"_\", unit: \"ms\", type: \"u32\", storage: 4, isSimpleType: true, defaultValue: 100, typicalMin: 1, typicalMax: 6e4 }], identifierName: \"streaming_interval\", packFormat: \"u32\", derived: \"_sensor\" }, { kind: \"const\", name: \"streaming_preferred_interval\", identifier: 258, description: \"Preferred default streaming interval for sensor in milliseconds.\", fields: [{ name: \"_\", unit: \"ms\", type: \"u32\", storage: 4, isSimpleType: true }], internal: true, optional: true, identifierName: \"streaming_preferred_interval\", packFormat: \"u32\", derived: \"_sensor\" }, { kind: \"const\", name: \"measurement_type\", identifier: 385, description: \"The type of measurement that is taking place. Absolute results are measured with respect to ground, whereas differential results are measured against another signal that is not ground.\", fields: [{ name: \"_\", type: \"VoltageMeasurementType\", storage: 1 }], packFormat: \"u8\" }, { kind: \"const\", name: \"measurement_name\", identifier: 386, description: \"A string containing the net name that is being measured e.g. `POWER_DUT` or a reference e.g. `DIFF_DEV1_DEV2`. These constants can be used to identify a measurement from client code.\", fields: [{ name: \"_\", type: \"string\", storage: 0 }], packFormat: \"s\" }, { kind: \"ro\", name: \"measurement\", identifier: 257, description: \"The voltage measurement.\", fields: [{ name: \"_\", unit: \"V\", isFloat: true, type: \"f64\", storage: 8 }], volatile: true, identifierName: \"reading\", packFormat: \"f64\" }], tags: [] }, { name: \"Water level\", status: \"rc\", shortId: \"waterlevel\", camelName: \"waterLevel\", shortName: \"waterLevel\", extends: [\"_base\", \"_sensor\"], notes: { short: \"A sensor that measures liquid/water level.\" }, classIdentifier: 343630573, enums: { Variant: { name: \"Variant\", storage: 1, members: { Resistive: 1, ContactPhotoElectric: 2, NonContactPhotoElectric: 3 } } }, constants: {}, packets: [{ kind: \"report\", name: \"command_not_implemented\", identifier: 3, description: \"This report may be emitted by a server in response to a command (action or register operation)\\nthat it does not understand.\\nThe `service_command` and `packet_crc` fields are copied from the command packet that was unhandled.\\nNote that it's possible to get an ACK, followed by such an error report.\", fields: [{ name: \"service_command\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"packet_crc\", type: \"u16\", storage: 2, isSimpleType: true }], identifierName: \"command_not_implemented\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"const\", name: \"instance_name\", identifier: 265, description: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\", fields: [{ name: \"_\", type: \"string\", storage: 0 }], optional: true, identifierName: \"instance_name\", packFormat: \"s\", derived: \"_base\" }, { kind: \"ro\", name: \"status_code\", identifier: 259, description: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"event\", name: \"status_code_changed\", identifier: 4, description: \"Notifies that the status code of the service changed.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code_changed\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"rw\", name: \"streaming_samples\", identifier: 3, description: \"Asks device to stream a given number of samples\\n(clients will typically write `255` to this register every second or so, while streaming is required).\", fields: [{ name: \"_\", unit: \"#\", type: \"u8\", storage: 1, isSimpleType: true }], internal: true, identifierName: \"streaming_samples\", packFormat: \"u8\", derived: \"_sensor\" }, { kind: \"rw\", name: \"streaming_interval\", identifier: 4, description: \"Period between packets of data when streaming in milliseconds.\", fields: [{ name: \"_\", unit: \"ms\", type: \"u32\", storage: 4, isSimpleType: true, defaultValue: 100, typicalMin: 1, typicalMax: 6e4 }], identifierName: \"streaming_interval\", packFormat: \"u32\", derived: \"_sensor\" }, { kind: \"const\", name: \"streaming_preferred_interval\", identifier: 258, description: \"Preferred default streaming interval for sensor in milliseconds.\", fields: [{ name: \"_\", unit: \"ms\", type: \"u32\", storage: 4, isSimpleType: true }], internal: true, optional: true, identifierName: \"streaming_preferred_interval\", packFormat: \"u32\", derived: \"_sensor\" }, { kind: \"ro\", name: \"level\", identifier: 257, description: \"The reported water level.\", fields: [{ name: \"_\", unit: \"/\", shift: 16, type: \"u0.16\", storage: 2 }], volatile: true, identifierName: \"reading\", packFormat: \"u0.16\" }, { kind: \"ro\", name: \"level_error\", identifier: 262, description: \"The error rage on the current reading\", fields: [{ name: \"_\", unit: \"/\", shift: 16, type: \"u0.16\", storage: 2 }], volatile: true, optional: true, identifierName: \"reading_error\", packFormat: \"u0.16\" }, { kind: \"const\", name: \"variant\", identifier: 263, description: \"The type of physical sensor.\", fields: [{ name: \"_\", type: \"Variant\", storage: 1 }], optional: true, identifierName: \"variant\", packFormat: \"u8\" }], tags: [\"8bit\"] }, { name: \"Weight Scale\", status: \"rc\", shortId: \"weightscale\", camelName: \"weightScale\", shortName: \"weightScale\", extends: [\"_base\", \"_sensor\"], notes: { short: \"A weight measuring sensor.\" }, classIdentifier: 525160512, enums: { Variant: { name: \"Variant\", storage: 1, members: { Body: 1, Food: 2, Jewelry: 3 } } }, constants: {}, packets: [{ kind: \"report\", name: \"command_not_implemented\", identifier: 3, description: \"This report may be emitted by a server in response to a command (action or register operation)\\nthat it does not understand.\\nThe `service_command` and `packet_crc` fields are copied from the command packet that was unhandled.\\nNote that it's possible to get an ACK, followed by such an error report.\", fields: [{ name: \"service_command\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"packet_crc\", type: \"u16\", storage: 2, isSimpleType: true }], identifierName: \"command_not_implemented\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"const\", name: \"instance_name\", identifier: 265, description: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\", fields: [{ name: \"_\", type: \"string\", storage: 0 }], optional: true, identifierName: \"instance_name\", packFormat: \"s\", derived: \"_base\" }, { kind: \"ro\", name: \"status_code\", identifier: 259, description: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"event\", name: \"status_code_changed\", identifier: 4, description: \"Notifies that the status code of the service changed.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code_changed\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"rw\", name: \"streaming_samples\", identifier: 3, description: \"Asks device to stream a given number of samples\\n(clients will typically write `255` to this register every second or so, while streaming is required).\", fields: [{ name: \"_\", unit: \"#\", type: \"u8\", storage: 1, isSimpleType: true }], internal: true, identifierName: \"streaming_samples\", packFormat: \"u8\", derived: \"_sensor\" }, { kind: \"rw\", name: \"streaming_interval\", identifier: 4, description: \"Period between packets of data when streaming in milliseconds.\", fields: [{ name: \"_\", unit: \"ms\", type: \"u32\", storage: 4, isSimpleType: true, defaultValue: 100, typicalMin: 1, typicalMax: 6e4 }], identifierName: \"streaming_interval\", packFormat: \"u32\", derived: \"_sensor\" }, { kind: \"const\", name: \"streaming_preferred_interval\", identifier: 258, description: \"Preferred default streaming interval for sensor in milliseconds.\", fields: [{ name: \"_\", unit: \"ms\", type: \"u32\", storage: 4, isSimpleType: true }], internal: true, optional: true, identifierName: \"streaming_preferred_interval\", packFormat: \"u32\", derived: \"_sensor\" }, { kind: \"ro\", name: \"weight\", identifier: 257, description: \"The reported weight.\", fields: [{ name: \"_\", unit: \"kg\", shift: 16, type: \"u16.16\", storage: 4 }], volatile: true, identifierName: \"reading\", packFormat: \"u16.16\" }, { kind: \"ro\", name: \"weight_error\", identifier: 262, description: \"The estimate error on the reported reading.\", fields: [{ name: \"_\", unit: \"kg\", shift: 16, type: \"u16.16\", storage: 4 }], volatile: true, optional: true, identifierName: \"reading_error\", packFormat: \"u16.16\" }, { kind: \"rw\", name: \"zero_offset\", identifier: 128, description: \"Calibrated zero offset error on the scale, i.e. the measured weight when nothing is on the scale.\\nYou do not need to subtract that from the reading, it has already been done.\", fields: [{ name: \"_\", unit: \"kg\", shift: 16, type: \"u16.16\", storage: 4 }], optional: true, packFormat: \"u16.16\" }, { kind: \"rw\", name: \"gain\", identifier: 129, description: \"Calibrated gain on the weight scale error.\", fields: [{ name: \"_\", shift: 16, type: \"u16.16\", storage: 4 }], optional: true, packFormat: \"u16.16\" }, { kind: \"const\", name: \"max_weight\", identifier: 261, description: \"Maximum supported weight on the scale.\", fields: [{ name: \"_\", unit: \"kg\", shift: 16, type: \"u16.16\", storage: 4 }], optional: true, identifierName: \"max_reading\", packFormat: \"u16.16\" }, { kind: \"const\", name: \"min_weight\", identifier: 260, description: \"Minimum recommend weight on the scale.\", fields: [{ name: \"_\", unit: \"kg\", shift: 16, type: \"u16.16\", storage: 4 }], optional: true, identifierName: \"min_reading\", packFormat: \"u16.16\" }, { kind: \"const\", name: \"weight_resolution\", identifier: 264, description: \"Smallest, yet distinguishable change in reading.\", fields: [{ name: \"_\", unit: \"kg\", shift: 16, type: \"u16.16\", storage: 4 }], optional: true, identifierName: \"reading_resolution\", packFormat: \"u16.16\" }, { kind: \"const\", name: \"variant\", identifier: 263, description: \"The type of physical scale\", fields: [{ name: \"_\", type: \"Variant\", storage: 1 }], optional: true, identifierName: \"variant\", packFormat: \"u8\" }, { kind: \"command\", name: \"calibrate_zero_offset\", identifier: 128, description: \"Call this command when there is nothing on the scale. If supported, the module should save the calibration data.\", fields: [] }, { kind: \"command\", name: \"calibrate_gain\", identifier: 129, description: \"Call this command with the weight of the thing on the scale.\", fields: [{ name: \"weight\", unit: \"g\", shift: 10, type: \"u22.10\", storage: 4 }], packFormat: \"u22.10\" }], tags: [\"8bit\"] }, { name: \"WIFI\", status: \"rc\", shortId: \"wifi\", camelName: \"wifi\", shortName: \"wifi\", extends: [\"_base\"], notes: { short: \"Discovery and connection to WiFi networks. Separate TCP service can be used for data transfer.\", long: \"## Connection\\n\\nThe device controlled by this service is meant to connect automatically, once configured.\\nTo that end, it keeps a list of known WiFi networks, with priorities and passwords.\\nIt will connect to the available network with numerically highest priority,\\nbreaking ties in priority by signal strength (typically all known networks have priority of `0`).\\nIf the connection fails (due to wrong password, radio failure, or other problem)\\nan `connection_failed` event is emitted, and the device will try to connect to the next eligible network.\\nWhen networks are exhausted, the scan is performed again and the connection process restarts.\\n\\nUpdating networks (setting password, priorties, forgetting) does not trigger an automatic reconnect.\\n\\n## Captive portals\\n\\nIf the Wifi is not able to join an AP because it needs to receive a password, it may decide to enter a mode \\nwhere it waits for user input. Typical example of this mode would be a captive portal or waiting for a BLE interaction.\\nIn that situation, the `status_code` should set to `WaitingForInput`.\" }, classIdentifier: 413852154, enums: { APFlags: { name: \"APFlags\", storage: 4, isFlags: true, members: { HasPassword: 1, WPS: 2, HasSecondaryChannelAbove: 4, HasSecondaryChannelBelow: 8, IEEE_802_11B: 256, IEEE_802_11A: 512, IEEE_802_11G: 1024, IEEE_802_11N: 2048, IEEE_802_11AC: 4096, IEEE_802_11AX: 8192, IEEE_802_LongRange: 32768 } } }, constants: {}, packets: [{ kind: \"report\", name: \"command_not_implemented\", identifier: 3, description: \"This report may be emitted by a server in response to a command (action or register operation)\\nthat it does not understand.\\nThe `service_command` and `packet_crc` fields are copied from the command packet that was unhandled.\\nNote that it's possible to get an ACK, followed by such an error report.\", fields: [{ name: \"service_command\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"packet_crc\", type: \"u16\", storage: 2, isSimpleType: true }], identifierName: \"command_not_implemented\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"const\", name: \"instance_name\", identifier: 265, description: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\", fields: [{ name: \"_\", type: \"string\", storage: 0 }], optional: true, identifierName: \"instance_name\", packFormat: \"s\", derived: \"_base\" }, { kind: \"ro\", name: \"status_code\", identifier: 259, description: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"event\", name: \"status_code_changed\", identifier: 4, description: \"Notifies that the status code of the service changed.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code_changed\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"command\", name: \"last_scan_results\", identifier: 128, description: \"Return list of WiFi network from the last scan.\\nScans are performed periodically while not connected (in particular, on startup and after current connection drops),\\nas well as upon `reconnect` and `scan` commands.\", fields: [{ name: \"results\", type: \"pipe\", storage: 12 }], pipeType: \"last_scan_results\", packFormat: \"b[12]\" }, { kind: \"pipe_report\", name: \"results\", identifier: 0, description: \"Return list of WiFi network from the last scan.\\nScans are performed periodically while not connected (in particular, on startup and after current connection drops),\\nas well as upon `reconnect` and `scan` commands.\", fields: [{ name: \"flags\", type: \"APFlags\", storage: 4 }, { name: \"reserved\", type: \"u32\", storage: 4, isSimpleType: true }, { name: \"rssi\", unit: \"dB\", type: \"i8\", storage: -1, isSimpleType: true, typicalMin: -100, typicalMax: -20 }, { name: \"channel\", type: \"u8\", storage: 1, isSimpleType: true, typicalMin: 1, typicalMax: 13 }, { name: \"bssid\", type: \"u8[6]\", storage: 6 }, { name: \"ssid\", type: \"string\", storage: 33, maxBytes: 33 }], pipeType: \"last_scan_results\", packFormat: \"u32 u32 i8 u8 b[6] s[33]\" }, { kind: \"command\", name: \"add_network\", identifier: 129, description: \"Automatically connect to named network if available. Also set password if network is not open.\", fields: [{ name: \"ssid\", type: \"string0\", storage: 0 }, { name: \"password\", type: \"string0\", storage: 0, isOptional: true }], packFormat: \"z z\" }, { kind: \"command\", name: \"reconnect\", identifier: 130, description: \"Enable the WiFi (if disabled), initiate a scan, wait for results, disconnect from current WiFi network if any,\\nand then reconnect (using regular algorithm, see `set_network_priority`).\", fields: [] }, { kind: \"command\", name: \"forget_network\", identifier: 131, description: \"Prevent from automatically connecting to named network in future.\\nForgetting a network resets its priority to `0`.\", fields: [{ name: \"ssid\", type: \"string\", storage: 0 }], packFormat: \"s\" }, { kind: \"command\", name: \"forget_all_networks\", identifier: 132, description: \"Clear the list of known networks.\", fields: [] }, { kind: \"command\", name: \"set_network_priority\", identifier: 133, description: \"Set connection priority for a network.\\nBy default, all known networks have priority of `0`.\", fields: [{ name: \"priority\", type: \"i16\", storage: -2, isSimpleType: true }, { name: \"ssid\", type: \"string\", storage: 0 }], packFormat: \"i16 s\" }, { kind: \"command\", name: \"scan\", identifier: 134, description: \"Initiate search for WiFi networks. Generates `scan_complete` event.\", fields: [] }, { kind: \"command\", name: \"list_known_networks\", identifier: 135, description: \"Return list of known WiFi networks.\\n`flags` is currently always 0.\", fields: [{ name: \"results\", type: \"pipe\", storage: 12 }], pipeType: \"list_known_networks\", packFormat: \"b[12]\" }, { kind: \"pipe_report\", name: \"network_results\", identifier: 0, description: \"Return list of known WiFi networks.\\n`flags` is currently always 0.\", fields: [{ name: \"priority\", type: \"i16\", storage: -2, isSimpleType: true }, { name: \"flags\", type: \"i16\", storage: -2, isSimpleType: true }, { name: \"ssid\", type: \"string\", storage: 0 }], pipeType: \"list_known_networks\", packFormat: \"i16 i16 s\" }, { kind: \"ro\", name: \"rssi\", identifier: 257, description: \"Current signal strength. Returns -128 when not connected.\", fields: [{ name: \"_\", unit: \"dB\", type: \"i8\", storage: -1, isSimpleType: true, typicalMin: -128, typicalMax: -20 }], volatile: true, identifierName: \"reading\", packFormat: \"i8\" }, { kind: \"rw\", name: \"enabled\", identifier: 1, description: \"Determines whether the WiFi radio is enabled. It starts enabled upon reset.\", fields: [{ name: \"_\", type: \"bool\", storage: 1 }], identifierName: \"intensity\", packFormat: \"u8\" }, { kind: \"ro\", name: \"ip_address\", identifier: 385, description: \"0, 4 or 16 byte buffer with the IPv4 or IPv6 address assigned to device if any.\", fields: [{ name: \"_\", type: \"bytes\", storage: 16, isSimpleType: true, maxBytes: 16 }], packFormat: \"b[16]\" }, { kind: \"const\", name: \"eui_48\", identifier: 386, description: 'The 6-byte MAC address of the device. If a device does MAC address randomization it will have to \"restart\".', fields: [{ name: \"_\", type: \"bytes\", storage: 6, isSimpleType: true, maxBytes: 6 }], packFormat: \"b[6]\" }, { kind: \"ro\", name: \"ssid\", identifier: 387, description: \"SSID of the access-point to which device is currently connected.\\nEmpty string if not connected.\", fields: [{ name: \"_\", type: \"string\", storage: 32, maxBytes: 32 }], packFormat: \"s[32]\" }, { kind: \"event\", name: \"got_ip\", identifier: 1, description: \"Emitted upon successful join and IP address assignment.\", fields: [], identifierName: \"active\" }, { kind: \"event\", name: \"lost_ip\", identifier: 2, description: \"Emitted when disconnected from network.\", fields: [], identifierName: \"inactive\" }, { kind: \"event\", name: \"scan_complete\", identifier: 128, description: \"A WiFi network scan has completed. Results can be read with the `last_scan_results` command.\\nThe event indicates how many networks where found, and how many are considered\\nas candidates for connection.\", fields: [{ name: \"num_networks\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"num_known_networks\", type: \"u16\", storage: 2, isSimpleType: true }], packFormat: \"u16 u16\" }, { kind: \"event\", name: \"networks_changed\", identifier: 129, description: \"Emitted whenever the list of known networks is updated.\", fields: [] }, { kind: \"event\", name: \"connection_failed\", identifier: 130, description: \"Emitted when when a network was detected in scan, the device tried to connect to it\\nand failed.\\nThis may be because of wrong password or other random failure.\", fields: [{ name: \"ssid\", type: \"string\", storage: 0 }], packFormat: \"s\" }], tags: [], group: \"Iot\" }, { name: \"Wind direction\", status: \"rc\", shortId: \"winddirection\", camelName: \"windDirection\", shortName: \"windDirection\", extends: [\"_base\", \"_sensor\"], notes: { short: \"A sensor that measures wind direction.\" }, classIdentifier: 409725227, enums: {}, constants: {}, packets: [{ kind: \"report\", name: \"command_not_implemented\", identifier: 3, description: \"This report may be emitted by a server in response to a command (action or register operation)\\nthat it does not understand.\\nThe `service_command` and `packet_crc` fields are copied from the command packet that was unhandled.\\nNote that it's possible to get an ACK, followed by such an error report.\", fields: [{ name: \"service_command\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"packet_crc\", type: \"u16\", storage: 2, isSimpleType: true }], identifierName: \"command_not_implemented\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"const\", name: \"instance_name\", identifier: 265, description: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\", fields: [{ name: \"_\", type: \"string\", storage: 0 }], optional: true, identifierName: \"instance_name\", packFormat: \"s\", derived: \"_base\" }, { kind: \"ro\", name: \"status_code\", identifier: 259, description: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"event\", name: \"status_code_changed\", identifier: 4, description: \"Notifies that the status code of the service changed.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code_changed\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"rw\", name: \"streaming_samples\", identifier: 3, description: \"Asks device to stream a given number of samples\\n(clients will typically write `255` to this register every second or so, while streaming is required).\", fields: [{ name: \"_\", unit: \"#\", type: \"u8\", storage: 1, isSimpleType: true }], internal: true, identifierName: \"streaming_samples\", packFormat: \"u8\", derived: \"_sensor\" }, { kind: \"rw\", name: \"streaming_interval\", identifier: 4, description: \"Period between packets of data when streaming in milliseconds.\", fields: [{ name: \"_\", unit: \"ms\", type: \"u32\", storage: 4, isSimpleType: true, defaultValue: 100, typicalMin: 1, typicalMax: 6e4 }], identifierName: \"streaming_interval\", packFormat: \"u32\", derived: \"_sensor\" }, { kind: \"const\", name: \"streaming_preferred_interval\", identifier: 258, description: \"Preferred default streaming interval for sensor in milliseconds.\", fields: [{ name: \"_\", unit: \"ms\", type: \"u32\", storage: 4, isSimpleType: true }], internal: true, optional: true, identifierName: \"streaming_preferred_interval\", packFormat: \"u32\", derived: \"_sensor\" }, { kind: \"ro\", name: \"wind_direction\", identifier: 257, description: \"The direction of the wind.\", fields: [{ name: \"_\", unit: \"\\xB0\", type: \"u16\", storage: 2, isSimpleType: true, absoluteMin: 0, absoluteMax: 359 }], volatile: true, identifierName: \"reading\", preferredInterval: 1e3, packFormat: \"u16\" }, { kind: \"ro\", name: \"wind_direction_error\", identifier: 262, description: \"Error on the wind direction reading\", fields: [{ name: \"_\", unit: \"\\xB0\", type: \"u16\", storage: 2, isSimpleType: true }], volatile: true, optional: true, identifierName: \"reading_error\", packFormat: \"u16\" }], tags: [\"8bit\"] }, { name: \"Wind speed\", status: \"rc\", shortId: \"windspeed\", camelName: \"windSpeed\", shortName: \"windSpeed\", extends: [\"_base\", \"_sensor\"], notes: { short: \"A sensor that measures wind speed.\" }, classIdentifier: 458824639, enums: {}, constants: {}, packets: [{ kind: \"report\", name: \"command_not_implemented\", identifier: 3, description: \"This report may be emitted by a server in response to a command (action or register operation)\\nthat it does not understand.\\nThe `service_command` and `packet_crc` fields are copied from the command packet that was unhandled.\\nNote that it's possible to get an ACK, followed by such an error report.\", fields: [{ name: \"service_command\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"packet_crc\", type: \"u16\", storage: 2, isSimpleType: true }], identifierName: \"command_not_implemented\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"const\", name: \"instance_name\", identifier: 265, description: \"A friendly name that describes the role of this service instance in the device.\\nIt often corresponds to what's printed on the device:\\nfor example, `A` for button A, or `S0` for servo channel 0.\\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).\", fields: [{ name: \"_\", type: \"string\", storage: 0 }], optional: true, identifierName: \"instance_name\", packFormat: \"s\", derived: \"_base\" }, { kind: \"ro\", name: \"status_code\", identifier: 259, description: \"Reports the current state or error status of the device. ``code`` is a standardized value from \\nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\\nstate. This report is typically not queried, when a device has an error, it will typically\\nadd this report in frame along with the announce packet. If a service implements this register,\\nit should also support the ``status_code_changed`` event defined below.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"event\", name: \"status_code_changed\", identifier: 4, description: \"Notifies that the status code of the service changed.\", fields: [{ name: \"code\", type: \"u16\", storage: 2, isSimpleType: true }, { name: \"vendor_code\", type: \"u16\", storage: 2, isSimpleType: true }], optional: true, identifierName: \"status_code_changed\", packFormat: \"u16 u16\", derived: \"_base\" }, { kind: \"rw\", name: \"streaming_samples\", identifier: 3, description: \"Asks device to stream a given number of samples\\n(clients will typically write `255` to this register every second or so, while streaming is required).\", fields: [{ name: \"_\", unit: \"#\", type: \"u8\", storage: 1, isSimpleType: true }], internal: true, identifierName: \"streaming_samples\", packFormat: \"u8\", derived: \"_sensor\" }, { kind: \"rw\", name: \"streaming_interval\", identifier: 4, description: \"Period between packets of data when streaming in milliseconds.\", fields: [{ name: \"_\", unit: \"ms\", type: \"u32\", storage: 4, isSimpleType: true, defaultValue: 100, typicalMin: 1, typicalMax: 6e4 }], identifierName: \"streaming_interval\", packFormat: \"u32\", derived: \"_sensor\" }, { kind: \"const\", name: \"streaming_preferred_interval\", identifier: 258, description: \"Preferred default streaming interval for sensor in milliseconds.\", fields: [{ name: \"_\", unit: \"ms\", type: \"u32\", storage: 4, isSimpleType: true }], internal: true, optional: true, identifierName: \"streaming_preferred_interval\", packFormat: \"u32\", derived: \"_sensor\" }, { kind: \"ro\", name: \"wind_speed\", identifier: 257, description: \"The velocity of the wind.\", fields: [{ name: \"_\", unit: \"m/s\", shift: 16, type: \"u16.16\", storage: 4 }], volatile: true, identifierName: \"reading\", preferredInterval: 6e4, packFormat: \"u16.16\" }, { kind: \"ro\", name: \"wind_speed_error\", identifier: 262, description: \"Error on the reading\", fields: [{ name: \"_\", unit: \"m/s\", shift: 16, type: \"u16.16\", storage: 4 }], volatile: true, optional: true, identifierName: \"reading_error\", packFormat: \"u16.16\" }, { kind: \"const\", name: \"max_wind_speed\", identifier: 261, description: \"Maximum speed that can be measured by the sensor.\", fields: [{ name: \"_\", unit: \"m/s\", shift: 16, type: \"u16.16\", storage: 4 }], optional: true, identifierName: \"max_reading\", packFormat: \"u16.16\" }], tags: [\"8bit\"] }];\n\n// src/jdom/spec.ts\nvar _serviceSpecifications = services_default;\nvar _serviceSpecificationMap = void 0;\nvar _customServiceSpecifications = {};\nfunction loadServiceSpecifications(specs) {\n  _serviceSpecifications = (specs == null ? void 0 : specs.slice(0)) || [];\n  _serviceSpecificationMap = void 0;\n}\nfunction addCustomServiceSpecification(service) {\n  if (service && service.classIdentifier) {\n    _customServiceSpecifications[service.classIdentifier] = service;\n    _serviceSpecificationMap = void 0;\n  }\n}\nfunction clearCustomServiceSpecifications() {\n  _customServiceSpecifications = {};\n  _serviceSpecificationMap = void 0;\n}\nfunction serviceMap() {\n  const m = {};\n  _serviceSpecifications.forEach((spec) => m[spec.shortId] = spec);\n  return m;\n}\nfunction serviceSpecifications() {\n  return _serviceSpecifications.slice(0);\n}\nfunction identifierToUrlPath(id) {\n  return id == null ? void 0 : id.replace(/-/g, \"/\").replace(/\\./g, \"\").toLowerCase();\n}\nfunction isInstanceOf(classIdentifier, requiredClassIdentifier) {\n  var _a;\n  if (isNaN(classIdentifier))\n    return false;\n  if (classIdentifier === requiredClassIdentifier)\n    return true;\n  const classSpec = serviceSpecificationFromClassIdentifier(classIdentifier);\n  return !!((_a = classSpec == null ? void 0 : classSpec.extends) == null ? void 0 : _a.some((extend) => {\n    const extendSpec = serviceSpecificationFromName(extend);\n    return !!extendSpec && isInstanceOf(extendSpec.classIdentifier, requiredClassIdentifier);\n  }));\n}\nfunction isInfrastructure(spec) {\n  return spec && ([\n    SRV_CONTROL,\n    SRV_ROLE_MANAGER,\n    SRV_LOGGER,\n    SRV_SETTINGS,\n    SRV_BOOTLOADER,\n    SRV_PROTO_TEST,\n    SRV_INFRASTRUCTURE,\n    SRV_PROXY,\n    SRV_UNIQUE_BRAIN,\n    SRV_DASHBOARD,\n    SRV_BRIDGE,\n    SRV_JACSCRIPT_CLOUD,\n    SRV_JACSCRIPT_CONDITION\n  ].indexOf(spec.classIdentifier) > -1 || spec.shortId[0] === \"_\");\n}\nfunction serviceSpecificationFromName(shortId) {\n  if (!shortId)\n    return void 0;\n  return _serviceSpecifications.find((s) => s.shortId === shortId) || Object.values(_customServiceSpecifications).find((ser) => ser.shortId === shortId);\n}\nfunction serviceSpecificationFromClassIdentifier(classIdentifier) {\n  if (isNaN(classIdentifier))\n    return void 0;\n  let srv = _serviceSpecificationMap == null ? void 0 : _serviceSpecificationMap[classIdentifier];\n  if (srv)\n    return srv;\n  srv = _serviceSpecifications.find((s) => s.classIdentifier === classIdentifier) || _customServiceSpecifications[classIdentifier];\n  if (srv) {\n    if (!_serviceSpecificationMap)\n      _serviceSpecificationMap = {};\n    _serviceSpecificationMap[classIdentifier] = srv;\n  }\n  return srv;\n}\nfunction isSensor(spec) {\n  return spec && spec.packets.some((pkt) => isReading(pkt)) && spec.packets.some((pkt) => pkt.identifier == 3 /* StreamingSamples */);\n}\nfunction isActuator(spec) {\n  return spec && spec.packets.some((pkt) => pkt.identifier === 2 /* Value */) && spec.packets.some((pkt) => pkt.identifier === 1 /* Intensity */);\n}\nfunction isRegister2(pkt) {\n  return pkt && (pkt.kind == \"const\" || pkt.kind == \"ro\" || pkt.kind == \"rw\");\n}\nfunction isReading(pkt) {\n  return pkt && pkt.kind == \"ro\" && pkt.identifier == 257 /* Reading */;\n}\nvar ignoredRegister = [\n  259 /* StatusCode */,\n  265 /* InstanceName */,\n  4 /* StreamingInterval */,\n  258 /* StreamingPreferredInterval */,\n  3 /* StreamingSamples */,\n  262 /* ReadingError */,\n  264 /* ReadingResolution */,\n  260 /* MinReading */,\n  261 /* MaxReading */,\n  272 /* MinValue */,\n  273 /* MaxValue */,\n  7 /* MaxPower */\n];\nfunction isHighLevelRegister(pkt) {\n  return isRegister2(pkt) && !pkt.lowLevel && !pkt.internal && ignoredRegister.indexOf(pkt.identifier) < 0;\n}\nvar ignoredEvents = [4 /* StatusCodeChanged */];\nfunction isHighLevelEvent(pkt) {\n  return isEvent(pkt) && !pkt.lowLevel && !pkt.internal && ignoredEvents.indexOf(pkt.identifier) < 0;\n}\nfunction isOptionalReadingRegisterCode(code) {\n  const regs = [\n    260 /* MinReading */,\n    261 /* MaxReading */,\n    262 /* ReadingError */,\n    264 /* ReadingResolution */,\n    258 /* StreamingPreferredInterval */\n  ];\n  return regs.indexOf(code) > -1;\n}\nfunction isIntensity(pkt) {\n  return pkt && pkt.kind == \"rw\" && pkt.identifier == 1 /* Intensity */;\n}\nfunction isValue(pkt) {\n  return pkt && pkt.kind == \"rw\" && pkt.identifier == 2 /* Value */;\n}\nfunction isValueOrIntensity(pkt) {\n  return pkt && pkt.kind == \"rw\" && (pkt.identifier == 2 /* Value */ || pkt.identifier == 1 /* Intensity */);\n}\nfunction isConstRegister(pkt) {\n  return (pkt == null ? void 0 : pkt.kind) === \"const\";\n}\nfunction isReadOnlyRegister(pkt) {\n  return (pkt == null ? void 0 : pkt.kind) !== \"rw\";\n}\nfunction isEvent(pkt) {\n  return pkt.kind == \"event\";\n}\nfunction isCommand(pkt) {\n  return pkt.kind == \"command\";\n}\nfunction isPipeReport(pkt) {\n  return pkt.kind == \"pipe_report\";\n}\nfunction isReportOf(cmd, report) {\n  return report.secondary && report.kind == \"report\" && cmd.kind == \"command\" && cmd.name == report.name;\n}\nfunction isPipeReportOf(cmd, pipeReport) {\n  return pipeReport.kind == \"pipe_report\" && cmd.kind == \"command\" && cmd.pipeType && cmd.pipeType === pipeReport.pipeType;\n}\nfunction isIntegerType(tp) {\n  return /^[ui]\\d+(\\.|$)/.test(tp) || tp == \"pipe_port\" || tp == \"bool\";\n}\nfunction numberFormatFromStorageType(tp) {\n  switch (tp) {\n    case -1:\n      return 1 /* Int8LE */;\n    case 1:\n      return 2 /* UInt8LE */;\n    case -2:\n      return 3 /* Int16LE */;\n    case 2:\n      return 4 /* UInt16LE */;\n    case -4:\n      return 5 /* Int32LE */;\n    case 4:\n      return 11 /* UInt32LE */;\n    case -8:\n      return 19 /* Int64LE */;\n    case 8:\n      return 17 /* UInt64LE */;\n    case 0:\n      return null;\n    default:\n      return null;\n  }\n}\nfunction numberFormatToStorageType(nf) {\n  switch (nf) {\n    case 1 /* Int8LE */:\n      return -1;\n    case 2 /* UInt8LE */:\n      return 1;\n    case 3 /* Int16LE */:\n      return -2;\n    case 4 /* UInt16LE */:\n      return 2;\n    case 5 /* Int32LE */:\n      return -4;\n    case 11 /* UInt32LE */:\n      return 4;\n    case 19 /* Int64LE */:\n      return -8;\n    case 17 /* UInt64LE */:\n      return 8;\n    default:\n      return null;\n  }\n}\nfunction scaleIntToFloat(v, info) {\n  if (!info.shift)\n    return v;\n  if (info.shift < 0)\n    return v * (1 << -info.shift);\n  else\n    return v / (1 << info.shift);\n}\nfunction scaleFloatToInt(v, info) {\n  if (!info.shift)\n    return v;\n  if (info.shift < 0)\n    return Math.round(v / (1 << -info.shift));\n  else\n    return Math.round(v * (1 << info.shift));\n}\nfunction storageTypeRange(tp) {\n  if (tp == 0)\n    throw new Error(\"no range for 0\");\n  if (tp < 0) {\n    const v = Math.pow(2, -tp * 8 - 1);\n    return [-v, v - 1];\n  } else {\n    const v = Math.pow(2, tp * 8);\n    return [0, v - 1];\n  }\n}\nfunction clampToStorage(v, tp) {\n  if (tp == null)\n    return v;\n  const [min, max] = storageTypeRange(tp);\n  if (isNaN(v))\n    return 0;\n  if (v < min)\n    return min;\n  if (v > max)\n    return max;\n  return v;\n}\nfunction memberValueToString(value, info) {\n  if (value === void 0 || value === null)\n    return \"\";\n  switch (info.type) {\n    case \"bytes\":\n      return toHex2(value);\n    case \"string\":\n      return value;\n    default:\n      return \"\" + value;\n  }\n}\nfunction tryParseMemberValue(text, info) {\n  if (!text)\n    return {};\n  if (info.type === \"string\")\n    return { value: text };\n  else if (info.type === \"pipe\")\n    return {};\n  else if (info.type === \"bytes\") {\n    try {\n      return { value: fromHex(text) };\n    } catch (e) {\n      return {\n        error: \"invalid hexadecimal format\"\n      };\n    }\n  } else {\n    const n = isIntegerType(info.type) ? parseInt(text) : parseFloat(text);\n    if (isNaN(n))\n      return { error: \"invalid format\" };\n    else\n      return { value: n };\n  }\n}\nfunction parseDeviceId(id) {\n  if (!id)\n    return void 0;\n  id = id.replace(/\\s/g, \"\");\n  if (id.length != 16 || !/^[a-f0-9]+$/i.test(id))\n    return void 0;\n  return fromHex(id);\n}\nfunction parseDualDeviceId(id) {\n  const rid = parseDeviceId(id);\n  toggleBit(rid, 0);\n  return rid;\n}\nfunction dualDeviceId(id) {\n  return toHex2(parseDualDeviceId(id));\n}\nfunction isDualDeviceId(left, right) {\n  const lid = parseDeviceId(left);\n  const rid = parseDualDeviceId(right);\n  return bufferEq(lid, rid);\n}\n\n// src/jdom/pack.ts\nvar ch_b = 98;\nvar ch_i = 105;\nvar ch_r = 114;\nvar ch_s = 115;\nvar ch_u = 117;\nvar ch_x = 120;\nvar ch_z = 122;\nvar ch_colon = 58;\nvar ch_sq_open = 91;\nvar ch_sq_close = 93;\nfunction numberFormatOfType(tp) {\n  switch (tp) {\n    case \"u8\":\n      return 2 /* UInt8LE */;\n    case \"u16\":\n      return 4 /* UInt16LE */;\n    case \"u32\":\n      return 11 /* UInt32LE */;\n    case \"i8\":\n      return 1 /* Int8LE */;\n    case \"i16\":\n      return 3 /* Int16LE */;\n    case \"i32\":\n      return 5 /* Int32LE */;\n    case \"f32\":\n      return 13 /* Float32LE */;\n    case \"f64\":\n      return 14 /* Float64LE */;\n    case \"i64\":\n      return 19 /* Int64LE */;\n    case \"u64\":\n      return 17 /* UInt64LE */;\n    default:\n      return null;\n  }\n}\nfunction bufferSlice(buf, start, end) {\n  return buf.slice(start, end);\n}\nvar TokenParser = class {\n  constructor(fmt) {\n    this.fmt = fmt;\n    this.fp = 0;\n  }\n  parse() {\n    this.div = 1;\n    this.isArray = false;\n    const fmt = this.fmt;\n    while (this.fp < fmt.length) {\n      let endp = this.fp;\n      while (endp < fmt.length && fmt.charCodeAt(endp) != 32)\n        endp++;\n      let word = fmt.slice(this.fp, endp);\n      this.fp = endp + 1;\n      if (!word)\n        continue;\n      const dotIdx = word.indexOf(\".\");\n      let c0 = word.charCodeAt(0);\n      if ((c0 == ch_i || c0 == ch_u) && dotIdx >= 0) {\n        const sz0 = parseInt(word.slice(1, dotIdx));\n        const sz1 = parseInt(word.slice(dotIdx + 1));\n        word = word[0] + (sz0 + sz1);\n        this.div = 1 << sz1;\n      }\n      const c1 = word.charCodeAt(1);\n      if (c1 == ch_sq_open) {\n        this.size = parseInt(word.slice(2));\n      } else {\n        this.size = -1;\n      }\n      if (word.charCodeAt(word.length - 1) == ch_sq_close && word.charCodeAt(word.length - 2) == ch_sq_open) {\n        word = word.slice(0, -2);\n        this.isArray = true;\n      }\n      this.nfmt = numberFormatOfType(word);\n      this.word = word;\n      if (this.nfmt == null) {\n        if (c0 == ch_r) {\n          if (c1 != ch_colon)\n            c0 = 0;\n        } else if (c0 == ch_s || c0 == ch_b || c0 == ch_x) {\n          if (word.length != 1 && this.size == -1)\n            c0 = 0;\n        } else if (c0 == ch_z) {\n          if (word.length != 1)\n            c0 = 0;\n        } else {\n          c0 = 0;\n        }\n        if (c0 == 0)\n          throw new Error(`invalid format: ${word}`);\n        this.c0 = c0;\n      } else {\n        this.size = sizeOfNumberFormat(this.nfmt);\n        this.c0 = -1;\n      }\n      return true;\n    }\n    return false;\n  }\n};\nfunction jdunpackCore(buf, fmt, repeat) {\n  const repeatRes = repeat ? [] : null;\n  let res = [];\n  let off = 0;\n  let fp0 = 0;\n  const parser = new TokenParser(fmt);\n  if (repeat && buf.length == 0)\n    return [];\n  while (parser.parse()) {\n    if (parser.isArray && !repeat) {\n      res.push(jdunpackCore(bufferSlice(buf, off, buf.length), fmt.slice(fp0), 1));\n      return res;\n    }\n    fp0 = parser.fp;\n    let sz = parser.size;\n    const c0 = parser.c0;\n    if (c0 == ch_z) {\n      let endoff = off;\n      while (endoff < buf.length && buf[endoff] != 0)\n        endoff++;\n      sz = endoff - off;\n    } else if (sz < 0) {\n      sz = buf.length - off;\n    }\n    if (parser.nfmt !== null) {\n      let v = getNumber(buf, parser.nfmt, off);\n      if (parser.div != 1)\n        v /= parser.div;\n      res.push(v);\n      off += parser.size;\n    } else {\n      const subbuf = bufferSlice(buf, off, off + sz);\n      if (c0 == ch_z || c0 == ch_s) {\n        let zerop = 0;\n        while (zerop < subbuf.length && subbuf[zerop] != 0)\n          zerop++;\n        res.push(bufferToString(bufferSlice(subbuf, 0, zerop)));\n      } else if (c0 == ch_b) {\n        res.push(subbuf);\n      } else if (c0 == ch_x) {\n      } else if (c0 == ch_r) {\n        res.push(jdunpackCore(subbuf, fmt.slice(fp0), 2));\n        break;\n      } else {\n        throw new Error(`whoops`);\n      }\n      off += subbuf.length;\n      if (c0 == ch_z)\n        off++;\n    }\n    if (repeat && parser.fp >= fmt.length) {\n      parser.fp = 0;\n      if (repeat == 2) {\n        repeatRes.push(res);\n        res = [];\n      }\n      if (off >= buf.length)\n        break;\n    }\n  }\n  if (repeat == 2) {\n    if (res.length)\n      repeatRes.push(res);\n    return repeatRes;\n  } else {\n    return res;\n  }\n}\nfunction jdunpack(buf, fmt) {\n  if (!buf || !fmt)\n    return void 0;\n  if (fmt === \"b\")\n    return [buf.slice(0)];\n  let nf = numberFormatOfType(fmt);\n  if (nf !== null) {\n    let sz = sizeOfNumberFormat(nf);\n    if (buf.length === 4 && nf === 17 /* UInt64LE */) {\n      nf = 11 /* UInt32LE */;\n      sz = 4;\n    }\n    if (buf.length < sz) {\n      throw new Error(`size mistmatch, expected ${fmt} (${sz} bytes), got ${buf.length}`);\n    }\n    return [getNumber(buf, nf, 0)];\n  }\n  return jdunpackCore(buf, fmt, 0);\n}\nfunction jdpackCore(trg, fmt, data, off) {\n  let idx = 0;\n  const parser = new TokenParser(fmt);\n  while (parser.parse()) {\n    const c0 = parser.c0;\n    if (c0 == ch_x) {\n      off += parser.size;\n      continue;\n    }\n    const dataItem = data[idx++];\n    if (c0 == ch_r && dataItem) {\n      const fmt0 = fmt.slice(parser.fp);\n      for (const velt of dataItem) {\n        off = jdpackCore(trg, fmt0, velt, off);\n      }\n      break;\n    }\n    let arr;\n    if (parser.isArray)\n      arr = dataItem;\n    else\n      arr = [dataItem];\n    for (const v of arr) {\n      if (parser.nfmt !== null) {\n        if (typeof v != \"number\")\n          throw new Error(`expecting number, got ` + typeof v);\n        if (trg) {\n          const st = numberFormatToStorageType(parser.nfmt);\n          setNumber(trg, parser.nfmt, off, st == null ? v * parser.div : clampToStorage(Math.round(v * parser.div), st));\n        }\n        off += parser.size;\n      } else {\n        let buf;\n        if (typeof v === \"string\") {\n          if (c0 == ch_z)\n            buf = stringToBuffer(v + \"\\0\");\n          else if (c0 == ch_s)\n            buf = stringToBuffer(v);\n          else\n            throw new Error(`unexpected string`);\n        } else if (v && typeof v === \"object\" && v.length != null) {\n          if (c0 == ch_b)\n            buf = v;\n          else\n            throw new Error(`unexpected buffer`);\n        } else {\n          throw new Error(`expecting string or buffer`);\n        }\n        let sz = parser.size;\n        if (sz >= 0) {\n          if (buf.length > sz)\n            buf = bufferSlice(buf, 0, sz);\n        } else {\n          sz = buf.length;\n        }\n        if (trg)\n          trg.set(buf, off);\n        off += sz;\n      }\n    }\n  }\n  if (data.length > idx)\n    throw new Error(`format '${fmt}' too short`);\n  return off;\n}\nfunction jdpack(fmt, data) {\n  var _a;\n  if (!fmt || !data)\n    return void 0;\n  if (fmt === \"b\")\n    return (_a = data[0]) == null ? void 0 : _a.slice(0);\n  const nf = numberFormatOfType(fmt);\n  if (nf !== null) {\n    const buf = new Uint8Array(sizeOfNumberFormat(nf));\n    setNumber(buf, nf, 0, data[0]);\n    return buf;\n  }\n  const len = jdpackCore(null, fmt, data, 0);\n  const res = new Uint8Array(len);\n  jdpackCore(res, fmt, data, 0);\n  return res;\n}\nfunction jdpackEqual(fmt, left, right) {\n  if (!left !== !right)\n    return false;\n  if (!left)\n    return true;\n  const leftBuffer = jdpack(fmt, left);\n  const rightBuffer = jdpack(fmt, right);\n  return bufferEq(leftBuffer, rightBuffer);\n}\n\n// src/jdom/pretty.ts\nvar RegisterType = /* @__PURE__ */ ((RegisterType2) => {\n  RegisterType2[RegisterType2[\"UInt\"] = 0] = \"UInt\";\n  RegisterType2[RegisterType2[\"UIntHex\"] = 1] = \"UIntHex\";\n  RegisterType2[RegisterType2[\"Int\"] = 2] = \"Int\";\n  RegisterType2[RegisterType2[\"IntArray\"] = 3] = \"IntArray\";\n  RegisterType2[RegisterType2[\"String\"] = 4] = \"String\";\n  return RegisterType2;\n})(RegisterType || {});\nfunction prettyUnit2(u) {\n  switch (u) {\n    case \"us\":\n      return \"\\u03BCs\";\n    case \"C\":\n    case \"Cel\":\n      return \"\\xB0C\";\n    case \"K\":\n      return \"\\xB0K\";\n    case \"/\":\n    case \"#\":\n      return \"\";\n    default:\n      return u;\n  }\n}\nfunction prettyMemberUnit(specification, showDataType) {\n  const parts = [\n    prettyUnit2(specification.unit),\n    isSet(specification.typicalMin) && `[${specification.typicalMin}, ${specification.typicalMax}]`,\n    isSet(specification.absoluteMin) && `absolute [${specification.absoluteMin}, ${specification.absoluteMax}]`\n  ].filter((f) => isSet(f) && f);\n  if (showDataType)\n    parts.unshift(specification.type);\n  const helperText = parts.join(\", \");\n  return helperText;\n}\nfunction prettySize(b) {\n  b = b | 0;\n  if (b < 1e3)\n    return b + \"b\";\n  else if (b < 1e6)\n    return roundWithPrecision(b / 1e3, 1) + \"kb\";\n  else\n    return roundWithPrecision(b / 1e6, 1) + \"mb\";\n}\nfunction prettyDuration(ms) {\n  let s = ms / 1e3;\n  if (s < 1)\n    return `${roundWithPrecision(s, 2)}s`;\n  if (s < 10)\n    return `${roundWithPrecision(s, 1)}s`;\n  if (s < 60)\n    return `${Math.floor(s)}s`;\n  let r = \"\";\n  const d = Math.floor(s / (24 * 3600));\n  if (d > 0) {\n    r += d + \":\";\n    s -= d * (24 * 3600);\n  }\n  const h = Math.floor(s / 3600);\n  if (h > 0) {\n    r += h + \":\";\n    s -= h * 3600;\n  }\n  const m = Math.floor(s / 60);\n  if (d > 0 || h > 0 || m > 0) {\n    r += m + \":\";\n    s -= m * 60;\n  }\n  r += Math.floor(s);\n  return r;\n}\nfunction prettyMicroDuration(us) {\n  if (us < 1e3)\n    return `${us}${prettyUnit2(\"us\")}`;\n  else\n    return prettyDuration(us / 1e3);\n}\nfunction shortDeviceId(devid) {\n  const h = hash(fromHex(devid), 30);\n  return String.fromCharCode(65 + h % 26) + String.fromCharCode(65 + idiv(h, 26) % 26) + String.fromCharCode(48 + idiv(h, 26 * 26) % 10) + String.fromCharCode(48 + idiv(h, 26 * 26 * 10) % 10);\n}\nfunction decodeMember(service, pktInfo, member, pkt, offset) {\n  var _a;\n  if (!member)\n    return null;\n  if (pkt.data.length <= offset)\n    return null;\n  let numValue = void 0;\n  let scaledValue = void 0;\n  let value = void 0;\n  let humanValue = void 0;\n  let size = Math.abs(member.storage);\n  const enumInfo = service == null ? void 0 : service.enums[member.type];\n  const isInt = isIntegerType(member.type) || !!enumInfo;\n  if (member.isFloat && (size == 4 || size == 8)) {\n    if (size == 4)\n      numValue = pkt.getNumber(13 /* Float32LE */, offset);\n    else\n      numValue = pkt.getNumber(14 /* Float64LE */, offset);\n    value = scaledValue = numValue;\n    if (Math.abs(value) < 10)\n      humanValue = value.toFixed(5);\n    else if (Math.abs(value) < 1e3)\n      humanValue = value.toFixed(3);\n    else if (Math.abs(value) < 1e5)\n      humanValue = value.toFixed(2);\n    else\n      humanValue = \"\" + value;\n    if (member.unit)\n      humanValue += prettyUnit2(member.unit);\n  } else if (!isInt) {\n    if (member.type == \"string0\") {\n      let ptr = offset;\n      while (ptr < pkt.data.length) {\n        if (!pkt.data[ptr++])\n          break;\n      }\n      size = ptr - offset;\n    }\n    const buf = size ? pkt.data.slice(offset, offset + size) : pkt.data.slice(offset);\n    if (member.type == \"string\" || member.type == \"string0\") {\n      try {\n        value = fromUTF8(uint8ArrayToString(buf));\n      } catch {\n        value = uint8ArrayToString(buf);\n      }\n      humanValue = JSON.stringify(value).replace(/\\\\u0000/g, \"\\\\0\");\n    } else if (member.type == \"pipe\") {\n      value = buf;\n      const devid = toHex2(buf.slice(0, 8));\n      const port = read16(buf, 8);\n      humanValue = \"pipe to \" + shortDeviceId(devid) + \" port:\" + port;\n      if ((_a = pkt == null ? void 0 : pkt.device) == null ? void 0 : _a.bus) {\n        const trg = pkt.device.bus.device(devid, true);\n        if (trg)\n          trg.port(port).pipeType = (service == null ? void 0 : service.shortId) + \".\" + pktInfo.pipeType + \".report\";\n      }\n    } else {\n      value = buf;\n      humanValue = hexDump(buf);\n    }\n    size = buf.length;\n  } else {\n    const fmt = numberFormatFromStorageType(member.storage);\n    numValue = pkt.getNumber(fmt, offset);\n    value = scaledValue = scaleIntToFloat(numValue, member);\n    if (pkt.device && member.type == \"pipe_port\")\n      pkt.device.port(value).pipeType = (service == null ? void 0 : service.shortId) + \".\" + pktInfo.pipeType + \".command\";\n    if (enumInfo) {\n      if (enumInfo.isFlags) {\n        humanValue = \"\";\n        let curr = numValue;\n        for (const key of Object.keys(enumInfo.members)) {\n          const val = enumInfo.members[key];\n          if ((curr & val) == val) {\n            if (humanValue)\n              humanValue += \" | \";\n            humanValue += key;\n            curr &= ~val;\n          }\n        }\n        if (curr) {\n          if (humanValue)\n            humanValue += \" | \";\n          humanValue += hexNum(curr);\n        }\n      } else {\n        humanValue = reverseLookup(enumInfo.members, numValue);\n      }\n    } else if (member.type == \"bool\") {\n      value = !!numValue;\n      humanValue = value ? \"true\" : \"false\";\n    } else if (member.unit === \"ms\")\n      humanValue = prettyDuration(value);\n    else if (member.unit === \"us\")\n      humanValue = prettyMicroDuration(value);\n    else if (member.unit || scaledValue != numValue) {\n      let v = scaledValue;\n      if (member.unit)\n        v = roundWithPrecision(v, 3);\n      humanValue = \"\" + v;\n      if (member.unit)\n        humanValue += prettyUnit2(member.unit);\n    } else {\n      humanValue = scaledValue + \"\";\n      if ((scaledValue | 0) == scaledValue && (!member.unit || scaledValue >= 15)) {\n        if (!member.unit)\n          humanValue = hexNum(scaledValue);\n        else\n          humanValue += \" (\" + hexNum(scaledValue) + \")\";\n      } else if (scaledValue && member.storage == 8) {\n        const did = toHex2(pkt.data.slice(offset, offset + 8));\n        humanValue += ` (${did} / ${shortDeviceId(did)})`;\n      }\n    }\n  }\n  return {\n    value,\n    numValue,\n    scaledValue,\n    humanValue,\n    description: member.name + \":\" + (!humanValue ? \"?\" : humanValue.indexOf(\"\\n\") >= 0 ? \"\\n\" + humanValue.replace(/^/gm, \"      \") : \" \" + humanValue),\n    info: member,\n    size\n  };\n}\nfunction valueToFlags(enumInfo, value) {\n  const r = [];\n  const curr = value;\n  for (const key of Object.keys(enumInfo.members)) {\n    const val = enumInfo.members[key];\n    if (curr & val) {\n      r.push(val);\n    }\n  }\n  return r;\n}\nfunction flagsToValue(values2) {\n  return values2.reduce((prev, cur) => prev | cur, 0);\n}\nfunction decodeMembers(service, pktInfo, pkt, off = 0) {\n  const fields = pktInfo.fields.slice(0);\n  let startRep = fields.findIndex((f) => f.startRepeats);\n  let fidx = 0;\n  const res = [];\n  while (off < pkt.data.length) {\n    if (fidx >= fields.length && startRep >= 0)\n      fidx = startRep;\n    const member = fields[fidx++];\n    if (!member) {\n      break;\n    }\n    const decoded = decodeMember(service, pktInfo, member, pkt, off);\n    if (decoded) {\n      off += decoded.size;\n      res.push(decoded);\n    } else {\n      break;\n    }\n  }\n  return res;\n}\nfunction wrapDecodedMembers(decoded) {\n  if (decoded.length == 0)\n    return \" {}\";\n  else if (decoded.length == 1 && decoded[0].description.length < 60)\n    return \" { \" + decoded[0].description + \" }\";\n  else\n    return \" {\\n\" + decoded.map((d) => \"    \" + d.description).join(\"\\n\") + \"\\n}\";\n}\nfunction syntheticPktInfo(kind, addr) {\n  return {\n    kind,\n    identifier: addr,\n    name: hexNum(addr),\n    description: \"\",\n    fields: [\n      {\n        name: \"_\",\n        type: \"bytes\",\n        storage: 0\n      }\n    ]\n  };\n}\nfunction decodeRegister(service, pkt) {\n  const isSet2 = pkt.isRegisterSet;\n  const isGet = pkt.isRegisterGet;\n  if (!isSet2 && !isGet)\n    return null;\n  let error = \"\";\n  const addr = pkt.serviceCommand & CMD_REG_MASK;\n  let regInfo = service == null ? void 0 : service.packets.find((p) => isRegister2(p) && p.identifier == addr);\n  if (!regInfo) {\n    regInfo = syntheticPktInfo(\"rw\", addr);\n    error = `unable to decode register`;\n  }\n  const decoded = decodeMembers(service, regInfo, pkt);\n  if (regInfo.packFormat && pkt.data.length) {\n    try {\n      const recoded = toHex2(jdpack(regInfo.packFormat, jdunpack(pkt.data, regInfo.packFormat)));\n      if (recoded !== void 0 && recoded !== toHex2(pkt.data)) {\n        error = `invalid data packing, ${toHex2(pkt.data)} recoded to ${recoded}`;\n      }\n    } catch (e) {\n      error = `invalid data packing, ${e.message}`;\n    }\n  }\n  let description = \"\";\n  if (decoded.length == 0)\n    description = regInfo.name;\n  else if (decoded.length == 1)\n    description = regInfo.name + \": \" + decoded[0].humanValue;\n  else\n    description = wrapDecodedMembers(decoded);\n  if (isGet)\n    description = \"GET \" + description;\n  else\n    description = \"SET \" + description;\n  return {\n    service,\n    info: regInfo,\n    decoded,\n    description,\n    error\n  };\n}\nfunction decodeEvent(service, pkt) {\n  if (pkt.isCommand || !pkt.isEvent)\n    return null;\n  const evCode = pkt.eventCode;\n  const evInfo = (service == null ? void 0 : service.packets.find((p) => p.kind == \"event\" && p.identifier == evCode)) || syntheticPktInfo(\"event\", evCode);\n  const decoded = decodeMembers(service, evInfo, pkt);\n  const description = `EVENT[${pkt.eventCounter}] ${evInfo.name}` + wrapDecodedMembers(decoded);\n  return {\n    service,\n    info: evInfo,\n    decoded,\n    description\n  };\n}\nfunction decodeCommand(service, pkt) {\n  const kind = pkt.isCommand ? \"command\" : \"report\";\n  const cmdInfo = (service == null ? void 0 : service.packets.find((p) => p.kind == kind && p.identifier == pkt.serviceCommand)) || syntheticPktInfo(kind, pkt.serviceCommand);\n  const decoded = decodeMembers(service, cmdInfo, pkt);\n  const description = (pkt.isCommand ? \"CMD \" : \"REPORT \") + cmdInfo.name + wrapDecodedMembers(decoded);\n  return {\n    service,\n    info: cmdInfo,\n    decoded,\n    description\n  };\n}\nfunction decodeCRCack(service, pkt) {\n  if (!pkt.isReport || !pkt.isCRCAck)\n    return null;\n  return {\n    service,\n    info: syntheticPktInfo(\"report\", pkt.serviceCommand),\n    decoded: [],\n    description: \"CRC-ACK \" + hexNum(pkt.serviceCommand)\n  };\n}\nfunction decodePacket(service, pkt) {\n  const decoded = decodeCRCack(service, pkt) || decodeRegister(service, pkt) || decodeEvent(service, pkt) || decodeCommand(service, pkt);\n  return decoded;\n}\nfunction decodePipe(pkt) {\n  const cmd = pkt.serviceCommand;\n  const pinfo = pkt.device.port(cmd >> PIPE_PORT_SHIFT);\n  if (!pinfo.pipeType)\n    return null;\n  const [servId, pipeType, dir] = pinfo.pipeType.split(/\\./);\n  const service = serviceSpecificationFromName(servId);\n  if (!service)\n    return null;\n  const meta = !!(cmd & PIPE_METADATA_MASK);\n  const candidates = service.packets.filter((p) => p.pipeType == pipeType && /pipe/.test(p.kind) && /meta/.test(p.kind) == meta && /command/.test(p.kind) == (dir == \"command\")).filter((p) => !meta || pkt.getNumber(4 /* UInt16LE */, 0) == p.identifier);\n  const cmdInfo = candidates[0];\n  if (cmdInfo) {\n    const decoded = decodeMembers(service, cmdInfo, pkt, meta ? 4 : 0);\n    const description = cmdInfo.kind.toUpperCase() + \" \" + cmdInfo.name + wrapDecodedMembers(decoded);\n    return {\n      service,\n      info: cmdInfo,\n      decoded,\n      description\n    };\n  }\n  return null;\n}\nfunction decodePacketData(pkt) {\n  try {\n    if (pkt.device && pkt.isPipe) {\n      const info = decodePipe(pkt);\n      if (info)\n        return info;\n    }\n    const serviceClass2 = pkt.serviceClass;\n    const service = serviceSpecificationFromClassIdentifier(serviceClass2);\n    return decodePacket(service, pkt);\n  } catch (error) {\n    console.error(error, {\n      error,\n      pkt,\n      data: toHex2(pkt.data)\n    });\n    throw error;\n  }\n}\nfunction reverseLookup(map, n) {\n  for (const k of Object.keys(map)) {\n    if (map[k] == n)\n      return k;\n  }\n  return hexNum(n);\n}\nfunction serviceClass(name) {\n  const serv = serviceSpecificationFromName(name);\n  return serv ? serv.classIdentifier : -1;\n}\nfunction serviceName(serviceClass2) {\n  if (!isSet(serviceClass2))\n    return \"?\";\n  const serv = serviceSpecificationFromClassIdentifier(serviceClass2);\n  return serv ? serv.name.toUpperCase() : \"?\";\n}\nfunction serviceShortIdOrClass(serviceClass2) {\n  if (!isSet(serviceClass2))\n    return \"?\";\n  const serv = serviceSpecificationFromClassIdentifier(serviceClass2);\n  return (serv == null ? void 0 : serv.shortId) || `0x${serviceClass2.toString(16)}`;\n}\nfunction deviceServiceName(pkt) {\n  var _a, _b;\n  const srv_class = (_a = pkt == null ? void 0 : pkt.device) == null ? void 0 : _a.serviceClassAt(pkt.serviceIndex);\n  const serv_id = serviceName(srv_class);\n  return `${((_b = pkt == null ? void 0 : pkt.device) == null ? void 0 : _b.shortId) || \"?\"}/${serv_id}:${pkt.serviceIndex}`;\n}\nfunction commandName(n, serviceClass2) {\n  var _a, _b, _c, _d;\n  let pref = \"\";\n  if ((n & CMD_TOP_MASK) == CMD_SET_REG)\n    pref = \"SET[\";\n  else if ((n & CMD_TOP_MASK) == CMD_GET_REG)\n    pref = \"GET[\";\n  if (pref) {\n    const reg = n & CMD_REG_MASK;\n    let regName = (_a = SystemReg[reg]) == null ? void 0 : _a.toLowerCase();\n    if (regName === void 0) {\n      const serviceSpec = serviceSpecificationFromClassIdentifier(serviceClass2);\n      regName = (_b = serviceSpec == null ? void 0 : serviceSpec.packets.find((pkt) => isRegister2(pkt) && pkt.identifier === reg)) == null ? void 0 : _b.name;\n    }\n    return pref + (regName !== void 0 ? regName : `x${reg.toString(16)}`) + \"]\";\n  }\n  let r = (_c = SystemCmd[n]) == null ? void 0 : _c.toLowerCase();\n  if (r === void 0) {\n    const serviceSpec = serviceSpecificationFromClassIdentifier(serviceClass2);\n    r = (_d = serviceSpec == null ? void 0 : serviceSpec.packets.find((pkt) => (pkt.kind === \"command\" || pkt.kind === \"report\") && pkt.identifier === n)) == null ? void 0 : _d.name;\n  }\n  return r;\n}\nfunction num2str(n) {\n  return n + \" (0x\" + n.toString(16) + \")\";\n}\nfunction toAscii(d) {\n  let r = \"\";\n  for (let i = 0; i < d.length; ++i) {\n    const c = d[i];\n    if (c < 32 || c >= 127)\n      r += \".\";\n    else\n      r += String.fromCharCode(c);\n  }\n  return r;\n}\nfunction hexDump(d) {\n  const chunk = 32;\n  if (d.length <= chunk)\n    return toHex2(d) + \"\\xA0|\\xA0\" + toAscii(d);\n  const a = toArray(d);\n  let r = \"\";\n  for (let i = 0; i < d.length; i += chunk) {\n    if (i + chunk >= d.length) {\n      let s = toHex2(a.slice(i));\n      while (s.length < chunk * 2)\n        s += \"  \";\n      r += s + \"\\xA0|\\xA0\" + toAscii(a.slice(i));\n    } else {\n      r += hexDump(a.slice(i, i + chunk)) + \"\\n\";\n    }\n  }\n  return r;\n}\nfunction printPacket(pkt, opts = {}) {\n  const frame_flags = pkt.frameFlags;\n  const devname = pkt.friendlyDeviceName;\n  const service_name = pkt.friendlyServiceName;\n  const cmdname = pkt.friendlyCommandName || hexNum(pkt.serviceCommand);\n  const sender = pkt.sender;\n  if (opts.skipResetIn && pkt.serviceIndex === JD_SERVICE_INDEX_CTRL && pkt.serviceCommand === (CMD_SET_REG | 128 /* ResetIn */))\n    return \"\";\n  let pdesc = `${devname}/${service_name}: ${cmdname}; sz=${pkt.size}`;\n  if (frame_flags & JD_FRAME_FLAG_COMMAND)\n    pdesc = \"to \" + pdesc;\n  else\n    pdesc = \"from \" + pdesc;\n  if (frame_flags & JD_FRAME_FLAG_ACK_REQUESTED)\n    pdesc = `[ack:${hexNum(pkt.crc)}] ` + pdesc;\n  const d = pkt.data;\n  if (pkt.device && pkt.serviceIndex == JD_SERVICE_INDEX_CTRL && pkt.serviceCommand == CMD_ADVERTISEMENT_DATA) {\n    if (pkt.device.lastServiceUpdate < pkt.timestamp) {\n      if (opts.skipRepeatedAnnounce)\n        return \"\";\n      else\n        pdesc = \" ====== \" + pdesc;\n    } else {\n      pdesc += \"; Announce services: \" + pkt.device.serviceClasses.map(serviceName).join(\", \");\n    }\n  } else if (pkt.isRepeatedEvent) {\n    pdesc = ` ------ ${pdesc} EVENT[${pkt.eventCounter}]`;\n  } else {\n    const decoded = pkt.decoded;\n    if (decoded) {\n      pdesc += \"; \" + decoded.description;\n    } else if (0 < d.length && d.length <= 4) {\n      const v0 = pkt.uintData, v1 = pkt.intData;\n      pdesc += \"; \" + num2str(v0);\n      if (v0 != v1)\n        pdesc += \"; signed: \" + num2str(v1);\n    } else if (d.length) {\n      pdesc += \"; \" + hexDump(d);\n    }\n  }\n  if (sender)\n    pdesc += ` (${sender})`;\n  return (!isNaN(pkt.timestamp) && (opts == null ? void 0 : opts.showTime) ? Math.round(pkt.timestamp) + \"ms: \" : \"\") + pdesc;\n}\n\n// src/jdom/packet.ts\nvar { warn, debug } = console;\nvar _Packet = class {\n  constructor() {\n    this._meta = void 0;\n    this.key = _Packet._nextKey++;\n  }\n  static fromBinary(data, timestamp2) {\n    if (!data || data.length > 252)\n      return void 0;\n    const p = new _Packet();\n    p._header = data.slice(0, JD_SERIAL_HEADER_SIZE);\n    p._data = data.slice(JD_SERIAL_HEADER_SIZE, JD_SERIAL_HEADER_SIZE + p.size);\n    if (timestamp2 !== void 0)\n      p.timestamp = timestamp2;\n    return p;\n  }\n  static from(service_command, data) {\n    const p = new _Packet();\n    p._header = new Uint8Array(JD_SERIAL_HEADER_SIZE);\n    p.data = data;\n    p.serviceCommand = service_command;\n    return p;\n  }\n  static onlyHeader(service_command) {\n    return _Packet.from(service_command, new Uint8Array(0));\n  }\n  toBuffer() {\n    const res = bufferConcat(this._header, this._data);\n    res[2] = this._data.length + 4;\n    write16(res, 0, crc(res.slice(2)));\n    return res;\n  }\n  get header() {\n    return this._header.slice(0);\n  }\n  get deviceIdentifier() {\n    return toHex2(this._header.slice(4, 4 + 8));\n  }\n  set deviceIdentifier(id) {\n    if (id !== this.deviceIdentifier) {\n      const idb = fromHex(id);\n      if (idb.length != 8)\n        throwError(\"Invalid id\");\n      if (this.isMultiCommand)\n        throwError(\"Invalid multicast\");\n      this._header.set(idb, 4);\n      this._decoded = void 0;\n      this.device = void 0;\n    }\n  }\n  get frameFlags() {\n    return this._header[3];\n  }\n  set frameFlags(v) {\n    this._header[3] = v;\n  }\n  get isMultiCommand() {\n    return !!(this.frameFlags & JD_FRAME_FLAG_IDENTIFIER_IS_SERVICE_CLASS);\n  }\n  get size() {\n    return this._header[12];\n  }\n  get requiresAck() {\n    return this.frameFlags & JD_FRAME_FLAG_ACK_REQUESTED ? true : false;\n  }\n  set requiresAck(ack) {\n    if (ack != this.requiresAck)\n      this._header[3] ^= JD_FRAME_FLAG_ACK_REQUESTED;\n    this._decoded = void 0;\n  }\n  get serviceIndex() {\n    return this._header[13] & JD_SERVICE_INDEX_MASK;\n  }\n  set serviceIndex(value) {\n    if (value == null)\n      throw new Error(\"service_index not set\");\n    this._header[13] = this._header[13] & JD_SERVICE_INDEX_INV_MASK | value;\n    this._decoded = void 0;\n  }\n  get serviceClass() {\n    var _a;\n    if (this.isMultiCommand)\n      return read32(this._header, 4);\n    if (this.serviceIndex === 0)\n      return SRV_CONTROL;\n    return (_a = this.device) == null ? void 0 : _a.serviceClassAt(this.serviceIndex);\n  }\n  get crc() {\n    return read16(this._header, 0);\n  }\n  get serviceCommand() {\n    return read16(this._header, 14);\n  }\n  set serviceCommand(cmd) {\n    write16(this._header, 14, cmd);\n    this._decoded = void 0;\n  }\n  get isRegisterSet() {\n    return this.serviceIndex <= JD_SERVICE_INDEX_MAX_NORMAL && this.serviceCommand >> 12 == CMD_SET_REG >> 12;\n  }\n  get isRegisterGet() {\n    return this.serviceIndex <= JD_SERVICE_INDEX_MAX_NORMAL && this.serviceCommand >> 12 == CMD_GET_REG >> 12;\n  }\n  get registerIdentifier() {\n    if (!this.isRegisterGet && !this.isRegisterSet)\n      return void 0;\n    return this.serviceCommand & CMD_REG_MASK;\n  }\n  get isEvent() {\n    return this.serviceIndex <= JD_SERVICE_INDEX_MAX_NORMAL && (this.serviceCommand & CMD_EVENT_MASK) !== 0;\n  }\n  get eventCode() {\n    return this.isEvent ? this.serviceCommand & CMD_EVENT_CODE_MASK : void 0;\n  }\n  get eventCounter() {\n    return this.isEvent ? this.serviceCommand >> CMD_EVENT_COUNTER_POS & CMD_EVENT_COUNTER_MASK : void 0;\n  }\n  get isCRCAck() {\n    return this.serviceIndex === JD_SERVICE_INDEX_CRC_ACK;\n  }\n  get isPipe() {\n    return this.serviceIndex === JD_SERVICE_INDEX_PIPE;\n  }\n  get pipePort() {\n    return this.isPipe && this.serviceCommand >> PIPE_PORT_SHIFT;\n  }\n  get pipeCount() {\n    return this.isPipe && this.serviceCommand & PIPE_COUNTER_MASK;\n  }\n  get data() {\n    return this._data;\n  }\n  set data(buf) {\n    if (buf.length > JD_SERIAL_MAX_PAYLOAD_SIZE)\n      throw Error(`jacdac packet length too large, ${buf.length} > ${JD_SERIAL_MAX_PAYLOAD_SIZE} bytes`);\n    this._header[12] = buf.length;\n    this._data = buf;\n    this._decoded = void 0;\n  }\n  jdunpack(fmt) {\n    return this._data && fmt && jdunpack(this._data, fmt) || [];\n  }\n  get uintData() {\n    let buf = this._data;\n    if (buf.length == 0)\n      return void 0;\n    if (buf.length < 4)\n      buf = bufferConcat(buf, new Uint8Array(4));\n    if (buf.length == 8)\n      return read32(buf, 0) + read32(buf, 4) * 4294967296;\n    return read32(buf, 0);\n  }\n  get stringData() {\n    return this._data && bufferToString(this._data);\n  }\n  get intData() {\n    let fmt;\n    switch (this._data.length) {\n      case 0:\n        return void 0;\n      case 1:\n        fmt = 1 /* Int8LE */;\n        break;\n      case 2:\n      case 3:\n        fmt = 3 /* Int16LE */;\n        break;\n      default:\n        fmt = 5 /* Int32LE */;\n        break;\n    }\n    return this.getNumber(fmt, 0);\n  }\n  get isAnnounce() {\n    return this.serviceIndex == JD_SERVICE_INDEX_CTRL && this.isReport && this.serviceCommand == 0 /* Announce */;\n  }\n  get isRepeatedAnnounce() {\n    var _a;\n    return this.isAnnounce && ((_a = this.device) == null ? void 0 : _a.lastServiceUpdate) < this.timestamp;\n  }\n  get decoded() {\n    if (!this._decoded)\n      this._decoded = decodePacketData(this);\n    return this._decoded;\n  }\n  get meta() {\n    if (!this._meta)\n      this._meta = {};\n    return this._meta;\n  }\n  clone() {\n    const pkt = new _Packet();\n    pkt._header = this._header.slice();\n    pkt._data = this._data.slice();\n    pkt.timestamp = this.timestamp;\n    return pkt;\n  }\n  cloneForDevice(deviceId, serviceIndex) {\n    const idb = fromHex(deviceId);\n    if (idb.length != 8)\n      throwError(\"Invalid id\");\n    if (!this.isMultiCommand)\n      throwError(\"Must be multi command\");\n    const pkt = _Packet.fromBinary(this.toBuffer(), this.timestamp);\n    pkt.frameFlags &= ~JD_FRAME_FLAG_IDENTIFIER_IS_SERVICE_CLASS;\n    pkt._header.set(idb, 4);\n    pkt._decoded = void 0;\n    pkt.serviceIndex = serviceIndex;\n    return pkt;\n  }\n  compress(stripped) {\n    if (stripped.length == 0)\n      return;\n    let sz = -4;\n    for (const s of stripped) {\n      sz += s.length;\n    }\n    const data = new Uint8Array(sz);\n    this._header.set(stripped[0], 12);\n    data.set(stripped[0].slice(4), 0);\n    sz = stripped[0].length - 4;\n    for (const s of stripped.slice(1)) {\n      data.set(s, sz);\n      sz += s.length;\n    }\n    this._data = data;\n    this._decoded = void 0;\n  }\n  withFrameStripped() {\n    return bufferConcat(this._header.slice(12, 12 + 4), this._data);\n  }\n  getNumber(fmt, offset) {\n    return getNumber(this._data, fmt, offset);\n  }\n  get isCommand() {\n    return !!(this.frameFlags & JD_FRAME_FLAG_COMMAND);\n  }\n  set isCommand(value) {\n    if (value)\n      this._header[3] |= JD_FRAME_FLAG_COMMAND;\n    else\n      this._header[3] &= ~JD_FRAME_FLAG_COMMAND;\n    this._decoded = void 0;\n  }\n  get isReport() {\n    return !this.isCommand;\n  }\n  assignDevice(bus) {\n    if (!this.isMultiCommand && !this.device)\n      this.device = bus.device(this.deviceIdentifier, false, this);\n  }\n  toString() {\n    let msg = `${shortDeviceId(this.deviceIdentifier)}/${this.serviceIndex}[${this.frameFlags}]: ${this.serviceCommand} sz=${this.size}`;\n    if (this.size < 20)\n      msg += \": \" + toHex2(this.data);\n    else\n      msg += \": \" + toHex2(this.data.slice(0, 20)) + \"...\";\n    return msg;\n  }\n  sendCoreAsync(bus) {\n    const buf = this.toBuffer();\n    this._header[0] = buf[0];\n    this._header[1] = buf[1];\n    this._header[2] = buf[2];\n    this.assignDevice(bus);\n    return bus.sendPacketAsync(this);\n  }\n  sendReportAsync(dev) {\n    if (!dev)\n      return Promise.resolve();\n    this.deviceIdentifier = dev.deviceId;\n    this.device = dev;\n    return this.sendCoreAsync(dev.bus);\n  }\n  sendCmdAsync(dev) {\n    if (!dev)\n      return Promise.resolve();\n    this.deviceIdentifier = dev.deviceId;\n    this.device = dev;\n    this.isCommand = true;\n    return this.sendCoreAsync(dev.bus);\n  }\n  sendAsMultiCommandAsync(bus, service_class) {\n    this._header[3] |= JD_FRAME_FLAG_IDENTIFIER_IS_SERVICE_CLASS | JD_FRAME_FLAG_COMMAND;\n    write32(this._header, 4, service_class);\n    write32(this._header, 8, 0);\n    return this.sendCoreAsync(bus);\n  }\n  static fromFrame(frame, timestamp2, skipCrc = false) {\n    return frameToPackets(frame, timestamp2, skipCrc);\n  }\n  static jdpacked(service_command, fmt, nums) {\n    return _Packet.from(service_command, jdpack(fmt, nums));\n  }\n  get friendlyDeviceName() {\n    var _a;\n    if (this.isMultiCommand)\n      return \"*\";\n    return ((_a = this.device) == null ? void 0 : _a.friendlyName) || shortDeviceId(this.deviceIdentifier);\n  }\n  get friendlyServiceName() {\n    let service_name;\n    if (this.isCRCAck) {\n      service_name = \"CRC-ACK\";\n    } else if (this.isPipe) {\n      service_name = \"PIPE\";\n    } else {\n      const sc = this.serviceClass;\n      if (sc === void 0)\n        return `(${this.serviceIndex})`;\n      else {\n        const serv_id = serviceName(sc);\n        service_name = `${serv_id === \"?\" ? hexNum(sc) : serv_id} (${this.serviceIndex})`;\n      }\n    }\n    return service_name;\n  }\n  get friendlyCommandName() {\n    const cmd = this.serviceCommand;\n    let cmdname;\n    if (this.isCRCAck) {\n      cmdname = hexNum(cmd);\n    } else if (this.isPipe) {\n      cmdname = `port:${cmd >> PIPE_PORT_SHIFT} cnt:${cmd & PIPE_COUNTER_MASK}`;\n      if (cmd & PIPE_METADATA_MASK)\n        cmdname += \" meta\";\n      if (cmd & PIPE_CLOSE_MASK)\n        cmdname += \" close\";\n    } else if (this.isEvent) {\n      const spec = serviceSpecificationFromClassIdentifier(this.serviceClass);\n      const code = this.eventCode;\n      const pkt = spec == null ? void 0 : spec.packets.find((pkt2) => pkt2.kind === \"event\" && pkt2.identifier === code);\n      cmdname = pkt == null ? void 0 : pkt.name;\n    } else {\n      cmdname = commandName(cmd, this.serviceClass);\n    }\n    return cmdname;\n  }\n};\nvar Packet = _Packet;\nPacket._nextKey = 1;\nfunction frameToPackets(frame, timestamp2, skipCrc = false) {\n  const size = frame.length < 12 ? 0 : frame[2];\n  if (frame.length < size + 12) {\n    warn(`${timestamp2 | 0}ms: got only ${frame.length} bytes; expecting ${size + 12}`);\n    return [];\n  } else if (size < 4) {\n    warn(`${timestamp2 | 0}ms: empty packet`);\n    return [];\n  } else {\n    if (!skipCrc) {\n      const computed = crc(frame.slice(2, size + 12));\n      const actual = read16(frame, 0);\n      if (actual != computed) {\n        warn(`${timestamp2 | 0}ms: crc mismatch; sz=${size} got:${actual}, exp:${computed}, ${toHex2(frame)}`);\n        return [];\n      }\n    }\n    if (frame.length != 12 + size) {\n      warn(`${timestamp2 | 0}ms: unexpected packet len: ${frame.length}`);\n      return [];\n    }\n    const res = [];\n    for (let ptr = 12; ptr < 12 + size; ) {\n      const psz = frame[ptr] + 4;\n      const sz = ALIGN(psz);\n      if (ptr + psz > 12 + size) {\n        warn(`${timestamp2 | 0}ms: invalid frame compression, res len=${res.length}`);\n        break;\n      }\n      const pkt = bufferConcat(frame.slice(0, 12), frame.slice(ptr, ptr + psz));\n      const p = Packet.fromBinary(pkt);\n      p.timestamp = timestamp2;\n      res.push(p);\n      if (res.length > 1)\n        p.requiresAck = false;\n      ptr += sz;\n    }\n    return res;\n  }\n}\n\n// src/jdom/trace/trace.ts\nvar TRACE_OVERSHOOT = 1.1;\nfunction stack() {\n  return new Error().stack;\n}\nfunction cleanStack(text) {\n  return text == null ? void 0 : text.split(/\\n/g).slice(2).join(\"\\n\").replace(/webpack-internal:\\/\\/\\//g, \"\").replace(/https:\\/\\/microsoft\\.github\\.io\\/jacdac-docs/g, \"\");\n}\nfunction serializeToTrace(pkt, start) {\n  const data = toHex2(pkt.toBuffer()).padEnd(84, \" \");\n  let t = roundWithPrecision(pkt.timestamp - (start || 0), 3).toString();\n  while (t.length < 7)\n    t += \" \";\n  const descr = pkt.meta[META_TRACE_DESCRIPTION] || printPacket(pkt, {}).replace(/\\r?\\n/g, \" \");\n  let msg = `${t}\t${data}\t${descr}`;\n  const trace = pkt.meta[META_TRACE];\n  if (trace)\n    msg += \"\\n\" + cleanStack(trace);\n  return msg;\n}\nvar Trace = class {\n  constructor(packets = [], options) {\n    this.packets = packets;\n    this.id = randomDeviceId();\n    this.description = options == null ? void 0 : options.description;\n    this.maxLength = options == null ? void 0 : options.maxLength;\n  }\n  get length() {\n    return this.packets.length;\n  }\n  get duration() {\n    if (!this.packets.length)\n      return 0;\n    return this.packets[this.packets.length - 1].timestamp - this.packets[0].timestamp;\n  }\n  get startTimestamp() {\n    var _a;\n    return ((_a = this.packets[0]) == null ? void 0 : _a.timestamp) || 0;\n  }\n  get endTimestamp() {\n    var _a;\n    return ((_a = this.packets[this.packets.length - 1]) == null ? void 0 : _a.timestamp) || 0;\n  }\n  addPacket(packet) {\n    if (packet.meta[this.id]) {\n      return;\n    }\n    packet.meta[this.id] = true;\n    const copy = packet.clone();\n    copy.sender = packet.sender;\n    copy.device = packet.device;\n    this.packets.push(copy);\n    if (this.maxLength > 0 && this.packets.length > this.maxLength * TRACE_OVERSHOOT) {\n      this.packets = this.packets.slice(-this.maxLength);\n    }\n  }\n  serializeToText(length) {\n    const start = this.startTimestamp;\n    let pkts = this.packets;\n    if (length > 0)\n      pkts = pkts.slice(-length);\n    const text = pkts.map((pkt) => serializeToTrace(pkt, start));\n    if (this.description) {\n      text.unshift(this.description);\n      text.unshift(\"\");\n    }\n    return text.join(\"\\n\");\n  }\n  resolveDevices(bus) {\n    this.packets.filter((pkt) => !pkt.device).forEach((pkt) => pkt.assignDevice(bus));\n  }\n};\n\n// src/jdom/eventsource.ts\nfunction normalizeEventNames(eventNames) {\n  if (!eventNames)\n    eventNames = [];\n  if (typeof eventNames === \"string\")\n    eventNames = [eventNames];\n  return eventNames;\n}\nfunction dependencyId(nodes) {\n  if (Array.isArray(nodes))\n    return (nodes == null ? void 0 : nodes.map((node) => (node == null ? void 0 : node.nodeId) || \"?\").join(\",\")) || \"\";\n  else\n    return (nodes == null ? void 0 : nodes.nodeId) || \"\";\n}\nvar nextNodeId = 0;\nvar JDEventSource = class {\n  constructor() {\n    this.nodeId = nextNodeId++;\n    this.listeners = {};\n    this.eventStats = {};\n    this.newListenerStats = void 0;\n  }\n  on(eventName, handler) {\n    if (!handler)\n      return this;\n    normalizeEventNames(eventName).forEach((eventName2) => this.addListenerInternal(eventName2, handler, false));\n    return this;\n  }\n  off(eventName, handler) {\n    normalizeEventNames(eventName).forEach((eventName2) => this.removeListenerInternal(eventName2, handler));\n    return this;\n  }\n  once(eventName, handler) {\n    normalizeEventNames(eventName).forEach((eventName2) => this.addListenerInternal(eventName2, handler, true));\n    return this;\n  }\n  addListenerInternal(eventName, handler, once) {\n    if (!eventName || !handler) {\n      return;\n    }\n    const eventListeners = this.listeners[eventName] || (this.listeners[eventName] = []);\n    const listener = eventListeners.find((listener2) => listener2.handler === handler);\n    if (listener) {\n      listener.once = !!once;\n      return;\n    }\n    eventListeners.push({\n      handler,\n      once: !!once,\n      stackTrace: Flags.diagnostics && stack()\n    });\n    this.emit(NEW_LISTENER, eventName, handler);\n    if (Flags.diagnostics) {\n      if (!this.newListenerStats)\n        this.newListenerStats = {};\n      this.newListenerStats[eventName] = (this.newListenerStats[eventName] || 0) + 1;\n    }\n  }\n  removeListenerInternal(eventName, handler) {\n    if (!eventName || !handler)\n      return;\n    const eventListeners = this.listeners[eventName];\n    if (eventListeners) {\n      for (let i = 0; i < eventListeners.length; ++i) {\n        const listener = eventListeners[i];\n        if (handler === listener.handler) {\n          eventListeners.splice(i, 1);\n          this.emit(REMOVE_LISTENER, eventName, handler);\n          return;\n        }\n      }\n    }\n  }\n  emit(eventName, ...args) {\n    if (!eventName)\n      return false;\n    this.eventStats[eventName] = (this.eventStats[eventName] || 0) + 1;\n    const eventListeners = this.listeners[eventName];\n    if (!eventListeners || eventListeners.length == 0) {\n      if (eventName == ERROR)\n        console.error(args[0]);\n      return false;\n    }\n    for (let i = 0; i < eventListeners.length; ++i) {\n      const listener = eventListeners[i];\n      const handler = listener.handler;\n      if (listener.once) {\n        eventListeners.splice(i, 1);\n        --i;\n      }\n      try {\n        handler.apply(null, args);\n      } catch (e) {\n        if (eventName !== ERROR)\n          this.emit(ERROR, e);\n      }\n    }\n    return true;\n  }\n  listenerCount(eventName) {\n    if (!eventName)\n      return 0;\n    const listeners = this.listeners[eventName];\n    return (listeners == null ? void 0 : listeners.length) || 0;\n  }\n  listenerStackTraces(eventName) {\n    const listeners = this.listeners[eventName];\n    return listeners == null ? void 0 : listeners.map((listener) => listener.stackTrace);\n  }\n  eventNames() {\n    return Object.keys(this.listeners);\n  }\n  observe(eventName) {\n    return new EventObservable(this, normalizeEventNames(eventName));\n  }\n  subscribe(eventName, next) {\n    const observer = this.observe(eventName);\n    return observer.subscribe({ next }).unsubscribe;\n  }\n  get changeId() {\n    return this.eventStats[CHANGE] || 0;\n  }\n};\nvar JDSubscriptionScope = class {\n  constructor() {\n    this.unsubscribers = [];\n    this._unmounted = false;\n  }\n  get unmounted() {\n    return this._unmounted;\n  }\n  mount(unsubscribe) {\n    this._unmounted = false;\n    if (unsubscribe && this.unsubscribers.indexOf(unsubscribe) < 0)\n      this.unsubscribers.push(unsubscribe);\n    return unsubscribe;\n  }\n  unmount() {\n    const us = this.unsubscribers;\n    this.unsubscribers = [];\n    us.forEach((u) => u());\n    this._unmounted = true;\n  }\n};\nvar EventObservable = class {\n  constructor(eventEmitter, eventNames) {\n    this.eventEmitter = eventEmitter;\n    this.eventNames = eventNames;\n  }\n  subscribe(observer) {\n    if (observer.next)\n      this.eventEmitter.on(this.eventNames, observer.next);\n    if (observer.error)\n      this.eventEmitter.on(ERROR, observer.error);\n    return {\n      unsubscribe: () => {\n        if (observer.next)\n          this.eventEmitter.off(this.eventNames, observer.next);\n        if (observer.error)\n          this.eventEmitter.off(ERROR, observer.error);\n      }\n    };\n  }\n};\n\n// src/jdom/node.ts\nvar JDNode = class extends JDEventSource {\n  constructor() {\n    super();\n  }\n  get friendlyName() {\n    return this.name;\n  }\n  get nodeData() {\n    if (!this._nodeData)\n      this._nodeData = {};\n    return this._nodeData;\n  }\n  emitPropagated(event, arg) {\n    let current = this;\n    while (current) {\n      current.emit(event, arg || this);\n      current = current.parent;\n    }\n  }\n  toString() {\n    return this.friendlyName;\n  }\n};\n\n// src/jdom/servicemembernode.ts\nvar JDServiceMemberNode = class extends JDNode {\n  constructor(service, code, isPacket) {\n    super();\n    this._notImplemented = false;\n    this._specification = null;\n    this.service = service;\n    this.code = code;\n    this.isPacket = isPacket;\n  }\n  get id() {\n    return `${this.nodeKind}:${this.service.device.deviceId}:${this.service.serviceIndex.toString(16)}:${this.code.toString(16)}`;\n  }\n  get name() {\n    var _a;\n    return ((_a = this.specification) == null ? void 0 : _a.name) || this.code.toString(16);\n  }\n  get qualifiedName() {\n    return `${this.service.qualifiedName}.${this.name}`;\n  }\n  get specification() {\n    var _a;\n    if (this._specification === null)\n      this._specification = (_a = this.service.specification) == null ? void 0 : _a.packets.find((packet) => this.isPacket(packet) && packet.identifier === this.code);\n    return this._specification;\n  }\n  get parent() {\n    return this.service;\n  }\n  get friendlyName() {\n    const parts = [this.service.friendlyName, this.name];\n    return parts.join(\".\");\n  }\n  get notImplemented() {\n    return this._notImplemented;\n  }\n  setNotImplemented() {\n    if (!this._notImplemented) {\n      this._notImplemented = true;\n      this.emit(CHANGE);\n    }\n  }\n};\n\n// src/jdom/field.ts\nvar JDField = class extends JDNode {\n  constructor(member, index, specification) {\n    super();\n    this.member = member;\n    this.index = index;\n    this.specification = specification;\n  }\n  get id() {\n    return `${this.nodeKind}:${this.member.service.device.deviceId}:${this.member.service.serviceIndex.toString(16)}:${this.member.code.toString(16)}:${this.index.toString(16)}`;\n  }\n  get name() {\n    return this.specification.name === \"_\" ? this.member.specification.name : this.specification.name;\n  }\n  get children() {\n    return [];\n  }\n  get qualifiedName() {\n    return `${this.member.qualifiedName}.${this.name}`;\n  }\n  get parent() {\n    return this.member;\n  }\n  get friendlyName() {\n    const parts = [this.member.friendlyName];\n    if (this.specification.name !== \"_\")\n      parts.push(this.name);\n    return parts.join(\".\");\n  }\n  get dataTypeName() {\n    const parts = [this.member.service.specification.shortName, this.name];\n    return parts.join(\".\");\n  }\n  get unit() {\n    return this.specification.unit;\n  }\n  get nodeKind() {\n    return FIELD_NODE_NAME;\n  }\n  get decoded() {\n    const decoded = this.member.decoded;\n    return decoded == null ? void 0 : decoded.decoded[this.index];\n  }\n  get value() {\n    var _a;\n    return (_a = this.decoded) == null ? void 0 : _a.value;\n  }\n};\n\n// src/jdom/packobject.ts\nfunction unpackedToObject(data, fields, defaultName) {\n  if (!data || !fields)\n    return void 0;\n  const r = {};\n  for (let i = 0; i < data.length; ++i) {\n    const field = fields[i];\n    const value = data[i];\n    const { name, startRepeats } = field;\n    const prettyName = name === \"_\" && defaultName ? defaultName : name;\n    if (startRepeats) {\n      const repeatFields = fields.slice(i);\n      r[\"repeat\"] = value.map((rdata) => {\n        const r2 = {};\n        for (let i2 = 0; i2 < repeatFields.length; ++i2) {\n          const field2 = fields[i2];\n          const value2 = rdata[i2];\n          const { name: name2 } = field2;\n          const prettyName2 = name2 === \"_\" && defaultName ? defaultName : name2;\n          r2[prettyName2] = value2;\n        }\n        return r2;\n      });\n      break;\n    } else\n      r[prettyName] = value;\n  }\n  return r;\n}\nfunction objectToUnpacked(pkt, msg) {\n  if (!msg)\n    return [];\n  if (typeof msg === \"number\" || typeof msg === \"string\")\n    return [msg];\n  else if (typeof msg === \"boolean\")\n    return [msg ? 1 : 0];\n  else if (Array.isArray(msg)) {\n    return msg;\n  } else {\n    const { fields } = pkt;\n    const r = [];\n    for (let i = 0; i < fields.length; ++i) {\n      const field = fields[i];\n      const name = field.name === \"_\" ? pkt.name : field.name;\n      const value = msg[name];\n      if (field.startRepeats) {\n        const repeatFields = fields.slice(i);\n        r.push(value.map((vrow) => {\n          const arow = [];\n          for (let j = 0; j < repeatFields.length; ++j) {\n            const rfield = repeatFields[j];\n            const rname = rfield.name;\n            arow.push(vrow[rname]);\n          }\n          return arow;\n        }));\n        break;\n      } else {\n        r.push(value);\n      }\n    }\n    return r;\n  }\n}\n\n// src/jdom/register.ts\nvar JDRegister = class extends JDServiceMemberNode {\n  constructor(service, code) {\n    super(service, code, isRegister2);\n    this._lastSetTimestamp = -Infinity;\n    this._lastGetTimestamp = -Infinity;\n    this._lastGetAttempts = 0;\n    this._needsRefresh = false;\n  }\n  clearData() {\n    this._lastReportPkt = void 0;\n    this._lastGetTimestamp = -Infinity;\n    this._lastGetAttempts = 0;\n    this.emit(REPORT_RECEIVE, this);\n    this.emitPropagated(REPORT_UPDATE, this);\n    this.emit(CHANGE);\n  }\n  get nodeKind() {\n    return REGISTER_NODE_NAME;\n  }\n  get fields() {\n    var _a;\n    if (!this._fields)\n      this._fields = (_a = this.specification) == null ? void 0 : _a.fields.map((field, index) => new JDField(this, index, field));\n    return this._fields.slice();\n  }\n  get children() {\n    return this.fields;\n  }\n  get lastSetTimestamp() {\n    return this._lastSetTimestamp;\n  }\n  get lastGetTimestamp() {\n    return this._lastGetTimestamp;\n  }\n  clearGetTimestamp() {\n    this._lastGetTimestamp = -Infinity;\n  }\n  get lastGetAttempts() {\n    return this._lastGetAttempts;\n  }\n  async sendSetAsync(data, autoRefresh) {\n    if (this.notImplemented)\n      return;\n    const cmd = CMD_SET_REG | this.code;\n    const pkt = Packet.from(cmd, data);\n    this._lastSetTimestamp = this.service.device.bus.timestamp;\n    await this.service.sendPacketAsync(pkt, this.service.registersUseAcks);\n    if (autoRefresh)\n      this.scheduleRefresh();\n  }\n  sendGetAsync() {\n    if (this.notImplemented)\n      return Promise.resolve();\n    if (isConstRegister(this.specification) && !!this.data)\n      return Promise.resolve();\n    this._lastGetTimestamp = this.service.device.bus.timestamp;\n    this._lastGetAttempts++;\n    const cmd = CMD_GET_REG | this.code;\n    return this.service.sendCmdAsync(cmd, void 0, this.service.registersUseAcks).then(() => {\n      this.emit(GET_ATTEMPT);\n    });\n  }\n  sendSetPackedAsync(values2, autoRefresh) {\n    var _a;\n    const fmt = (_a = this.specification) == null ? void 0 : _a.packFormat;\n    if (!fmt)\n      throw new Error(\"unknown register data format\");\n    return this.sendSetAsync(jdpack(fmt, values2), autoRefresh);\n  }\n  sendSetBoolAsync(value, autoRefresh) {\n    return this.sendSetPackedAsync([value ? 1 : 0], autoRefresh);\n  }\n  sendSetStringAsync(value, autoRefresh) {\n    return this.sendSetPackedAsync([value || \"\"], autoRefresh);\n  }\n  get data() {\n    var _a;\n    return (_a = this._lastReportPkt) == null ? void 0 : _a.data;\n  }\n  get lastDataTimestamp() {\n    var _a;\n    return (_a = this._lastReportPkt) == null ? void 0 : _a.timestamp;\n  }\n  get unpackedValue() {\n    var _a;\n    const d = this.data;\n    const fmt = (_a = this.specification) == null ? void 0 : _a.packFormat;\n    try {\n      return d && fmt && jdunpack(this.data, fmt);\n    } catch (e) {\n      console.error(e);\n      return void 0;\n    }\n  }\n  get objectValue() {\n    const { specification } = this;\n    return unpackedToObject(this.unpackedValue, specification == null ? void 0 : specification.fields, specification.name);\n  }\n  get intValue() {\n    const d = this.data;\n    return d && intOfBuffer(d);\n  }\n  get uintValue() {\n    const d = this.data;\n    return d && uintOfBuffer(d);\n  }\n  get boolValue() {\n    if (this.data === void 0)\n      return void 0;\n    return !!this.intValue;\n  }\n  get stringValue() {\n    const buf = this.data;\n    if (buf === void 0)\n      return void 0;\n    let value;\n    try {\n      value = fromUTF8(uint8ArrayToString(buf));\n    } catch {\n      value = uint8ArrayToString(buf);\n    }\n    return value;\n  }\n  get humanValue() {\n    var _a, _b;\n    return (_b = (_a = this.decoded) == null ? void 0 : _a.decoded) == null ? void 0 : _b.map((field) => field.humanValue).join(\",\");\n  }\n  toString() {\n    const d = this.data;\n    return `${this.id} ${d ? toHex2(d) : \"\"}`;\n  }\n  get decoded() {\n    var _a;\n    return (_a = this._lastReportPkt) == null ? void 0 : _a.decoded;\n  }\n  scheduleRefresh() {\n    if (this.notImplemented)\n      return;\n    this._needsRefresh = true;\n  }\n  get needsRefresh() {\n    return this._needsRefresh;\n  }\n  refresh(skipIfValue) {\n    if (this.notImplemented)\n      return Promise.resolve();\n    if (!!this.data && (skipIfValue || isConstRegister(this.specification)))\n      return Promise.resolve();\n    const bus = this.service.device.bus;\n    return bus.withTimeout(REGISTER_REFRESH_TIMEOUT, new Promise((resolve, reject) => {\n      this.once(REPORT_RECEIVE, () => {\n        const f = resolve;\n        resolve = null;\n        f();\n      });\n      this.sendGetAsync().then(() => bus.delay(REGISTER_REFRESH_RETRY_0)).then(() => {\n        if (resolve)\n          return this.sendGetAsync().then(() => bus.delay(REGISTER_REFRESH_RETRY_1));\n      }).then(() => {\n        if (resolve)\n          return this.sendGetAsync();\n      }).catch((e) => reject(e));\n    }));\n  }\n  processPacket(pkt) {\n    if (this.notImplemented)\n      return;\n    if (pkt.isRegisterGet)\n      this.processReport(pkt);\n    else if (pkt.isRegisterSet) {\n      this.clearGetTimestamp();\n    }\n  }\n  setNotImplemented() {\n    console.assert(!this._lastReportPkt, `register reported changed not implemented`, { register: this });\n    super.setNotImplemented();\n  }\n  processReport(pkt) {\n    const updated = !bufferEq(this.data, pkt.data) || this._needsRefresh;\n    this._lastReportPkt = pkt;\n    this._lastGetAttempts = 0;\n    this._lastGetTimestamp = this.service.device.bus.timestamp;\n    this._needsRefresh = false;\n    this.emit(REPORT_RECEIVE, this);\n    if (updated) {\n      this.emitPropagated(REPORT_UPDATE, this);\n      this.emit(CHANGE);\n    }\n  }\n  compareTo(b) {\n    return this.code - b.code || this.service.compareTo(b.service);\n  }\n};\n\n// src/jdom/event.ts\nvar JDEvent = class extends JDServiceMemberNode {\n  constructor(service, code) {\n    super(service, code, isEvent);\n    this._count = 0;\n  }\n  get nodeKind() {\n    return EVENT_NODE_NAME;\n  }\n  get fields() {\n    var _a;\n    if (!this._fields)\n      this._fields = (_a = this.specification) == null ? void 0 : _a.fields.map((field, index) => new JDField(this, index, field));\n    return this._fields.slice();\n  }\n  get children() {\n    return this.fields;\n  }\n  get data() {\n    var _a;\n    return (_a = this._lastReportPkt) == null ? void 0 : _a.data;\n  }\n  get unpackedValue() {\n    var _a;\n    const { packFormat: packFormat2 } = this.specification || {};\n    return packFormat2 && ((_a = this._lastReportPkt) == null ? void 0 : _a.jdunpack(packFormat2));\n  }\n  get count() {\n    return this._count;\n  }\n  get lastDataTimestamp() {\n    var _a;\n    return (_a = this._lastReportPkt) == null ? void 0 : _a.timestamp;\n  }\n  get decoded() {\n    var _a;\n    return (_a = this._lastReportPkt) == null ? void 0 : _a.decoded;\n  }\n  processEvent(pkt) {\n    this._lastReportPkt = pkt;\n    this._count++;\n    this.emitPropagated(EVENT, this);\n    this.emit(CHANGE);\n  }\n};\n\n// src/jdom/client.ts\nvar JDClient = class extends JDEventSource {\n  constructor() {\n    super();\n    this.unsubscribers = [];\n    this.unmounted = false;\n  }\n  log(msg) {\n    console.log(msg);\n  }\n  mount(unsubscribe) {\n    this.unmounted = false;\n    if (unsubscribe && this.unsubscribers.indexOf(unsubscribe) < 0)\n      this.unsubscribers.push(unsubscribe);\n    return unsubscribe;\n  }\n  unmount() {\n    const us = this.unsubscribers;\n    this.unsubscribers = [];\n    us.forEach((u) => u());\n    this.unmounted = true;\n  }\n};\n\n// src/jdom/pipes.ts\nvar { warn: warn2 } = console;\nvar OutPipe = class {\n  constructor(device, port, hosted) {\n    this.device = device;\n    this.port = port;\n    this.hosted = hosted;\n    this._count = 0;\n  }\n  static from(bus, pkt, hosted) {\n    const [idbuf, port] = pkt.jdunpack(\"b[8] u16\");\n    const id = toHex2(idbuf);\n    const dev = bus.device(id, false, pkt);\n    return new OutPipe(dev, port, hosted);\n  }\n  get count() {\n    return this._count;\n  }\n  get isOpen() {\n    return this.device != null;\n  }\n  send(buf) {\n    return this.sendData(buf, 0);\n  }\n  sendMeta(buf) {\n    return this.sendData(buf, PIPE_METADATA_MASK);\n  }\n  async respondForEach(items, converter) {\n    const n = items.length;\n    for (let i = 0; i < n; ++i) {\n      const item = items[i];\n      const data = converter(item);\n      await this.send(data);\n    }\n    await this.close();\n  }\n  async sendData(buf, flags) {\n    if (!this.device) {\n      warn2(\"sending data over closed pipe\");\n      return;\n    }\n    const cmd = this.port << PIPE_PORT_SHIFT | flags | this._count & PIPE_COUNTER_MASK;\n    const pkt = Packet.from(cmd, buf);\n    pkt.serviceIndex = JD_SERVICE_INDEX_PIPE;\n    try {\n      await this.device.sendPktWithAck(pkt);\n    } catch {\n      this.free();\n    }\n    if (this.hosted && this.device)\n      this.device.bus.processPacket(pkt);\n    this._count++;\n  }\n  free() {\n    this.device = null;\n    this.port = null;\n  }\n  async close() {\n    await this.sendData(new Uint8Array(0), PIPE_CLOSE_MASK);\n    this.free();\n  }\n  async sendBytes(data) {\n    const chunkSize = 224;\n    for (let i = 0; i < data.length; i += chunkSize) {\n      await this.send(data.slice(i, i + chunkSize));\n    }\n  }\n  static async sendBytes(service, cmd, data, onProgress) {\n    const { device } = service;\n    onProgress == null ? void 0 : onProgress(0);\n    const resp = await service.sendCmdAwaitResponseAsync(Packet.jdpacked(cmd, \"u32\", [data.length]), 3e3);\n    onProgress == null ? void 0 : onProgress(0.05);\n    const [pipePort] = jdunpack(resp.data, \"u16\");\n    if (!pipePort)\n      throw new Error(\"wrong port \" + pipePort);\n    const pipe = new OutPipe(device, pipePort);\n    const chunkSize = 224;\n    for (let i = 0; i < data.length; i += chunkSize) {\n      await pipe.send(data.slice(i, i + chunkSize));\n      onProgress == null ? void 0 : onProgress(0.05 + i / data.length * 0.9);\n    }\n    try {\n      await pipe.close();\n    } catch (e) {\n      console.debug(e);\n    }\n    onProgress == null ? void 0 : onProgress(1);\n  }\n};\nvar InPipe = class extends JDClient {\n  constructor(bus) {\n    super();\n    this.bus = bus;\n    this._count = 0;\n    this._handlePacket = this._handlePacket.bind(this);\n    this.allocPort();\n    this.mount(this.bus.selfDevice.subscribe(PACKET_RECEIVE, this._handlePacket));\n  }\n  get port() {\n    return this._port;\n  }\n  get count() {\n    return this._count;\n  }\n  get isOpen() {\n    return this._port != null;\n  }\n  allocPort() {\n    while (true) {\n      this._port = 1 + randomUInt(511);\n      const info = this.bus.selfDevice.port(this._port);\n      if (!info.localPipe && !info.pipeType) {\n        info.localPipe = this;\n        break;\n      }\n    }\n  }\n  openCommand(cmd) {\n    if (!this.isOpen)\n      throwError(\"trying to access a closed pipe\");\n    const b = jdpack(\"b[8] u16 u16\", [\n      fromHex(this.bus.selfDeviceId),\n      this._port,\n      0\n    ]);\n    return Packet.from(cmd, b);\n  }\n  _handlePacket(pkt) {\n    if (!pkt.isPipe)\n      return;\n    if (pkt.pipePort !== this._port)\n      return;\n    if ((pkt.serviceCommand & PIPE_COUNTER_MASK) == (this._count & PIPE_COUNTER_MASK)) {\n      this._count++;\n      this.emit(DATA, pkt);\n      if (pkt.serviceCommand & PIPE_CLOSE_MASK) {\n        this.close();\n      }\n    }\n  }\n  close() {\n    if (this._port == null)\n      return;\n    this.emit(CLOSE);\n    this._port = null;\n    this.bus.selfDevice.port(this._port).localPipe = void 0;\n    this.unmount();\n  }\n};\nvar InPipeReader = class extends InPipe {\n  constructor(bus) {\n    super(bus);\n    this.done = signal();\n    this.meta = [];\n    this.output = [];\n    this.mount(this.subscribe(DATA, (pkt) => {\n      if (pkt.serviceCommand & PIPE_METADATA_MASK)\n        this.meta.push(pkt);\n      else\n        this.output.push(pkt);\n    }));\n    this.mount(this.subscribe(CLOSE, this.done.signal));\n  }\n  async readData(timeout = 500) {\n    const r = await this.readAll(timeout);\n    return r.output.map((p) => p.data).filter((b) => !!(b == null ? void 0 : b.length));\n  }\n  async readBytes(timeout = 500) {\n    const data = await this.readData(timeout);\n    const n = data.reduce((n2, b) => n2 + b.length, 0);\n    const res = new Uint8Array(n);\n    let i = 0;\n    data.forEach((d) => {\n      res.set(d, i);\n      i += d.length;\n    });\n    assert(i === n);\n    return res;\n  }\n  async readAll(timeout = 500) {\n    const res = await this.bus.withTimeout(timeout, this.done.signalled);\n    if (!res)\n      throw new Error(\"Timeout reading pipe: \" + timeout + \"ms\");\n    return {\n      meta: this.meta,\n      output: this.output\n    };\n  }\n};\n\n// src/jdom/service.ts\nvar JDService = class extends JDNode {\n  constructor(device, serviceIndex) {\n    super();\n    this._reports = [];\n    this._specification = null;\n    this.registersUseAcks = false;\n    this._clients = [];\n    this.device = device;\n    this.serviceIndex = serviceIndex;\n    this.serviceClass = this.device.serviceClassAt(this.serviceIndex);\n    const statusCodeChanged = this.event(4 /* StatusCodeChanged */);\n    statusCodeChanged.on(CHANGE, () => {\n      const statusCode = this.register(259 /* StatusCode */);\n      statusCode == null ? void 0 : statusCode.scheduleRefresh();\n    });\n  }\n  get id() {\n    return `${this.nodeKind}:${this.device.deviceId}:${this.serviceIndex.toString(16)}`;\n  }\n  get nodeKind() {\n    return SERVICE_NODE_NAME;\n  }\n  get name() {\n    var _a;\n    return (_a = serviceName(this.serviceClass)) == null ? void 0 : _a.toLowerCase();\n  }\n  get friendlyName() {\n    const parts = [this.device.friendlyName];\n    if (this.device.services({ serviceClass: this.serviceClass }).length > 1)\n      parts.push(`[${this.serviceIndex.toString(16)}]`);\n    return parts.join(\".\");\n  }\n  get qualifiedName() {\n    return `${this.device.qualifiedName}[${this.serviceIndex.toString(16)}]`;\n  }\n  get parent() {\n    return this.device;\n  }\n  get role() {\n    return this._role;\n  }\n  set role(value) {\n    if (value !== this._role) {\n      this._role = value;\n      this.emit(ROLE_CHANGE);\n      this.emit(CHANGE);\n    }\n  }\n  report(identifier) {\n    return this._reports.find((r) => r.registerIdentifier === identifier);\n  }\n  get reports() {\n    return this._reports.slice(0);\n  }\n  get mixins() {\n    const r = [];\n    const { serviceClasses, serviceLength } = this.device;\n    for (let i = this.serviceIndex + 1; i < serviceLength && isMixinService(serviceClasses[i]); ++i) {\n      r.push(this.device.service(i));\n    }\n    return r;\n  }\n  get isMixin() {\n    return isMixinService(this.serviceClass);\n  }\n  get twin() {\n    return this._twin;\n  }\n  set twin(server) {\n    if (this._twin === server)\n      return;\n    if (this._twin)\n      this._twin.twin = void 0;\n    this._twin = server;\n    server.twin = this;\n    this.emit(CHANGE);\n  }\n  get readingRegister() {\n    var _a;\n    if (!this._readingRegister) {\n      const pkt = (_a = this.specification) == null ? void 0 : _a.packets.find((pkt2) => isReading(pkt2));\n      this._readingRegister = pkt && this.register(pkt.identifier);\n    }\n    return this._readingRegister;\n  }\n  get valueRegister() {\n    var _a;\n    if (!this._valueRegister) {\n      const pkt = (_a = this.specification) == null ? void 0 : _a.packets.find((pkt2) => isValue(pkt2));\n      this._valueRegister = pkt && this.register(pkt.identifier);\n    }\n    return this._valueRegister;\n  }\n  get intensityRegister() {\n    var _a;\n    if (!this._intensityRegister) {\n      const pkt = (_a = this.specification) == null ? void 0 : _a.packets.find((pkt2) => isIntensity(pkt2));\n      this._intensityRegister = pkt && this.register(pkt.identifier);\n    }\n    return this._intensityRegister;\n  }\n  get instanceName() {\n    const r = this.register(265 /* InstanceName */);\n    return r == null ? void 0 : r.stringValue;\n  }\n  async resolveInstanceName() {\n    const r = this.register(265 /* InstanceName */);\n    await (r == null ? void 0 : r.refresh());\n    return r == null ? void 0 : r.stringValue;\n  }\n  get specification() {\n    if (this._specification === null)\n      this._specification = serviceSpecificationFromClassIdentifier(this.serviceClass);\n    return this._specification;\n  }\n  get events() {\n    var _a;\n    return ((_a = this.specification) == null ? void 0 : _a.packets.filter(isEvent).map((info) => this.event(info.identifier))) || [];\n  }\n  registers(options) {\n    if (!this._registers) {\n      const spec = this.specification;\n      this._registers = ((spec == null ? void 0 : spec.packets) || []).filter(isRegister2).map((pkt) => new JDRegister(this, pkt.identifier));\n    }\n    let regs = this._registers.slice(0);\n    if (options == null ? void 0 : options.ignoreNacks)\n      regs = regs.filter((r) => !r.notImplemented);\n    return regs;\n  }\n  get children() {\n    return [...this.registers(), ...this.events];\n  }\n  register(registerCode) {\n    if (isNaN(registerCode))\n      return void 0;\n    this.registers();\n    let register = this._registers.find((reg) => reg.code === registerCode);\n    if (!register) {\n      const spec = this.specification;\n      if (spec && !spec.packets.some((pkt) => isRegister2(pkt) && pkt.identifier === registerCode)) {\n        if (Flags.diagnostics && !isOptionalReadingRegisterCode(registerCode))\n          console.debug(`attempting to access register ${SystemReg[registerCode] || `0x${registerCode.toString(16)}`}`);\n        return void 0;\n      }\n      this._registers.push(register = new JDRegister(this, registerCode));\n    }\n    return register;\n  }\n  event(eventCode) {\n    if (isNaN(eventCode))\n      return void 0;\n    if (!this._events)\n      this._events = [];\n    let event = this._events.find((ev) => ev.code === eventCode);\n    if (!event) {\n      const spec = this.specification;\n      if (spec && !spec.packets.some((pkt) => isEvent(pkt) && pkt.identifier === eventCode)) {\n        if (Flags.diagnostics)\n          console.debug(`attempting to access event ${SystemEvent[eventCode] || `0x${eventCode.toString(16)}`}`);\n        return void 0;\n      }\n      this._events.push(event = new JDEvent(this, eventCode));\n    }\n    return event;\n  }\n  async sendPacketAsync(pkt, ack) {\n    pkt.device = this.device;\n    pkt.serviceIndex = this.serviceIndex;\n    if (ack !== void 0)\n      pkt.requiresAck = !!ack;\n    if (pkt.requiresAck)\n      await this.device.sendPktWithAck(pkt);\n    else\n      await pkt.sendCmdAsync(this.device);\n    this.emit(PACKET_SEND, pkt);\n  }\n  sendCmdAsync(cmd, data, ack) {\n    const pkt = data ? Packet.from(cmd, data) : Packet.onlyHeader(cmd);\n    return this.sendPacketAsync(pkt, ack);\n  }\n  sendCmdPackedAsync(cmd, values2, ack) {\n    const spec = this.specification.packets.find((pkt) => pkt.kind === \"command\" && pkt.identifier === cmd);\n    const packFormat2 = spec == null ? void 0 : spec.packFormat;\n    if (!packFormat2)\n      throw new Error(\"Unknown packing format\");\n    const data = values2 ? jdpack(packFormat2, values2) : void 0;\n    return this.sendCmdAsync(cmd, data, ack);\n  }\n  sendCmdAwaitResponseAsync(pkt, timeout = 500) {\n    const { bus } = this.device;\n    return new Promise((resolve, reject) => {\n      const handleRes = (resp) => {\n        if (resp.serviceCommand == pkt.serviceCommand) {\n          this.off(REPORT_RECEIVE, handleRes);\n          if (resolve)\n            resolve(resp);\n          resolve = null;\n        }\n      };\n      bus.delay(timeout).then(() => {\n        if (!resolve)\n          return;\n        resolve = null;\n        this.off(REPORT_RECEIVE, handleRes);\n        reject(new Error(`timeout (${timeout}ms) waiting for response to ${pkt}`));\n      });\n      this.sendPacketAsync(pkt).then(() => {\n        this.on(REPORT_RECEIVE, handleRes);\n      });\n    });\n  }\n  processPacket(pkt) {\n    this.emit(PACKET_RECEIVE, pkt);\n    if (pkt.isRepeatedEvent)\n      return;\n    if (pkt.isReport) {\n      this.emit(REPORT_RECEIVE, pkt);\n      if (pkt.isRegisterGet) {\n        const id = pkt.registerIdentifier;\n        const reg = this.register(id);\n        if (reg)\n          reg.processPacket(pkt);\n      } else if (pkt.isEvent) {\n        const ev = this.event(pkt.eventCode);\n        if (ev)\n          ev.processEvent(pkt);\n      } else if (pkt.serviceCommand === 3 /* CommandNotImplemented */) {\n        const [serviceCommand, packetCrc] = pkt.jdunpack(\"u16 u16\");\n        if (serviceCommand >> 12 === CMD_GET_REG >> 12 || serviceCommand >> 12 === CMD_SET_REG >> 12) {\n          const regCode = serviceCommand & CMD_REG_MASK;\n          const reg = this.registers().find((r) => r.code === regCode);\n          reg == null ? void 0 : reg.setNotImplemented();\n        }\n      } else if (pkt.isCommand) {\n      }\n    } else if (pkt.isRegisterSet) {\n      const id = pkt.registerIdentifier;\n      const reg = this.register(id);\n      if (reg)\n        reg.processPacket(pkt);\n    } else if (pkt.isCommand) {\n      this.emit(COMMAND_RECEIVE, pkt);\n    }\n  }\n  compareTo(b) {\n    return this.serviceClass - b.serviceClass || strcmp(this.device.deviceId, b.device.deviceId) || this.serviceIndex - b.serviceIndex;\n  }\n  get clients() {\n    var _a;\n    return ((_a = this._clients) == null ? void 0 : _a.slice(0)) || [];\n  }\n  addClient(client) {\n    if (client && this._clients.indexOf(client) < 0) {\n      this._clients.push(client);\n      this.emit(SERVICE_CLIENT_ADDED, client);\n    }\n  }\n  removeClient(client) {\n    const i = this._clients.indexOf(client);\n    if (i > -1) {\n      this._clients.splice(i, 1);\n      this.emit(SERVICE_CLIENT_REMOVED, client);\n    }\n  }\n  async receiveWithInPipe(cmd, packFormat2, timeout) {\n    const inp = new InPipeReader(this.device.bus);\n    await this.sendPacketAsync(inp.openCommand(cmd), true);\n    const recv = [];\n    for (const buf of await inp.readData(timeout)) {\n      const values2 = jdunpack(buf, packFormat2);\n      recv.push(values2);\n    }\n    return recv;\n  }\n};\n\n// src/jdom/ledcontroller.ts\nfunction trgbToValues(trgb) {\n  return [\n    trgb >> 16 & 255,\n    trgb >> 8 & 255,\n    trgb & 255,\n    trgb >> 24 & 255\n  ];\n}\nvar LEDController = class extends JDEventSource {\n  constructor(service, command) {\n    super();\n    this.service = service;\n    this.command = command;\n  }\n  async blink(from, to, interval, repeat) {\n    const on = jdpack(\"u8 u8 u8 u8\", trgbToValues(from));\n    const off = jdpack(\"u8 u8 u8 u8\", trgbToValues(to));\n    const { bus } = this.service.device;\n    for (let i = 0; i < repeat; ++i) {\n      await this.service.sendCmdAsync(this.command, on);\n      await bus.delay(interval - 1);\n      await this.service.sendCmdAsync(this.command, off);\n      await bus.delay(interval - 1);\n    }\n  }\n};\n\n// src/jdom/device.ts\nvar DeviceStatsMonitor = class extends JDEventSource {\n  constructor() {\n    super();\n    this._receivedPackets = 0;\n    this._restarts = 0;\n    this._announce = 0;\n    this._data = Array(15 << 2).fill(0).map(() => ({ received: 0, total: 0, restarts: 0 }));\n    this._dataIndex = 0;\n  }\n  get announce() {\n    return this._announce;\n  }\n  get dropped() {\n    const r = this._data.filter((e) => !!e.total).reduce((s, e) => s + (e.total - e.received), 0) / this._data.length || 0;\n    return r;\n  }\n  get restarts() {\n    const r = this._data.reduce((s, e) => s + e.restarts, 0);\n    return r;\n  }\n  get current() {\n    const { dropped, restarts, announce } = this;\n    return { dropped, restarts, announce };\n  }\n  processAnnouncement(pkt) {\n    this._announce++;\n    const { current: oldCurrent } = this;\n    const received = this._receivedPackets;\n    const total = pkt.data[2];\n    const restarts = this._restarts;\n    this._data[this._dataIndex] = { received, total, restarts };\n    this._dataIndex = (this._dataIndex + 1) % this._data.length;\n    this._receivedPackets = 0;\n    this._restarts = 0;\n    const { current } = this;\n    if (oldCurrent.dropped !== current.dropped || oldCurrent.restarts !== current.restarts)\n      this.emit(CHANGE);\n  }\n  processPacket(pkt) {\n    this._receivedPackets++;\n  }\n  processRestart() {\n    this._restarts++;\n    this._announce = 0;\n  }\n};\nvar JDDevice = class extends JDNode {\n  constructor(bus, deviceId, pkt) {\n    super();\n    this.stats = new DeviceStatsMonitor();\n    this.bus = bus;\n    this.deviceId = deviceId;\n    this.connected = true;\n    this._lost = false;\n    this._identifying = false;\n    this.created = this.lastSeen = bus.timestamp;\n    this._source = pkt == null ? void 0 : pkt.sender;\n    this._replay = !!(pkt == null ? void 0 : pkt.replay);\n  }\n  get anonymizedDeviceId() {\n    if (!this._anonymizedId)\n      this._anonymizedId = randomDeviceId();\n    return this._anonymizedId;\n  }\n  describe() {\n    const ignoredServices = [SRV_CONTROL, SRV_LOGGER];\n    return this.toString() + (this.isPhysical ? \"\" : \" (sim)\") + \": \" + this.services().filter((srv) => ignoredServices.indexOf(srv.serviceClass) < 0).map((s) => {\n      var _a;\n      return s.instanceName || ((_a = s.specification) == null ? void 0 : _a.camelName) || s.serviceClass.toString(16);\n    }).join(\", \");\n  }\n  get id() {\n    return `${this.nodeKind}:${this.deviceId}`;\n  }\n  get name() {\n    return this.shortId;\n  }\n  get nodeKind() {\n    return DEVICE_NODE_NAME;\n  }\n  get isPhysical() {\n    return this._source === USB_TRANSPORT || this._source === BLUETOOTH_TRANSPORT || this._source === SERIAL_TRANSPORT || this._source === PACKETIO_TRANSPORT || this._source === WEBSOCKET_TRANSPORT;\n  }\n  get source() {\n    return this._source;\n  }\n  get replay() {\n    return this._replay;\n  }\n  get friendlyName() {\n    return this.shortId;\n  }\n  get qualifiedName() {\n    return this.shortId;\n  }\n  get announced() {\n    var _a;\n    return !!((_a = this._servicesData) == null ? void 0 : _a.length);\n  }\n  get announceFlags() {\n    return this._servicesData ? read16(this._servicesData, 0) : 0;\n  }\n  get restartCounter() {\n    return this.announceFlags & 15 /* RestartCounterSteady */;\n  }\n  get statusLightFlags() {\n    return this.announceFlags & 48 /* StatusLightRgbFade */;\n  }\n  get isClient() {\n    return !!(this.announceFlags & 2048 /* IsClient */);\n  }\n  get packetCount() {\n    var _a;\n    return ((_a = this._servicesData) == null ? void 0 : _a[2]) || 0;\n  }\n  get shortId() {\n    if (!this._shortId)\n      this._shortId = shortDeviceId(this.deviceId);\n    return this._shortId;\n  }\n  get parent() {\n    return this.bus;\n  }\n  get firmwareInfo() {\n    var _a, _b, _c;\n    const ctrl = this.service(0);\n    const deviceId = this.deviceId;\n    const name = (_a = ctrl == null ? void 0 : ctrl.register(384 /* DeviceDescription */)) == null ? void 0 : _a.stringValue;\n    const version = this.firmwareVersion;\n    const productIdentifier = (_b = ctrl == null ? void 0 : ctrl.register(385 /* ProductIdentifier */)) == null ? void 0 : _b.uintValue;\n    const bootloaderProductIdentifier = (_c = ctrl == null ? void 0 : ctrl.register(388 /* BootloaderProductIdentifier */)) == null ? void 0 : _c.uintValue;\n    const ready = productIdentifier !== void 0 || bootloaderProductIdentifier !== void 0;\n    return ready ? {\n      deviceId,\n      name,\n      version,\n      productIdentifier,\n      bootloaderProductIdentifier\n    } : void 0;\n  }\n  refreshFirmwareInfo() {\n    var _a;\n    if (this.bus.passive)\n      return;\n    const ctrl = (_a = this._services) == null ? void 0 : _a[0];\n    if (!ctrl)\n      return;\n    const firmwareRegs = [\n      385 /* ProductIdentifier */,\n      389 /* FirmwareVersion */,\n      388 /* BootloaderProductIdentifier */,\n      384 /* DeviceDescription */\n    ];\n    firmwareRegs.map((code) => ctrl.register(code)).filter((reg) => !!reg).forEach((reg) => reg.once(REPORT_UPDATE, () => {\n      this.emitPropagated(DEVICE_FIRMWARE_INFO);\n      this.emitPropagated(CHANGE);\n    }));\n  }\n  get lost() {\n    return this._lost;\n  }\n  set lost(v) {\n    if (!!v === this._lost)\n      return;\n    this._lost = !!v;\n    if (this.lost) {\n      this.emit(LOST);\n      this.bus.emit(DEVICE_LOST, this);\n    } else {\n      this.emit(FOUND);\n      this.bus.emit(DEVICE_FOUND, this);\n    }\n    this.emit(CHANGE);\n    this.bus.emit(DEVICE_CHANGE, this);\n    this.bus.emit(CHANGE);\n  }\n  get firmwareUpdater() {\n    return this._firmwareUpdater;\n  }\n  set firmwareUpdater(value) {\n    var _a;\n    if (value !== this._firmwareUpdater) {\n      this._firmwareUpdater = value;\n      if (!this._firmwareUpdater) {\n        const reg = (_a = this.service(0)) == null ? void 0 : _a.register(389 /* FirmwareVersion */);\n        reg == null ? void 0 : reg.clearData();\n      }\n      this.emit(CHANGE);\n      this.bus.emit(DEVICE_CHANGE, this);\n      this.bus.emit(CHANGE);\n      if (this._firmwareUpdater)\n        this.bus.sendStopStreaming();\n    }\n  }\n  get eventCounter() {\n    return this._eventCounter;\n  }\n  set eventCounter(v) {\n    this._eventCounter = v;\n  }\n  hasService(serviceClass2) {\n    if (!this.announced)\n      return false;\n    if (serviceClass2 === 0)\n      return true;\n    for (let i = 4; i < this._servicesData.length; i += 4) {\n      const sc = getNumber(this._servicesData, 11 /* UInt32LE */, i);\n      if (isInstanceOf(sc, serviceClass2))\n        return true;\n    }\n    return false;\n  }\n  port(id) {\n    if (!this._ports)\n      this._ports = {};\n    const key = id + \"\";\n    const ex = this._ports[key];\n    if (!ex)\n      return this._ports[key] = {};\n    return ex;\n  }\n  get bootloader() {\n    return this.hasService(SRV_BOOTLOADER);\n  }\n  get serviceLength() {\n    if (!this.announced)\n      return 0;\n    return this._servicesData.length >> 2;\n  }\n  serviceClassAt(index) {\n    if (index == 0)\n      return 0;\n    index <<= 2;\n    if (!this.announced || index + 4 > this._servicesData.length)\n      return void 0;\n    return read32(this._servicesData, index);\n  }\n  get serviceClasses() {\n    const r = [];\n    const n = this.serviceLength;\n    for (let i = 0; i < n; ++i)\n      r.push(this.serviceClassAt(i));\n    return r;\n  }\n  initServices(force) {\n    if (force)\n      this._services = void 0;\n    if (!this._services && this._servicesData) {\n      this._statusLight = void 0;\n      const n = this.serviceLength;\n      const s = [];\n      for (let i = 0; i < n; ++i)\n        s.push(new JDService(this, i));\n      this._services = s;\n      this.lastServiceUpdate = this.bus.timestamp;\n      this.refreshFirmwareInfo();\n      this.emitPropagated(CHANGE);\n    }\n  }\n  service(serviceIndex) {\n    if (!this.announced)\n      return void 0;\n    this.initServices();\n    serviceIndex = serviceIndex | 0;\n    return this._services && this._services[serviceIndex];\n  }\n  services(options) {\n    var _a;\n    if (!this.announced)\n      return [];\n    if ((options == null ? void 0 : options.serviceIndex) >= 0)\n      return [this.service(options == null ? void 0 : options.serviceIndex)];\n    if ((options == null ? void 0 : options.serviceName) && (options == null ? void 0 : options.serviceClass) > -1)\n      throw Error(\"serviceClass and serviceName cannot be used together\");\n    let sc = serviceClass(options == null ? void 0 : options.serviceName);\n    if (sc === void 0 || sc < 0)\n      sc = options == null ? void 0 : options.serviceClass;\n    if (sc === void 0)\n      sc = -1;\n    this.initServices();\n    let r = ((_a = this._services) == null ? void 0 : _a.slice()) || [];\n    if (sc > -1)\n      r = r.filter((s) => s.serviceClass == sc);\n    if (options == null ? void 0 : options.specification)\n      r = r.filter((s) => !!s.specification);\n    if (options == null ? void 0 : options.sensor)\n      r = r.filter((s) => isSensor(s.specification));\n    const mixins = options == null ? void 0 : options.mixins;\n    if (mixins !== void 0)\n      r = r.filter((s) => s.isMixin === mixins);\n    return r;\n  }\n  get children() {\n    return this.services();\n  }\n  sendCtrlCommand(cmd, payload = null) {\n    const pkt = !payload ? Packet.onlyHeader(cmd) : Packet.from(cmd, payload);\n    pkt.serviceIndex = JD_SERVICE_INDEX_CTRL;\n    return pkt.sendCmdAsync(this);\n  }\n  processAnnouncement(pkt) {\n    this.stats.processAnnouncement(pkt);\n    const w0 = this._servicesData ? getNumber(this._servicesData, 11 /* UInt32LE */, 0) : 0;\n    const w1 = getNumber(pkt.data, 11 /* UInt32LE */, 0);\n    const restarted = w1 && (w1 & JD_ADVERTISEMENT_0_COUNTER_MASK) < (w0 & JD_ADVERTISEMENT_0_COUNTER_MASK);\n    let servicesChanged = !bufferEq(pkt.data, this._servicesData, 4);\n    this._servicesData = pkt.data;\n    if (restarted) {\n      this.stats.processRestart();\n      this.bus.emit(DEVICE_RESTART, this);\n      this.emit(RESTART);\n      servicesChanged = true;\n      this._eventCounter = void 0;\n    }\n    if (servicesChanged) {\n      this.initServices(true);\n      this.lastServiceUpdate = pkt.timestamp;\n      this.bus.emit(DEVICE_ANNOUNCE, this);\n      this.emit(ANNOUNCE);\n    }\n    this.bus.emit(DEVICE_PACKET_ANNOUNCE, this);\n    this.emit(PACKET_ANNOUNCE);\n    if (servicesChanged) {\n      this.bus.emit(DEVICE_CHANGE, this);\n      this.bus.emit(CHANGE);\n      this.emit(CHANGE);\n    }\n  }\n  markRepeatedEvent(pkt) {\n    if (!pkt.isEvent || !pkt.isReport)\n      return;\n    if (this.eventCounter === void 0) {\n      this.eventCounter = pkt.eventCounter;\n      return;\n    }\n    const ec = (this.eventCounter || 0) + 1;\n    const ahead = pkt.eventCounter - ec & CMD_EVENT_COUNTER_MASK;\n    const behind = ec - pkt.eventCounter & CMD_EVENT_COUNTER_MASK;\n    const old = behind < 60;\n    const missed5 = ahead < 5;\n    const isahead = ahead > 0;\n    if (isahead && (old || missed5)) {\n      pkt.isRepeatedEvent = true;\n    } else {\n      this.eventCounter = pkt.eventCounter;\n    }\n  }\n  processPacket(pkt) {\n    this.markRepeatedEvent(pkt);\n    this.stats.processPacket(pkt);\n    this.lost = false;\n    this.emit(PACKET_RECEIVE, pkt);\n    if (pkt.isReport)\n      this.emit(PACKET_REPORT, pkt);\n    else if (pkt.isEvent)\n      this.emit(PACKET_EVENT, pkt);\n    const service = this.service(pkt.serviceIndex);\n    if (service)\n      service.processPacket(pkt);\n  }\n  disconnect() {\n    this.connected = false;\n    this.emit(DISCONNECT);\n    this.emit(CHANGE);\n  }\n  get statusLight() {\n    if (!this._statusLight && this.statusLightFlags !== 0 /* StatusLightNone */)\n      this._statusLight = new LEDController(this.service(0), 132 /* SetStatusLight */);\n    return this._statusLight;\n  }\n  async identify() {\n    if (this._identifying)\n      return;\n    try {\n      this._identifying = true;\n      this.emit(CHANGE);\n      const statusLight = this.statusLight;\n      if (statusLight)\n        await statusLight.blink(255, 0, 262, 4);\n      else {\n        const ctrl = this.service(0);\n        await ctrl.sendCmdAsync(129 /* Identify */, void 0, false);\n        await this.bus.delay(IDENTIFY_DURATION);\n      }\n    } catch (e) {\n      this.emit(ERROR, e);\n    } finally {\n      this._identifying = false;\n      this.emit(CHANGE);\n    }\n  }\n  get identifying() {\n    return this._identifying;\n  }\n  reset() {\n    return this.sendCtrlCommand(130 /* Reset */);\n  }\n  startProxy() {\n    return this.sendCtrlCommand(133 /* Proxy */);\n  }\n  async resolveProductIdentifier(retry = 0) {\n    var _a;\n    const register = (_a = this.service(0)) == null ? void 0 : _a.register(385 /* ProductIdentifier */);\n    if (!register)\n      return void 0;\n    while (retry-- >= 0 && register.data === void 0)\n      await register.refresh(true);\n    return register.uintValue;\n  }\n  get productIdentifier() {\n    var _a;\n    const reg = (_a = this.service(0)) == null ? void 0 : _a.register(385 /* ProductIdentifier */);\n    const v = reg == null ? void 0 : reg.uintValue;\n    if (reg && v === void 0)\n      reg.scheduleRefresh();\n    return v;\n  }\n  get uptime() {\n    var _a, _b;\n    const reg = (_a = this.service(0)) == null ? void 0 : _a.register(390 /* Uptime */);\n    const v = (_b = reg == null ? void 0 : reg.unpackedValue) == null ? void 0 : _b[0];\n    if (reg && v === void 0)\n      reg.scheduleRefresh();\n    let uptime = void 0;\n    if (v !== void 0) {\n      uptime = v / 1e3 + this.bus.timestamp - reg.lastDataTimestamp;\n    }\n    return uptime;\n  }\n  get firmwareVersion() {\n    var _a;\n    const reg = (_a = this.service(0)) == null ? void 0 : _a.register(389 /* FirmwareVersion */);\n    const v = reg == null ? void 0 : reg.stringValue;\n    if (reg && v === void 0)\n      reg.scheduleRefresh();\n    return v;\n  }\n  get proxy() {\n    return this.serviceClasses.indexOf(SRV_PROXY) > -1;\n  }\n  get brain() {\n    return this.serviceClasses.indexOf(SRV_UNIQUE_BRAIN) > -1;\n  }\n  initAcks() {\n    if (this._ackAwaiting)\n      return;\n    let drops = 0;\n    let resends = 0;\n    this._ackAwaiting = [];\n    const cleanUp = this.subscribe(PACKET_REPORT, (rep) => {\n      if (!rep.isCRCAck)\n        return;\n      let numdone = 0;\n      for (const aa of this._ackAwaiting) {\n        if (aa.pkt && aa.pkt.crc == rep.serviceCommand) {\n          aa.pkt = null;\n          numdone++;\n          aa.okCb();\n        }\n      }\n      if (numdone)\n        this._ackAwaiting = this._ackAwaiting.filter((aa) => !!aa.pkt);\n    });\n    const resend = () => {\n      let numdrop = 0;\n      for (const aa of this._ackAwaiting) {\n        if (aa.pkt) {\n          if (--aa.retriesLeft < 0) {\n            drops++;\n            aa.pkt.meta[META_ACK_FAILED] = true;\n            aa.pkt = null;\n            aa.errCb();\n            numdrop++;\n            if (Flags.diagnostics)\n              console.debug(`ack: ${this.shortId} drop ${aa.pkt} (${drops} drops, ${resends} resends)`);\n          } else {\n            resends++;\n            aa.pkt.sendCmdAsync(this);\n            if (Flags.diagnostics)\n              console.debug(`ack: ${this.shortId} resend ${aa.pkt} (${drops} drops, ${resends} resends)`);\n          }\n        }\n      }\n      if (numdrop)\n        this._ackAwaiting = this._ackAwaiting.filter((aa) => !!aa.pkt);\n      if (Flags.diagnostics)\n        console.debug(`ack: ${this.shortId} awaits ${this._ackAwaiting.length}`);\n      if (this._ackAwaiting.length > 0) {\n        this.bus.scheduler.setTimeout(resend, Math.random() * (ACK_MAX_DELAY - ACK_MIN_DELAY) + ACK_MIN_DELAY);\n      } else {\n        this._ackAwaiting = void 0;\n        cleanUp();\n      }\n    };\n    this.bus.scheduler.setTimeout(resend, 40);\n  }\n  sendPktWithAck(pkt) {\n    pkt.requiresAck = !this.bus.passive;\n    this.initAcks();\n    return new Promise((resolve, reject) => {\n      const ack = {\n        pkt,\n        retriesLeft: 4,\n        okCb: resolve,\n        errCb: () => {\n          const e = new Error(\"No ACK for \" + pkt.toString());\n          setAckError(e);\n          reject(e);\n        }\n      };\n      this._ackAwaiting.push(ack);\n      pkt.sendCmdAsync(this);\n    });\n  }\n  async floodPing(numPkts = 100, size = 32) {\n    const pkt = Packet.jdpacked(131 /* FloodPing */, \"u32 u32 u8\", [\n      numPkts,\n      4096,\n      size\n    ]);\n    pkt.serviceIndex = JD_SERVICE_INDEX_CTRL;\n    await this.sendPktWithAck(pkt);\n  }\n};\n\n// src/jdom/scheduler.ts\nvar WallClockScheduler = class {\n  constructor() {\n    this._now = typeof performance !== \"undefined\" ? () => performance.now() : () => Date.now();\n    this._startTime = this._now();\n  }\n  get timestamp() {\n    return this._now() - this._startTime;\n  }\n  resetTime(delta = 0) {\n    this._startTime = this._now() - delta;\n  }\n  setTimeout(handler, delay2, ...args) {\n    return setTimeout(handler, delay2, args);\n  }\n  clearTimeout(handle) {\n    clearTimeout(handle);\n  }\n  setInterval(handler, delay2, ...args) {\n    return setInterval(handler, delay2, args);\n  }\n  clearInterval(handle) {\n    clearInterval(handle);\n  }\n};\n\n// src/jdom/flashing.ts\nvar BL_SUBPAGE_SIZE = 208;\nvar BL_RETRIES = 15;\nvar BL_SESSION_DELAY = 5;\nvar BL_PAGE_DELAY = 5;\nvar _startTime = 0;\nvar uf2ExtTags = {\n  version: -10471356,\n  name: -6622621,\n  pageSize: 780791,\n  productIdentifier: 13149993\n};\nfunction timestamp() {\n  if (!_startTime)\n    _startTime = Date.now();\n  return Date.now() - _startTime;\n}\nfunction log(msg) {\n  if (Flags.diagnostics)\n    console.debug(`BL [${timestamp()}ms]: ${msg}`);\n}\nvar FirmwareUpdater = class extends JDEventSource {\n  constructor(bus, blob) {\n    super();\n    this.bus = bus;\n    this.blob = blob;\n  }\n  async flash(updateCandidates, ignoreFirmwareCheck) {\n    if (!(updateCandidates == null ? void 0 : updateCandidates.length))\n      return;\n    const { bus, blob } = this;\n    _startTime = Date.now();\n    log(`resetting ${updateCandidates.length} device(s)`);\n    const bootloaderDeviceIds = [];\n    for (const d of updateCandidates) {\n      const device = bus.device(d.deviceId, true);\n      if (!device) {\n        log(\"device not found\");\n        return;\n      }\n      if (!device.bootloader) {\n        log(`resetting ${device}`);\n        bootloaderDeviceIds.push(dualDeviceId(device.deviceId));\n        await device.sendCtrlCommand(130 /* Reset */);\n      } else {\n        bootloaderDeviceIds.push(device.deviceId);\n      }\n    }\n    const allFlashers = await createFlashers(this, bootloaderDeviceIds);\n    const flashers = allFlashers.filter((f) => !!ignoreFirmwareCheck || f.dev_class == blob.productIdentifier).filter((f) => updateCandidates.find((uc) => uc.deviceId === f.device.deviceId || isDualDeviceId(uc.deviceId, f.device.deviceId)));\n    if (!flashers.length) {\n      log(`no devices to flash`);\n      return;\n    }\n    if (flashers.length != updateCandidates.length) {\n      console.error(`expected ${updateCandidates.length} flashers, got ${flashers.length}`);\n      return;\n    }\n    log(`flashing ${blob.name}`);\n    flashers[0].classClients = flashers;\n    const unmounts = [];\n    try {\n      flashers.forEach((f) => {\n        f.device.firmwareUpdater = this;\n        const dualDevice = bus.device(dualDeviceId(f.device.deviceId), true);\n        if (dualDevice)\n          dualDevice.firmwareUpdater = this;\n        unmounts.push(() => {\n          f.device.firmwareUpdater = void 0;\n          if (dualDevice)\n            dualDevice.firmwareUpdater = void 0;\n        });\n      });\n      await flashers[0].flashFirmwareBlob(blob);\n    } finally {\n      unmounts.forEach((u) => u());\n    }\n  }\n};\nvar FlashClient = class {\n  constructor(updater, adpkt) {\n    this.updater = updater;\n    const d = bufferToArray(adpkt.data, 11 /* UInt32LE */);\n    this.pageSize = d[1];\n    this.flashSize = d[2];\n    this.dev_class = d[3];\n    this.device = adpkt.device;\n    this.handlePacket = this.handlePacket.bind(this);\n  }\n  get bus() {\n    return this.updater.bus;\n  }\n  get progress() {\n    return this.progressTotal ? this.progressIndex / this.progressTotal : 0;\n  }\n  handlePacket(pkt) {\n    if (pkt.serviceCommand == 128 /* PageData */)\n      this.lastStatus = pkt;\n  }\n  start() {\n    this.device.on(PACKET_REPORT, this.handlePacket);\n  }\n  stop() {\n    this.device.off(PACKET_REPORT, this.handlePacket);\n  }\n  async sendCommandAsync(p) {\n    p.serviceIndex = 1;\n    await p.sendCmdAsync(this.device);\n  }\n  async startFlashAsync() {\n    this.sessionId = Math.random() * 268435456 | 0;\n    for (const d of this.classClients) {\n      d.start();\n      log(`flashing ${d.device.shortId}; available flash=${d.flashSize / 1024}kb; page=${d.pageSize}b`);\n    }\n    const setsession = Packet.jdpacked(129 /* SetSession */, \"u32\", [this.sessionId]);\n    this.allPending();\n    for (let i = 0; i < BL_RETRIES; ++i) {\n      for (const d of this.classClients) {\n        if (d.pending) {\n          if (d.lastStatus && d.lastStatus.getNumber(11 /* UInt32LE */, 0) == this.sessionId) {\n            d.pending = false;\n          } else {\n            d.lastStatus = null;\n            log(`set session ${this.sessionId} on ${d.device}`);\n            await d.sendCommandAsync(setsession);\n          }\n          await this.bus.delay(BL_SESSION_DELAY);\n        }\n      }\n      if (this.numPending() == 0)\n        break;\n      await this.waitForStatusAsync();\n    }\n    if (this.numPending())\n      throw new Error(\"Can't set session id\");\n  }\n  async endFlashAsync() {\n    for (const f of this.classClients) {\n      await this.bus.delay(10);\n      await f.device.reset();\n    }\n  }\n  allPending() {\n    for (const c of this.classClients) {\n      c.pending = true;\n      c.lastStatus = null;\n    }\n  }\n  numPending() {\n    let num = 0;\n    for (const c of this.classClients)\n      if (c.pending)\n        num++;\n    return num;\n  }\n  async waitForStatusAsync() {\n    for (let i = 0; i < 100; ++i) {\n      if (this.classClients.every((c) => c.lastStatus != null))\n        break;\n      await this.bus.delay(5);\n    }\n  }\n  async flashPage(page) {\n    const pageAddr = page.targetAddress;\n    const pageSize = this.pageSize;\n    const numSubpage = (pageSize + BL_SUBPAGE_SIZE - 1) / BL_SUBPAGE_SIZE | 0;\n    log(`flash ${prettySize(this.pageSize)} at ${(pageAddr & 16777215).toString(16)}`);\n    if (page.data.length != this.pageSize)\n      throw new Error(\"invalid page size\");\n    for (const f of this.classClients)\n      f.lastStatus = null;\n    this.allPending();\n    for (let i = 0; i < BL_RETRIES; ++i) {\n      log(`  attempt ${i}`);\n      let currSubpage = 0;\n      for (let suboff = 0; suboff < pageSize; suboff += BL_SUBPAGE_SIZE) {\n        let sz = BL_SUBPAGE_SIZE;\n        if (suboff + sz > pageSize)\n          sz = pageSize - suboff;\n        log(`send sub page ${currSubpage}/${numSubpage - 1} at ${suboff.toString(16)}[${sz}]`);\n        const hd = jdpack(\"u32 u16 u8 u8 u32 u32 u32 u32 u32\", [\n          pageAddr,\n          suboff,\n          currSubpage++,\n          numSubpage - 1,\n          this.sessionId,\n          0,\n          0,\n          0,\n          0\n        ]);\n        assert(hd.length == 4 * 7);\n        const p = Packet.from(128 /* PageData */, bufferConcat(hd, page.data.slice(suboff, suboff + sz)));\n        if (this.classClients.length > 1 && (i == 0 || currSubpage < numSubpage))\n          await p.sendAsMultiCommandAsync(this.bus, SRV_BOOTLOADER);\n        else {\n          for (const f of this.classClients)\n            if (f.pending) {\n              f.lastStatus = null;\n              await f.sendCommandAsync(p);\n            }\n        }\n        await this.bus.delay(BL_PAGE_DELAY);\n      }\n      await this.waitForStatusAsync();\n      for (const f of this.classClients) {\n        if (f.pending) {\n          let err = \"\";\n          if (f.lastStatus) {\n            const [session_id, page_error, pageAddrR] = jdunpack(f.lastStatus.data, \"u32 u32 u32\");\n            if (session_id != this.sessionId)\n              err = \"invalid session_id\";\n            else if (pageAddrR != pageAddr)\n              err = \"invalid page address\";\n            else if (page_error)\n              err = \"err: \" + (BootloaderError[page_error] || page_error);\n          } else {\n            err = \"timeout\";\n          }\n          if (err) {\n            f.lastStatus = null;\n            log(`retry ${f.device}: ${err}`);\n          } else {\n            f.pending = false;\n          }\n        }\n      }\n      if (this.numPending() == 0) {\n        log(`page ${pageAddr & 16777215} done, ${i}/${BL_RETRIES} retries`);\n        return;\n      }\n    }\n    throw new Error(\"too many retries\");\n  }\n  async flashFirmwareBlob(fw) {\n    const waitCycles = 15;\n    this.progressTotal = fw.pages.length + waitCycles + 3;\n    this.progressIndex = 0;\n    const prog = () => {\n      this.updater.emit(PROGRESS, this.progress);\n      this.progressIndex++;\n    };\n    try {\n      this.updater.emit(CHANGE);\n      prog();\n      await this.startFlashAsync();\n      prog();\n      for (const page of fw.pages) {\n        await this.flashPage(page);\n        prog();\n      }\n    } finally {\n      try {\n        await this.endFlashAsync();\n        prog();\n        for (let i = 0; i < waitCycles; ++i) {\n          await this.bus.delay(150);\n          prog();\n        }\n      } finally {\n        for (const d of this.classClients) {\n          d.stop();\n        }\n      }\n      this.updater.emit(CHANGE);\n    }\n  }\n};\nvar UF2_MAGIC_START0 = 171066965;\nvar UF2_MAGIC_START1 = 2656915799;\nvar UF2_MAGIC_END = 179400496;\nfunction parseUF2Firmware(uf2, store) {\n  const blobs = [];\n  let currBlob;\n  for (let off = 0; off < uf2.length; off += 512) {\n    const header = uf2.slice(off, off + 32);\n    const [\n      magic0,\n      magic1,\n      flags,\n      trgaddr,\n      payloadSize,\n      blkNo,\n      numBlocks,\n      familyID\n    ] = bufferToArray(header, 11 /* UInt32LE */);\n    if (magic0 != UF2_MAGIC_START0 || magic1 != UF2_MAGIC_START1 || getNumber(uf2, 11 /* UInt32LE */, off + 512 - 4) != UF2_MAGIC_END)\n      throw new Error(\"invalid UF2\");\n    if (blkNo == 0) {\n      flush();\n      currBlob = {\n        pages: [],\n        productIdentifier: familyID,\n        version: \"\",\n        pageSize: 1024,\n        name: \"FW \" + familyID.toString(16),\n        store\n      };\n    }\n    if (flags & 32768)\n      parseExtTags(uf2.slice(off + 32 + payloadSize, off + 512));\n    const pageSize = currBlob.pageSize || 1024;\n    let currPage = currBlob.pages[currBlob.pages.length - 1];\n    if (!currPage || !(currPage.targetAddress <= trgaddr && trgaddr < currPage.targetAddress + pageSize)) {\n      currPage = {\n        targetAddress: trgaddr & ~(pageSize - 1),\n        data: new Uint8Array(pageSize)\n      };\n      currPage.data.fill(255);\n      currBlob.pages.push(currPage);\n    }\n    currPage.data.set(uf2.slice(off + 32, off + 32 + payloadSize), trgaddr - currPage.targetAddress);\n  }\n  flush();\n  return blobs;\n  function flush() {\n    if (currBlob)\n      blobs.push(currBlob);\n  }\n  function parseExtTags(buf) {\n    let sz = 0;\n    for (let i = 0; i < buf.length; i += sz) {\n      sz = buf[i];\n      if (sz == 0)\n        break;\n      const desig = getNumber(buf, 11 /* UInt32LE */, i) >>> 8;\n      for (const key of Object.keys(uf2ExtTags)) {\n        const tg = uf2ExtTags[key];\n        if (desig == Math.abs(tg)) {\n          let v;\n          if (tg < 0) {\n            v = bufferToString(buf.slice(i + 4, i + sz));\n          } else {\n            v = getNumber(buf, 11 /* UInt32LE */, i + 4);\n          }\n          const cbany = currBlob;\n          cbany[key] = v;\n          break;\n        }\n      }\n      sz = sz + 3 & ~3;\n    }\n  }\n}\nasync function parseFirmwareFile(blob, store) {\n  const data = await readBlobToUint8Array(blob);\n  const buf = new Uint8Array(data);\n  const uf2Blobs = parseUF2Firmware(buf, store);\n  return uf2Blobs;\n}\nasync function createFlashers(updater, bootloaderDeviceIds) {\n  const bus = updater.bus;\n  const flashers = [];\n  const numTries = 10;\n  const tryDelay = 10;\n  const handlePkt = (p) => {\n    if (p.serviceIndex == 1 && p.serviceCommand == CMD_ADVERTISEMENT_DATA && p.getNumber(11 /* UInt32LE */, 0) == SRV_BOOTLOADER) {\n      if (!flashers.find((f) => f.device.deviceId == p.deviceIdentifier)) {\n        log(`new flasher`);\n        flashers.push(new FlashClient(updater, p));\n      }\n    }\n  };\n  try {\n    bus.on(PACKET_REPORT, handlePkt);\n    for (let i = 0; i < numTries; ++i) {\n      if ((bootloaderDeviceIds == null ? void 0 : bootloaderDeviceIds.length) > 1) {\n        const bl_announce = Packet.onlyHeader(CMD_ADVERTISEMENT_DATA);\n        await bl_announce.sendAsMultiCommandAsync(bus, SRV_BOOTLOADER);\n        await bus.delay(tryDelay);\n      } else {\n        for (const id of bootloaderDeviceIds) {\n          const bl_announce = Packet.onlyHeader(CMD_ADVERTISEMENT_DATA);\n          bl_announce.serviceIndex = 1;\n          bl_announce.deviceIdentifier = id;\n          bl_announce.isCommand = true;\n          await bus.sendPacketAsync(bl_announce);\n        }\n      }\n      await bus.delay(tryDelay);\n    }\n  } finally {\n    bus.off(PACKET_REPORT, handlePkt);\n  }\n  return flashers;\n}\nfunction updateApplicable(dev, blob) {\n  return dev && blob && dev.bootloaderProductIdentifier == blob.productIdentifier && dev.version !== blob.version;\n}\nasync function sendStayInBootloaderCommand(bus) {\n  const bl_announce = Packet.onlyHeader(0 /* Info */);\n  await bl_announce.sendAsMultiCommandAsync(bus, SRV_BOOTLOADER);\n}\n\n// src/jdom/servers/registerserver.ts\nfunction defaultFieldPayload(specification) {\n  let r = void 0;\n  switch (specification.type) {\n    case \"bool\":\n      r = 0;\n      break;\n    case \"i8\":\n    case \"i16\":\n    case \"i32\":\n    case \"u8\":\n    case \"u16\":\n    case \"u32\": {\n      const min = pick(specification.typicalMin, specification.absoluteMin, void 0);\n      const max = pick(specification.typicalMax, specification.absoluteMax, void 0);\n      if (max !== void 0 && min !== void 0)\n        r = (max + min) / 2;\n      else\n        r = 0;\n      break;\n    }\n    case \"bytes\": {\n      r = new Uint8Array(0);\n      break;\n    }\n    case \"string\":\n    case \"string0\": {\n      r = \"\";\n      break;\n    }\n  }\n  if (/^(u0|i1)\\.\\d+$/.test(specification.type))\n    r = 0;\n  return r;\n}\nfunction defaultPayload(specification) {\n  const { fields } = specification;\n  const rs = fields.map(defaultFieldPayload);\n  return rs;\n}\nvar JDRegisterServer = class extends JDEventSource {\n  constructor(service, identifier, defaultValue) {\n    super();\n    this.service = service;\n    this.identifier = identifier;\n    this.skipBoundaryCheck = false;\n    this.skipErrorInjection = false;\n    var _a, _b;\n    const serviceSpecification = this.service.specification;\n    this.specification = serviceSpecification.packets.find((pkt) => isRegister2(pkt) && pkt.identifier === this.identifier);\n    let v = defaultValue;\n    if (!v && !this.specification.optional)\n      v = defaultPayload(this.specification);\n    if (v !== void 0 && !v.some((vi) => vi === void 0)) {\n      this.data = jdpack(this.packFormat, v);\n    }\n    this.resetData = (_a = this.data) == null ? void 0 : _a.slice(0);\n    this.skipBoundaryCheck = !((_b = this.specification) == null ? void 0 : _b.fields.some((field) => isSet(field.absoluteMin) || isSet(field.absoluteMax)));\n  }\n  get packFormat() {\n    return this.specification.packFormat;\n  }\n  values() {\n    return jdunpack(this.data, this.packFormat);\n  }\n  normalize(values2) {\n    var _a;\n    if (!this.skipBoundaryCheck) {\n      (_a = this.specification) == null ? void 0 : _a.fields.forEach((field, fieldi) => {\n        if (field.isSimpleType) {\n          let value = values2[fieldi];\n          const min = field.absoluteMin;\n          if (min !== void 0)\n            value = Math.max(min, value);\n          const max = field.absoluteMax;\n          if (max !== void 0)\n            value = Math.min(max, value);\n          values2[fieldi] = value;\n        }\n      });\n    }\n    this.emit(PACKET_DATA_NORMALIZE, values2);\n  }\n  shouldNormalize() {\n    return !this.skipBoundaryCheck || this.listenerCount(PACKET_DATA_NORMALIZE);\n  }\n  setValues(values2, skipChangeEvent) {\n    if (this.readOnly)\n      return;\n    if (this.shouldNormalize())\n      this.normalize(values2);\n    if (this.valueProcessor)\n      values2 = this.valueProcessor(values2);\n    const d = jdpack(this.packFormat, values2);\n    if (!bufferEq(this.data, d)) {\n      this.data = d;\n      if (!skipChangeEvent)\n        this.emit(CHANGE);\n    }\n  }\n  reset() {\n    var _a;\n    this.data = (_a = this.resetData) == null ? void 0 : _a.slice(0);\n  }\n  async sendGetAsync() {\n    var _a;\n    this.emit(REGISTER_PRE_GET);\n    let d = this.data;\n    if (!d)\n      return;\n    const error = !this.skipErrorInjection && ((_a = this.errorRegister) == null ? void 0 : _a.values()[0]);\n    if (error && !isNaN(error)) {\n      const vs = this.values();\n      for (let i = 0; i < vs.length; ++i) {\n        vs[i] += Math.random() * error;\n      }\n      d = jdpack(this.packFormat, vs);\n    }\n    await this.service.sendPacketAsync(Packet.from(this.identifier | CMD_GET_REG, d));\n  }\n  handlePacket(pkt) {\n    if (this.identifier !== pkt.registerIdentifier)\n      return false;\n    if (pkt.isRegisterGet) {\n      this.sendGetAsync();\n    } else if (this.identifier >> 8 !== 1) {\n      let changed = false;\n      let d = pkt.data;\n      if (this.shouldNormalize() || this.valueProcessor) {\n        try {\n          let values2 = jdunpack(d, this.packFormat);\n          if (this.shouldNormalize())\n            this.normalize(values2);\n          if (this.valueProcessor)\n            values2 = this.valueProcessor(values2);\n          d = jdpack(this.packFormat, values2);\n        } catch (e) {\n          this.emit(PACKET_INVALID_DATA, pkt);\n        }\n      }\n      if (!bufferEq(this.data, d)) {\n        this.data = d;\n        changed = true;\n      }\n      this.lastSetTime = this.service.timestamp;\n      this.emit(REPORT_RECEIVE);\n      if (changed)\n        this.emit(CHANGE);\n    }\n    return true;\n  }\n};\n\n// src/jdom/servers/serviceserver.ts\nvar CALIBRATION_DELAY = 5e3;\nvar JDServiceServer = class extends JDEventSource {\n  constructor(serviceClass2, options) {\n    super();\n    this.serviceClass = serviceClass2;\n    this.serviceIndex = -1;\n    this._registers = [];\n    this.commands = {};\n    this._locked = false;\n    const {\n      instanceName,\n      variant,\n      valueValues,\n      intensityValues,\n      intensityProcessor,\n      registerValues,\n      isActive\n    } = options || {};\n    this.specification = serviceSpecificationFromClassIdentifier(this.serviceClass);\n    this.statusCode = this.addRegister(259 /* StatusCode */, [0 /* Ready */, 0]);\n    if (valueValues)\n      this.addRegister(2 /* Value */, valueValues);\n    if (intensityValues) {\n      const intensity = this.addRegister(1 /* Intensity */, intensityValues);\n      if (intensityProcessor)\n        intensity.valueProcessor = intensityProcessor;\n      if (isActive)\n        intensity.on(CHANGE, () => {\n          const ev = isActive(intensity.values());\n          if (ev !== void 0)\n            this.sendEvent(isActive(intensity.values()) ? 1 /* Active */ : 2 /* Inactive */);\n        });\n    }\n    if (variant)\n      this.addRegister(263 /* Variant */, [variant]);\n    this.instanceName = this.addRegister(265 /* InstanceName */, [\n      instanceName || \"\"\n    ]);\n    registerValues == null ? void 0 : registerValues.forEach(({ code, values: values2 }) => this.addRegister(code, values2));\n    this.statusCode.on(CHANGE, () => this.sendEvent(4 /* StatusCodeChanged */, this.statusCode.data));\n    if (this.specification.packets.find((pkt) => pkt.kind === \"command\" && pkt.identifier === 2 /* Calibrate */)) {\n      this.addCommand(2 /* Calibrate */, this.handleCalibrate.bind(this));\n      this.statusCode.setValues([100 /* CalibrationNeeded */, 0], true);\n    }\n    this.handleTwinPacket = this.handleTwinPacket.bind(this);\n  }\n  get device() {\n    return this._device;\n  }\n  set device(value) {\n    if (this._device !== value) {\n      this._device = value;\n      this.emit(DEVICE_CHANGE);\n      this.emit(CHANGE);\n    }\n  }\n  get twin() {\n    return this._twin;\n  }\n  set twin(service) {\n    if (service === this._twin)\n      return;\n    if (this._twin) {\n      this._twin.off(PACKET_RECEIVE, this.handleTwinPacket);\n      this._twin.off(PACKET_SEND, this.handleTwinPacket);\n      this._twinCleanup.forEach((tw) => tw());\n    }\n    this._twin = service;\n    this._twinCleanup = service ? [] : void 0;\n    if (this._twin) {\n      this._twin.on(PACKET_RECEIVE, this.handleTwinPacket);\n      this._twin.on(PACKET_SEND, this.handleTwinPacket);\n      this._twin.registers().forEach((twinReg) => {\n        const reg = this.register(twinReg.code);\n        if (reg) {\n          reg == null ? void 0 : reg.setValues(twinReg.unpackedValue);\n          this._twinCleanup.push(twinReg.subscribe(REPORT_UPDATE, () => reg.setValues(twinReg.unpackedValue)));\n        }\n      });\n    }\n    this.emit(CHANGE);\n  }\n  handleTwinPacket(pkt) {\n    this.handlePacket(pkt);\n  }\n  get registers() {\n    return this._registers.slice(0);\n  }\n  get timestamp() {\n    var _a, _b, _c;\n    const bus = ((_a = this.device) == null ? void 0 : _a.bus) || ((_c = (_b = this._twin) == null ? void 0 : _b.device) == null ? void 0 : _c.bus);\n    return bus == null ? void 0 : bus.timestamp;\n  }\n  register(code) {\n    return this._registers.find((reg) => reg.identifier === code);\n  }\n  addExistingRegister(reg) {\n    this._registers.push(reg);\n    return reg;\n  }\n  addRegister(identifier, defaultValue) {\n    let reg = this._registers.find((r) => r.identifier === identifier);\n    if (!reg && !this._locked) {\n      if (!this.specification.packets.find((pkt) => isRegister2(pkt) && pkt.identifier === identifier))\n        return void 0;\n      reg = new JDRegisterServer(this, identifier, defaultValue);\n      this._registers.push(reg);\n    }\n    return reg;\n  }\n  reset() {\n    this.registers.forEach((reg) => reg.reset());\n  }\n  lock() {\n    this._locked = true;\n  }\n  addCommand(identifier, handler) {\n    if (this._locked)\n      console.error(`adding command to locked service`);\n    this.commands[identifier] = handler;\n  }\n  async handlePacket(pkt) {\n    if (pkt.isRegisterGet || pkt.isRegisterSet) {\n      const rid = pkt.registerIdentifier;\n      let reg = this._registers.find((r) => r.identifier === rid);\n      if (!reg) {\n        reg = this.addRegister(rid);\n      }\n      reg == null ? void 0 : reg.handlePacket(pkt);\n    } else if (pkt.isCommand) {\n      const cmd = this.commands[pkt.serviceCommand];\n      if (cmd)\n        cmd(pkt);\n      else if (cmd === void 0)\n        console.debug(`ignored command`, { pkt });\n    }\n  }\n  async sendPacketAsync(pkt) {\n    if (this.twin)\n      return;\n    pkt.serviceIndex = this.serviceIndex;\n    await this.device.sendPacketAsync(pkt);\n  }\n  async sendEvent(eventCode, data) {\n    if (this.twin)\n      return;\n    const { device } = this;\n    const { bus } = device;\n    if (!bus)\n      return;\n    const now = bus.timestamp;\n    const cmd = device.createEventCmd(eventCode);\n    const pkt = Packet.from(cmd, data || new Uint8Array(0));\n    await this.sendPacketAsync(pkt);\n    device.delayedSend(pkt, now + 20);\n    device.delayedSend(pkt, now + 100);\n  }\n  async handleCalibrate() {\n    const [status] = this.statusCode.values();\n    if (status !== 0 /* Ready */)\n      return;\n    this.calibrate();\n  }\n  async calibrate() {\n    this.statusCode.setValues([2 /* Calibrating */, 0]);\n    await this.device.bus.delay(CALIBRATION_DELAY);\n    this.statusCode.setValues([0 /* Ready */, 0]);\n  }\n};\n\n// src/servers/sensorserver.ts\nvar SensorServer = class extends JDServiceServer {\n  constructor(serviceClass2, options) {\n    super(serviceClass2, options);\n    this.serviceClass = serviceClass2;\n    this.lastStream = 0;\n    this.lastErrorReadingChanged = false;\n    const {\n      readingValues,\n      streamingInterval,\n      preferredStreamingInterval,\n      readingError\n    } = options || {};\n    this.reading = this.addRegister(257 /* Reading */, readingValues);\n    this.streamingSamples = this.addRegister(3 /* StreamingSamples */);\n    this.streamingInterval = this.addRegister(4 /* StreamingInterval */, [\n      streamingInterval || preferredStreamingInterval || this.reading.specification.preferredInterval || STREAMING_DEFAULT_INTERVAL\n    ]);\n    if (preferredStreamingInterval !== void 0)\n      this.preferredStreamingInterval = this.addRegister(258 /* StreamingPreferredInterval */, [preferredStreamingInterval]);\n    if (readingError !== void 0) {\n      this.readingError = this.addRegister(262 /* ReadingError */, readingError);\n      this.reading.errorRegister = this.readingError;\n      this.readingError.on(CHANGE, () => this.lastErrorReadingChanged = true);\n    }\n    this.on(REFRESH, this.refreshRegisters.bind(this));\n  }\n  refreshRegisters() {\n    var _a, _b, _c, _d, _e;\n    const [samples] = this.streamingSamples.values();\n    if (samples <= 0 || !this.reading.data)\n      return;\n    let interval = (_b = (_a = this.streamingInterval) == null ? void 0 : _a.values()) == null ? void 0 : _b[0];\n    if (interval === void 0)\n      interval = (_d = (_c = this.preferredStreamingInterval) == null ? void 0 : _c.values()) == null ? void 0 : _d[0];\n    if (interval === void 0)\n      interval = this.reading.specification.preferredInterval;\n    if (interval === void 0)\n      interval = STREAMING_DEFAULT_INTERVAL;\n    const now = this.device.bus.timestamp;\n    if (now - this.lastStream > interval) {\n      this.lastStream = now;\n      this.streamingSamples.setValues([samples - 1]);\n      this.reading.sendGetAsync();\n      this.emit(READING_SENT);\n      if (this.lastErrorReadingChanged) {\n        (_e = this.readingError) == null ? void 0 : _e.sendGetAsync();\n        this.lastErrorReadingChanged = false;\n      }\n    }\n  }\n};\n\n// src/servers/realtimeclockserver.ts\nfunction dateToClock(n) {\n  const year = n.getFullYear();\n  const month = n.getMonth() + 1;\n  const dayOfMonth = n.getDate();\n  const dayOfWeek = n.getDay();\n  const hour = n.getHours();\n  const min = n.getMinutes();\n  const sec = n.getSeconds();\n  return [year, month, dayOfMonth, dayOfWeek, hour, min, sec];\n}\nvar RealTimeClockServer = class extends SensorServer {\n  constructor() {\n    super(SRV_REAL_TIME_CLOCK, {\n      readingValues: dateToClock(new Date()),\n      variant: 1 /* Computer */,\n      streamingInterval: 1e3\n    });\n    this.lastSecond = 0;\n    this.drift = this.addRegister(384 /* Drift */, [0]);\n    this.precision = this.addRegister(385 /* Precision */, [0]);\n    this.addCommand(128 /* SetTime */, this.handleSetTime.bind(this));\n    this.on(REFRESH, this.refreshTime.bind(this));\n  }\n  static async syncTime(bus) {\n    const values2 = dateToClock(new Date());\n    const pkt = Packet.jdpacked(128 /* SetTime */, \"u16 u8 u8 u8 u8 u8 u8\", values2);\n    await pkt.sendAsMultiCommandAsync(bus, SRV_REAL_TIME_CLOCK);\n  }\n  handleSetTime(pkt) {\n    console.debug(`set time`, { pkt });\n  }\n  refreshTime() {\n    const d = new Date();\n    const s = d.getSeconds();\n    if (s !== this.lastSecond) {\n      const r = dateToClock(d);\n      this.reading.setValues(r);\n      this.lastSecond = s;\n    }\n  }\n};\n\n// src/jdom/transport/transport.ts\nvar ConnectionState = /* @__PURE__ */ ((ConnectionState2) => {\n  ConnectionState2[\"Connected\"] = \"connected\";\n  ConnectionState2[\"Connecting\"] = \"connecting\";\n  ConnectionState2[\"Disconnecting\"] = \"disconnecting\";\n  ConnectionState2[\"Disconnected\"] = \"disconnected\";\n  return ConnectionState2;\n})(ConnectionState || {});\nvar Transport = class extends JDEventSource {\n  constructor(type, options) {\n    super();\n    this.type = type;\n    this.disposed = false;\n    this._connectionState = \"disconnected\" /* Disconnected */;\n    var _a, _b, _c, _d;\n    this._checkPulse = !!(options == null ? void 0 : options.checkPulse);\n    this._cleanups = [\n      (_b = (_a = options == null ? void 0 : options.connectObservable) == null ? void 0 : _a.subscribe({\n        next: async () => {\n          var _a2, _b2;\n          console.debug(`${this.type}: device detected`);\n          if ((_a2 = this.bus) == null ? void 0 : _a2.disconnected) {\n            await delay(TRANSPORT_CONNECT_RETRY_DELAY);\n            if ((_b2 = this.bus) == null ? void 0 : _b2.disconnected) {\n              if (typeof document === \"undefined\" || document.visibilityState === \"visible\") {\n                this.connect(true);\n              }\n            }\n          }\n        }\n      })) == null ? void 0 : _b.unsubscribe,\n      (_d = (_c = options == null ? void 0 : options.disconnectObservable) == null ? void 0 : _c.subscribe({\n        next: () => {\n          this.disconnect();\n        }\n      })) == null ? void 0 : _d.unsubscribe\n    ].filter((c) => !!c);\n  }\n  get bus() {\n    return this._bus;\n  }\n  set bus(bus) {\n    assert(!this._bus && !!bus);\n    this._bus = bus;\n    if (this._checkPulse) {\n      this._bus.on(SELF_ANNOUNCE, this.checkPulse.bind(this));\n    }\n  }\n  get connectionState() {\n    return this._connectionState;\n  }\n  setConnectionState(state) {\n    if (this._connectionState !== state) {\n      this._connectionState = state;\n      this._connectionTime = state === \"connected\" /* Connected */ ? this.bus.timestamp : void 0;\n      this._lastReceivedTime = void 0;\n      this.emit(CONNECTION_STATE, this._connectionState);\n      this.bus.emit(CONNECTION_STATE, this);\n      switch (this._connectionState) {\n        case \"connected\" /* Connected */:\n          this.emit(CONNECT);\n          break;\n        case \"connecting\" /* Connecting */:\n          this.emit(CONNECTING);\n          break;\n        case \"disconnecting\" /* Disconnecting */:\n          this.emit(DISCONNECTING);\n          break;\n        case \"disconnected\" /* Disconnected */:\n          this.emit(DISCONNECT);\n          break;\n      }\n      this.emit(CHANGE);\n      this.bus.emit(CHANGE);\n    }\n  }\n  get connecting() {\n    return this.connectionState == \"connecting\" /* Connecting */;\n  }\n  get disconnecting() {\n    return this.connectionState == \"disconnecting\" /* Disconnecting */;\n  }\n  get connected() {\n    return this._connectionState == \"connected\" /* Connected */;\n  }\n  get disconnected() {\n    return this._connectionState == \"disconnected\" /* Disconnected */;\n  }\n  async checkPulse() {\n    assert(this._checkPulse);\n    if (!this.connected)\n      return;\n    if (this.bus.safeBoot)\n      return;\n    const devices = this.bus.devices();\n    if (devices.some((dev) => dev.firmwareUpdater))\n      return;\n    const t = this.bus.timestamp - (this._lastReceivedTime || this._connectionTime);\n    if (t > TRANSPORT_PULSE_TIMEOUT) {\n      this.emit(LOST);\n      console.debug(`${this.type}: lost connection with device`);\n      if (this._lastReceivedTime !== void 0)\n        await this.reconnect();\n      else\n        await this.disconnect(true);\n    }\n  }\n  async sendPacketAsync(p) {\n    if (!this.connected) {\n      this.emit(PACKET_SEND_DISCONNECT, p);\n    } else {\n      await this.transportSendPacketAsync(p);\n    }\n  }\n  connect(background) {\n    console.debug(`${this.type}: connect ${background ? `(background)` : \"\"}`);\n    if (this.disposed)\n      throw new Error(\"attempted to connect to a disposed transport\");\n    if (this.connectionState == \"connected\" /* Connected */) {\n      console.debug(`${this.type}: already connected`);\n      return Promise.resolve();\n    }\n    if (!this._connectPromise) {\n      if (this._disconnectPromise) {\n        console.debug(`${this.type}: queuing connect after disconnecting`);\n        const p = this._disconnectPromise;\n        this._disconnectPromise = void 0;\n        this._connectPromise = p.then(() => this.connect());\n      } else {\n        console.debug(`${this.type}: connecting`);\n        this._connectPromise = Promise.resolve();\n        this.setConnectionState(\"connecting\" /* Connecting */);\n        this._connectPromise = this._connectPromise.then(() => this.transportConnectAsync(background));\n        const p = this._connectPromise = this._connectPromise.then(() => {\n          if (p == this._connectPromise) {\n            this._connectPromise = void 0;\n            this.setConnectionState(\"connected\" /* Connected */);\n          } else {\n            console.debug(`${this.type}: connection aborted in flight`, {\n              state: this._connectionState,\n              old: this._connectPromise,\n              new: p\n            });\n          }\n        }).catch((e) => {\n          if (p == this._connectPromise) {\n            this._connectPromise = void 0;\n            this.setConnectionState(\"disconnected\" /* Disconnected */);\n            if (!background)\n              this.errorHandler(CONNECT, e);\n            else\n              console.debug(`${this.type}: background connect failed`);\n          } else {\n            console.debug(`${this.type}: connection error aborted in flight`);\n          }\n        });\n      }\n    } else {\n      console.debug(`${this.type}: connect with existing promise`);\n    }\n    return this._connectPromise;\n  }\n  disconnect(background) {\n    if (this.connectionState == \"disconnected\" /* Disconnected */)\n      return Promise.resolve();\n    if (!this._disconnectPromise) {\n      if (this._connectPromise) {\n        console.debug(`${this.type}: cancelling connection and disconnect`);\n        this._connectPromise = void 0;\n      }\n      console.debug(`${this.type}: disconnecting`);\n      this._disconnectPromise = Promise.resolve();\n      this.setConnectionState(\"disconnecting\" /* Disconnecting */);\n      this._disconnectPromise = this._disconnectPromise.then(() => this.transportDisconnectAsync(background));\n      this._disconnectPromise = this._disconnectPromise.catch((e) => {\n        this._disconnectPromise = void 0;\n        this.errorHandler(DISCONNECT, e);\n      }).finally(() => {\n        this._disconnectPromise = void 0;\n        this.setConnectionState(\"disconnected\" /* Disconnected */);\n      });\n    } else {\n      console.debug(`${this.type}: disconnect with existing promise`);\n    }\n    return this._disconnectPromise;\n  }\n  async reconnect() {\n    console.debug(`${this.type}: reconnect`);\n    await this.disconnect(true);\n    await this.connect(true);\n  }\n  handlePacket(payload) {\n    const { timestamp: timestamp2 } = this.bus;\n    this._lastReceivedTime = timestamp2;\n    const pkt = Packet.fromBinary(payload, timestamp2);\n    pkt.sender = this.type;\n    this.bus.processPacket(pkt);\n  }\n  handleFrame(payload, skipCrc = false) {\n    const { timestamp: timestamp2 } = this.bus;\n    this._lastReceivedTime = timestamp2;\n    const pkts = Packet.fromFrame(payload, timestamp2, skipCrc);\n    for (const pkt of pkts) {\n      pkt.sender = this.type;\n      this.bus.processPacket(pkt);\n    }\n  }\n  errorHandler(context, exception) {\n    if (!isCancelError(exception)) {\n      this.emit(ERROR, { context, exception });\n      this.bus.emit(ERROR, { transport: this.type, context, exception });\n    }\n    this.emit(CHANGE);\n    this.disconnect(true);\n  }\n  dispose() {\n    this.disposed = true;\n    this._cleanups.forEach((c) => c());\n    this._cleanups = [];\n  }\n};\n\n// src/jdom/busstats.ts\nvar BusStatsMonitor = class extends JDEventSource {\n  constructor(bus) {\n    super();\n    this.bus = bus;\n    this._prev = Array(4).fill(0).map(() => ({\n      packets: 0,\n      announce: 0,\n      acks: 0,\n      bytes: 0\n    }));\n    this._previ = 0;\n    this._temp = {\n      packets: 0,\n      announce: 0,\n      acks: 0,\n      bytes: 0\n    };\n    bus.on(PACKET_SEND, this.handlePacketSend.bind(this));\n    bus.on(PACKET_PROCESS, this.handlePacketProcess.bind(this));\n    bus.on(SELF_ANNOUNCE, this.handleSelfAnnounce.bind(this));\n  }\n  get current() {\n    var _a;\n    const r = {\n      packets: 0,\n      announce: 0,\n      acks: 0,\n      bytes: 0\n    };\n    const n = this._prev.length;\n    for (let i = 0; i < this._prev.length; ++i) {\n      const p = this._prev[i];\n      r.packets += p.packets;\n      r.announce += p.announce;\n      r.acks += p.acks;\n      r.bytes += p.bytes;\n    }\n    const n2 = n / 2;\n    r.packets /= n2;\n    r.announce /= n2;\n    r.acks /= n2;\n    r.bytes /= n2;\n    return {\n      devices: this.bus.devices({ ignoreInfrastructure: true }).length,\n      simulators: this.bus.serviceProviders().length,\n      transport: (_a = this.bus.transports.find((transport) => transport.connected)) == null ? void 0 : _a.type,\n      ...r\n    };\n  }\n  accumulate(pkt) {\n    var _a, _b;\n    this._temp.packets++;\n    this._temp.bytes += (((_a = pkt.header) == null ? void 0 : _a.length) || 0) + (((_b = pkt.data) == null ? void 0 : _b.length) || 0);\n    if (pkt.isAnnounce)\n      this._temp.announce++;\n    if (pkt.isCRCAck)\n      this._temp.acks++;\n  }\n  handleSelfAnnounce() {\n    const changed = JSON.stringify(this._prev) !== JSON.stringify(this._temp);\n    this._prev[this._previ] = this._temp;\n    this._previ = (this._previ + 1) % this._prev.length;\n    this._temp = {\n      packets: 0,\n      announce: 0,\n      acks: 0,\n      bytes: 0\n    };\n    if (changed)\n      this.emit(CHANGE);\n  }\n  handlePacketSend(pkt) {\n    this.accumulate(pkt);\n  }\n  handlePacketProcess(pkt) {\n    this.accumulate(pkt);\n  }\n};\n\n// src/jdom/servers/controlserver.ts\nvar ControlServer = class extends JDServiceServer {\n  constructor(options) {\n    super(SRV_CONTROL);\n    this.statusLightColor = void 0;\n    const { resetIn } = options || {};\n    this.startTime = Date.now();\n    this.deviceDescription = this.addRegister(384 /* DeviceDescription */);\n    this.mcuTemperature = this.addRegister(386 /* McuTemperature */, [25]);\n    this.uptime = this.addRegister(390 /* Uptime */);\n    if (resetIn)\n      this.resetIn = this.addRegister(128 /* ResetIn */, [0]);\n    this.addRegister(384 /* DeviceDescription */, [\"Simulated\"]);\n    this.addRegister(389 /* FirmwareVersion */, [\"0.0.0\"]);\n    this.addRegister(385 /* ProductIdentifier */, [0]);\n    this.addRegister(388 /* BootloaderProductIdentifier */, [0]);\n    this.addCommand(0 /* Services */, this.announce.bind(this));\n    this.addCommand(129 /* Identify */, this.identify.bind(this));\n    this.addCommand(130 /* Reset */, this.handleReset.bind(this));\n    this.addCommand(128 /* Noop */, null);\n    this.addCommand(132 /* SetStatusLight */, this.handleSetStatusLight.bind(this));\n  }\n  async announce() {\n    const pkt = Packet.jdpacked(0 /* Services */, \"u16 u8 x[1] u32[]\", [\n      this.device.restartCounter | 32 /* StatusLightRgbNoFade */ | 256 /* SupportsACK */,\n      this.device.packetCount + 1,\n      this.device.services().slice(1).map((srv) => srv.serviceClass)\n    ]);\n    await this.sendPacketAsync(pkt);\n    this.uptime.setValues([(Date.now() - this.startTime) * 100], true);\n    if (this.resetIn) {\n      const [resetIn] = this.resetIn.values();\n      if (resetIn) {\n        const resetTimestamp = resetIn / 1e3 + this.resetIn.lastSetTime;\n        if (resetTimestamp < this.device.bus.timestamp) {\n          console.debug(`${this} reset in expired`, {\n            resetIn,\n            lastSet: this.resetIn.lastSetTime,\n            resetTimestamp\n          });\n          this.device.reset();\n        }\n      }\n    }\n  }\n  async identify() {\n    this.emit(IDENTIFY);\n  }\n  handleReset() {\n    this.startTime = Date.now();\n    this.device.reset();\n  }\n  handleSetStatusLight(pkt) {\n    const [toRed, toGreen, toBlue] = jdunpack(pkt.data, \"u8 u8 u8 u8\");\n    this.statusLightColor = toRed << 16 | toGreen << 8 | toBlue;\n    this.emit(CHANGE);\n  }\n};\n\n// src/jdom/servers/serviceprovider.ts\nvar JDServiceProvider = class extends JDEventSource {\n  constructor(template, deviceId) {\n    super();\n    this.template = template;\n    this.deviceId = deviceId;\n    if (!this.deviceId)\n      this.deviceId = randomDeviceId();\n    this.shortId = shortDeviceId(this.deviceId);\n    this.handleSelfAnnounce = this.handleSelfAnnounce.bind(this);\n    this.handlePacket = this.handlePacket.bind(this);\n  }\n  get bus() {\n    return this._bus;\n  }\n  set bus(value) {\n    if (value !== this._bus) {\n      this.stop();\n      this._bus = value;\n      if (this._bus)\n        this.start();\n    }\n  }\n  start() {\n    if (this._bus) {\n      this._bus.on(SELF_ANNOUNCE, this.handleSelfAnnounce);\n      this._bus.on([PACKET_PROCESS, PACKET_SEND], this.handlePacket);\n    }\n  }\n  stop() {\n    if (this._bus) {\n      this._bus.off(SELF_ANNOUNCE, this.handleSelfAnnounce);\n      this._bus.off([PACKET_PROCESS, PACKET_SEND], this.handlePacket);\n      this._bus = void 0;\n    }\n  }\n  handleSelfAnnounce() {\n  }\n};\n\n// src/jdom/servers/serverserviceprovider.ts\nvar JDServerServiceProvider = class extends JDServiceProvider {\n  constructor(template, services, options) {\n    super(template, options == null ? void 0 : options.deviceId);\n    this._restartCounter = 0;\n    this._packetCount = 0;\n    this._eventCounter = void 0;\n    this.controlService = new ControlServer(options);\n    this._services = [];\n    this.updateServices(services);\n    this.on(REFRESH, this.refreshRegisters.bind(this));\n  }\n  updateServices(services) {\n    var _a;\n    (_a = this._services) == null ? void 0 : _a.slice(1).forEach((srv) => srv.device = void 0);\n    this._services = [this.controlService, ...services];\n    if (this._services.length >= MAX_SERVICES_LENGTH) {\n      this.emit(ERROR, `too many services (${this._services.length}) > ${MAX_SERVICES_LENGTH}`);\n      console.warn(`jacdac: dropping services to ${MAX_SERVICES_LENGTH}`);\n      this._services = this._services.slice(0, MAX_SERVICES_LENGTH);\n    }\n    this._services.forEach((srv, i) => {\n      srv.device = this;\n      srv.serviceIndex = i;\n    });\n    this.emit(CHANGE);\n  }\n  removeService(service) {\n    if ((service == null ? void 0 : service.device) !== this)\n      return;\n    const newServices = this._services.slice(1);\n    const index = newServices.indexOf(service);\n    if (index > -1) {\n      newServices.splice(index, 1);\n      this.updateServices(newServices);\n    }\n  }\n  start() {\n    super.start();\n    this._packetCount = 0;\n  }\n  stop() {\n    this._delayedPackets = void 0;\n    super.stop();\n  }\n  handleSelfAnnounce() {\n    super.handleSelfAnnounce();\n    if (this._restartCounter < 15)\n      this._restartCounter++;\n    this.controlService.announce();\n    const activeServices = this.services().filter((srv) => !isBufferEmpty(srv.statusCode.data));\n    activeServices.forEach((srv) => srv.statusCode.sendGetAsync());\n    this._packetCount = 0;\n  }\n  get restartCounter() {\n    return this._restartCounter;\n  }\n  get packetCount() {\n    return this._packetCount;\n  }\n  services() {\n    return this._services.slice(0);\n  }\n  service(serviceIndex) {\n    return serviceIndex !== void 0 && this._services[serviceIndex];\n  }\n  toString() {\n    return `host ${this.shortId}`;\n  }\n  get eventCounter() {\n    return this._eventCounter;\n  }\n  createEventCmd(evCode) {\n    if (!this._eventCounter)\n      this._eventCounter = 0;\n    this._eventCounter = this._eventCounter + 1 & CMD_EVENT_COUNTER_MASK;\n    if (evCode >> 8)\n      throw new Error(\"invalid event code\");\n    return CMD_EVENT_MASK | this._eventCounter << CMD_EVENT_COUNTER_POS | evCode;\n  }\n  async sendPacketAsync(pkt) {\n    if (!this.bus)\n      return Promise.resolve();\n    this._packetCount++;\n    pkt.deviceIdentifier = this.deviceId;\n    const p = pkt.sendCoreAsync(this.bus);\n    this.bus.processPacket(pkt);\n    return p;\n  }\n  delayedSend(pkt, timestamp2) {\n    if (!this._delayedPackets) {\n      this._delayedPackets = [];\n      setTimeout(this.processDelayedPackets.bind(this), 10);\n    }\n    const dp = { timestamp: timestamp2, pkt };\n    this._delayedPackets.push(dp);\n    this._delayedPackets.sort((l, r) => -l.timestamp + r.timestamp);\n  }\n  processDelayedPackets() {\n    var _a, _b;\n    while ((_a = this._delayedPackets) == null ? void 0 : _a.length) {\n      const { timestamp: timestamp2, pkt } = this._delayedPackets[0];\n      if (timestamp2 > this.bus.timestamp)\n        break;\n      this._delayedPackets.shift();\n      try {\n        this.sendPacketAsync(pkt);\n      } catch (e) {\n        this._delayedPackets = void 0;\n        throw e;\n      }\n    }\n    if (!((_b = this._delayedPackets) == null ? void 0 : _b.length))\n      this._delayedPackets = void 0;\n    else\n      setTimeout(this.processDelayedPackets.bind(this), 10);\n  }\n  handlePacket(pkt) {\n    const devIdMatch = pkt.deviceIdentifier == this.deviceId;\n    if (pkt.requiresAck && devIdMatch) {\n      pkt.requiresAck = false;\n      const crc2 = pkt.crc;\n      const ack = Packet.onlyHeader(crc2);\n      ack.serviceIndex = JD_SERVICE_INDEX_CRC_ACK;\n      this.sendPacketAsync(ack);\n    }\n    if (pkt.isMultiCommand) {\n      if (!pkt.isCommand)\n        return;\n      const multiCommandClass = pkt.serviceClass;\n      for (const h of this._services) {\n        if (h.serviceClass == multiCommandClass) {\n          const npkt = pkt.cloneForDevice(this.deviceId, h.serviceIndex);\n          h.handlePacket(npkt);\n        }\n      }\n    } else if (devIdMatch) {\n      if (!pkt.isCommand)\n        return;\n      const h = this._services[pkt.serviceIndex];\n      if (h) {\n        h.handlePacket(pkt);\n      }\n    } else {\n      if (pkt.isCommand)\n        return;\n    }\n  }\n  refreshRegisters() {\n    this._services.forEach((srv) => srv.emit(REFRESH));\n  }\n  reset() {\n    var _a;\n    this._restartCounter = 0;\n    this._packetCount = 0;\n    (_a = this._services) == null ? void 0 : _a.forEach((srv) => srv.reset());\n    this.emit(RESET);\n  }\n};\n\n// src/jdom/servers/protocoltestserver.ts\nvar ProtocolTestServer = class extends JDServiceServer {\n  constructor() {\n    super(SRV_PROTO_TEST);\n    this.init(129 /* RwBool */, 385 /* RoBool */, 129 /* CBool */, 129 /* EBool */, false);\n    this.init(131 /* RwI32 */, 387 /* RoI32 */, 131 /* CI32 */, 131 /* EI32 */, 0);\n    this.init(130 /* RwU32 */, 386 /* RoU32 */, 130 /* CU32 */, 130 /* EU32 */, 0);\n    this.init(132 /* RwString */, 388 /* RoString */, 132 /* CString */, 132 /* EString */, \"\");\n    this.rwBytes = this.init(133 /* RwBytes */, 389 /* RoBytes */, 133 /* CBytes */, 133 /* EBytes */, new Uint8Array(0));\n    this.init(134 /* RwI8U8U16I32 */, 390 /* RoI8U8U16I32 */, 134 /* CI8U8U16I32 */, 134 /* EI8U8U16I32 */, 0, 0, 0, 0);\n    this.init(135 /* RwU8String */, 391 /* RoU8String */, 135 /* CU8String */, 135 /* EU8String */, 0, \"\");\n    this.addCommand(144 /* CReportPipe */, this.handleReportPipe.bind(this));\n  }\n  init(rwi, roi, ci, ei, ...values2) {\n    const rw = this.addRegister(rwi, values2);\n    const ro = this.addRegister(roi, rw.values());\n    rw.on(CHANGE, () => {\n      ro.setValues(rw.values());\n      this.sendEvent(ei, rw.data);\n    });\n    this.addCommand(ci, (pkt) => rw.setValues(jdunpack(pkt.data, rw.specification.packFormat)));\n    return rw;\n  }\n  async handleReportPipe(pkt) {\n    const pipe = OutPipe.from(this.device.bus, pkt, true);\n    await pipe.respondForEach(this.rwBytes.data, (b) => {\n      const buf = new Uint8Array(1);\n      buf[0] = b;\n      return jdpack(\"b\", [buf]);\n    });\n  }\n};\n\n// src/servers/buttonserver.ts\nvar _ButtonServer = class extends SensorServer {\n  constructor(instanceName, analog) {\n    super(SRV_BUTTON, {\n      instanceName,\n      readingValues: [_ButtonServer.INACTIVE_VALUE],\n      streamingInterval: 50\n    });\n    this.analog = this.addRegister(384 /* Analog */, [!!analog]);\n    this.on(REFRESH, this.handleRefresh.bind(this));\n  }\n  get threshold() {\n    return this._threshold;\n  }\n  set threshold(value) {\n    if (value !== this._threshold) {\n      this._threshold = value;\n      this.analog.setValues([!!this._threshold]);\n      this.emit(CHANGE);\n    }\n  }\n  isActive() {\n    var _a, _b;\n    const [v] = this.reading.values();\n    const t = ((_b = (_a = this.threshold) == null ? void 0 : _a.values()) == null ? void 0 : _b[0]) || 0.5;\n    return v > t;\n  }\n  async handleRefresh() {\n    const now = this.device.bus.timestamp;\n    if (this.isActive()) {\n      if (this._downTime === void 0) {\n        this._downTime = now;\n        this._nextHold = this._downTime + _ButtonServer.HOLD_TIME;\n        await this.sendEvent(1 /* Down */);\n      } else if (now > this._nextHold) {\n        const time = now - this._downTime;\n        this._nextHold = this.device.bus.timestamp + _ButtonServer.HOLD_TIME;\n        await this.sendEvent(129 /* Hold */, jdpack(\"u32\", [time]));\n      }\n    } else {\n      if (this._downTime !== void 0) {\n        const time = now - this._downTime;\n        this._downTime = void 0;\n        this._nextHold = void 0;\n        await this.sendEvent(2 /* Up */, jdpack(\"u32\", [time]));\n      }\n    }\n  }\n  async down() {\n    this.reading.setValues([_ButtonServer.ACTIVE_VALUE]);\n  }\n  async up() {\n    this.reading.setValues([_ButtonServer.INACTIVE_VALUE]);\n  }\n};\nvar ButtonServer = _ButtonServer;\nButtonServer.HOLD_TIME = 500;\nButtonServer.INACTIVE_VALUE = 0;\nButtonServer.ACTIVE_VALUE = 1;\n\n// src/servers/buzzerserver.ts\nfunction tonePayload(frequency, ms, volume) {\n  const period = Math.round(1e6 / frequency);\n  const duty = period * volume >> 11;\n  return jdpack(\"u16 u16 u16\", [period, duty, ms]);\n}\nvar _BuzzerServer = class extends JDServiceServer {\n  constructor(options) {\n    super(SRV_BUZZER, options);\n    this.volume = this.addRegister(1 /* Volume */, [0.2]);\n    this.addCommand(128 /* PlayTone */, this.handlePlayTone.bind(this));\n  }\n  handlePlayTone(pkt) {\n    const [period, , duration] = jdunpack(pkt.data, \"u16 u16 u16\");\n    const frequency = 1e6 / period;\n    const [volume] = this.volume.values();\n    this.emit(_BuzzerServer.PLAY_TONE, {\n      frequency,\n      duration,\n      volume\n    });\n  }\n};\nvar BuzzerServer = _BuzzerServer;\nBuzzerServer.PLAY_TONE = \"playTone\";\n\n// src/servers/characterscreenserver.ts\nvar CharacterScreenServer = class extends JDServiceServer {\n  constructor(options) {\n    super(SRV_CHARACTER_SCREEN);\n    const {\n      message = \"\",\n      rows = 2,\n      columns = 16,\n      variant,\n      textDirection,\n      brightness = 100\n    } = options || {};\n    this.message = this.addRegister(2 /* Message */, [\n      message\n    ]);\n    this.brightness = this.addRegister(1 /* Brightness */, [brightness]);\n    this.rows = this.addRegister(384 /* Rows */, [rows]);\n    this.columns = this.addRegister(385 /* Columns */, [\n      columns\n    ]);\n    this.variant = this.addRegister(263 /* Variant */, [variant || 1 /* LCD */]);\n    this.message = this.addRegister(2 /* Message */, [\n      \"\"\n    ]);\n    this.textDirection = this.addRegister(130 /* TextDirection */, [textDirection || 1 /* LeftToRight */]);\n  }\n};\n\n// src/servers/gamepadserver.ts\nvar GAMEPAD_DPAD_BUTTONS = 1 /* Left */ | 4 /* Right */ | 2 /* Up */ | 8 /* Down */;\nvar GAMEPAD_ARCADE_BUTTONS = GAMEPAD_DPAD_BUTTONS | 16 /* A */ | 32 /* B */ | 64 /* Menu */ | 128 /* Select */ | 512 /* Exit */;\nvar GAMEPAD_DPAD_A_BUTTONS = GAMEPAD_DPAD_BUTTONS | 16 /* A */;\nvar GAMEPAD_DPAD_AB_BUTTONS = GAMEPAD_DPAD_A_BUTTONS | 32 /* B */;\nvar GAMEPAD_GAMEPAD_EXTRA_BUTTONS = 32 /* B */ | 128 /* Select */ | 64 /* Menu */ | 256 /* Reset */;\nvar standardGamepadMapping = [\n  [1 /* Left */, 14],\n  [4 /* Right */, 15],\n  [2 /* Up */, 12],\n  [8 /* Down */, 13],\n  [16 /* A */, 0],\n  [32 /* B */, 1],\n  [128 /* Select */, 8],\n  [64 /* Menu */, 9]\n];\nvar GamepadServer = class extends SensorServer {\n  constructor(options) {\n    super(SRV_GAMEPAD, {\n      instanceName: options == null ? void 0 : options.instanceName,\n      readingValues: [0, 0, 0],\n      streamingInterval: 50\n    });\n    const { variant = 1 /* Thumb */, buttonsAvailable = 0 } = options || {};\n    this.variant = this.addRegister(263 /* Variant */, [\n      variant\n    ]);\n    this.buttonsAvailable = this.addRegister(384 /* ButtonsAvailable */, [buttonsAvailable]);\n  }\n  get isAnalog() {\n    const [value] = this.buttonsAvailable.values();\n    return !(value & GAMEPAD_DPAD_BUTTONS);\n  }\n  async down(buttons) {\n    const [currentButtons, x, y] = this.reading.values();\n    const newButtons = currentButtons | buttons;\n    await this.updateReading(newButtons, x, y);\n  }\n  async up(buttons) {\n    const [currentButtons, x, y] = this.reading.values();\n    const newButtons = currentButtons & ~buttons;\n    await this.updateReading(newButtons, x, y);\n  }\n  async updateDirection(x, y) {\n    const [button] = this.reading.values();\n    await this.updateReading(button, x, y);\n  }\n  async update(gamepad) {\n    const { buttons, axes } = gamepad;\n    const [buttonsAvailable] = this.buttonsAvailable.values();\n    let newButtons = 0;\n    for (const [b, id] of standardGamepadMapping) {\n      if ((b & buttonsAvailable) == b && !!buttons[id].pressed) {\n        newButtons |= b;\n      }\n    }\n    let newX = 0, newY = 0;\n    if (this.isAnalog) {\n      const [axeLeftRight, axeUpDown] = axes;\n      newX = axeLeftRight;\n      newY = axeUpDown;\n    }\n    await this.updateReading(newButtons, newX, newY);\n  }\n  async updateReading(buttons, x, y) {\n    const [oldButtons] = this.reading.values();\n    let newButtons = buttons;\n    if (!this.isAnalog) {\n      x = buttons & 1 /* Left */ ? -1 : buttons & 4 /* Right */ ? 1 : 0;\n      y = buttons & 2 /* Up */ ? -1 : buttons & 8 /* Down */ ? 1 : 0;\n    } else {\n      const threshold = 0.4;\n      const mask = ~GAMEPAD_DPAD_BUTTONS;\n      newButtons = buttons & mask;\n      if (x < -threshold)\n        newButtons |= 1 /* Left */;\n      else if (x > threshold)\n        newButtons |= 4 /* Right */;\n      if (y < -threshold)\n        newButtons |= 2 /* Up */;\n      else if (y > threshold)\n        newButtons |= 8 /* Down */;\n    }\n    this.reading.setValues([newButtons, x, y]);\n    if (newButtons !== oldButtons) {\n      await this.sendEvent(3 /* ButtonsChanged */, jdpack(\"u32\", [newButtons]));\n    }\n  }\n};\n\n// src/servers/dotmatrixserver.ts\nvar DotMatrixServer = class extends JDServiceServer {\n  constructor(columns, rows, options) {\n    super(SRV_DOT_MATRIX);\n    const { brightness, variant } = options || {};\n    this.dots = this.addRegister(2 /* Dots */, [new Uint8Array(0)]);\n    this.rows = this.addRegister(385 /* Rows */, [rows]);\n    this.columns = this.addRegister(386 /* Columns */, [columns]);\n    if (brightness !== void 0)\n      this.brightness = this.addRegister(1 /* Brightness */, [128]);\n    if (variant !== void 0)\n      this.variant = this.addRegister(263 /* Variant */, [variant]);\n    this.rows.skipBoundaryCheck = true;\n    this.rows.skipErrorInjection = true;\n    if (variant === 1 /* LED */)\n      this.addRegister(258 /* StreamingPreferredInterval */, [\n        50\n      ]);\n    this.rows.on(CHANGE, this.updateDotsBuffer.bind(this));\n    this.columns.on(CHANGE, this.updateDotsBuffer.bind(this));\n    this.updateDotsBuffer();\n  }\n  updateDotsBuffer() {\n    var _a;\n    const [rows] = this.rows.values();\n    const [columns] = this.columns.values();\n    const columnspadded = columns + (8 - columns % 8);\n    const n = rows * columnspadded;\n    if (((_a = this.dots.data) == null ? void 0 : _a.length) !== n) {\n      this.dots.data = new Uint8Array(n);\n      this.dots.emit(CHANGE);\n    }\n  }\n};\n\n// src/jdom/lightconstants.ts\nvar LIGHT_PROG_SET_ALL = 208;\nvar LIGHT_PROG_FADE = 209;\nvar LIGHT_PROG_FADE_HSV = 210;\nvar LIGHT_PROG_ROTATE_FWD = 211;\nvar LIGHT_PROG_ROTATE_BACK = 212;\nvar LIGHT_PROG_SHOW = 213;\nvar LIGHT_PROG_RANGE = 214;\nvar LIGHT_PROG_MODE = 215;\nvar LIGHT_PROG_MODE1 = 216;\nvar LIGHT_MODE_REPLACE = 0;\nvar LIGHT_MODE_ADD_RGB = 1;\nvar LIGHT_MODE_SUBTRACT_RGB = 2;\nvar LIGHT_MODE_MULTIPLY_RGB = 3;\nvar LIGHT_MODE_LAST = 3;\nvar LIGHT_PROG_COLN = 192;\nvar LIGHT_PROG_COL1 = 193;\nvar LIGHT_PROG_COL2 = 194;\nvar LIGHT_PROG_COL3 = 195;\nvar LIGHT_PROG_COL1_SET = 207;\n\n// src/servers/ledstripserver.ts\nvar PROG_EOF = 0;\nvar PROG_CMD = 1;\nvar PROG_NUMBER = 3;\nvar PROG_COLOR_BLOCK = 4;\nfunction rgb(r, g, b) {\n  return { r, g, b };\n}\nfunction hsv(hue, sat, val) {\n  hue = hue * 192 >> 8;\n  const invsat = 255 - sat;\n  const brightness_floor = val * invsat >> 8;\n  const color_amplitude = val - brightness_floor;\n  const section = hue / 64 >> 0;\n  const offset = hue % 64 >> 0;\n  const rampup = offset;\n  const rampdown = 64 - 1 - offset;\n  const rampup_amp_adj = rampup * color_amplitude / (256 / 4) >> 0;\n  const rampdown_amp_adj = rampdown * color_amplitude / (256 / 4) >> 0;\n  const rampup_adj_with_floor = rampup_amp_adj + brightness_floor;\n  const rampdown_adj_with_floor = rampdown_amp_adj + brightness_floor;\n  let r = 0, g = 0, b = 0;\n  if (section) {\n    if (section == 1) {\n      r = brightness_floor;\n      g = rampdown_adj_with_floor;\n      b = rampup_adj_with_floor;\n    } else {\n      r = rampup_adj_with_floor;\n      g = brightness_floor;\n      b = rampdown_adj_with_floor;\n    }\n  } else {\n    r = rampdown_adj_with_floor;\n    g = rampup_adj_with_floor;\n    b = brightness_floor;\n  }\n  return rgb(r, g, b);\n}\nfunction mulcol(c, m) {\n  let c2 = c * m >> 7;\n  if (m < 128 && c == c2)\n    c2--;\n  else if (m > 128 && c == c2)\n    c2++;\n  return c2;\n}\nfunction clamp(c) {\n  if (c < 0)\n    return 0;\n  if (c > 255)\n    return 255;\n  return c;\n}\nfunction SCALE0(c, i) {\n  return (c & 255) * (1 + (i & 255)) >> 8;\n}\nvar LedStripServer = class extends JDServiceServer {\n  constructor(options) {\n    super(SRV_LED_STRIP, options);\n    this.pxbuffer = new Uint8Array(0);\n    this.prog_mode = 0;\n    this.prog_tmpmode = 0;\n    this.range_start = 0;\n    this.range_end = 0;\n    this.range_len = 0;\n    this.range_ptr = 0;\n    this.prog_ptr = 0;\n    this.prog_size = 0;\n    this.prog_data = new Uint8Array(0);\n    this.dirty = true;\n    this.inited = false;\n    this.power_enable = false;\n    const {\n      numColumns,\n      maxPower = 200,\n      maxPixels = 300,\n      numPixels = 15\n    } = options || {};\n    this.brightness = this.addRegister(1 /* Brightness */, [\n      15\n    ]);\n    this.actualBrightness = this.addRegister(384 /* ActualBrightness */, [15]);\n    this.lightType = this.addRegister(128 /* LightType */, [0 /* WS2812B_GRB */]);\n    this.numPixels = this.addRegister(129 /* NumPixels */, [\n      numPixels\n    ]);\n    this.maxPower = this.addRegister(7 /* MaxPower */, [\n      maxPower\n    ]);\n    this.maxPixels = this.addRegister(385 /* MaxPixels */, [\n      maxPixels\n    ]);\n    this.numRepeats = this.addRegister(130 /* NumRepeats */, [\n      0\n    ]);\n    if (numColumns !== void 0)\n      this.numColumns = this.addRegister(131 /* NumColumns */, [numColumns]);\n    this.brightness.on(CHANGE, () => this.intensity = this.requested_intensity);\n    this.numPixels.on(CHANGE, this.allocRxBuffer.bind(this));\n    this.maxPixels.on(CHANGE, this.allocRxBuffer.bind(this));\n    this.addCommand(129 /* Run */, this.handleRun.bind(this));\n    this.allocRxBuffer();\n  }\n  get colors() {\n    return this.pxbuffer;\n  }\n  get maxpower() {\n    const [r] = this.maxPower.values() || [200];\n    return r;\n  }\n  get maxpixels() {\n    const [r] = this.maxPixels.values() || [];\n    return r;\n  }\n  get numpixels() {\n    const [r] = this.numPixels.values() || [0];\n    return r;\n  }\n  get requested_intensity() {\n    const [r] = this.brightness.values() || [0];\n    return r;\n  }\n  get intensity() {\n    const [r] = this.actualBrightness.values() || [0];\n    return r;\n  }\n  set intensity(v) {\n    this.actualBrightness.setValues([v]);\n  }\n  jd_power_enable(value) {\n    this.power_enable = value;\n  }\n  is_enabled() {\n    return this.numpixels > 0 && this.requested_intensity > 0;\n  }\n  allocRxBuffer() {\n    const { numpixels = 0, maxpixels, pxbuffer } = this;\n    if (maxpixels !== void 0 && numpixels > maxpixels)\n      this.numPixels.setValues([this.maxpixels]);\n    const n = numpixels * 3;\n    if (pxbuffer || n !== pxbuffer.length)\n      this.pxbuffer = new Uint8Array(n);\n  }\n  reset_range() {\n    this.range_ptr = this.range_start;\n  }\n  set_next(c) {\n    if (this.range_ptr >= this.range_end)\n      return false;\n    const p = this.pxbuffer;\n    const pi = this.range_ptr++ * 3;\n    if (this.prog_tmpmode == LIGHT_MODE_REPLACE) {\n      p[pi + 0] = c.r;\n      p[pi + 1] = c.g;\n      p[pi + 2] = c.b;\n      return true;\n    }\n    let r = p[pi + 0], g = p[pi + 1], b = p[pi + 2];\n    switch (this.prog_tmpmode) {\n      case LIGHT_MODE_ADD_RGB:\n        r += c.r;\n        g += c.g;\n        b += c.b;\n        break;\n      case LIGHT_MODE_SUBTRACT_RGB:\n        r -= c.r;\n        g -= c.g;\n        b -= c.b;\n        break;\n      case LIGHT_MODE_MULTIPLY_RGB:\n        r = mulcol(r, c.r);\n        g = mulcol(g, c.g);\n        b = mulcol(b, c.b);\n        break;\n    }\n    p[pi + 0] = clamp(r);\n    p[pi + 1] = clamp(g);\n    p[pi + 2] = clamp(b);\n    return true;\n  }\n  limit_intensity() {\n    const { numpixels, requested_intensity, maxpower, pxbuffer } = this;\n    let n = numpixels * 3;\n    const prev_intensity = this.intensity;\n    let intensity = this.intensity;\n    intensity += 1 + (intensity >> 5);\n    if (requested_intensity !== void 0 && intensity > requested_intensity)\n      intensity = requested_intensity;\n    let current_full = 0;\n    let current = 0;\n    let current_prev = 0;\n    let di = 0;\n    while (n--) {\n      const v = pxbuffer[di++];\n      current += SCALE0(v, intensity);\n      current_prev += SCALE0(v, prev_intensity);\n      current_full += v;\n    }\n    current *= 46;\n    current_prev *= 46;\n    current_full *= 46;\n    const base_current = 14e3 + 930 * numpixels;\n    const current_limit = maxpower * 1e3 - base_current;\n    if (current <= current_limit) {\n      this.intensity = intensity;\n      return;\n    }\n    if (current_prev <= current_limit) {\n      return;\n    }\n    let inten = current_limit / (current_full >> 8) - 1;\n    if (inten < 0)\n      inten = 0;\n    this.intensity = inten;\n  }\n  prog_fetch_color() {\n    const ptr = this.prog_ptr;\n    if (ptr + 3 > this.prog_size)\n      return rgb(0, 0, 0);\n    const d = this.prog_data;\n    this.prog_ptr = ptr + 3;\n    return rgb(d[ptr + 0], d[ptr + 1], d[ptr + 2]);\n  }\n  prog_fetch() {\n    if (this.prog_ptr >= this.prog_size)\n      return { prog: PROG_EOF };\n    const d = this.prog_data;\n    const c = d[this.prog_ptr++];\n    if (!(c & 128)) {\n      return { dst: c, prog: PROG_NUMBER };\n    } else if ((c & 192) == 128) {\n      return {\n        dst: (c & 63) << 8 | d[this.prog_ptr++],\n        prog: PROG_NUMBER\n      };\n    } else\n      switch (c) {\n        case LIGHT_PROG_COL1:\n          return {\n            dst: 1,\n            prog: PROG_COLOR_BLOCK\n          };\n        case LIGHT_PROG_COL2:\n          return {\n            dst: 2,\n            prog: PROG_COLOR_BLOCK\n          };\n        case LIGHT_PROG_COL3:\n          return {\n            dst: 3,\n            prog: PROG_COLOR_BLOCK\n          };\n        case LIGHT_PROG_COLN:\n          return {\n            dst: d[this.prog_ptr++],\n            prog: PROG_COLOR_BLOCK\n          };\n        default:\n          return {\n            dst: c,\n            prog: PROG_CMD\n          };\n      }\n  }\n  prog_fetch_num(defl) {\n    const prev = this.prog_ptr;\n    const fr = this.prog_fetch();\n    const { dst: res, prog: r } = fr;\n    if (r == PROG_NUMBER)\n      return res;\n    else {\n      this.prog_ptr = prev;\n      return defl;\n    }\n  }\n  prog_fetch_cmd() {\n    let cmd;\n    for (; ; ) {\n      const c = this.prog_fetch();\n      switch (c.prog) {\n        case PROG_CMD:\n          return c.dst;\n        case PROG_COLOR_BLOCK:\n          while (cmd--)\n            this.prog_fetch_color();\n          break;\n        case PROG_EOF:\n          return 0;\n      }\n    }\n  }\n  prog_set(len) {\n    this.reset_range();\n    const start = this.prog_ptr;\n    for (; ; ) {\n      this.prog_ptr = start;\n      let ok = false;\n      for (let i = 0; i < len; ++i) {\n        ok = this.set_next(this.prog_fetch_color());\n      }\n      if (!ok)\n        break;\n    }\n  }\n  prog_fade(len, usehsv) {\n    if (len < 2) {\n      this.prog_set(len);\n      return;\n    }\n    let colidx = 0;\n    const endp = this.prog_ptr + 3 * len;\n    let col0 = this.prog_fetch_color();\n    let col1 = this.prog_fetch_color();\n    const colstep = (len - 1 << 16) / this.range_len;\n    let colpos = 0;\n    this.reset_range();\n    for (; ; ) {\n      while (colidx < colpos >> 16) {\n        colidx++;\n        col0 = col1;\n        col1 = this.prog_fetch_color();\n      }\n      const fade1 = colpos & 65535;\n      const fade0 = 65535 - fade1;\n      const col = rgb(col0.r * fade0 + col1.r * fade1 + 32768 >> 16, col0.g * fade0 + col1.g * fade1 + 32768 >> 16, col0.b * fade0 + col1.b * fade1 + 32768 >> 16);\n      if (!this.set_next(usehsv ? hsv(col.r, col.g, col.b) : col))\n        break;\n      colpos += colstep;\n    }\n    this.prog_ptr = endp;\n  }\n  prog_rot(shift) {\n    if (shift <= 0 || shift >= this.range_len)\n      return;\n    const range_start = this.range_start;\n    const range_end = this.range_end;\n    const buf = this.pxbuffer;\n    let first = range_start * 3;\n    let middle = (range_start + shift) * 3;\n    const last = range_end * 3;\n    let next = middle;\n    while (first != next) {\n      const tmp = buf[first];\n      const tmp1 = buf[first + 1];\n      const tmp2 = buf[first + 2];\n      buf[first] = buf[next];\n      buf[first + 1] = buf[next + 1];\n      buf[first + 2] = buf[next + 2];\n      buf[next] = tmp;\n      buf[next + 1] = tmp1;\n      buf[next + 2] = tmp2;\n      first += 3;\n      next += 3;\n      if (next === last)\n        next = middle;\n      else if (first === middle)\n        middle = next;\n    }\n  }\n  fetch_mode() {\n    const m = this.prog_fetch_num(0);\n    if (m > LIGHT_MODE_LAST)\n      return 0;\n    return m;\n  }\n  prog_process() {\n    const data = this.prog_data;\n    if (this.prog_ptr >= this.prog_size)\n      return false;\n    while (data === this.prog_data) {\n      const cmd = this.prog_fetch_cmd();\n      if (!cmd)\n        break;\n      if (cmd == LIGHT_PROG_SHOW) {\n        const k = this.prog_fetch_num(50);\n        this.dirty = true;\n        setTimeout(this.animationFrame.bind(this), k);\n        return data === this.prog_data;\n      }\n      switch (cmd) {\n        case LIGHT_PROG_COL1_SET:\n          this.range_ptr = this.range_start + this.prog_fetch_num(0);\n          this.set_next(this.prog_fetch_color());\n          break;\n        case LIGHT_PROG_FADE:\n        case LIGHT_PROG_FADE_HSV:\n        case LIGHT_PROG_SET_ALL: {\n          const { dst: len, prog: pcmd } = this.prog_fetch();\n          if (pcmd != PROG_COLOR_BLOCK || len == 0)\n            continue;\n          if (cmd == LIGHT_PROG_SET_ALL)\n            this.prog_set(len);\n          else\n            this.prog_fade(len, cmd == LIGHT_PROG_FADE_HSV);\n          break;\n        }\n        case LIGHT_PROG_ROTATE_BACK:\n        case LIGHT_PROG_ROTATE_FWD: {\n          let k = this.prog_fetch_num(1);\n          const len = this.range_len;\n          if (len == 0)\n            continue;\n          while (k >= len)\n            k -= len;\n          if (cmd == LIGHT_PROG_ROTATE_FWD && k != 0)\n            k = len - k;\n          this.prog_rot(k);\n          break;\n        }\n        case LIGHT_PROG_MODE1:\n          this.prog_tmpmode = this.fetch_mode();\n          break;\n        case LIGHT_PROG_MODE:\n          this.prog_mode = this.fetch_mode();\n          break;\n        case LIGHT_PROG_RANGE: {\n          let start = this.prog_fetch_num(0);\n          const len = this.prog_fetch_num(this.numpixels);\n          const numpixels = this.numpixels;\n          if (start > numpixels)\n            start = numpixels;\n          let end = start + len;\n          if (end > numpixels)\n            end = numpixels;\n          this.range_start = start;\n          this.range_end = end;\n          this.range_len = end - start;\n          break;\n        }\n      }\n      if (cmd != LIGHT_PROG_MODE1)\n        this.prog_tmpmode = this.prog_mode;\n    }\n    return false;\n  }\n  animationFrame() {\n    if (!this.prog_process())\n      return;\n    if (!this.is_enabled())\n      return;\n    if (this.dirty) {\n      this.dirty = false;\n      if (isBufferEmpty(this.pxbuffer)) {\n        this.jd_power_enable(false);\n        return;\n      } else {\n        this.jd_power_enable(true);\n      }\n      this.limit_intensity();\n      this.emit(RENDER);\n    }\n  }\n  sync_config() {\n    if (!this.is_enabled()) {\n      this.jd_power_enable(false);\n      return;\n    }\n    if (!this.inited) {\n      this.inited = true;\n    }\n    this.jd_power_enable(true);\n  }\n  handleRun(pkt) {\n    this.prog_data = pkt.data;\n    this.prog_size = this.prog_data.length;\n    this.prog_ptr = 0;\n    this.range_start = 0;\n    this.range_end = this.range_len = this.numpixels;\n    this.prog_tmpmode = this.prog_mode = 0;\n    this.sync_config();\n    this.animationFrame();\n  }\n};\n\n// src/servers/matrixkeypadserver.ts\nvar MatrixKeypadServer = class extends SensorServer {\n  constructor(columns, rows, labels) {\n    super(SRV_MATRIX_KEYPAD, {\n      readingValues: [[]]\n    });\n    this.columns = this.addRegister(385 /* Columns */, [columns]);\n    this.rows = this.addRegister(384 /* Rows */, [rows]);\n    this.labels = this.addRegister(386 /* Labels */, labels ? [labels.map((l) => [l])] : void 0);\n  }\n  async down(button) {\n    const [values2] = this.reading.values();\n    const valuei = values2.findIndex((v) => v[0] === button);\n    if (valuei < 0) {\n      values2.push([button]);\n      this.reading.setValues([values2]);\n    }\n  }\n  async up(button) {\n    const [values2] = this.reading.values();\n    const valuei = values2.findIndex((v) => v[0] === button);\n    if (valuei > -1) {\n      values2.splice(valuei, 1);\n      this.reading.setValues([values2]);\n    }\n  }\n};\n\n// src/servers/motorserver.ts\nvar MotorServer = class extends JDServiceServer {\n  constructor(instanceName) {\n    super(SRV_MOTOR, { instanceName });\n    this.duty = this.addRegister(2 /* Duty */, [0]);\n    this.enabled = this.addRegister(1 /* Enabled */, [false]);\n    this.loadTorque = this.addRegister(384 /* LoadTorque */);\n    this.loadSpeed = this.addRegister(385 /* LoadSpeed */);\n  }\n};\n\n// src/servers/leveldetector.ts\nvar LevelDetector = class extends JDClient {\n  constructor(service) {\n    super();\n    this.service = service;\n    this.reset();\n    if (this.service.inactiveThreshold)\n      this.mount(this.service.inactiveThreshold.subscribe(CHANGE, this.reset.bind(this)));\n    if (this.service.activeThreshold)\n      this.mount(this.service.activeThreshold.subscribe(CHANGE, this.reset.bind(this)));\n    this.mount(this.service.reading.subscribe(CHANGE, this.update.bind(this)));\n  }\n  reset() {\n    this._state = 1 /* Neutral */;\n  }\n  update() {\n    var _a, _b;\n    const [level] = this.service.reading.values();\n    if (level === void 0) {\n      this.setState(1 /* Neutral */);\n      return;\n    }\n    const [active] = (_a = this.service.activeThreshold) == null ? void 0 : _a.values();\n    if (active !== void 0 && level >= active) {\n      this.setState(3 /* Active */);\n      return;\n    }\n    const [inactive] = (_b = this.service.inactiveThreshold) == null ? void 0 : _b.values();\n    if (inactive !== void 0 && level <= inactive) {\n      this.setState(2 /* Inactive */);\n      return;\n    }\n    this.setState(1 /* Neutral */);\n  }\n  setState(state) {\n    if (state === this._state)\n      return;\n    this._state = state;\n    switch (state) {\n      case 3 /* Active */:\n        this.service.sendEvent(1 /* Active */);\n        break;\n      case 2 /* Inactive */:\n        this.service.sendEvent(2 /* Inactive */);\n        break;\n      case 1 /* Neutral */:\n        this.service.sendEvent(7 /* Neutral */);\n        break;\n    }\n  }\n};\n\n// src/servers/analogsensorserver.ts\nvar AnalogSensorServer = class extends SensorServer {\n  constructor(serviceClass2, options) {\n    super(serviceClass2, options);\n    const {\n      minReading,\n      maxReading,\n      inactiveThreshold,\n      activeThreshold,\n      readingResolution\n    } = options || {};\n    if (minReading !== void 0)\n      this.addRegister(260 /* MinReading */, [minReading]);\n    if (maxReading !== void 0)\n      this.addRegister(261 /* MaxReading */, [maxReading]);\n    if (readingResolution !== void 0)\n      this.addRegister(264 /* ReadingResolution */, [\n        readingResolution\n      ]);\n    if (inactiveThreshold !== void 0 || this.activeThreshold !== void 0) {\n      if (inactiveThreshold !== void 0)\n        this.inactiveThreshold = this.addRegister(5 /* InactiveThreshold */, [inactiveThreshold]);\n      if (activeThreshold !== void 0)\n        this.activeThreshold = this.addRegister(6 /* ActiveThreshold */, [activeThreshold]);\n      this.levelDetector = new LevelDetector(this);\n    }\n  }\n};\n\n// src/servers/raingaugeserver.ts\nvar RainGaugeServer = class extends AnalogSensorServer {\n  constructor(options) {\n    super(SRV_RAIN_GAUGE, {\n      readingValues: [0]\n    });\n    this._tiltCount = 0;\n    this._level = 0;\n    const { bucketSize } = options || {};\n    this.precipitationPrecision = this.addRegister(264 /* PrecipitationPrecision */, [bucketSize || 0.2794]);\n    this._level = 0;\n  }\n  get tiltCount() {\n    return this._tiltCount;\n  }\n  get level() {\n    return this._level;\n  }\n  async rain(fraction) {\n    if (!fraction)\n      return;\n    this._level += fraction;\n    if (this._level >= 0.7)\n      await this.tilt();\n    else\n      this.emit(CHANGE);\n  }\n  async tilt() {\n    this._tiltCount++;\n    this._level = 0;\n    const [bucket] = this.precipitationPrecision.values();\n    const [current] = this.reading.values();\n    this.reading.setValues([current + (bucket || 0.2)]);\n    this.emit(CHANGE);\n  }\n};\n\n// src/servers/reflectedlightserver.ts\nvar ReflectedLightServer = class extends AnalogSensorServer {\n  constructor(options) {\n    super(SRV_REFLECTED_LIGHT, { readingValues: [0] });\n    const { variant } = options || {};\n    this.variant = this.addRegister(263 /* Variant */, [variant || 1 /* InfraredDigital */]);\n  }\n};\n\n// src/servers/rotaryencoderserver.ts\nvar RotaryEncoderServer = class extends SensorServer {\n  constructor() {\n    super(SRV_ROTARY_ENCODER, { readingValues: [0], streamingInterval: 50 });\n    this.clicksPerTurn = this.addRegister(384 /* ClicksPerTurn */, [12]);\n  }\n  async rotate(clicks) {\n    const [position] = this.reading.values();\n    this.reading.setValues([position + (clicks >> 0)]);\n  }\n};\n\n// src/servers/servoserver.ts\nvar ServoServer = class extends JDServiceServer {\n  constructor(options) {\n    super(SRV_SERVO, options);\n    const {\n      minAngle = -90,\n      maxAngle = 90,\n      responseSpeed,\n      stallTorque\n    } = options || {};\n    this.angle = this.addRegister(2 /* Angle */, [0]);\n    this.currentAngle = this.addRegister(257 /* CurrentAngle */, [\n      0\n    ]);\n    this.enabled = this.addRegister(1 /* Enabled */, [false]);\n    this.minAngle = this.addRegister(272 /* MinAngle */, minAngle !== void 0 ? [minAngle] : void 0);\n    this.maxAngle = this.addRegister(273 /* MaxAngle */, maxAngle !== void 0 ? [maxAngle] : void 0);\n    this.offset = this.addRegister(129 /* Offset */, [0]);\n    this.responseSpeed = this.addRegister(385 /* ResponseSpeed */, responseSpeed !== void 0 ? [responseSpeed] : void 0);\n    this.stallTorque = this.addRegister(384 /* StallTorque */, stallTorque !== void 0 ? [stallTorque] : void 0);\n    this.angle.on(PACKET_DATA_NORMALIZE, (values2) => {\n      let angle = values2[0];\n      const [minAngle2] = this.minAngle.values();\n      const [maxAngle2] = this.maxAngle.values();\n      if (minAngle2 !== void 0)\n        angle = Math.max(minAngle2, angle);\n      if (maxAngle2 !== void 0)\n        angle = Math.min(maxAngle2, angle);\n      values2[0] = angle;\n    });\n    this.angle.on(CHANGE, () => this.currentAngle.setValues(this.angle.values()));\n  }\n};\n\n// src/servers/settingsserver.ts\nvar SettingsServer = class extends JDServiceServer {\n  constructor(store) {\n    super(SRV_SETTINGS);\n    this.store = store;\n    this.addCommand(128 /* Get */, this.handleGet.bind(this));\n    this.addCommand(129 /* Set */, this.handleSet.bind(this));\n    this.addCommand(132 /* Delete */, this.handleDelete.bind(this));\n    this.addCommand(130 /* ListKeys */, this.handleListKeys.bind(this));\n    this.addCommand(131 /* List */, this.handleList.bind(this));\n    this.addCommand(133 /* Clear */, this.handleClear.bind(this));\n    this.settings = this.read();\n  }\n  getPayload(key) {\n    const value = this.settings[key];\n    const secret = /^$/.test(key);\n    let payload;\n    if (value === void 0) {\n      payload = new Uint8Array(0);\n    } else if (secret) {\n      const payload2 = new Uint8Array(1);\n      payload2[0] = 0;\n    } else {\n      payload = fromHex(value);\n    }\n    return payload;\n  }\n  async handleGet(pkt) {\n    const [key] = pkt.jdunpack(\"s\");\n    const payload = this.getPayload(key);\n    const resp = Packet.jdpacked(128 /* Get */, \"z b\", [key, payload]);\n    await this.sendPacketAsync(resp);\n  }\n  async handleSet(pkt) {\n    const [key, value] = pkt.jdunpack(\"z b\");\n    this.settings[key] = toHex2(value);\n    await this.save();\n  }\n  async handleDelete(pkt) {\n    const [key] = pkt.jdunpack(\"s\");\n    delete this.settings[key];\n    await this.save();\n  }\n  async handleListKeys(pkt) {\n    const pipe = OutPipe.from(this.device.bus, pkt, true);\n    await pipe.respondForEach(Object.keys(this.settings), (k) => jdpack(\"s\", [k]));\n  }\n  async handleList(pkt) {\n    const pipe = OutPipe.from(this.device.bus, pkt, true);\n    await pipe.respondForEach(Object.keys(this.settings), (k) => {\n      const payload = this.getPayload(k);\n      return jdpack(\"z b\", [k, payload]);\n    });\n  }\n  handleClear() {\n    this.settings = {};\n    this.save();\n  }\n  read() {\n    if (!this.store)\n      return {};\n    try {\n      return JSON.parse(this.store.get() || \"{}\");\n    } catch (e) {\n      console.debug(e);\n      return {};\n    }\n  }\n  async save() {\n    var _a;\n    (_a = this.store) == null ? void 0 : _a.set(JSON.stringify(this.settings));\n    await this.sendEvent(3 /* Change */);\n  }\n};\n\n// src/servers/speechsynthesisserver.ts\nvar SpeechSynthesisServer = class extends JDServiceServer {\n  constructor() {\n    super(SRV_SPEECH_SYNTHESIS);\n    var _a;\n    this.synthesis = typeof window !== \"undefined\" && window.speechSynthesis;\n    this.enabled = this.addRegister(1 /* Enabled */, [\n      !((_a = this.synthesis) == null ? void 0 : _a.paused)\n    ]);\n    this.pitch = this.addRegister(130 /* Pitch */, [1]);\n    this.rate = this.addRegister(131 /* Rate */, [1]);\n    this.lang = this.addRegister(128 /* Lang */, [\"\"]);\n    this.volume = this.addRegister(129 /* Volume */, [\n      0.5\n    ]);\n    this.addCommand(128 /* Speak */, this.handleSpeak.bind(this));\n    this.addCommand(129 /* Cancel */, this.handleCancel.bind(this));\n  }\n  handleSpeak(pkt) {\n    const [text] = pkt.jdunpack(\"s\");\n    if (!this.synthesis || !text)\n      return;\n    const [pitch] = this.pitch.values();\n    const [rate] = this.pitch.values();\n    const [lang] = this.lang.values();\n    const [volume] = this.volume.values();\n    const utterance = new SpeechSynthesisUtterance(text);\n    utterance.pitch = pitch;\n    utterance.rate = rate;\n    utterance.lang = lang;\n    utterance.volume = volume;\n    this.synthesis.speak(utterance);\n  }\n  handleCancel(pkt) {\n    var _a;\n    (_a = this.synthesis) == null ? void 0 : _a.cancel();\n  }\n};\n\n// src/servers/switchserver.ts\nvar SwitchServer = class extends SensorServer {\n  constructor(options) {\n    super(SRV_SWITCH, { readingValues: [false], streamingInterval: 50 });\n    const { variant } = options || {};\n    this.variant = this.addRegister(263 /* Variant */, variant !== void 0 ? [variant] : void 0);\n  }\n  async toggle() {\n    const [v] = this.reading.values();\n    if (!v)\n      await this.switchOn();\n    else\n      await this.switchOff();\n  }\n  async switchOn() {\n    const [v] = this.reading.values();\n    if (!v) {\n      this.reading.setValues([true]);\n      await this.sendEvent(1 /* On */);\n    }\n  }\n  async switchOff() {\n    const [v] = this.reading.values();\n    if (v) {\n      this.reading.setValues([false]);\n      await this.sendEvent(2 /* Off */);\n    }\n  }\n};\n\n// src/servers/trafficlightserver.ts\nvar TrafficLightServer = class extends JDServiceServer {\n  constructor(options) {\n    super(SRV_TRAFFIC_LIGHT, options);\n    this.red = this.addRegister(128 /* Red */, [true]);\n    this.orange = this.addRegister(129 /* Orange */, [false]);\n    this.green = this.addRegister(130 /* Green */, [false]);\n  }\n};\n\n// src/servers/ledserver.ts\nvar LEDServer = class extends JDServiceServer {\n  constructor(options) {\n    super(SRV_LED, options);\n    const {\n      ledCount = 1,\n      variant = 1 /* ThroughHole */,\n      luminousIntensity,\n      waveLength,\n      color = [255, 0, 0],\n      maxPower = 200\n    } = options || {};\n    this.color = this.addRegister(384 /* Color */, color);\n    this.color.on(REGISTER_PRE_GET, this.updateColor.bind(this));\n    this.maxPower = this.addRegister(7 /* MaxPower */, [maxPower]);\n    this.ledCount = this.addRegister(387 /* LedCount */, [ledCount]);\n    if (luminousIntensity !== void 0)\n      this.luminousIntensity = this.addRegister(386 /* LuminousIntensity */, [luminousIntensity]);\n    if (waveLength !== void 0)\n      this.waveLength = this.addRegister(385 /* WaveLength */, [waveLength]);\n    this.variant = this.addRegister(263 /* Variant */, [variant]);\n    this.addCommand(128 /* Animate */, this.handleAnimate.bind(this));\n    this.on(REFRESH, this.updateColor.bind(this));\n  }\n  updateColor() {\n    if (!this._animation)\n      return;\n    const { red, green, blue, toRed, toGreen, toBlue, speed, start } = this._animation;\n    const now = this.device.bus.timestamp;\n    const elapsed = now - start;\n    const total = 512 / speed * 100 | 0;\n    const progress = elapsed / total;\n    const alpha = Math.min(1, progress);\n    const oneAlpha = 1 - alpha;\n    const newRed = red * oneAlpha + alpha * toRed | 0;\n    const newGreen = green * oneAlpha + alpha * toGreen | 0;\n    const newBlue = blue * oneAlpha + alpha * toBlue | 0;\n    this.color.setValues([newRed, newGreen, newBlue]);\n    if (progress > 1)\n      this._animation = void 0;\n  }\n  handleAnimate(pkt) {\n    const [toRed, toGreen, toBlue, speed] = pkt.jdunpack(\"u8 u8 u8 u8\");\n    if (speed == 0) {\n      this.color.setValues([toRed, toGreen, toBlue]);\n      this._animation = void 0;\n    } else {\n      const [red, green, blue] = this.color.values();\n      this._animation = {\n        red,\n        green,\n        blue,\n        toRed,\n        toGreen,\n        toBlue,\n        speed,\n        start: this.device.bus.timestamp\n      };\n    }\n  }\n};\n\n// src/servers/soundplayerserver.ts\nvar SoundPlayerServer = class extends JDServiceServer {\n  constructor(sounds) {\n    super(SRV_SOUND_PLAYER);\n    this.sounds = sounds;\n    this.volume = this.addRegister(1 /* Volume */, [0.5]);\n    this.addCommand(130 /* ListSounds */, this.handleListSounds.bind(this));\n    this.addCommand(128 /* Play */, this.handlePlay.bind(this));\n  }\n  async handleListSounds(pkt) {\n    const pipe = OutPipe.from(this.device.bus, pkt, true);\n    await pipe.respondForEach(this.sounds, (sound) => jdpack(\"u32 s\", sound));\n  }\n  handlePlay(pkt) {\n    var _a;\n    const [name] = pkt.jdunpack(\"s\");\n    (_a = this.onPlay) == null ? void 0 : _a.call(this, name);\n  }\n};\n\n// src/servers/randomnumbergeneratorserver.ts\nvar RandomNumberGeneratorServer = class extends JDServiceServer {\n  constructor() {\n    super(SRV_RNG, {\n      variant: 3 /* WebCrypto */\n    });\n    this.reading = this.addRegister(384 /* Random */, [new Uint8Array(64)]);\n    this.reading.on(REGISTER_PRE_GET, this.handleRefresh.bind(this));\n  }\n  handleRefresh() {\n    const data = new Uint8Array(64);\n    if (typeof window !== \"undefined\")\n      window.crypto.getRandomValues(data);\n    this.reading.setValues([data], true);\n  }\n};\n\n// src/servers/compassserver.ts\nvar CompassServer = class extends AnalogSensorServer {\n  constructor() {\n    super(SRV_COMPASS, {\n      readingValues: [0],\n      minReading: 0,\n      maxReading: 360,\n      readingError: [1]\n    });\n    this.enabled = this.addRegister(1 /* Enabled */, [false]);\n    this.enabled.on(CHANGE, () => {\n      const [status] = this.statusCode.values();\n      if (status === 100 /* CalibrationNeeded */) {\n        console.debug(\"start calibration\");\n        this.calibrate();\n      }\n    });\n  }\n};\n\n// src/servers/dmxserver.ts\nvar DMXServer = class extends JDServiceServer {\n  constructor() {\n    super(SRV_DMX, {\n      intensityValues: [0]\n    });\n    this.addCommand(128 /* Send */, this.handleSend.bind(this));\n  }\n  handleSend(pkt) {\n    console.debug(`dmx send`, toHex2(pkt.data));\n  }\n};\n\n// src/jdom/iframeclient.ts\nfunction inIFrame() {\n  try {\n    return typeof window !== \"undefined\" && window.self !== window.top;\n  } catch (e) {\n    return typeof window !== \"undefined\";\n  }\n}\n\n// src/servers/bitradioserver.ts\nvar RADIO_MAX_PACKET_SIZE = 32;\nvar MAX_PAYLOAD_LENGTH = 20;\nvar PACKET_PREFIX_LENGTH = 9;\nvar VALUE_PACKET_NAME_LEN_OFFSET = 13;\nvar DOUBLE_VALUE_PACKET_NAME_LEN_OFFSET = 17;\nvar PACKET_TYPE_NUMBER = 0;\nvar PACKET_TYPE_VALUE = 1;\nvar PACKET_TYPE_STRING = 2;\nvar PACKET_TYPE_BUFFER = 3;\nvar PACKET_TYPE_DOUBLE = 4;\nvar PACKET_TYPE_DOUBLE_VALUE = 5;\nfunction getStringOffset(packetType) {\n  switch (packetType) {\n    case PACKET_TYPE_STRING:\n      return PACKET_PREFIX_LENGTH;\n    case PACKET_TYPE_VALUE:\n      return VALUE_PACKET_NAME_LEN_OFFSET;\n    case PACKET_TYPE_DOUBLE_VALUE:\n      return DOUBLE_VALUE_PACKET_NAME_LEN_OFFSET;\n    default:\n      return void 0;\n  }\n}\nfunction truncateString(str) {\n  return str;\n}\nvar RadioPacket = class {\n  constructor(data) {\n    this.data = data;\n    if (!data)\n      this.data = new Uint8Array(RADIO_MAX_PACKET_SIZE + 4);\n  }\n  static getPacket(data) {\n    if (!data)\n      return void 0;\n    return new RadioPacket(data);\n  }\n  static mkPacket(packetType) {\n    const res = new RadioPacket();\n    res.data[0] = packetType;\n    return res;\n  }\n  get signal() {\n    return getNumber(this.data, 5 /* Int32LE */, this.data.length - 4);\n  }\n  get packetType() {\n    return this.data[0];\n  }\n  get time() {\n    return getNumber(this.data, 5 /* Int32LE */, 1);\n  }\n  set time(val) {\n    setNumber(this.data, 5 /* Int32LE */, 1, val);\n  }\n  get serial() {\n    return getNumber(this.data, 5 /* Int32LE */, 5);\n  }\n  set serial(val) {\n    setNumber(this.data, 5 /* Int32LE */, 5, val);\n  }\n  get stringPayload() {\n    const offset = getStringOffset(this.packetType);\n    return offset ? this.data.slice(offset + 1, this.data[offset]).toString() : void 0;\n  }\n  set stringPayload(val) {\n    const offset = getStringOffset(this.packetType);\n    if (offset) {\n      const buf = stringToBuffer(truncateString(val));\n      this.data[offset] = buf.length;\n      memcpy(this.data, offset + 1, buf);\n    }\n  }\n  get numberPayload() {\n    switch (this.packetType) {\n      case PACKET_TYPE_NUMBER:\n      case PACKET_TYPE_VALUE:\n        return getNumber(this.data, 5 /* Int32LE */, PACKET_PREFIX_LENGTH);\n      case PACKET_TYPE_DOUBLE:\n      case PACKET_TYPE_DOUBLE_VALUE:\n        return getNumber(this.data, 14 /* Float64LE */, PACKET_PREFIX_LENGTH);\n    }\n    return void 0;\n  }\n  set numberPayload(val) {\n    switch (this.packetType) {\n      case PACKET_TYPE_NUMBER:\n      case PACKET_TYPE_VALUE:\n        setNumber(this.data, 5 /* Int32LE */, PACKET_PREFIX_LENGTH, val);\n        break;\n      case PACKET_TYPE_DOUBLE:\n      case PACKET_TYPE_DOUBLE_VALUE:\n        setNumber(this.data, 14 /* Float64LE */, PACKET_PREFIX_LENGTH, val);\n        break;\n    }\n  }\n  get bufferPayload() {\n    const len = this.data[PACKET_PREFIX_LENGTH];\n    return this.data.slice(PACKET_PREFIX_LENGTH + 1, PACKET_PREFIX_LENGTH + 1 + len);\n  }\n  set bufferPayload(b) {\n    const len = Math.min(b.length, MAX_PAYLOAD_LENGTH - 1);\n    this.data[PACKET_PREFIX_LENGTH] = len;\n    memcpy(this.data, PACKET_PREFIX_LENGTH + 1, b, 0, len);\n  }\n  hasString() {\n    return this.packetType === PACKET_TYPE_STRING || this.packetType === PACKET_TYPE_VALUE || this.packetType === PACKET_TYPE_DOUBLE_VALUE;\n  }\n  hasNumber() {\n    return this.packetType === PACKET_TYPE_NUMBER || this.packetType === PACKET_TYPE_DOUBLE || this.packetType === PACKET_TYPE_VALUE || this.packetType === PACKET_TYPE_DOUBLE_VALUE;\n  }\n};\nvar BitRadioServer = class extends JDServiceServer {\n  constructor() {\n    super(SRV_BIT_RADIO);\n    this.enabled = this.addRegister(1 /* Enabled */, [false]);\n    this.group = this.addRegister(128 /* Group */, [1]);\n    this.transmissionPower = this.addRegister(129 /* TransmissionPower */, [6]);\n    this.frequencyBand = this.addRegister(130 /* FrequencyBand */, [7]);\n    this.addCommand(128 /* SendString */, this.handleSendString.bind(this));\n    this.addCommand(129 /* SendNumber */, this.handleSendNumber.bind(this));\n    this.addCommand(130 /* SendValue */, this.handleSendValue.bind(this));\n    this.addCommand(131 /* SendBuffer */, this.handleSendBuffer.bind(this));\n  }\n  handleSendString(pkt) {\n    const [message] = pkt.jdunpack(\"s\");\n    const rpkt = RadioPacket.mkPacket(PACKET_TYPE_STRING);\n    rpkt.stringPayload = message;\n    this.sendRadioPacket(rpkt);\n  }\n  handleSendNumber(pkt) {\n    const [value] = pkt.jdunpack(\"f64\");\n    const rpkt = RadioPacket.mkPacket(PACKET_TYPE_DOUBLE);\n    rpkt.numberPayload = value;\n    this.sendRadioPacket(rpkt);\n  }\n  handleSendValue(pkt) {\n    const [value, name] = pkt.jdunpack(\"f64 s\");\n    const rpkt = RadioPacket.mkPacket(PACKET_TYPE_DOUBLE_VALUE);\n    rpkt.stringPayload = name;\n    rpkt.numberPayload = value;\n    this.sendRadioPacket(rpkt);\n  }\n  handleSendBuffer(pkt) {\n    const { data } = pkt;\n    const rpkt = RadioPacket.mkPacket(PACKET_TYPE_BUFFER);\n    rpkt.bufferPayload = data;\n    this.sendRadioPacket(rpkt);\n  }\n  sendRadioPacket(rpkt) {\n    const [on] = this.enabled.values();\n    if (!on)\n      return;\n    const { bus } = this.device;\n    const { timestamp: timestamp2 } = bus;\n    const [group] = this.group.values();\n    rpkt.time = timestamp2;\n    rpkt.serial = 0;\n    const msg = {\n      type: \"radiopacket\",\n      broadcast: true,\n      rssi: -75,\n      serial: 0,\n      time: bus.timestamp,\n      payload: {\n        groupId: group,\n        type: 0,\n        bufferData: rpkt.data\n      }\n    };\n    if (inIFrame()) {\n      window.parent.postMessage(msg, \"*\");\n    }\n  }\n};\n\n// src/servers/powerserver.ts\nvar PowerServer = class extends JDServiceServer {\n  constructor(options) {\n    super(SRV_POWER, options);\n    this.enabled = this.addRegister(1 /* Allowed */, [false]);\n    this.maxPower = this.addRegister(7 /* MaxPower */, [500]);\n    this.overload = this.addRegister(385 /* PowerStatus */, [\n      false\n    ]);\n  }\n};\n\n// src/servers/capacitivebuttonserver.ts\nvar CapacitiveButtonServer = class extends JDServiceServer {\n  constructor(options) {\n    super(SRV_CAPACITIVE_BUTTON, options);\n    const { threshold = 0.5 } = options || {};\n    this.threshold = this.addRegister(6 /* Threshold */, [\n      threshold\n    ]);\n  }\n};\n\n// src/servers/hidkeyboardserver.ts\nvar HIDKeyboardServer = class extends JDServiceServer {\n  constructor(options) {\n    super(SRV_HID_KEYBOARD, options);\n    this.addCommand(129 /* Clear */, this.handleClear.bind(this));\n    this.addCommand(128 /* Key */, this.handleKey.bind(this));\n  }\n  get lastKey() {\n    return this._lastKey;\n  }\n  handleKey(pkt) {\n    const [rest] = pkt.jdunpack(\"r: u16 u8 u8\");\n    this._lastKey = rest;\n    this.emit(CHANGE);\n  }\n  handleClear() {\n    if (this._lastKey) {\n      this._lastKey = void 0;\n      this.emit(CHANGE);\n    }\n  }\n};\nvar selectors = {\n  a: 4,\n  b: 5,\n  c: 6,\n  d: 7,\n  e: 8,\n  f: 9,\n  g: 10,\n  h: 11,\n  i: 12,\n  j: 13,\n  k: 14,\n  l: 15,\n  m: 16,\n  n: 17,\n  o: 18,\n  p: 19,\n  q: 20,\n  r: 21,\n  s: 22,\n  t: 23,\n  u: 24,\n  v: 25,\n  w: 26,\n  x: 27,\n  y: 28,\n  z: 29,\n  \"1\": 30,\n  \"2\": 31,\n  \"3\": 32,\n  \"4\": 33,\n  \"5\": 34,\n  \"6\": 35,\n  \"7\": 36,\n  \"8\": 37,\n  \"9\": 38,\n  \"0\": 39,\n  \"!\": 30,\n  \"@\": 31,\n  \"#\": 32,\n  $: 33,\n  \"%\": 34,\n  \"^\": 35,\n  \"&\": 36,\n  \"*\": 37,\n  \"(\": 38,\n  \")\": 39,\n  enter: 40,\n  escape: 41,\n  backspace: 42,\n  tab: 43,\n  space: 44,\n  \" \": 44,\n  \"-\": 45,\n  _: 45,\n  \"=\": 46,\n  \"+\": 46,\n  \"[\": 47,\n  \"{\": 47,\n  \"]\": 48,\n  \"}\": 48,\n  \"\\\\\": 49,\n  \"|\": 49,\n  \"~\": 50,\n  \";\": 51,\n  \":\": 51,\n  \"'\": 52,\n  '\"': 52,\n  \"`\": 53,\n  \",\": 54,\n  \".\": 55,\n  \"/\": 56,\n  \"?\": 56,\n  capslock: 57,\n  f1: 58,\n  f2: 59,\n  f3: 60,\n  f4: 61,\n  f5: 62,\n  f6: 63,\n  f7: 64,\n  f8: 65,\n  f9: 66,\n  f10: 67,\n  f11: 68,\n  f12: 69,\n  printscreen: 70,\n  scrolllock: 71,\n  pause: 72,\n  insert: 73,\n  home: 74,\n  pageup: 75,\n  delete: 76,\n  end: 77,\n  pagedown: 78,\n  arrowright: 79,\n  arrowleft: 80,\n  arrowdown: 81,\n  arrowup: 82,\n  numlock: 83,\n  numpaddivide: 84,\n  numpadmultiply: 85,\n  numpadsubstract: 86,\n  numpadadd: 87,\n  numpadenter: 88,\n  numpad1: 89,\n  numpad2: 90,\n  numpad3: 91,\n  numpad4: 92,\n  numpad5: 93,\n  numpad6: 94,\n  numpad7: 95,\n  numpad8: 96,\n  numpad9: 97,\n  numpad0: 98,\n  numpaddecimal: 99,\n  numpadequal: 103,\n  f13: 104,\n  f14: 105,\n  f15: 106,\n  f16: 107,\n  f17: 108,\n  f18: 109,\n  f19: 110,\n  f20: 111,\n  f21: 112,\n  f22: 113,\n  f23: 114,\n  f24: 115,\n  execute: 116,\n  help: 117,\n  contextmenu: 118,\n  select: 119,\n  stop: 120,\n  again: 121,\n  undo: 122,\n  cut: 123,\n  copy: 124,\n  paste: 125,\n  find: 126,\n  mute: 127,\n  volumeup: 128,\n  volumedown: 129,\n  numpadcomma: 133\n};\nvar reverseSelectors = Object.keys(selectors).reduce((r, key) => {\n  if (!r[selectors[key]])\n    r[selectors[key]] = key;\n  return r;\n}, {});\nvar modifierCodes = {\n  controlleft: 1 /* LeftControl */,\n  altleft: 4 /* LeftAlt */,\n  shiftleft: 2 /* LeftShift */,\n  metaleft: 8 /* LeftGUI */,\n  controlright: 16 /* RightControl */,\n  altright: 64 /* RightAlt */,\n  shiftright: 32 /* RightShift */,\n  metaright: 128 /* RightGUI */\n};\nfunction renderKeyboardKey(selector, modifiers, pretty) {\n  const flags = pretty ? [\n    \"Ctrl\",\n    \"Shift\",\n    \"Alt\",\n    \"Cmd\",\n    \"Ctrl Right\",\n    \"Shift Right\",\n    \"AltRight\",\n    \"Cmd Right\"\n  ] : [\n    \"{controlleft}\",\n    \"{shiftleft}\",\n    \"{altleft}\",\n    \"{metaleft}\",\n    \"{controlright}\",\n    \"{shiftright}\",\n    \"{altright}\",\n    \"{metaright}\"\n  ];\n  const sep = pretty ? \" + \" : \" \";\n  const values2 = [];\n  flags.forEach((flag, i) => {\n    if (modifiers & 1 << i) {\n      values2.push(flag);\n    }\n  });\n  const sel = reverseSelectors[selector];\n  if (sel !== void 0)\n    values2.push(pretty ? sel.toUpperCase() : !pretty && sel.length > 1 ? `{${sel}}` : sel);\n  const value = values2.filter((v) => !!v).join(sep);\n  return value;\n}\n\n// src/servers/hidmouseserver.ts\nfunction renderHidMouseButtons(buttons) {\n  const btns = [\n    buttons & 1 /* Left */ ? \"left\" : \"\",\n    buttons & 2 /* Right */ ? \"right\" : \"\",\n    buttons & 4 /* Middle */ ? \"middle\" : \"\"\n  ].filter((b) => !!b).join(\", \");\n  return btns;\n}\nvar HIDMouseServer = class extends JDServiceServer {\n  constructor(options) {\n    super(SRV_HID_MOUSE, options);\n    this.addCommand(129 /* Move */, this.handleMove.bind(this));\n    this.addCommand(128 /* SetButton */, this.handleSetButton.bind(this));\n    this.addCommand(130 /* Wheel */, this.handleWheel.bind(this));\n  }\n  get lastCommand() {\n    return this._lastCommand;\n  }\n  setLastCommand(s) {\n    if (this._lastCommand !== s) {\n      this._lastCommand = s;\n      this.emit(CHANGE);\n    }\n  }\n  handleMove(pkt) {\n    const [dx, dy, time] = pkt.jdunpack(\"i16 i16 u16\");\n    this.setLastCommand(`move ${dx} ${dy} ${time}`);\n  }\n  handleSetButton(pkt) {\n    const [buttons, event] = pkt.jdunpack(\"u16 u8\");\n    const btns = renderHidMouseButtons(buttons);\n    this.setLastCommand(`set buttons ${btns || \"?\"} ${(HidMouseButtonEvent[event] || \"?\").toLocaleLowerCase()}`);\n  }\n  handleWheel(pkt) {\n    const [dy, time] = pkt.jdunpack(\"i16 u16\");\n    this.setLastCommand(`wheel ${dy} ${time}`);\n  }\n};\n\n// src/servers/azureiothubhealthserver.ts\nfunction splitPair(kv) {\n  const i = kv.indexOf(\"=\");\n  if (i < 0)\n    return [kv, \"\"];\n  else\n    return [kv.slice(0, i), kv.slice(i + 1)];\n}\nfunction parsePropertyBag(msg, separator) {\n  const r = {};\n  msg.split(separator || \"&\").map((kv) => splitPair(kv)).forEach((parts) => r[decodeURIComponent(parts[0])] = decodeURIComponent(parts[1]));\n  return r;\n}\nvar AzureIoTHubHealthServer = class extends JDServiceServer {\n  constructor(options, connStringSetting) {\n    super(SRV_AZURE_IOT_HUB_HEALTH, options);\n    this.connStringSetting = connStringSetting;\n    this.isReal = false;\n    var _a;\n    this.hubName = this.addRegister(384 /* HubName */, [\"\"]);\n    this.hubDeviceId = this.addRegister(385 /* HubDeviceId */, [\n      \"\"\n    ]);\n    this.connectionStatus = this.addRegister(386 /* ConnectionStatus */, [1 /* Connected */]);\n    this.connectionStatus.on(CHANGE, () => this.sendEvent(3 /* ConnectionStatusChange */));\n    this.connectionString = ((_a = this.connStringSetting) == null ? void 0 : _a.get()) || \"\";\n    this.addCommand(129 /* Connect */, this.handleConnect.bind(this));\n    this.addCommand(130 /* Disconnect */, this.handleDisconnect.bind(this));\n    this.addCommand(134 /* SetConnectionString */, this.handleSetConnectionString.bind(this));\n  }\n  parsedConnectionString() {\n    return parsePropertyBag(this.connectionString || \"\", \";\");\n  }\n  setConnectionStatus(status) {\n    this.connectionStatus.setValues([status]);\n  }\n  async setConnectionString(newConnectionString) {\n    var _a;\n    console.log(\"set connX: \" + newConnectionString);\n    if (newConnectionString !== this.connectionString) {\n      await this.handleDisconnect();\n      this.connectionString = newConnectionString;\n      (_a = this.connStringSetting) == null ? void 0 : _a.set(newConnectionString);\n      const connStringParts = parsePropertyBag(this.connectionString, \";\");\n      this.hubName.setValues([connStringParts[\"HostName\"] || \"\"]);\n      this.hubDeviceId.setValues([connStringParts[\"DeviceId\"] || \"\"]);\n      this.sendEvent(3 /* ConnectionStatusChange */);\n      this.emit(CHANGE);\n      await this.handleConnect();\n    }\n  }\n  async handleConnect() {\n    if (!this.connectionString) {\n      this.setConnectionStatus(401);\n      return;\n    }\n    this.setConnectionStatus(3 /* Connecting */);\n    if (this.isReal) {\n      this.emit(CONNECT, this.connectionString);\n    } else {\n      await delay(500);\n      this.setConnectionStatus(1 /* Connected */);\n    }\n  }\n  async handleDisconnect() {\n    this.setConnectionStatus(4 /* Disconnecting */);\n    if (this.isReal) {\n      this.emit(DISCONNECT);\n    } else {\n      await delay(500);\n      this.setConnectionStatus(2 /* Disconnected */);\n    }\n  }\n  async handleSetConnectionString(pkt) {\n    await this.setConnectionString(pkt.stringData);\n  }\n};\n\n// src/servers/vibrationmotorserver.ts\nvar _VibrationMotorServer = class extends JDServiceServer {\n  constructor() {\n    super(SRV_VIBRATION_MOTOR);\n    this._animationStep = -1;\n    this.addCommand(128 /* Vibrate */, this.handleVibrate.bind(this));\n    this.on(REFRESH, this.handleRefresh.bind(this));\n  }\n  handleRefresh() {\n    if (!this._animation)\n      return;\n    const { start, pattern } = this._animation;\n    const now = this.device.bus.timestamp;\n    const elapsed = now - start;\n    let t = 0;\n    for (let i = 0; i < pattern.length; ++i) {\n      const [duration, speed] = pattern[i];\n      const dt = duration << 3;\n      t += dt;\n      if (t - dt <= elapsed && t > elapsed) {\n        if (this._animationStep !== i) {\n          this._animationStep = i;\n          this.emit(_VibrationMotorServer.VIBRATE_PATTERN, {\n            duration,\n            speed\n          });\n        }\n        break;\n      }\n    }\n    if (elapsed > t) {\n      this._animation = void 0;\n      this._animationStep = -1;\n      this.emit(_VibrationMotorServer.VIBRATE_PATTERN, {\n        duration: 0,\n        speed: 0\n      });\n      this.emit(CHANGE);\n    }\n  }\n  handleVibrate(pkt) {\n    const [pattern] = pkt.jdunpack(\"r: u8 u0.8\");\n    this._animation = {\n      start: this.device.bus.timestamp,\n      pattern\n    };\n    this._animationStep = -1;\n    if (pattern.length) {\n      const [duration, speed] = pattern[0];\n      this._animationStep = 0;\n      this.emit(_VibrationMotorServer.VIBRATE_PATTERN, {\n        duration,\n        speed\n      });\n    }\n    this.emit(CHANGE);\n  }\n};\nvar VibrationMotorServer = _VibrationMotorServer;\nVibrationMotorServer.VIBRATE_PATTERN = \"vibratePattern\";\n\n// src/servers/wifiserver.ts\nvar WifiServer = class extends JDServiceServer {\n  constructor(options) {\n    super(SRV_WIFI, { intensityValues: [true] });\n    this._lastScanResults = (options == null ? void 0 : options.scanResults) || [];\n    this._knownNetworks = (options == null ? void 0 : options.knownNetworks) || [];\n    this.enabled = this.addRegister(1 /* Enabled */, [true]);\n    this.ssid = this.addRegister(387 /* Ssid */, [\"\"]);\n    this.ipAddress = this.addRegister(385 /* IpAddress */, [\n      new Uint8Array(0)\n    ]);\n    this.eui48 = this.addRegister(386 /* Eui48 */, [\n      new Uint8Array(0)\n    ]);\n    this.addCommand(134 /* Scan */, this.handleScan.bind(this));\n    this.addCommand(130 /* Reconnect */, this.handleReconnect.bind(this));\n    this.addCommand(128 /* LastScanResults */, this.handleLastScanResults.bind(this));\n    this.addCommand(135 /* ListKnownNetworks */, this.handleListKnownNetworks.bind(this));\n    this.addCommand(129 /* AddNetwork */, this.handleAddNetwork.bind(this));\n    this.addCommand(132 /* ForgetAllNetworks */, this.handleForgetAllNetworks.bind(this));\n    this.addCommand(131 /* ForgetNetwork */, this.handleForgetNetwork.bind(this));\n    this.addCommand(133 /* SetNetworkPriority */, this.handleSetNetworkPriority.bind(this));\n    this.ipAddress.on(CHANGE, this.handleIpChange.bind(this));\n    this.enabled.on(CHANGE, this.handleEnabledChange.bind(this));\n  }\n  handleEnabledChange() {\n    const [enabled] = this.enabled.values();\n    if (!enabled)\n      this.disconnect();\n    else\n      this.connect();\n  }\n  handleIpChange() {\n    const [ip] = this.ipAddress.values();\n    if (ip == null ? void 0 : ip.length)\n      this.sendEvent(1 /* GotIp */);\n    else\n      this.sendEvent(2 /* LostIp */);\n  }\n  get scannedKnownNetworks() {\n    return this._lastScanResults.filter((n) => this._knownNetworks.some((kn) => kn.ssid === n.ssid));\n  }\n  handleReconnect() {\n    this.disconnect();\n    if (this.scannedKnownNetworks.length) {\n      console.debug(`wifi: reconnect, connect`);\n      this.enabled.setValues([true]);\n    }\n  }\n  connect() {\n    const network = this.scannedKnownNetworks[0];\n    const { ssid } = network || {};\n    this.ssid.setValues([ssid || \"\"]);\n    this.enabled.setValues([!!ssid]);\n    this.ipAddress.setValues([ssid ? randomBytes(4) : new Uint8Array(0)]);\n  }\n  disconnect() {\n    this.ssid.setValues([\"\"]);\n    this.enabled.setValues([false]);\n    this.ipAddress.setValues([new Uint8Array(0)]);\n  }\n  scan() {\n    this.sendEvent(128 /* ScanComplete */, jdpack(\"u16 u16\", [\n      this._lastScanResults.length,\n      this.scannedKnownNetworks.length\n    ]));\n  }\n  handleScan() {\n    this.scan();\n  }\n  async handleLastScanResults(pkt) {\n    const pipe = OutPipe.from(this.device.bus, pkt, true);\n    await pipe.respondForEach(this._lastScanResults, ({ flags, rssi, channel, bssid, ssid }) => jdpack(\"u32 x[4] i8 u8 b[6] s[33]\", [flags, rssi, channel, bssid, ssid]));\n  }\n  async handleListKnownNetworks(pkt) {\n    const pipe = OutPipe.from(this.device.bus, pkt, true);\n    await pipe.respondForEach(this._knownNetworks, ({ priority, flags, ssid }) => jdpack(\"i16 i16 s\", [\n      priority,\n      flags,\n      ssid\n    ]));\n  }\n  handleAddNetwork(pkt) {\n    const [ssid, password] = pkt.jdunpack(\"z z\");\n    let network = this._knownNetworks.find((n) => n.ssid === ssid);\n    if (!network) {\n      const scanned = this._lastScanResults.find((s) => s.ssid === ssid);\n      this._knownNetworks.push(network = {\n        ssid,\n        flags: scanned == null ? void 0 : scanned.flags,\n        priority: 0,\n        password: \"\"\n      });\n    }\n    network.password = password;\n    this.sendEvent(129 /* NetworksChanged */);\n  }\n  handleForgetAllNetworks() {\n    this._knownNetworks = [];\n    this.disconnect();\n    this.sendEvent(129 /* NetworksChanged */);\n  }\n  handleForgetNetwork(pkt) {\n    const [ssid] = pkt.jdunpack(\"s\");\n    this._knownNetworks = this._knownNetworks.filter((network) => network.ssid !== ssid);\n    const [currentSsid] = this.ssid.values();\n    if (ssid === currentSsid)\n      this.disconnect();\n    this.sendEvent(129 /* NetworksChanged */);\n  }\n  handleSetNetworkPriority(pkt) {\n    const [priority, ssid] = pkt.jdunpack(\"i16 s\");\n    const network = this._knownNetworks.find((network2) => network2.ssid === ssid);\n    if (network)\n      network.priority = priority;\n    this.sendEvent(129 /* NetworksChanged */);\n  }\n};\n\n// src/servers/accelerometerserver.ts\nvar AccelerometerServer = class extends SensorServer {\n  constructor() {\n    super(SRV_ACCELEROMETER, {\n      readingValues: [0.5, 0.5, -(1 - (0.5 * 0.5 + 0.5 * 0.5))],\n      preferredStreamingInterval: 20\n    });\n    this.maxForce = this.addRegister(8 /* MaxForce */, [\n      2\n    ]);\n  }\n};\n\n// src/servers/brailledisplayserver.ts\nvar BrailleDisplayServer = class extends JDServiceServer {\n  constructor(options) {\n    super(SRV_BRAILLE_DISPLAY, options);\n    const { patterns = \"\", length = 12 } = options || {};\n    this.patterns = this.addRegister(2 /* Patterns */, [\n      patterns\n    ]);\n    this.enabled = this.addRegister(1 /* Enabled */, [\n      false\n    ]);\n    this.length = this.addRegister(385 /* Length */, [\n      length\n    ]);\n  }\n};\n\n// src/servers/leddisplayserver.ts\nfunction SCALE02(c, i) {\n  return (c & 255) * (1 + (i & 255)) >> 8;\n}\nvar LedDisplayServer = class extends JDServiceServer {\n  constructor(options) {\n    super(SRV_LED_DISPLAY, options);\n    const { numColumns, maxPower = 200, numPixels = 10 } = options || {};\n    const n = Math.min(MAX_PIXELS_LENGTH, numPixels);\n    this.pixels = this.addRegister(2 /* Pixels */, [\n      new Uint8Array(n * 3)\n    ]);\n    this.brightness = this.addRegister(1 /* Brightness */, [\n      15\n    ]);\n    this.actualBrightness = this.addRegister(384 /* ActualBrightness */, [15]);\n    this.lightType = this.addRegister(385 /* LightType */, [0 /* WS2812B_GRB */]);\n    this.numPixels = this.addRegister(386 /* NumPixels */, [\n      n\n    ]);\n    this.maxPower = this.addRegister(7 /* MaxPower */, [\n      maxPower\n    ]);\n    if (numColumns !== void 0)\n      this.numColumns = this.addRegister(387 /* NumColumns */, [numColumns]);\n    this.brightness.on(CHANGE, () => {\n      this.intensity = this.requested_intensity;\n      this.limit_intensity();\n    });\n    this.pixels.on(CHANGE, () => this.limit_intensity());\n  }\n  get colors() {\n    return this.pixels.data;\n  }\n  get maxpower() {\n    const [r] = this.maxPower.values() || [200];\n    return r;\n  }\n  get numpixels() {\n    const [r] = this.numPixels.values() || [0];\n    return r;\n  }\n  get requested_intensity() {\n    const [r] = this.brightness.values() || [0];\n    return r;\n  }\n  get intensity() {\n    const [r] = this.actualBrightness.values() || [0];\n    return r;\n  }\n  set intensity(v) {\n    this.actualBrightness.setValues([v]);\n  }\n  get enabled() {\n    return this.numpixels > 0 && this.requested_intensity > 0;\n  }\n  limit_intensity() {\n    const pxbuffer = this.pixels.data;\n    const { numpixels, requested_intensity, maxpower } = this;\n    let n = numpixels * 3;\n    const prev_intensity = this.intensity;\n    let intensity = this.intensity;\n    intensity += 1 + (intensity >> 5);\n    if (requested_intensity !== void 0 && intensity > requested_intensity)\n      intensity = requested_intensity;\n    let current_full = 0;\n    let current = 0;\n    let current_prev = 0;\n    let di = 0;\n    while (n--) {\n      const v = pxbuffer[di++];\n      current += SCALE02(v, intensity);\n      current_prev += SCALE02(v, prev_intensity);\n      current_full += v;\n    }\n    current *= 46;\n    current_prev *= 46;\n    current_full *= 46;\n    const base_current = 14e3 + 930 * numpixels;\n    const current_limit = maxpower * 1e3 - base_current;\n    if (current <= current_limit) {\n      this.intensity = intensity;\n      return;\n    }\n    if (current_prev <= current_limit) {\n      return;\n    }\n    let inten = current_limit / (current_full >> 8) - 1;\n    if (inten < 0)\n      inten = 0;\n    this.intensity = inten;\n  }\n};\n\n// src/servers/powersupplyserver.ts\nvar PowerSupplyServer = class extends JDServiceServer {\n  constructor(options) {\n    super(SRV_POWER_SUPPLY);\n    const { outputVoltage, minVoltage, maxVoltage } = options || {};\n    this.enabled = this.addRegister(1 /* Enabled */, [false]);\n    this.outputVoltage = this.addRegister(2 /* OutputVoltage */, [\n      outputVoltage\n    ]);\n    this.minVoltage = this.addRegister(272 /* MinimumVoltage */, [\n      minVoltage\n    ]);\n    this.maxVoltage = this.addRegister(273 /* MaximumVoltage */, [\n      maxVoltage\n    ]);\n  }\n};\n\n// src/servers/servers.ts\nvar indoorThermometerOptions = {\n  instanceName: \"indoor\",\n  readingValues: [21.5],\n  streamingInterval: 1e3,\n  minReading: -5,\n  maxReading: 50,\n  readingError: [0.25],\n  variant: 2 /* Indoor */\n};\nvar outdoorThermometerOptions = {\n  instanceName: \"temperature\",\n  readingValues: [21.5],\n  streamingInterval: 1e3,\n  minReading: -40,\n  maxReading: 120,\n  readingError: [0.25],\n  variant: 1 /* Outdoor */\n};\nvar outdoorHumidityOptions = {\n  instanceName: \"humidity\",\n  streamingInterval: 1e3,\n  readingValues: [40],\n  readingError: [0.1],\n  minReading: 10,\n  maxReading: 99\n};\nvar soilThermometerOptions = {\n  instanceName: \"temperature\",\n  readingValues: [15],\n  streamingInterval: 1e3,\n  minReading: -55,\n  maxReading: 125,\n  readingError: [0.5],\n  variant: 1 /* Outdoor */\n};\nvar medicalThermometerOptions = {\n  instanceName: \"medical\",\n  readingValues: [37.5],\n  streamingInterval: 1e3,\n  minReading: 35,\n  maxReading: 42,\n  readingError: [0.5],\n  variant: 3 /* Body */\n};\nvar barometerOptions = {\n  instanceName: \"pressure\",\n  readingValues: [1013],\n  readingError: [0.4],\n  streamingInterval: 1e3\n};\nvar sonarOptions = {\n  variant: 1 /* Ultrasonic */,\n  minReading: 0.02,\n  maxReading: 4,\n  readingValues: [1]\n};\nvar SG90_STALL_TORQUE = 1.8;\nvar SG90_RESPONSE_SPEED = 0.12;\nvar microServoOptions = {\n  stallTorque: SG90_STALL_TORQUE,\n  responseSpeed: SG90_RESPONSE_SPEED,\n  minAngle: -90,\n  maxAngle: 90\n};\nvar microServo270Options = {\n  stallTorque: SG90_STALL_TORQUE,\n  responseSpeed: SG90_RESPONSE_SPEED,\n  minAngle: -135,\n  maxAngle: 135\n};\nvar microServo360Options = {\n  stallTorque: SG90_STALL_TORQUE,\n  responseSpeed: SG90_RESPONSE_SPEED * 2,\n  minAngle: -180,\n  maxAngle: 180\n};\nvar windDirectionOptions = {\n  readingValues: [0],\n  readingError: [5],\n  streamingInterval: 1e3\n};\nvar windSpeedOptions = {\n  readingValues: [0],\n  readingError: [0.5],\n  streamingInterval: 1e3,\n  registerValues: [{ code: 261 /* MaxWindSpeed */, values: [55] }]\n};\nvar eCO2Options = {\n  readingValues: [4e3],\n  streamingInterval: 1e3,\n  variant: 1 /* VOC */\n};\nvar CO2Options = {\n  readingValues: [4e3],\n  streamingInterval: 1e3,\n  variant: 2 /* NDIR */\n};\nvar tvocOptions = {\n  readingValues: [500],\n  streamingInterval: 1e3\n};\nvar microbitSounds = [\n  [0, \"giggle\"],\n  [0, \"happy\"],\n  [0, \"hello\"],\n  [0, \"mysterious\"],\n  [0, \"sad\"],\n  [0, \"slide\"],\n  [0, \"soaring\"],\n  [0, \"spring\"],\n  [0, \"twinkle\"],\n  [0, \"yawn\"]\n];\nvar soundLevel = {\n  readingValues: [0],\n  inactiveThreshold: 10,\n  activeThreshold: 70,\n  intensityValues: [false]\n};\nvar soundSpectrum = {\n  readingValues: [new Uint8Array(0)],\n  intensityValues: [false],\n  registerValues: [\n    {\n      code: 128 /* FftPow2Size */,\n      values: [5]\n    },\n    {\n      code: 129 /* MinDecibels */,\n      values: [-100]\n    },\n    {\n      code: 130 /* MaxDecibels */,\n      values: [-30]\n    },\n    {\n      code: 131 /* SmoothingTimeConstant */,\n      values: [0.8]\n    }\n  ]\n};\nvar _providerDefinitions;\nfunction initProviders() {\n  return _providerDefinitions = _providerDefinitions || [\n    {\n      name: \"7-segment (4 segments)\",\n      serviceClasses: [SRV_SEVEN_SEGMENT_DISPLAY],\n      services: () => [\n        new JDServiceServer(SRV_SEVEN_SEGMENT_DISPLAY, {\n          intensityValues: [65535],\n          valueValues: [fromHex(\"ff112233\")],\n          registerValues: [\n            {\n              code: 384 /* DigitCount */,\n              values: [4]\n            },\n            {\n              code: 385 /* DecimalPoint */,\n              values: [true]\n            }\n          ]\n        })\n      ]\n    },\n    {\n      name: \"7-segment (8 segments)\",\n      serviceClasses: [SRV_SEVEN_SEGMENT_DISPLAY],\n      services: () => [\n        new JDServiceServer(SRV_SEVEN_SEGMENT_DISPLAY, {\n          intensityValues: [65535],\n          valueValues: [fromHex(\"0102040810204080\")],\n          registerValues: [\n            {\n              code: 384 /* DigitCount */,\n              values: [8]\n            },\n            {\n              code: 385 /* DecimalPoint */,\n              values: [true]\n            }\n          ]\n        })\n      ]\n    },\n    {\n      name: \"accelerometer\",\n      serviceClasses: [SRV_ACCELEROMETER],\n      services: () => [new AccelerometerServer()]\n    },\n    {\n      name: \"barometer\",\n      serviceClasses: [SRV_BAROMETER],\n      services: () => [\n        new AnalogSensorServer(SRV_BAROMETER, barometerOptions)\n      ]\n    },\n    {\n      name: \"bitradio\",\n      serviceClasses: [SRV_BIT_RADIO],\n      services: () => [new BitRadioServer()]\n    },\n    {\n      name: \"Braille display (4 patterns)\",\n      serviceClasses: [SRV_BRAILLE_DISPLAY],\n      services: () => [\n        new BrailleDisplayServer({\n          patterns: \"\\u2803\",\n          length: 4\n        })\n      ]\n    },\n    {\n      name: \"Braille display (16 patterns)\",\n      serviceClasses: [SRV_BRAILLE_DISPLAY],\n      services: () => [\n        new BrailleDisplayServer({\n          patterns: \"\\u2803\",\n          length: 16\n        })\n      ]\n    },\n    {\n      name: \"Braille display (32 patterns)\",\n      serviceClasses: [SRV_BRAILLE_DISPLAY],\n      services: () => [\n        new BrailleDisplayServer({\n          patterns: \"\\u2803\",\n          length: 32\n        })\n      ]\n    },\n    {\n      name: \"button\",\n      serviceClasses: [SRV_BUTTON],\n      services: () => [new ButtonServer()]\n    },\n    {\n      name: \"button (2x)\",\n      serviceClasses: [SRV_BUTTON],\n      services: () => [\n        new ButtonServer(\"B0\"),\n        new ButtonServer(\"B1\")\n      ]\n    },\n    {\n      name: \"button (4x)\",\n      serviceClasses: [SRV_BUTTON],\n      services: () => Array(4).fill(0).map((_, i) => new ButtonServer(`B${i}`))\n    },\n    {\n      name: \"buzzer\",\n      serviceClasses: [SRV_BUZZER],\n      services: () => [new BuzzerServer()]\n    },\n    {\n      name: \"capacitive button\",\n      serviceClasses: [SRV_BUTTON],\n      services: () => {\n        const button = new ButtonServer();\n        const config = new CapacitiveButtonServer();\n        button.threshold = config.threshold;\n        return [button, config];\n      }\n    },\n    {\n      name: \"capacitive button (6x)\",\n      serviceClasses: [SRV_BUTTON],\n      services: () => Array(6).fill(0).map((_, i) => new ButtonServer(`C${i}`, true))\n    },\n    {\n      name: \"capacitive button (12x)\",\n      serviceClasses: [SRV_BUTTON],\n      services: () => Array(12).fill(0).map((_, i) => new ButtonServer(`C${i}`, true))\n    },\n    {\n      name: \"character screen (LDC, 16x2)\",\n      serviceClasses: [SRV_CHARACTER_SCREEN],\n      services: () => [\n        new CharacterScreenServer({ message: \"hello\\nworld!\" })\n      ]\n    },\n    {\n      name: \"character screen (OLED, 32x8, RTL)\",\n      serviceClasses: [SRV_CHARACTER_SCREEN],\n      services: () => [\n        new CharacterScreenServer({\n          message: \"hello\\nworld!\",\n          columns: 32,\n          rows: 8,\n          variant: 2 /* OLED */,\n          textDirection: 2 /* RightToLeft */\n        })\n      ]\n    },\n    {\n      name: \"character screen (Braille, 4x1)\",\n      serviceClasses: [SRV_CHARACTER_SCREEN],\n      services: () => [\n        new CharacterScreenServer({\n          message: \"hi\",\n          columns: 4,\n          rows: 1,\n          variant: 3 /* Braille */,\n          textDirection: 1 /* LeftToRight */\n        })\n      ]\n    },\n    {\n      name: \"character screen (Braille, 16x1)\",\n      serviceClasses: [SRV_CHARACTER_SCREEN],\n      services: () => [\n        new CharacterScreenServer({\n          message: \"hi\",\n          columns: 16,\n          rows: 1,\n          variant: 3 /* Braille */,\n          textDirection: 1 /* LeftToRight */\n        })\n      ]\n    },\n    {\n      name: \"character screen (Braille, 32x1)\",\n      serviceClasses: [SRV_CHARACTER_SCREEN],\n      services: () => [\n        new CharacterScreenServer({\n          message: \"hi\",\n          columns: 32,\n          rows: 1,\n          variant: 3 /* Braille */,\n          textDirection: 1 /* LeftToRight */\n        })\n      ]\n    },\n    {\n      name: \"color\",\n      serviceClasses: [SRV_COLOR],\n      services: () => [\n        new SensorServer(SRV_COLOR, {\n          readingValues: [0.5, 0, 0.5],\n          preferredStreamingInterval: 1e3\n        })\n      ]\n    },\n    {\n      name: \"compass\",\n      serviceClasses: [SRV_COMPASS],\n      services: () => [new CompassServer()]\n    },\n    {\n      name: \"distance (sonar)\",\n      serviceClasses: [SRV_DISTANCE],\n      services: () => [\n        new AnalogSensorServer(SRV_DISTANCE, sonarOptions)\n      ]\n    },\n    {\n      name: \"DMX\",\n      serviceClasses: [SRV_DMX],\n      services: () => [new DMXServer()]\n    },\n    {\n      name: \"eCO\\u2082\",\n      serviceClasses: [SRV_E_CO2],\n      services: () => [\n        new AnalogSensorServer(SRV_E_CO2, eCO2Options)\n      ]\n    },\n    {\n      name: \"eCO\\u2082 + TVOC\",\n      serviceClasses: [SRV_E_CO2, SRV_TVOC],\n      services: () => [\n        new AnalogSensorServer(SRV_E_CO2, eCO2Options),\n        new AnalogSensorServer(SRV_TVOC, tvocOptions)\n      ]\n    },\n    {\n      name: \"eCO\\u2082 + humidity + thermometer\",\n      serviceClasses: [SRV_E_CO2, SRV_HUMIDITY, SRV_TEMPERATURE],\n      services: () => [\n        new AnalogSensorServer(SRV_E_CO2, CO2Options),\n        new AnalogSensorServer(SRV_HUMIDITY, outdoorHumidityOptions),\n        new AnalogSensorServer(SRV_TEMPERATURE, indoorThermometerOptions)\n      ]\n    },\n    {\n      name: \"flex sensor\",\n      serviceClasses: [SRV_FLEX],\n      services: () => [\n        new AnalogSensorServer(SRV_FLEX, {\n          readingValues: [0.5]\n        })\n      ]\n    },\n    {\n      name: \"gyroscope\",\n      serviceClasses: [SRV_GYROSCOPE],\n      services: () => [\n        new SensorServer(SRV_GYROSCOPE, {\n          readingValues: [0, 0, 0]\n        })\n      ]\n    },\n    {\n      name: \"heart rate\",\n      serviceClasses: [SRV_HEART_RATE],\n      services: () => [\n        new AnalogSensorServer(SRV_HEART_RATE, {\n          readingValues: [80],\n          streamingInterval: 100,\n          variant: 1 /* Finger */\n        })\n      ]\n    },\n    {\n      name: \"humidity\",\n      serviceClasses: [SRV_HUMIDITY],\n      services: () => [\n        new AnalogSensorServer(SRV_HUMIDITY, outdoorHumidityOptions)\n      ]\n    },\n    {\n      name: \"humidity + temperature\",\n      serviceClasses: [SRV_HUMIDITY, SRV_TEMPERATURE],\n      services: () => [\n        new AnalogSensorServer(SRV_TEMPERATURE, outdoorThermometerOptions),\n        new AnalogSensorServer(SRV_HUMIDITY, outdoorHumidityOptions)\n      ]\n    },\n    {\n      name: \"humidity + temperature + barometer\",\n      serviceClasses: [SRV_HUMIDITY, SRV_TEMPERATURE, SRV_BAROMETER],\n      services: () => [\n        new AnalogSensorServer(SRV_TEMPERATURE, outdoorThermometerOptions),\n        new AnalogSensorServer(SRV_HUMIDITY, outdoorHumidityOptions),\n        new AnalogSensorServer(SRV_BAROMETER, barometerOptions)\n      ]\n    },\n    {\n      name: \"HID keyboard\",\n      serviceClasses: [SRV_HID_KEYBOARD],\n      services: () => [new HIDKeyboardServer()]\n    },\n    {\n      name: \"HID mouse\",\n      serviceClasses: [SRV_HID_MOUSE],\n      services: () => [new HIDMouseServer()]\n    },\n    {\n      name: \"illuminance\",\n      serviceClasses: [SRV_ILLUMINANCE],\n      services: () => [\n        new AnalogSensorServer(SRV_ILLUMINANCE, {\n          readingValues: [1]\n        })\n      ]\n    },\n    {\n      name: \"gamepad (stick + A + B)\",\n      serviceClasses: [SRV_GAMEPAD],\n      services: () => [\n        new GamepadServer({\n          variant: 1 /* Thumb */,\n          buttonsAvailable: 16 /* A */ | 32 /* B */\n        })\n      ]\n    },\n    {\n      name: \"gamepad (stick)\",\n      serviceClasses: [SRV_GAMEPAD],\n      services: () => [\n        new GamepadServer({\n          variant: 1 /* Thumb */\n        })\n      ]\n    },\n    {\n      name: \"gamepad (stick+A)\",\n      serviceClasses: [SRV_GAMEPAD],\n      services: () => [\n        new GamepadServer({\n          variant: 1 /* Thumb */,\n          buttonsAvailable: 16 /* A */\n        })\n      ]\n    },\n    {\n      name: \"gamepad (Dpad + all buttons)\",\n      serviceClasses: [SRV_GAMEPAD],\n      services: () => [\n        new GamepadServer({\n          variant: 4 /* Gamepad */,\n          buttonsAvailable: GAMEPAD_ARCADE_BUTTONS\n        })\n      ]\n    },\n    {\n      name: \"gamepad (only DPad+A/B)\",\n      serviceClasses: [SRV_GAMEPAD],\n      services: () => [\n        new GamepadServer({\n          variant: 4 /* Gamepad */,\n          buttonsAvailable: GAMEPAD_DPAD_AB_BUTTONS\n        })\n      ]\n    },\n    {\n      name: \"RGB LED (RGB through hole)\",\n      serviceClasses: [SRV_LED],\n      services: () => [\n        new LEDServer({\n          variant: 1 /* ThroughHole */,\n          ledCount: 1,\n          color: [255, 0, 0]\n        })\n      ]\n    },\n    {\n      name: \"LED (5x blue through hole)\",\n      serviceClasses: [SRV_LED],\n      services: () => [\n        new LEDServer({\n          variant: 1 /* ThroughHole */,\n          waveLength: 450,\n          ledCount: 5,\n          color: [0, 0, 255]\n        })\n      ]\n    },\n    {\n      name: \"LED matrix (5x5 micro:bit)\",\n      serviceClasses: [SRV_DOT_MATRIX],\n      services: () => [\n        new DotMatrixServer(5, 5, {\n          brightness: 128,\n          variant: 1 /* LED */\n        })\n      ]\n    },\n    {\n      name: \"LED matrix (8x8)\",\n      serviceClasses: [SRV_DOT_MATRIX],\n      services: () => [\n        new DotMatrixServer(8, 8, {\n          brightness: 128,\n          variant: 1 /* LED */\n        })\n      ]\n    },\n    {\n      name: \"LED matrix (11x7)\",\n      serviceClasses: [SRV_DOT_MATRIX],\n      services: () => [\n        new DotMatrixServer(11, 7, {\n          brightness: 128,\n          variant: 1 /* LED */\n        })\n      ]\n    },\n    {\n      name: \"Braille matrix (8x4)\",\n      serviceClasses: [SRV_DOT_MATRIX],\n      services: () => [\n        new DotMatrixServer(8, 4, {\n          variant: 2 /* Braille */\n        })\n      ]\n    },\n    {\n      name: \"LED pixel ring 10\",\n      serviceClasses: [SRV_LED_DISPLAY],\n      services: () => [\n        new LedDisplayServer({\n          numPixels: 10,\n          variant: 2 /* Ring */\n        })\n      ]\n    },\n    {\n      name: \"LED pixel ring 12\",\n      serviceClasses: [SRV_LED_DISPLAY],\n      services: () => [\n        new LedDisplayServer({\n          numPixels: 12,\n          variant: 2 /* Ring */\n        })\n      ]\n    },\n    {\n      name: \"LED pixel ring 16\",\n      serviceClasses: [SRV_LED_DISPLAY],\n      services: () => [\n        new LedDisplayServer({\n          numPixels: 16,\n          variant: 2 /* Ring */\n        })\n      ]\n    },\n    {\n      name: \"LED pixel ring 24\",\n      serviceClasses: [SRV_LED_DISPLAY],\n      services: () => [\n        new LedDisplayServer({\n          numPixels: 24,\n          variant: 2 /* Ring */\n        })\n      ]\n    },\n    {\n      name: \"LED pixel jewel 7\",\n      serviceClasses: [SRV_LED_DISPLAY],\n      services: () => [\n        new LedDisplayServer({\n          numPixels: 7,\n          variant: 4 /* Jewel */\n        })\n      ]\n    },\n    {\n      name: \"LED pixel stick 8\",\n      serviceClasses: [SRV_LED_DISPLAY],\n      services: () => [\n        new LedDisplayServer({\n          numPixels: 8,\n          variant: 3 /* Stick */\n        })\n      ]\n    },\n    {\n      name: \"LED pixel strip 30\",\n      serviceClasses: [SRV_LED_STRIP],\n      services: () => [\n        new LedStripServer({\n          numPixels: 60,\n          maxPower: 1e3,\n          variant: 1 /* Strip */\n        })\n      ]\n    },\n    {\n      name: \"LED pixel strip 60\",\n      serviceClasses: [SRV_LED_STRIP],\n      services: () => [\n        new LedStripServer({\n          numPixels: 60,\n          maxPower: 2e3,\n          variant: 1 /* Strip */\n        })\n      ]\n    },\n    {\n      name: \"LED pixel strip 150\",\n      serviceClasses: [SRV_LED_STRIP],\n      services: () => [\n        new LedStripServer({\n          numPixels: 150,\n          maxPower: 5e3,\n          variant: 1 /* Strip */\n        })\n      ]\n    },\n    {\n      name: \"LED pixel strip 300\",\n      serviceClasses: [SRV_LED_STRIP],\n      services: () => [\n        new LedStripServer({\n          numPixels: 300,\n          maxPower: 5e3,\n          variant: 1 /* Strip */\n        })\n      ]\n    },\n    {\n      name: \"LED pixel matrix (4x4)\",\n      serviceClasses: [SRV_LED_DISPLAY],\n      services: () => [\n        new LedDisplayServer({\n          numPixels: 16,\n          variant: 5 /* Matrix */\n        })\n      ]\n    },\n    {\n      name: \"LED pixel matrix (8x8)\",\n      serviceClasses: [SRV_LED_DISPLAY],\n      services: () => [\n        new LedDisplayServer({\n          numPixels: 64,\n          variant: 5 /* Matrix */\n        })\n      ]\n    },\n    {\n      name: \"LED pixel matrix (16x4)\",\n      serviceClasses: [SRV_LED_DISPLAY],\n      services: () => [\n        new LedDisplayServer({\n          numPixels: 64,\n          numColumns: 16,\n          variant: 5 /* Matrix */\n        })\n      ]\n    },\n    {\n      name: \"light bulb\",\n      serviceClasses: [SRV_LIGHT_BULB],\n      services: () => [\n        new JDServiceServer(SRV_LIGHT_BULB, {\n          intensityValues: [0],\n          isActive: (values2) => !!(values2 == null ? void 0 : values2[0]),\n          intensityProcessor: (values2) => {\n            const newValues = [values2[0] > 0 ? 1 : 0];\n            return newValues;\n          },\n          registerValues: [\n            {\n              code: 384 /* Dimmable */,\n              values: [false]\n            }\n          ]\n        })\n      ]\n    },\n    {\n      name: \"light bulb (dimmeable)\",\n      serviceClasses: [SRV_LIGHT_BULB],\n      services: () => [\n        new JDServiceServer(SRV_LIGHT_BULB, {\n          intensityValues: [0],\n          isActive: (values2) => !!(values2 == null ? void 0 : values2[0]),\n          registerValues: [\n            {\n              code: 384 /* Dimmable */,\n              values: [true]\n            }\n          ]\n        })\n      ]\n    },\n    {\n      name: \"light level (photo-resistor)\",\n      serviceClasses: [SRV_LIGHT_LEVEL],\n      services: () => [\n        new SensorServer(SRV_LIGHT_LEVEL, {\n          readingValues: [0.5],\n          variant: 1 /* PhotoResistor */\n        })\n      ]\n    },\n    {\n      name: \"line tracker (digital)\",\n      serviceClasses: [SRV_REFLECTED_LIGHT],\n      services: () => [new ReflectedLightServer()]\n    },\n    {\n      name: \"line tracker (2x digital)\",\n      serviceClasses: [SRV_REFLECTED_LIGHT],\n      services: () => [\n        new ReflectedLightServer(),\n        new ReflectedLightServer()\n      ]\n    },\n    {\n      name: \"line tracker (analog)\",\n      serviceClasses: [SRV_REFLECTED_LIGHT],\n      services: () => [\n        new ReflectedLightServer({\n          variant: 2 /* InfraredAnalog */\n        })\n      ]\n    },\n    {\n      name: \"matrix keypad (3x4)\",\n      serviceClasses: [SRV_MATRIX_KEYPAD],\n      services: () => [\n        new MatrixKeypadServer(3, 4, [\n          \"0\",\n          \"1\",\n          \"2\",\n          \"3\",\n          \"4\",\n          \"5\",\n          \"6\",\n          \"7\",\n          \"8\",\n          \"*\",\n          \"0\",\n          \"#\"\n        ])\n      ]\n    },\n    {\n      name: \"matrix keypad (4x4)\",\n      serviceClasses: [SRV_MATRIX_KEYPAD],\n      services: () => [\n        new MatrixKeypadServer(4, 4, [\n          \"0\",\n          \"1\",\n          \"2\",\n          \"A\",\n          \"3\",\n          \"4\",\n          \"5\",\n          \"B\",\n          \"6\",\n          \"7\",\n          \"8\",\n          \"C\",\n          \"*\",\n          \"0\",\n          \"#\",\n          \"D\"\n        ])\n      ]\n    },\n    {\n      name: \"matrix keypad (1x4)\",\n      serviceClasses: [SRV_MATRIX_KEYPAD],\n      services: () => [\n        new MatrixKeypadServer(4, 1, [\"1\", \"2\", \"3\", \"4\"])\n      ]\n    },\n    {\n      name: \"motion\",\n      serviceClasses: [SRV_MOTION],\n      services: () => [\n        new SensorServer(SRV_MOTION, {\n          readingValues: [false],\n          streamingInterval: 1e3\n        })\n      ]\n    },\n    {\n      name: \"motor\",\n      serviceClasses: [SRV_MOTOR],\n      services: () => [new MotorServer()],\n      resetIn: true\n    },\n    {\n      name: \"protocol test\",\n      serviceClasses: [SRV_PROTO_TEST],\n      services: () => [new ProtocolTestServer()]\n    },\n    {\n      name: \"pulse oxymeter\",\n      serviceClasses: [SRV_PULSE_OXIMETER],\n      services: () => [\n        new SensorServer(SRV_PULSE_OXIMETER, {\n          readingValues: [98],\n          streamingInterval: 1e3\n        })\n      ]\n    },\n    {\n      name: \"power supply (5v)\",\n      serviceClasses: [SRV_POWER_SUPPLY],\n      services: () => [\n        new PowerSupplyServer({\n          outputVoltage: 1e3,\n          minVoltage: 0,\n          maxVoltage: 5e3\n        })\n      ]\n    },\n    {\n      name: \"oxymeter + heart beat\",\n      serviceClasses: [SRV_PULSE_OXIMETER, SRV_HEART_RATE],\n      services: () => [\n        new SensorServer(SRV_PULSE_OXIMETER, {\n          readingValues: [98],\n          streamingInterval: 1e3\n        }),\n        new AnalogSensorServer(SRV_HEART_RATE, {\n          readingValues: [80],\n          streamingInterval: 1e3,\n          variant: 1 /* Finger */\n        })\n      ]\n    },\n    {\n      name: \"power\",\n      serviceClasses: [SRV_POWER],\n      services: () => [new PowerServer()]\n    },\n    {\n      name: \"RNG (random number generator)\",\n      serviceClasses: [SRV_RNG],\n      services: () => [new RandomNumberGeneratorServer()]\n    },\n    {\n      name: \"rain gauge\",\n      serviceClasses: [SRV_RAIN_GAUGE],\n      services: () => [new RainGaugeServer()]\n    },\n    {\n      name: \"real time clock\",\n      serviceClasses: [SRV_REAL_TIME_CLOCK],\n      services: () => [new RealTimeClockServer()]\n    },\n    {\n      name: \"relay (EM/10A)\",\n      serviceClasses: [SRV_RELAY],\n      services: () => [\n        new JDServiceServer(SRV_RELAY, {\n          intensityValues: [false],\n          isActive: (values2) => !!(values2 == null ? void 0 : values2[0]),\n          variant: 1 /* Electromechanical */,\n          registerValues: [\n            {\n              code: 384 /* MaxSwitchingCurrent */,\n              values: [10]\n            }\n          ]\n        })\n      ]\n    },\n    {\n      name: \"relay 4x (SSR/5A)\",\n      serviceClasses: [SRV_RELAY],\n      services: () => Array(4).fill(0).map(() => new JDServiceServer(SRV_RELAY, {\n        intensityValues: [false],\n        isActive: (values2) => !!(values2 == null ? void 0 : values2[0]),\n        variant: 2 /* SolidState */,\n        registerValues: [\n          {\n            code: 384 /* MaxSwitchingCurrent */,\n            values: [5]\n          }\n        ]\n      }))\n    },\n    {\n      name: \"rotary encoder\",\n      serviceClasses: [SRV_ROTARY_ENCODER],\n      services: () => [new RotaryEncoderServer()]\n    },\n    {\n      name: \"rotary encoder + button\",\n      serviceClasses: [SRV_ROTARY_ENCODER, SRV_BUTTON],\n      services: () => [new RotaryEncoderServer(), new ButtonServer()]\n    },\n    {\n      name: \"rotary potentiometer\",\n      serviceClasses: [SRV_POTENTIOMETER],\n      services: () => [\n        new AnalogSensorServer(SRV_POTENTIOMETER, {\n          variant: 2 /* Rotary */,\n          readingValues: [0.5]\n        })\n      ]\n    },\n    {\n      name: \"servo\",\n      serviceClasses: [SRV_SERVO],\n      services: () => [new ServoServer(microServoOptions)],\n      resetIn: true\n    },\n    {\n      name: \"servo (270\\xB0)\",\n      serviceClasses: [SRV_SERVO],\n      services: () => [new ServoServer(microServo270Options)],\n      resetIn: true\n    },\n    {\n      name: \"servo (360\\xB0)\",\n      serviceClasses: [SRV_SERVO],\n      services: () => [new ServoServer(microServo360Options)],\n      resetIn: true\n    },\n    {\n      name: \"servo x 2\",\n      serviceClasses: [SRV_SERVO],\n      resetIn: true,\n      services: () => Array(2).fill(0).map((_, i) => new ServoServer({\n        ...microServoOptions,\n        instanceName: `S${i}`\n      }))\n    },\n    {\n      name: \"servo x 4\",\n      serviceClasses: [SRV_SERVO],\n      resetIn: true,\n      services: () => Array(4).fill(0).map((_, i) => new ServoServer({\n        ...microServoOptions,\n        instanceName: `S${i}`\n      }))\n    },\n    {\n      name: \"servo x 6\",\n      serviceClasses: [SRV_SERVO],\n      resetIn: true,\n      services: () => Array(6).fill(0).map((_, i) => new ServoServer({\n        ...microServoOptions,\n        instanceName: `S${i}`\n      }))\n    },\n    {\n      name: \"servo x 16\",\n      serviceClasses: [SRV_SERVO],\n      resetIn: true,\n      services: () => Array(16).fill(0).map((_, i) => new ServoServer({\n        ...microServoOptions,\n        instanceName: `S${i}`\n      }))\n    },\n    {\n      name: \"settings\",\n      serviceClasses: [SRV_SETTINGS],\n      services: () => [new SettingsServer()]\n    },\n    {\n      name: \"slider (potentiometer)\",\n      serviceClasses: [SRV_POTENTIOMETER],\n      services: () => [\n        new AnalogSensorServer(SRV_POTENTIOMETER, {\n          variant: 1 /* Slider */\n        })\n      ]\n    },\n    {\n      name: \"soil moisture\",\n      serviceClasses: [SRV_SOIL_MOISTURE],\n      services: () => [\n        new AnalogSensorServer(SRV_SOIL_MOISTURE, {\n          readingValues: [0.5],\n          readingError: [0.05],\n          streamingInterval: 1e3\n        })\n      ]\n    },\n    {\n      name: \"speech synthesis\",\n      serviceClasses: [SRV_SPEECH_SYNTHESIS],\n      services: () => [new SpeechSynthesisServer()]\n    },\n    {\n      name: \"solenoid\",\n      serviceClasses: [SRV_SOLENOID],\n      services: () => [\n        new JDServiceServer(SRV_SOLENOID, {\n          intensityValues: [0]\n        })\n      ]\n    },\n    {\n      name: \"sound level\",\n      serviceClasses: [SRV_SOUND_LEVEL],\n      services: () => [\n        new AnalogSensorServer(SRV_SOUND_LEVEL, soundLevel)\n      ]\n    },\n    {\n      name: \"sound spectrum\",\n      serviceClasses: [SRV_SOUND_SPECTRUM],\n      services: () => [\n        new SensorServer(SRV_SOUND_SPECTRUM, soundSpectrum)\n      ]\n    },\n    {\n      name: \"sound player (micro:bit v2 sounds)\",\n      serviceClasses: [SRV_SOUND_PLAYER],\n      services: () => [new SoundPlayerServer(microbitSounds)]\n    },\n    {\n      name: \"switch (slide)\",\n      serviceClasses: [SRV_SWITCH],\n      services: () => [\n        new SwitchServer({ variant: 1 /* Slide */ })\n      ]\n    },\n    {\n      name: \"switch (push button)\",\n      serviceClasses: [SRV_SWITCH],\n      services: () => [\n        new SwitchServer({ variant: 3 /* PushButton */ })\n      ]\n    },\n    {\n      name: \"switch (toggle)\",\n      serviceClasses: [SRV_SWITCH],\n      services: () => [\n        new SwitchServer({ variant: 5 /* Toggle */ })\n      ]\n    },\n    {\n      name: \"switch (tilt)\",\n      serviceClasses: [SRV_SWITCH],\n      services: () => [\n        new SwitchServer({ variant: 2 /* Tilt */ })\n      ]\n    },\n    {\n      name: \"switch (proximity)\",\n      serviceClasses: [SRV_SWITCH],\n      services: () => [\n        new SwitchServer({\n          variant: 6 /* Proximity */\n        })\n      ]\n    },\n    {\n      name: \"thermometer (outdoor)\",\n      serviceClasses: [SRV_TEMPERATURE],\n      services: () => [\n        new AnalogSensorServer(SRV_TEMPERATURE, outdoorThermometerOptions)\n      ]\n    },\n    {\n      name: \"thermometer (soil)\",\n      serviceClasses: [SRV_TEMPERATURE],\n      services: () => [\n        new AnalogSensorServer(SRV_TEMPERATURE, soilThermometerOptions)\n      ]\n    },\n    {\n      name: \"thermometer (medical)\",\n      serviceClasses: [SRV_TEMPERATURE],\n      services: () => [\n        new AnalogSensorServer(SRV_TEMPERATURE, medicalThermometerOptions)\n      ]\n    },\n    {\n      name: \"traffic light\",\n      serviceClasses: [SRV_TRAFFIC_LIGHT],\n      services: () => [new TrafficLightServer()]\n    },\n    {\n      name: \"traffic crossing (4 x lights)\",\n      serviceClasses: [SRV_TRAFFIC_LIGHT],\n      services: () => Array(4).fill(0).map(() => new TrafficLightServer())\n    },\n    {\n      name: \"TVOC\",\n      serviceClasses: [SRV_TVOC],\n      services: () => [new AnalogSensorServer(SRV_TVOC, tvocOptions)]\n    },\n    {\n      name: \"UV index\",\n      serviceClasses: [SRV_UV_INDEX],\n      services: () => [\n        new AnalogSensorServer(SRV_UV_INDEX, {\n          readingValues: [5],\n          minReading: 0,\n          maxReading: 11,\n          streamingInterval: 1e3\n        })\n      ]\n    },\n    {\n      name: \"vibration motor\",\n      serviceClasses: [SRV_VIBRATION_MOTOR],\n      services: () => [new VibrationMotorServer()]\n    },\n    {\n      name: \"water level\",\n      serviceClasses: [SRV_WATER_LEVEL],\n      services: () => [\n        new AnalogSensorServer(SRV_WATER_LEVEL, {\n          readingValues: [0.5],\n          streamingInterval: 1e3\n        })\n      ]\n    },\n    {\n      name: \"weight scale (jewelry)\",\n      serviceClasses: [SRV_WEIGHT_SCALE],\n      services: () => [\n        new AnalogSensorServer(SRV_WEIGHT_SCALE, {\n          readingValues: [1e-3],\n          variant: 3 /* Jewelry */,\n          maxReading: 0.2,\n          minReading: 5e-4,\n          readingResolution: 1e-5\n        })\n      ]\n    },\n    {\n      name: \"weight scale (body)\",\n      serviceClasses: [SRV_WEIGHT_SCALE],\n      services: () => [\n        new AnalogSensorServer(SRV_WEIGHT_SCALE, {\n          readingValues: [60],\n          variant: 1 /* Body */,\n          maxReading: 180,\n          readingResolution: 0.1\n        })\n      ]\n    },\n    {\n      name: \"weight scale (food)\",\n      serviceClasses: [SRV_WEIGHT_SCALE],\n      services: () => [\n        new AnalogSensorServer(SRV_WEIGHT_SCALE, {\n          readingValues: [0.5],\n          variant: 2 /* Food */,\n          maxReading: 6,\n          readingResolution: 1e-3\n        })\n      ]\n    },\n    {\n      name: \"wind direction\",\n      serviceClasses: [SRV_WIND_DIRECTION],\n      services: () => [\n        new AnalogSensorServer(SRV_WIND_DIRECTION, windDirectionOptions)\n      ]\n    },\n    {\n      name: \"wind speed\",\n      serviceClasses: [SRV_WIND_SPEED],\n      services: () => [\n        new AnalogSensorServer(SRV_WIND_SPEED, windSpeedOptions)\n      ]\n    },\n    {\n      name: \"weather station (wind speed, direction, rain)\",\n      serviceClasses: [\n        SRV_WIND_SPEED,\n        SRV_WIND_DIRECTION,\n        SRV_RAIN_GAUGE\n      ],\n      services: () => [\n        new AnalogSensorServer(SRV_WIND_SPEED, windSpeedOptions),\n        new AnalogSensorServer(SRV_WIND_DIRECTION, windDirectionOptions),\n        new RainGaugeServer()\n      ]\n    },\n    {\n      name: \"chassis (motor x 2 + sonar + light)\",\n      serviceClasses: [SRV_DISTANCE, SRV_LED_DISPLAY, SRV_MOTOR],\n      services: () => [\n        new MotorServer(\"L\"),\n        new MotorServer(\"R\"),\n        new AnalogSensorServer(SRV_DISTANCE, sonarOptions),\n        new LedDisplayServer({\n          numPixels: 5,\n          variant: 3 /* Stick */,\n          instanceName: \"lights\"\n        })\n      ]\n    },\n    {\n      name: \"railway crossing (2 x lights, 2 x servos, 1 x buffer)\",\n      serviceClasses: [SRV_TRAFFIC_LIGHT, SRV_SERVO, SRV_BUZZER],\n      services: () => [\n        new TrafficLightServer({ instanceName: \"left light\" }),\n        new ServoServer({\n          minAngle: 0,\n          maxAngle: 90,\n          instanceName: \"left arm\"\n        }),\n        new TrafficLightServer({ instanceName: \"right light\" }),\n        new ServoServer({\n          minAngle: 0,\n          maxAngle: 90,\n          instanceName: \"right arm\"\n        }),\n        new BuzzerServer({ instanceName: \"bell\" })\n      ]\n    },\n    {\n      name: \"Arcade controller (6 x buttons)\",\n      serviceClasses: [SRV_BUTTON],\n      services: () => [\n        new ButtonServer(\"Left\"),\n        new ButtonServer(\"Up\"),\n        new ButtonServer(\"Right\"),\n        new ButtonServer(\"Down\"),\n        new ButtonServer(\"A\"),\n        new ButtonServer(\"B\")\n      ]\n    },\n    {\n      name: \"micro:bit v2\",\n      serviceClasses: [\n        SRV_DOT_MATRIX,\n        SRV_BUTTON,\n        SRV_ACCELEROMETER,\n        SRV_SOUND_LEVEL,\n        SRV_LIGHT_LEVEL,\n        SRV_BUZZER,\n        SRV_SOUND_PLAYER\n      ],\n      services: () => [\n        new DotMatrixServer(5, 5),\n        new ButtonServer(\"A\"),\n        new ButtonServer(\"B\"),\n        new SensorServer(SRV_ACCELEROMETER, {\n          readingValues: [\n            0.5,\n            0.5,\n            -(1 - (0.5 * 0.5 + 0.5 * 0.5))\n          ]\n        }),\n        new AnalogSensorServer(SRV_SOUND_LEVEL, soundLevel),\n        new SensorServer(SRV_LIGHT_LEVEL, {\n          readingValues: [0.5],\n          variant: 2 /* ReverseBiasedLED */\n        }),\n        new BuzzerServer(),\n        new SoundPlayerServer(microbitSounds)\n      ]\n    },\n    {\n      name: \"power + humidity\",\n      serviceClasses: [SRV_POWER, SRV_HUMIDITY],\n      services: () => [\n        new PowerServer(),\n        new AnalogSensorServer(SRV_HUMIDITY, outdoorHumidityOptions)\n      ],\n      factory: (services) => {\n        const dev = new JDServerServiceProvider(\"power+humidity\", [\n          services[0]\n        ]);\n        const pwr = dev.service(1);\n        pwr.enabled.on(CHANGE, () => {\n          const enabled = !!pwr.enabled.values()[0];\n          console.debug(`power: ${enabled ? \"on\" : \"off\"}`);\n          if (enabled)\n            dev.updateServices(services);\n          else\n            dev.updateServices([services[0]]);\n        });\n        return dev;\n      }\n    },\n    Flags.diagnostics ? {\n      name: \"WiFi (virtual, no ap)\",\n      serviceClasses: [SRV_WIFI],\n      services: () => [new WifiServer()]\n    } : void 0,\n    Flags.diagnostics ? {\n      name: \"WiFi (virtual, 1 AP)\",\n      serviceClasses: [SRV_WIFI],\n      services: () => [\n        new WifiServer({\n          scanResults: [\n            {\n              ssid: \"HOME\",\n              bssid: new Uint8Array(0),\n              rssi: -42,\n              channel: 10,\n              flags: 2 /* WPS */ | 256 /* IEEE_802_11B */\n            }\n          ]\n        })\n      ]\n    } : void 0,\n    Flags.diagnostics ? {\n      name: \"WiFi (virtual, 1 network)\",\n      serviceClasses: [SRV_WIFI],\n      services: () => [\n        new WifiServer({\n          scanResults: [\n            {\n              ssid: \"HOME\",\n              bssid: new Uint8Array(0),\n              rssi: -42,\n              channel: 10,\n              flags: 2 /* WPS */ | 256 /* IEEE_802_11B */\n            }\n          ],\n          knownNetworks: [\n            {\n              ssid: \"HOME\",\n              password: \"home\",\n              priority: 0,\n              flags: 2 /* WPS */ | 256 /* IEEE_802_11B */\n            }\n          ]\n        })\n      ]\n    } : void 0,\n    Flags.diagnostics ? {\n      name: \"Azure IoT Hub Health (virtual)\",\n      serviceClasses: [SRV_AZURE_IOT_HUB_HEALTH],\n      services: () => [new AzureIoTHubHealthServer()]\n    } : void 0\n  ].filter((s) => !!s);\n}\nfunction serviceProviderDefinitions() {\n  return initProviders().slice(0);\n}\nfunction stableSimulatorDeviceId(bus, template) {\n  const others = bus.serviceProviders().filter((sp) => sp.template === template);\n  const word0 = hash(stringToUint8Array(template + others.length), 32);\n  const word1 = hash(stringToUint8Array(template + others.length + 1), 32);\n  const id = toFullHex([word0, word1]);\n  return id.slice(2);\n}\nfunction addServiceProvider(bus, definition) {\n  var _a;\n  const services = definition.services();\n  services.forEach((srv) => srv.lock());\n  const deviceId = stableSimulatorDeviceId(bus, definition.name);\n  const options = {\n    resetIn: definition.resetIn,\n    deviceId\n  };\n  const d = ((_a = definition.factory) == null ? void 0 : _a.call(definition, services)) || new JDServerServiceProvider(definition.name, services, options);\n  bus.addServiceProvider(d);\n  return d;\n}\nfunction serviceProviderDefinitionFromServiceClass(serviceClass2) {\n  return initProviders().find((provider) => provider.serviceClasses.length === 1 && provider.serviceClasses[0] === serviceClass2);\n}\nfunction startServiceProviderFromServiceClass(bus, serviceClass2) {\n  const provider = serviceProviderDefinitionFromServiceClass(serviceClass2);\n  return addServiceProvider(bus, provider);\n}\n\n// src/jdom/serviceclient.ts\nvar JDServiceClient = class extends JDClient {\n  constructor(service) {\n    super();\n    this.service = service;\n    const statusCodeChanged = this.service.event(4 /* StatusCodeChanged */);\n    this.mount(statusCodeChanged == null ? void 0 : statusCodeChanged.subscribe(EVENT, () => this.emit(CHANGE)));\n  }\n  get device() {\n    return this.service.device;\n  }\n  get bus() {\n    return this.device.bus;\n  }\n  get statusCode() {\n    var _a;\n    const reg = this.service.register(259 /* StatusCode */);\n    return (_a = reg.unpackedValue) == null ? void 0 : _a[0];\n  }\n  toString() {\n    return `client of ${this.service}`;\n  }\n};\n\n// src/jdom/clients/rolemanagerclient.ts\nvar _RoleManagerClient = class extends JDServiceClient {\n  constructor(service) {\n    super(service);\n    this._roles = [];\n    this._needRefresh = true;\n    this._lastRefreshAttempt = 0;\n    const changeEvent = service.event(3 /* Change */);\n    this.startRefreshRoles = debounceAsync(this.refreshRoles.bind(this), 200);\n    this.mount(changeEvent.subscribe(EVENT, this.handleChange.bind(this)));\n    this.mount(this.bus.subscribe(DEVICE_ANNOUNCE, this.assignRoles.bind(this)));\n    this.mount(this.clearRoles.bind(this));\n    this.mount(this.bus.subscribe(SELF_ANNOUNCE, this.handleSelfAnnounce.bind(this)));\n  }\n  handleSelfAnnounce() {\n    if (this._needRefresh && this.bus.timestamp - this._lastRefreshAttempt > ROLE_MANAGER_POLL)\n      this.startRefreshRoles();\n  }\n  get roles() {\n    return this._roles;\n  }\n  async handleChange() {\n    this.startRefreshRoles();\n  }\n  async refreshRoles() {\n    if (this.unmounted)\n      return;\n    this._needRefresh = false;\n    await this.collectRoles();\n    if (this.unmounted)\n      return;\n    this.assignRoles();\n  }\n  async collectRoles() {\n    this._lastRefreshAttempt = this.bus.timestamp;\n    const previousRolesHash = JSON.stringify(this._roles);\n    try {\n      const inp = new InPipeReader(this.bus);\n      await this.service.sendPacketAsync(inp.openCommand(131 /* ListRoles */), true);\n      const roles = [];\n      for (const buf of await inp.readData(1e3)) {\n        const [devidbuf, serviceClass2, serviceIndex, name] = jdunpack(buf, \"b[8] u32 u8 s\");\n        const deviceId = toHex2(devidbuf);\n        const role = {\n          deviceId,\n          serviceClass: serviceClass2,\n          serviceIndex,\n          name\n        };\n        roles.push(role);\n      }\n      if (JSON.stringify(roles) !== previousRolesHash) {\n        this._roles = roles;\n        this.emit(CHANGE);\n      }\n    } catch (e) {\n      this._needRefresh = true;\n      this.emit(ERROR, e);\n    }\n  }\n  assignRoles() {\n    this.bus.services().filter((srv) => _RoleManagerClient.unroledSrvs.indexOf(srv.serviceClass) < 0).forEach((srv) => this.assignRole(srv));\n  }\n  assignRole(service) {\n    const deviceId = service.device.deviceId;\n    const serviceIndex = service.serviceIndex;\n    const role = this._roles.find((r) => r.deviceId === deviceId && r.serviceIndex === serviceIndex);\n    service.role = role == null ? void 0 : role.name;\n  }\n  clearRoles() {\n    this.bus.services().forEach((srv) => srv.role = void 0);\n  }\n  hasRoleForService(service) {\n    var _a;\n    const { serviceClass: serviceClass2 } = service;\n    return !!((_a = this._roles) == null ? void 0 : _a.find((r) => r.serviceClass === serviceClass2));\n  }\n  compatibleRoles(service) {\n    var _a;\n    const { serviceClass: serviceClass2 } = service;\n    return (_a = this._roles) == null ? void 0 : _a.filter((r) => r.serviceClass === serviceClass2);\n  }\n  role(name) {\n    return this._roles.find((r) => r.serviceIndex > 0 && r.name === name);\n  }\n  async setRole(service, name) {\n    const { device, serviceIndex } = service;\n    const { deviceId } = device;\n    const previous = name && this._roles.find((r) => r.name === name);\n    if (previous && previous.deviceId === deviceId && previous.serviceIndex === serviceIndex) {\n      console.debug(`role unmodified, skipping`);\n      return;\n    }\n    {\n      const data = jdpack(\"b[8] u8 s\", [\n        fromHex(deviceId),\n        serviceIndex,\n        name || \"\"\n      ]);\n      await this.service.sendPacketAsync(Packet.from(129 /* SetRole */, data), true);\n    }\n    if (previous) {\n      console.debug(`clear role ${previous.deviceId}:${previous.serviceIndex}`);\n      const data = jdpack(\"b[8] u8 s\", [\n        fromHex(previous.deviceId),\n        previous.serviceIndex,\n        \"\"\n      ]);\n      await this.service.sendPacketAsync(Packet.from(129 /* SetRole */, data), true);\n    }\n  }\n  startSimulators() {\n    var _a;\n    if (!((_a = this._roles) == null ? void 0 : _a.length))\n      return;\n    const todos = groupBy(this._roles.filter((role) => !this.bus.device(role.deviceId, true)).map((role) => ({\n      role,\n      hostDefinition: serviceProviderDefinitionFromServiceClass(role.serviceClass)\n    })).filter((todo) => !!todo.hostDefinition), (todo) => parentName(todo.role.name) || \"\");\n    Object.keys(todos).forEach((parent) => {\n      const todo = todos[parent];\n      if (!parent) {\n        todo.forEach((t) => addServiceProvider(this.bus, t.hostDefinition));\n      } else {\n        addServiceProvider(this.bus, {\n          name: \"\",\n          serviceClasses: [],\n          services: () => arrayConcatMany(todo.map((t) => t.hostDefinition.services()))\n        });\n      }\n    });\n    function parentName(role) {\n      return role.split(\"/\", 1)[0];\n    }\n  }\n};\nvar RoleManagerClient = _RoleManagerClient;\nRoleManagerClient.unroledSrvs = [\n  SRV_CONTROL,\n  SRV_ROLE_MANAGER,\n  SRV_LOGGER,\n  SRV_UNIQUE_BRAIN,\n  SRV_PROXY,\n  SRV_INFRASTRUCTURE\n];\n\n// jacdac-spec/dist/devices.json\nvar devices_default = [\n  {\n    id: \"microsoft-research-jacdaccableextender38v10\",\n    name: \"JacdacCableExtender \",\n    company: \"Microsoft Research\",\n    repo: \"\",\n    services: [],\n    productIdentifiers: [\n      928595161\n    ],\n    version: \"1.0\",\n    designIdentifier: \"38\",\n    status: \"experimental\"\n  },\n  {\n    id: \"microsoft-research-jacdacjoystick440344v03\",\n    name: \"JacdacJoystick 44-0.3\",\n    company: \"Microsoft Research\",\n    firmwareSource: \"https://github.com/microsoft/jacdac-padauk/tree/main/jm-joystick-44-0.2\",\n    hardwareDesign: \"https://github.com/microsoft/jacdac-ddk/tree/main/electronics/altium/reference-designs/JacdacJoystick%2044-0.4\",\n    link: \"https://github.com/microsoft/jacdac-padauk\",\n    services: [\n      277836886\n    ],\n    productIdentifiers: [\n      832285283\n    ],\n    version: \"0.3\",\n    designIdentifier: \"44\",\n    status: \"experimental\"\n  },\n  {\n    id: \"microsoft-research-jacdacmicrobitshieldlp29v03\",\n    name: \"JacDacMicroBitShieldLP\",\n    company: \"Microsoft Research\",\n    repo: \"\",\n    services: [],\n    productIdentifiers: [\n      1009620586\n    ],\n    version: \"0.3\",\n    designIdentifier: \"29\",\n    status: \"experimental\"\n  },\n  {\n    id: \"microsoft-research-jacdacmotiondetection54v01\",\n    name: \"JacdacMotionDetection \",\n    company: \"Microsoft Research\",\n    link: \"https://github.com/microsoft/jacdac-padauk\",\n    services: [\n      293185353\n    ],\n    productIdentifiers: [\n      1030407429\n    ],\n    version: \"0.1\",\n    designIdentifier: \"54\",\n    status: \"experimental\"\n  },\n  {\n    id: \"microsoft-research-jacdacpinheaders45v02\",\n    name: \"JacdacPinHeaders \",\n    company: \"Microsoft Research\",\n    repo: \"\",\n    services: [],\n    productIdentifiers: [\n      970939382\n    ],\n    version: \"0.2\",\n    designIdentifier: \"45\",\n    status: \"experimental\"\n  },\n  {\n    id: \"microsoft-research-jacdactouchtest35v10\",\n    name: \"JacdacTouchTest\",\n    company: \"Microsoft Research\",\n    repo: \"https://github.com/microsoft/jacdac-msr-modules\",\n    services: [\n      677752265\n    ],\n    productIdentifiers: [\n      933677864\n    ],\n    version: \"1.0\",\n    designIdentifier: \"35\",\n    status: \"experimental\"\n  },\n  {\n    id: \"microsoft-research-jacdactouchtestelectrode36v10\",\n    name: \"JacdacTouchTestElectrode\",\n    company: \"Microsoft Research\",\n    repo: \"\",\n    services: [\n      677752265\n    ],\n    productIdentifiers: [\n      1026187559\n    ],\n    version: \"1.0\",\n    designIdentifier: \"36\",\n    status: \"experimental\"\n  },\n  {\n    id: \"microsoft-research-jm3slider85v40\",\n    name: \"JM-3-Slider\",\n    company: \"Microsoft Research\",\n    description: \"Triple slider\",\n    repo: \"https://github.com/microsoft/jacdac-msr-modules\",\n    firmwareSource: \"https://github.com/microsoft/jacdac-msr-modules/blob/main/targets/jm-v4.0/profile/slider-85.c\",\n    link: \"\",\n    services: [\n      522667846,\n      522667846,\n      522667846\n    ],\n    productIdentifiers: [\n      905702802\n    ],\n    version: \"4.0\",\n    designIdentifier: \"85\"\n  },\n  {\n    id: \"microsoft-research-jmaccelerometer30v02\",\n    name: \"JM Accelerometer\",\n    company: \"Microsoft Research\",\n    description: \"\",\n    repo: \"https://github.com/microsoft/jacdac-msr-modules\",\n    link: \"https://github.com/microsoft/jacdac-msr-modules\",\n    services: [\n      521405449\n    ],\n    productIdentifiers: [\n      872001670\n    ],\n    version: \"0.2\",\n    designIdentifier: \"30\",\n    status: \"deprecated\"\n  },\n  {\n    id: \"microsoft-research-jmaccelerometer30v10\",\n    name: \"JM Accelerometer\",\n    company: \"Microsoft Research\",\n    repo: \"https://github.com/microsoft/jacdac-msr-modules\",\n    firmwareSource: \"https://github.com/microsoft/jacdac-msr-modules/blob/main/targets/jm-accelerometer-30-1.0/profile/accelerometer.c\",\n    hardwareDesign: \"https://github.com/microsoft/jacdac-ddk/tree/main/electronics/altium/reference-designs/JacdacAccelerometer%2030-1.1\",\n    services: [\n      521405449\n    ],\n    productIdentifiers: [\n      952491663\n    ],\n    tags: [\n      \"kit\"\n    ],\n    version: \"1.0\",\n    designIdentifier: \"30\"\n  },\n  {\n    id: \"microsoft-research-jmaccelerometerv20\",\n    name: \"JM Accelerometer v2.0\",\n    company: \"Microsoft Research\",\n    description: \"A 3-axis accelerometer. 16G range.\",\n    repo: \"https://github.com/microsoft/jacdac-msr-modules\",\n    firmwareSource: \"https://github.com/microsoft/jacdac-msr-modules/blob/main/targets/jm-v2.0i/profile/acc.c\",\n    link: \"https://github.com/microsoft/jacdac-msr-modules\",\n    services: [\n      521405449\n    ],\n    productIdentifiers: [\n      1020174761\n    ],\n    status: \"deprecated\"\n  },\n  {\n    id: \"microsoft-research-jmaccessswitchinput34v13\",\n    name: \"JM Access Switch Input\",\n    company: \"Microsoft Research\",\n    repo: \"https://github.com/microsoft/jacdac-msr-modules\",\n    firmwareSource: \"https://github.com/microsoft/jacdac-msr-modules/blob/main/targets/jm-access-switch-input-34-1.3/profile/xac.c\",\n    services: [\n      343122531,\n      522667846,\n      277836886\n    ],\n    productIdentifiers: [\n      964964313\n    ],\n    tags: [\n      \"kit\"\n    ],\n    version: \"1.3\",\n    designIdentifier: \"34\"\n  },\n  {\n    id: \"microsoft-research-jmaccessswitchoutputv11\",\n    name: \"JM Access Switch Output\",\n    company: \"Microsoft Research\",\n    description: \"\",\n    repo: \"https://github.com/microsoft/jacdac-msr-modules\",\n    firmwareSource: \"https://github.com/microsoft/jacdac-msr-modules/blob/main/targets/jm-access-switch-output-1.1/profile/relay.c\",\n    link: \"https://github.com/microsoft/jacdac-msr-modules\",\n    services: [\n      406840918\n    ],\n    productIdentifiers: [\n      942325999\n    ],\n    tags: [\n      \"kit\"\n    ],\n    version: \"1.1\"\n  },\n  {\n    id: \"microsoft-research-jmambientlight55v01\",\n    name: \"JM Ambient Light\",\n    company: \"Microsoft Research\",\n    description: \"\",\n    repo: \"https://github.com/microsoft/jacdac-msr-modules\",\n    firmwareSource: \"https://github.com/microsoft/jacdac-padauk/tree/main/jm-ambient-lightsensor-55-0.1\",\n    hardwareDesign: \"https://github.com/microsoft/jacdac-ddk/tree/main/electronics/altium/reference-designs/JacdacLightLevel%2055-0.2\",\n    link: \"https://github.com/microsoft/jacdac-msr-modules\",\n    services: [\n      400333340\n    ],\n    productIdentifiers: [\n      896864987\n    ],\n    tags: [\n      \"kit\"\n    ],\n    version: \"0.1\",\n    designIdentifier: \"55\"\n  },\n  {\n    id: \"microsoft-research-jmanalogjoystick44v02\",\n    name: \"JM Analog Joystick\",\n    company: \"Microsoft Research\",\n    description: \"\",\n    firmwareSource: \"https://github.com/microsoft/jacdac-padauk/tree/main/jm-joystick-44-0.2\",\n    hardwareDesign: \"https://github.com/microsoft/jacdac-ddk/tree/main/electronics/altium/reference-designs/JacdacJoystick%2044-0.4\",\n    link: \"https://github.com/microsoft/jacdac-padauk\",\n    services: [\n      277836886\n    ],\n    productIdentifiers: [\n      976429228\n    ],\n    tags: [\n      \"kit\"\n    ],\n    version: \"0.2\",\n    designIdentifier: \"44\"\n  },\n  {\n    id: \"microsoft-research-jmarcadebtnv20\",\n    name: \"JM ArcadeBtn v2.0\",\n    company: \"Microsoft Research\",\n    description: \"Lets you connect a single arcade button with an LED.\",\n    repo: \"https://github.com/microsoft/jacdac-msr-modules\",\n    firmwareSource: \"https://github.com/microsoft/jacdac-msr-modules/blob/main/targets/jm-v2.0/profile/btnled.c\",\n    link: \"https://github.com/microsoft/jacdac-msr-modules\",\n    services: [\n      343122531\n    ],\n    productIdentifiers: [\n      886919574\n    ],\n    status: \"deprecated\"\n  },\n  {\n    id: \"microsoft-research-jmarcadecontrolsv20\",\n    name: \"JM Arcade Controls v2.0\",\n    company: \"Microsoft Research\",\n    description: \"Lets you connect arcade buttons and joystick to a Jacdac network.\",\n    repo: \"https://github.com/microsoft/jacdac-msr-modules\",\n    firmwareSource: \"https://github.com/microsoft/jacdac-msr-modules/blob/main/targets/jm-v2.0/profile/arcade.c\",\n    link: \"https://github.com/microsoft/jacdac-msr-modules\",\n    services: [\n      501915758\n    ],\n    productIdentifiers: [\n      954450524\n    ],\n    status: \"deprecated\"\n  },\n  {\n    id: \"microsoft-research-jmbrainesp3248v02\",\n    name: \"JM Brain ESP32\",\n    company: \"Microsoft Research\",\n    services: [\n      342028028\n    ],\n    productIdentifiers: [\n      1067560617\n    ],\n    transport: {\n      type: \"serial\",\n      vendorId: 12346\n    },\n    firmwares: [\n      {\n        name: \"IoT Uploader\",\n        url: \"https://github.com/microsoft/pxt-jacdac/releases/latest/download/uploader-esp32s2.uf2\",\n        productIdentifier: 1067560617\n      }\n    ],\n    version: \"0.2\",\n    designIdentifier: \"48\",\n    status: \"deprecated\"\n  },\n  {\n    id: \"microsoft-research-jmbrainesp3248v03\",\n    name: \"JM Brain ESP32\",\n    company: \"Microsoft Research\",\n    services: [\n      342028028\n    ],\n    productIdentifiers: [\n      917230668,\n      983264687,\n      1067560617\n    ],\n    transport: {\n      type: \"serial\",\n      vendorId: 12346\n    },\n    firmwares: [\n      {\n        name: \"IoT Uploader\",\n        url: \"https://github.com/microsoft/pxt-jacdac/releases/latest/download/uploader-esp32s2.uf2\",\n        productIdentifier: 1067560617\n      }\n    ],\n    version: \"0.3\",\n    designIdentifier: \"48\",\n    bootloader: {\n      sequence: \"reset-boot\",\n      driveName: \"IOT-BOOT\",\n      firmwareFormat: \"uf2\",\n      ledAnimation: \"blue-glow\"\n    }\n  },\n  {\n    id: \"microsoft-research-jmbrainf441v02\",\n    name: \"JM Brain F4\",\n    company: \"Microsoft Research\",\n    description: \"\",\n    link: \"https://github.com/microsoft/pxt-jacdac\",\n    services: [\n      414210922,\n      411425820\n    ],\n    productIdentifiers: [\n      1003209864,\n      970267564,\n      819577746\n    ],\n    transport: {\n      type: \"usb\"\n    },\n    tags: [\n      \"kit\"\n    ],\n    firmwares: [\n      {\n        name: \"HID Keyboard + Mouse\",\n        url: \"https://github.com/microsoft/pxt-jacdac/releases/latest/download/hid-servers-f4.uf2\",\n        productIdentifier: 819577746\n      }\n    ],\n    version: \"0.2\",\n    designIdentifier: \"41\",\n    bootloader: {\n      sequence: \"reset\",\n      driveName: \"JACDACF4\",\n      firmwareFormat: \"uf2\",\n      ledAnimation: \"blue-glow\"\n    }\n  },\n  {\n    id: \"microsoft-research-jmbrainrp204059v01\",\n    name: \"JM Brain RP2040\",\n    company: \"Microsoft Research\",\n    description: \"\",\n    link: \"https://github.com/microsoft/pxt-jacdac\",\n    services: [\n      414210922,\n      411425820\n    ],\n    productIdentifiers: [\n      884301483,\n      999933064,\n      883764657\n    ],\n    transport: {\n      type: \"usb\"\n    },\n    tags: [\n      \"kit\"\n    ],\n    firmwares: [\n      {\n        name: \"HID Keyboard + Mouse\",\n        url: \"https://github.com/microsoft/pxt-jacdac/releases/latest/download/hid-servers-rp2040.uf2\",\n        productIdentifier: 883764657\n      }\n    ],\n    version: \"0.1\",\n    designIdentifier: \"59\",\n    bootloader: {\n      sequence: \"reset-boot\",\n      driveName: \"RPI-RP2\",\n      firmwareFormat: \"uf2\"\n    }\n  },\n  {\n    id: \"microsoft-research-jmbutton10v13\",\n    name: \"JM Button\",\n    company: \"Microsoft Research\",\n    description: \"\",\n    link: \"https://github.com/microsoft/jacdac-padauk\",\n    services: [\n      343122531\n    ],\n    productIdentifiers: [\n      896566497\n    ],\n    tags: [\n      \"kit\"\n    ],\n    version: \"1.3\",\n    designIdentifier: \"10\"\n  },\n  {\n    id: \"microsoft-research-jmbutton40v02\",\n    name: \"JM Button\",\n    company: \"Microsoft Research\",\n    repo: \"https://github.com/microsoft/jacdac-msr-modules\",\n    firmwareSource: \"https://github.com/microsoft/jacdac-msr-modules/blob/main/targets/jm-button-40-0.2/profile/button.c\",\n    hardwareDesign: \"https://github.com/microsoft/jacdac-ddk/tree/main/electronics/altium/reference-designs/JacdacG0Button%2040-0.3\",\n    services: [\n      343122531\n    ],\n    productIdentifiers: [\n      946173966\n    ],\n    tags: [\n      \"kit\"\n    ],\n    version: \"0.2\",\n    designIdentifier: \"40\"\n  },\n  {\n    id: \"microsoft-research-jmbuttonterminal62v01\",\n    name: \"JM Button Terminal\",\n    company: \"Microsoft Research\",\n    description: \"\",\n    repo: \"https://github.com/microsoft/jacdac-msr-modules\",\n    link: \"https://github.com/microsoft/jacdac-msr-modules\",\n    services: [\n      343122531\n    ],\n    productIdentifiers: [\n      1047530059\n    ],\n    tags: [\n      \"kit\"\n    ],\n    version: \"0.1\",\n    designIdentifier: \"62\"\n  },\n  {\n    id: \"microsoft-research-jmbuzzerv20\",\n    name: \"JM Buzzer v2.0\",\n    company: \"Microsoft Research\",\n    description: \"A simple buzzer.\",\n    repo: \"https://github.com/microsoft/jacdac-msr-modules\",\n    firmwareSource: \"https://github.com/microsoft/jacdac-msr-modules/blob/main/targets/jm-v2.0/profile/snd.c\",\n    link: \"https://github.com/microsoft/jacdac-msr-modules\",\n    services: [\n      458731991\n    ],\n    productIdentifiers: [\n      854957595\n    ],\n    status: \"deprecated\"\n  },\n  {\n    id: \"microsoft-research-jmcapacitivesoilmoisturev33\",\n    name: \"JM Capacitive Soil Moisture\",\n    company: \"Microsoft Research\",\n    description: \"JM Capacitive Soil Moisture v3.3\",\n    repo: \"https://github.com/microsoft/jacdac-msr-modules\",\n    firmwareSource: \"https://github.com/microsoft/jacdac-msr-modules/blob/main/targets/jm-v3.3/profile/soilmoisture.c\",\n    services: [\n      491430835\n    ],\n    productIdentifiers: [\n      959462330\n    ],\n    version: \"3.3\"\n  },\n  {\n    id: \"microsoft-research-jmclickairquality4v32\",\n    name: \"JM-Click Airquality4\",\n    company: \"Microsoft Research\",\n    description: \"\",\n    repo: \"https://github.com/microsoft/jacdac-msr-modules\",\n    firmwareSource: \"https://github.com/microsoft/jacdac-msr-modules/blob/main/targets/jm-v3.2/profile/airquality4click.c\",\n    link: \"https://github.com/microsoft/jacdac-msr-modules\",\n    services: [\n      379362758,\n      312849815\n    ],\n    productIdentifiers: [\n      878106432\n    ],\n    tags: [\n      \"kit\"\n    ],\n    version: \"3.2\"\n  },\n  {\n    id: \"microsoft-research-jmclickcolorv32\",\n    name: \"JM-Click Color\",\n    company: \"Microsoft Research\",\n    description: \"\",\n    repo: \"https://github.com/microsoft/jacdac-msr-modules\",\n    firmwareSource: \"https://github.com/microsoft/jacdac-msr-modules/blob/main/targets/jm-v3.2/profile/colorclick.c\",\n    link: \"https://github.com/microsoft/jacdac-msr-modules\",\n    services: [\n      372299111\n    ],\n    productIdentifiers: [\n      1020991645\n    ],\n    tags: [\n      \"kit\"\n    ],\n    version: \"3.2\"\n  },\n  {\n    id: \"microsoft-research-jmco2tvoctemphumsgp30sht3066v37\",\n    name: \"JM CO2/TVOC/Temp/Hum SGP30+SHT30\",\n    company: \"Microsoft Research\",\n    description: \"JM CO2/TVOC/Temp/Hum SGP30+SHT30 66 v3.7\",\n    repo: \"https://github.com/microsoft/jacdac-msr-modules\",\n    firmwareSource: \"https://github.com/microsoft/jacdac-msr-modules/blob/main/targets/jm-v3.6/profile/co2.c\",\n    services: [\n      379362758,\n      312849815,\n      337754823,\n      382210232\n    ],\n    productIdentifiers: [\n      912293656\n    ],\n    version: \"3.7\",\n    designIdentifier: \"66\"\n  },\n  {\n    id: \"microsoft-research-jmcrankbuttonv20\",\n    name: \"JM Crank + Button\",\n    company: \"Microsoft Research\",\n    description: \"A rotary encoder with a push button.\",\n    repo: \"https://github.com/microsoft/jacdac-msr-modules\",\n    firmwareSource: \"https://github.com/microsoft/jacdac-msr-modules/blob/main/targets/jm-v2.0/profile/crank-btn.c\",\n    link: \"https://github.com/microsoft/jacdac-msr-modules\",\n    services: [\n      284830153,\n      343122531\n    ],\n    productIdentifiers: [\n      813927310\n    ],\n    version: \"2.0\",\n    status: \"deprecated\"\n  },\n  {\n    id: \"microsoft-research-jmcrankv20\",\n    name: \"JM Crank\",\n    company: \"Microsoft Research\",\n    description: \"A rotary encoder without a push button.\",\n    repo: \"https://github.com/microsoft/jacdac-msr-modules\",\n    firmwareSource: \"https://github.com/microsoft/jacdac-msr-modules/blob/main/targets/jm-v2.0/profile/crank.c\",\n    link: \"https://github.com/microsoft/jacdac-msr-modules\",\n    services: [\n      284830153\n    ],\n    productIdentifiers: [\n      866678795\n    ],\n    version: \"2.0\",\n    status: \"deprecated\"\n  },\n  {\n    id: \"microsoft-research-jmdualkey69v37\",\n    name: \"JM Dual Key\",\n    company: \"Microsoft Research\",\n    description: \"JM 2Key 69 v3.7\",\n    repo: \"https://github.com/microsoft/jacdac-msr-modules\",\n    firmwareSource: \"https://github.com/microsoft/jacdac-msr-modules/blob/main/targets/jm-v3.6/profile/key2.c\",\n    services: [\n      343122531,\n      343122531\n    ],\n    productIdentifiers: [\n      958599316\n    ],\n    version: \"3.7\",\n    designIdentifier: \"69\"\n  },\n  {\n    id: \"microsoft-research-jmflexv10\",\n    name: \"JM Flex\",\n    company: \"Microsoft Research\",\n    description: \"\",\n    repo: \"https://github.com/microsoft/jacdac-msr-modules\",\n    firmwareSource: \"https://github.com/microsoft/jacdac-msr-modules/blob/main/targets/jm-flex-sensor-1.0/profile/flex.c\",\n    link: \"https://github.com/microsoft/jacdac-msr-modules\",\n    services: [\n      524797638\n    ],\n    productIdentifiers: [\n      840841542\n    ],\n    tags: [\n      \"kit\"\n    ],\n    version: \"1.0\"\n  },\n  {\n    id: \"microsoft-research-jmgamepadv20\",\n    name: \"JM GamePad\",\n    company: \"Microsoft Research\",\n    description: \"Lets you convert a plastic d-pad controller, so that it can be connected to a Jacdac network.\",\n    repo: \"https://github.com/microsoft/jacdac-msr-modules\",\n    firmwareSource: \"https://github.com/microsoft/jacdac-msr-modules/blob/main/targets/jm-v2.0/profile/dpad.c\",\n    link: \"https://github.com/microsoft/jacdac-msr-modules\",\n    services: [\n      501915758\n    ],\n    productIdentifiers: [\n      919754666\n    ],\n    version: \"2.0\"\n  },\n  {\n    id: \"microsoft-research-jmhallmagneticswitch81v40\",\n    name: \"JM-Hall (magnetic switch)\",\n    company: \"Microsoft Research\",\n    description: \"JM-Hall (magnetic switch) 81 v4.0\",\n    repo: \"https://github.com/microsoft/jacdac-msr-modules\",\n    firmwareSource: \"https://github.com/microsoft/jacdac-msr-modules/blob/main/targets/jm-v4.0/profile/hall-81.c\",\n    link: \"\",\n    services: [\n      450008066\n    ],\n    productIdentifiers: [\n      920333141\n    ],\n    version: \"4.0\",\n    designIdentifier: \"81\"\n  },\n  {\n    id: \"microsoft-research-jmhapticmach101v10\",\n    name: \"JM Haptic MACH-1.0\",\n    company: \"Microsoft Research\",\n    description: \"JM Haptic MACH-1.0\",\n    repo: \"https://github.com/microsoft/jacdac-msr-modules\",\n    firmwareSource: \"https://github.com/microsoft/jacdac-msr-modules/blob/main/targets/jm-haptic-1.0/profile/haptic.c\",\n    services: [\n      406832290\n    ],\n    productIdentifiers: [\n      1022649261\n    ],\n    version: \"1.0\",\n    designIdentifier: \"1\"\n  },\n  {\n    id: \"microsoft-research-jmhub39v03\",\n    name: \"JM Hub\",\n    company: \"Microsoft Research\",\n    repo: \"\",\n    services: [],\n    productIdentifiers: [\n      917230668\n    ],\n    version: \"0.3\",\n    designIdentifier: \"39\",\n    status: \"experimental\"\n  },\n  {\n    id: \"microsoft-research-jmkeyboardkey46v10\",\n    name: \"JM Keyboard Key\",\n    company: \"Microsoft Research\",\n    description: \"\",\n    link: \"https://github.com/microsoft/jacdac-padauk\",\n    services: [\n      343122531\n    ],\n    productIdentifiers: [\n      1067229774\n    ],\n    tags: [\n      \"kit\"\n    ],\n    version: \"1.0\",\n    designIdentifier: \"46\",\n    status: \"deprecated\"\n  },\n  {\n    id: \"microsoft-research-jmkeyboardkey46v11\",\n    name: \"JM Keyboard Key\",\n    company: \"Microsoft Research\",\n    description: \"\",\n    repo: \"https://github.com/microsoft/jacdac-msr-modules\",\n    link: \"https://github.com/microsoft/jacdac-msr-modules\",\n    services: [\n      343122531\n    ],\n    productIdentifiers: [\n      911541523\n    ],\n    tags: [\n      \"kit\"\n    ],\n    version: \"1.1\",\n    designIdentifier: \"46\",\n    status: \"deprecated\"\n  },\n  {\n    id: \"microsoft-research-jmkeyboardkey46v12\",\n    name: \"JM Keyboard Key\",\n    company: \"Microsoft Research\",\n    link: \"https://github.com/microsoft/jacdac-padauk\",\n    services: [\n      343122531\n    ],\n    productIdentifiers: [\n      876567534\n    ],\n    tags: [],\n    version: \"1.2\",\n    designIdentifier: \"46\"\n  },\n  {\n    id: \"microsoft-research-jmkeyv3768v37\",\n    name: \"JM Key v3.7\",\n    company: \"Microsoft Research\",\n    description: \"JM Key 68 v3.7\",\n    repo: \"https://github.com/microsoft/jacdac-msr-modules\",\n    firmwareSource: \"https://github.com/microsoft/jacdac-msr-modules/blob/main/targets/jm-v3.6/profile/key.c\",\n    services: [\n      343122531\n    ],\n    productIdentifiers: [\n      948311172\n    ],\n    version: \"3.7\",\n    designIdentifier: \"68\"\n  },\n  {\n    id: \"microsoft-research-jmmachinelearning\",\n    name: \"JM Machine Learning\",\n    company: \"Microsoft Research\",\n    description: \"Lets you run machine learning models on data coming from Jacdac network.\",\n    repo: \"https://github.com/microsoft/pxt-tensorflow\",\n    link: \"https://github.com/microsoft/jacdac-msr-modules\",\n    services: [\n      336566904,\n      496034245\n    ],\n    productIdentifiers: [],\n    status: \"deprecated\"\n  },\n  {\n    id: \"microsoft-research-jmmatrix87v40\",\n    name: \"JM-Matrix\",\n    company: \"Microsoft Research\",\n    description: \"5x5 LED dot matrix\",\n    repo: \"https://github.com/microsoft/jacdac-msr-modules\",\n    firmwareSource: \"https://github.com/microsoft/jacdac-msr-modules/blob/main/targets/jm-v4.0matrix/profile/matrix-87.c\",\n    link: \"\",\n    services: [\n      286070091\n    ],\n    productIdentifiers: [\n      896568761\n    ],\n    version: \"4.0\",\n    designIdentifier: \"87\"\n  },\n  {\n    id: \"microsoft-research-jmmicrobitshieldlp29v05\",\n    name: \"JM MicroBit Shield LP\",\n    company: \"Microsoft Research\",\n    repo: \"\",\n    hardwareDesign: \"https://github.com/microsoft/jacdac-ddk/tree/main/electronics/altium/reference-designs/JacdacMicroBitShieldLP%2029-0.6\",\n    services: [],\n    productIdentifiers: [\n      974031363\n    ],\n    version: \"0.5\",\n    designIdentifier: \"29\",\n    status: \"experimental\"\n  },\n  {\n    id: \"microsoft-research-jmmotionpirv3874v38\",\n    name: \"JM Motion PIR v3.8\",\n    company: \"Microsoft Research\",\n    description: \"JM Motion PIR 74 v3.8\",\n    repo: \"https://github.com/microsoft/jacdac-msr-modules\",\n    firmwareSource: \"https://github.com/microsoft/jacdac-msr-modules/blob/main/targets/jm-v3.3/profile/pir.c\",\n    link: \"https://aka.ms/aaaaad\",\n    services: [\n      293185353\n    ],\n    productIdentifiers: [\n      1060186023\n    ],\n    version: \"3.8\",\n    designIdentifier: \"74\"\n  },\n  {\n    id: \"microsoft-research-jmmotorv21\",\n    name: \"JM Motor\",\n    company: \"Microsoft Research\",\n    description: \"Lets you control a single DC motor (up to 5V; yellow plastic ones work well).\",\n    repo: \"https://github.com/microsoft/jacdac-msr-modules\",\n    firmwareSource: \"https://github.com/microsoft/jacdac-msr-modules/blob/main/targets/jm-v2.1/profile/motor.c\",\n    link: \"https://github.com/microsoft/jacdac-msr-modules\",\n    services: [\n      385895640\n    ],\n    productIdentifiers: [\n      809626198\n    ],\n    version: \"2.1\",\n    status: \"deprecated\"\n  },\n  {\n    id: \"microsoft-research-jmpinheader45v01\",\n    name: \"JM Pin Header\",\n    company: \"Microsoft Research\",\n    description: \"A unregulated passive adapter from Jacdac to pin headers.\",\n    link: \"https://github.com/microsoft/jacdac-msr-modules\",\n    services: [],\n    productIdentifiers: [\n      939230090\n    ],\n    version: \"0.1\",\n    designIdentifier: \"45\",\n    status: \"deprecated\"\n  },\n  {\n    id: \"microsoft-research-jmpinheader45v02\",\n    name: \"JM Pin Header\",\n    company: \"Microsoft Research\",\n    description: \"A regulated passive adapter from Jacdac to pin headers.\",\n    link: \"https://github.com/microsoft/jacdac-msr-modules\",\n    services: [],\n    productIdentifiers: [\n      994328823\n    ],\n    version: \"0.2\",\n    designIdentifier: \"45\"\n  },\n  {\n    id: \"microsoft-research-jmpower\",\n    name: \"JM Power\",\n    company: \"Microsoft Research\",\n    description: \"Lets you supply power to Jacdac network from a MicroUSB connection (eg. a USB battery pack).\",\n    repo: \"https://github.com/microsoft/jacdac-msr-modules\",\n    link: \"https://github.com/microsoft/jacdac-msr-modules\",\n    services: [\n      530893146\n    ],\n    productIdentifiers: [\n      815885628\n    ],\n    status: \"deprecated\"\n  },\n  {\n    id: \"microsoft-research-jmpressurev3872v38\",\n    name: \"JM Pressure v3.8\",\n    company: \"Microsoft Research\",\n    description: \"JM Pressure MPL3115A2 72 v3.8\",\n    repo: \"https://github.com/microsoft/jacdac-msr-modules\",\n    firmwareSource: \"https://github.com/microsoft/jacdac-msr-modules/blob/main/targets/jm-v3.6/profile/barometer2.c\",\n    link: \"https://aka.ms/aaaabb\",\n    services: [\n      504462570,\n      337754823\n    ],\n    productIdentifiers: [\n      869351851\n    ],\n    version: \"3.8\",\n    designIdentifier: \"72\"\n  },\n  {\n    id: \"microsoft-research-jmprotov20\",\n    name: \"JM Proto\",\n    company: \"Microsoft Research\",\n    description: \"A prototype multi-function board.\\n* ``0x3f9bc26a`` JM Touch-Proto v2.0\",\n    repo: \"https://github.com/microsoft/jacdac-msr-modules\",\n    firmwareSource: \"https://github.com/microsoft/jacdac-msr-modules/blob/main/targets/jm-v2.0p/profile/proto.c\",\n    link: \"https://github.com/microsoft/jacdac-msr-modules\",\n    services: [],\n    productIdentifiers: [\n      1052138004\n    ],\n    version: \"2.0\",\n    status: \"deprecated\"\n  },\n  {\n    id: \"microsoft-research-jmpwmnpxv20\",\n    name: \"JM PWM (npx)\",\n    company: \"Microsoft Research\",\n    description: \"A light-strip controller. Supports WS2812B, APA102, and SK9822.\",\n    repo: \"https://github.com/microsoft/jacdac-msr-modules\",\n    link: \"https://github.com/microsoft/jacdac-msr-modules\",\n    services: [\n      309264608\n    ],\n    productIdentifiers: [\n      895762065\n    ],\n    version: \"2.0\",\n    status: \"deprecated\"\n  },\n  {\n    id: \"microsoft-research-jmpwmnpxv21\",\n    name: \"JM PWM (npx)\",\n    company: \"Microsoft Research\",\n    description: \"A light-strip controller with MicroUSB connector for power. Supports WS2812B, APA102, and SK9822.\",\n    repo: \"https://github.com/microsoft/jacdac-msr-modules\",\n    link: \"https://github.com/microsoft/jacdac-msr-modules\",\n    services: [\n      309264608\n    ],\n    productIdentifiers: [\n      1013705700\n    ],\n    version: \"2.1\",\n    status: \"deprecated\"\n  },\n  {\n    id: \"microsoft-research-jmpwmservov20\",\n    name: \"JM PWM (Servo)\",\n    company: \"Microsoft Research\",\n    description: \"A controller for a 5V servo.\",\n    repo: \"https://github.com/microsoft/jacdac-msr-modules\",\n    firmwareSource: \"https://github.com/microsoft/jacdac-msr-modules/blob/main/targets/jm-v2.0/profile/servo.c\",\n    link: \"https://github.com/microsoft/jacdac-msr-modules\",\n    services: [\n      318542083\n    ],\n    productIdentifiers: [\n      816890446\n    ],\n    version: \"2.0\",\n    status: \"deprecated\"\n  },\n  {\n    id: \"microsoft-research-jmpwmservov21\",\n    name: \"JM PWM (Servo)\",\n    company: \"Microsoft Research\",\n    description: \"A controller for a 5V servo, with MicroUSB connector for power.\",\n    repo: \"https://github.com/microsoft/jacdac-msr-modules\",\n    firmwareSource: \"https://github.com/microsoft/jacdac-msr-modules/blob/main/targets/jm-v2.1/profile/servo.c\",\n    link: \"https://github.com/microsoft/jacdac-msr-modules\",\n    services: [\n      318542083\n    ],\n    productIdentifiers: [\n      986140247\n    ],\n    version: \"2.1\",\n    status: \"deprecated\"\n  },\n  {\n    id: \"microsoft-research-jmrelaymach01v10\",\n    name: \"JM Relay MACH-0.1\",\n    company: \"Microsoft Research\",\n    description: \"JM Relay MACH-0.1\",\n    repo: \"https://github.com/microsoft/jacdac-msr-modules\",\n    firmwareSource: \"https://github.com/microsoft/jacdac-msr-modules/blob/main/targets/jm-relay-1.0/profile/relay.c\",\n    services: [\n      406840918\n    ],\n    productIdentifiers: [\n      900132124\n    ],\n    version: \"1.0\"\n  },\n  {\n    id: \"microsoft-research-jmrgb883v40\",\n    name: \"JM RGB-8\",\n    company: \"Microsoft Research\",\n    description: \"Circular 8 programmable LED display.\",\n    repo: \"https://github.com/microsoft/jacdac-msr-modules\",\n    firmwareSource: \"https://github.com/microsoft/jacdac-msr-modules/blob/main/targets/jm-v4.0/profile/rgb-83.c\",\n    link: \"\",\n    services: [\n      369743088\n    ],\n    productIdentifiers: [\n      1050545633\n    ],\n    version: \"4.0\",\n    designIdentifier: \"83\"\n  },\n  {\n    id: \"microsoft-research-jmrgbledbar58v01\",\n    name: \"JM RGB LED Bar\",\n    company: \"Microsoft Research\",\n    description: \"\",\n    repo: \"https://github.com/microsoft/jacdac-msr-modules\",\n    firmwareSource: \"https://github.com/microsoft/jacdac-msr-modules/blob/main/targets/jm-rgb-led-bar-58-0.1/profile/npx.c\",\n    link: \"https://github.com/microsoft/jacdac-msr-modules\",\n    services: [\n      309264608\n    ],\n    productIdentifiers: [\n      1046525691\n    ],\n    tags: [\n      \"kit\"\n    ],\n    version: \"0.1\",\n    designIdentifier: \"58\"\n  },\n  {\n    id: \"microsoft-research-jmrgbledgeneric60v01\",\n    name: \"JM RGB LED Generic\",\n    company: \"Microsoft Research\",\n    description: \"\",\n    repo: \"https://github.com/microsoft/jacdac-msr-modules\",\n    firmwareSource: \"https://github.com/microsoft/jacdac-msr-modules/blob/main/targets/jm-rgb-led-generic-60-0.1/profile/npx.c\",\n    hardwareDesign: \"https://github.com/microsoft/jacdac-ddk/tree/main/electronics/altium/reference-designs/JacdacRgbLedGeneric%2060-0.2\",\n    link: \"https://github.com/microsoft/jacdac-msr-modules\",\n    services: [\n      309264608\n    ],\n    productIdentifiers: [\n      967723905\n    ],\n    tags: [\n      \"kit\"\n    ],\n    version: \"0.1\",\n    designIdentifier: \"60\"\n  },\n  {\n    id: \"microsoft-research-jmrgbledring37v20\",\n    name: \"JM RGB LED Ring\",\n    company: \"Microsoft Research\",\n    description: \"\",\n    repo: \"https://github.com/microsoft/jacdac-msr-modules\",\n    firmwareSource: \"https://github.com/microsoft/jacdac-msr-modules/blob/main/targets/jm-rgb-led-ring-37-2.0/profile/npx.c\",\n    link: \"https://github.com/microsoft/jacdac-msr-modules\",\n    services: [\n      309264608\n    ],\n    productIdentifiers: [\n      892295887\n    ],\n    tags: [\n      \"kit\"\n    ],\n    version: \"2.0\",\n    designIdentifier: \"37\",\n    status: \"deprecated\"\n  },\n  {\n    id: \"microsoft-research-jmrgbledring37v21\",\n    name: \"JM RGB LED Ring\",\n    company: \"Microsoft Research\",\n    description: \"\",\n    repo: \"https://github.com/microsoft/jacdac-msr-modules\",\n    firmwareSource: \"https://github.com/microsoft/jacdac-msr-modules/blob/main/targets/jm-rgb-led-ring-37-2.1/profile/npx.c\",\n    hardwareDesign: \"https://github.com/microsoft/jacdac-ddk/tree/main/electronics/altium/reference-designs/JacdacRgbLedRing8%2037-2.2\",\n    link: \"https://github.com/microsoft/jacdac-msr-modules\",\n    services: [\n      309264608\n    ],\n    productIdentifiers: [\n      807926135\n    ],\n    tags: [\n      \"kit\"\n    ],\n    version: \"2.1\",\n    designIdentifier: \"37\"\n  },\n  {\n    id: \"microsoft-research-jmrgbring67v37\",\n    name: \"JM RGB-Ring\",\n    company: \"Microsoft Research\",\n    description: \"JM RGB-Ring 67 v3.7\",\n    repo: \"https://github.com/microsoft/jacdac-msr-modules\",\n    services: [\n      309264608\n    ],\n    productIdentifiers: [\n      946180442\n    ],\n    version: \"3.7\",\n    designIdentifier: \"67\"\n  },\n  {\n    id: \"microsoft-research-jmrotarybtn82v40\",\n    name: \"JM Rotary + Btn\",\n    company: \"Microsoft Research\",\n    description: \"Rotary encoder with button in the standard shape.\",\n    repo: \"https://github.com/microsoft/jacdac-msr-modules\",\n    firmwareSource: \"https://github.com/microsoft/jacdac-msr-modules/blob/main/targets/jm-v4.0rot/profile/rotary-82.c\",\n    link: \"\",\n    services: [\n      284830153,\n      343122531\n    ],\n    productIdentifiers: [\n      1045398971\n    ],\n    version: \"4.0\",\n    designIdentifier: \"82\"\n  },\n  {\n    id: \"microsoft-research-jmrotarycontrolbuttonv10\",\n    name: \"JM Rotary Control + Button\",\n    company: \"Microsoft Research\",\n    description: \"\",\n    repo: \"https://github.com/microsoft/jacdac-msr-modules\",\n    firmwareSource: \"https://github.com/microsoft/jacdac-msr-modules/blob/main/targets/jm-rotary-control-26-1.0/profile/rotary_ctrl.c\",\n    link: \"https://github.com/microsoft/jacdac-msr-modules\",\n    services: [\n      284830153,\n      343122531\n    ],\n    productIdentifiers: [\n      1060754715\n    ],\n    tags: [\n      \"kit\"\n    ],\n    version: \"1.0\",\n    status: \"deprecated\"\n  },\n  {\n    id: \"microsoft-research-jmrotarycontrolbuttonv11\",\n    name: \"JM Rotary Control + Button\",\n    company: \"Microsoft Research\",\n    description: \"\",\n    repo: \"https://github.com/microsoft/jacdac-msr-modules\",\n    firmwareSource: \"https://github.com/microsoft/jacdac-msr-modules/blob/main/targets/jm-rotary-control-26-1.1/profile/rotary_ctrl.c\",\n    hardwareDesign: \"https://github.com/microsoft/jacdac-ddk/tree/main/electronics/altium/reference-designs/JacdacRotary%2026-1.2\",\n    link: \"https://github.com/microsoft/jacdac-msr-modules\",\n    services: [\n      284830153,\n      343122531\n    ],\n    productIdentifiers: [\n      829647613\n    ],\n    tags: [\n      \"kit\"\n    ],\n    version: \"1.1\"\n  },\n  {\n    id: \"microsoft-research-jmsht30temperaturehumidity64v36\",\n    name: \"JM SHT30 Temperature/Humidity\",\n    company: \"Microsoft Research\",\n    description: \"JM SHT30 64 v3.6\",\n    repo: \"https://github.com/microsoft/jacdac-msr-modules\",\n    firmwareSource: \"https://github.com/microsoft/jacdac-msr-modules/blob/main/targets/jm-v3.6/profile/env30.c\",\n    services: [\n      337754823,\n      382210232\n    ],\n    productIdentifiers: [\n      819953075\n    ],\n    version: \"3.6\",\n    designIdentifier: \"64\"\n  },\n  {\n    id: \"microsoft-research-jmsinglergbled42v01\",\n    name: \"JM Single RGB LED\",\n    company: \"Microsoft Research\",\n    description: \"\",\n    repo: \"https://github.com/microsoft/jacdac-msr-modules\",\n    link: \"https://github.com/microsoft/jacdac-msr-modules\",\n    services: [\n      506480888\n    ],\n    productIdentifiers: [\n      917828732\n    ],\n    tags: [\n      \"kit\"\n    ],\n    version: \"0.1\",\n    designIdentifier: \"42\"\n  },\n  {\n    id: \"microsoft-research-jmslider49v10\",\n    name: \"JM Slider\",\n    company: \"Microsoft Research\",\n    description: \"\",\n    repo: \"https://github.com/microsoft/jacdac-msr-modules\",\n    firmwareSource: \"https://github.com/microsoft/jacdac-msr-modules/blob/main/targets/jm-slider-49-1.0/profile/slider.c#\",\n    link: \"https://github.com/microsoft/jacdac-msr-modules\",\n    services: [\n      522667846\n    ],\n    productIdentifiers: [\n      981005156\n    ],\n    version: \"1.0\",\n    designIdentifier: \"49\",\n    status: \"deprecated\"\n  },\n  {\n    id: \"microsoft-research-jmslider49v11\",\n    name: \"JM Slider\",\n    company: \"Microsoft Research\",\n    description: \"\",\n    repo: \"https://github.com/microsoft/jacdac-msr-modules\",\n    firmwareSource: \"https://github.com/microsoft/jacdac-msr-modules/blob/main/targets/jm-slider-49-1.1/profile/slider.c\",\n    hardwareDesign: \"https://github.com/microsoft/jacdac-ddk/tree/main/electronics/kicad/reference-designs/slider\",\n    link: \"https://github.com/microsoft/jacdac-msr-modules\",\n    services: [\n      522667846\n    ],\n    productIdentifiers: [\n      966423091\n    ],\n    tags: [\n      \"kit\"\n    ],\n    version: \"1.1\",\n    designIdentifier: \"49\"\n  },\n  {\n    id: \"microsoft-research-jmsliderv20\",\n    name: \"JM Slider\",\n    company: \"Microsoft Research\",\n    description: \"A linear potentiometer (slider).\",\n    repo: \"https://github.com/microsoft/jacdac-msr-modules\",\n    firmwareSource: \"https://github.com/microsoft/jacdac-msr-modules/blob/main/targets/jm-v2.0/profile/slider.c\",\n    link: \"https://github.com/microsoft/jacdac-msr-modules\",\n    services: [\n      522667846\n    ],\n    productIdentifiers: [\n      1043615261\n    ],\n    version: \"2.0\",\n    status: \"deprecated\"\n  },\n  {\n    id: \"microsoft-research-jmsoiltemperatureds18b20v33\",\n    name: \"JM Soil Temperature DS18B20\",\n    company: \"Microsoft Research\",\n    description: \"JM Soil Temperature DS18B20 v3.3\",\n    repo: \"https://github.com/microsoft/jacdac-msr-modules\",\n    firmwareSource: \"https://github.com/microsoft/jacdac-msr-modules/blob/main/targets/jm-v3.3one/profile/soiltemp.c\",\n    services: [\n      337754823\n    ],\n    productIdentifiers: [\n      1039295899\n    ],\n    version: \"3.3\"\n  },\n  {\n    id: \"microsoft-research-jmspeechsynthesis61v33\",\n    name: \"JM Speech Synthesis\",\n    company: \"Microsoft Research\",\n    repo: \"https://github.com/microsoft/jacdac-msr-modules\",\n    firmwareSource: \"https://github.com/microsoft/jacdac-msr-modules/blob/main/targets/jm-v3.3/profile/ttsclick.c\",\n    services: [\n      302307733\n    ],\n    productIdentifiers: [\n      934541191\n    ],\n    version: \"3.3\",\n    designIdentifier: \"61\"\n  },\n  {\n    id: \"microsoft-research-jmspibridgev37v37\",\n    name: \"JM SPI bridge v3.7\",\n    company: \"Microsoft Research\",\n    description: \"JM SPI bridge v3.7\",\n    repo: \"https://github.com/microsoft/jacdac-msr-modules\",\n    firmwareSource: \"https://github.com/microsoft/jacdac-msr-modules/blob/main/targets/jm-spi-bridge-v3.7/profile/bridge.c\",\n    services: [\n      535147631,\n      530893146\n    ],\n    productIdentifiers: [\n      882232420\n    ],\n    version: \"3.7\"\n  },\n  {\n    id: \"microsoft-research-jmtemperaturehumidity18v10a\",\n    name: \"JM Temperature + Humidity\",\n    company: \"Microsoft Research\",\n    description: \"\",\n    repo: \"https://github.com/microsoft/jacdac-msr-modules\",\n    firmwareSource: \"https://github.com/microsoft/jacdac-msr-modules/blob/main/targets/jm-temp-humidity-18-1.0A/profile/env3.c\",\n    link: \"https://github.com/microsoft/jacdac-msr-modules\",\n    services: [\n      337754823,\n      382210232\n    ],\n    productIdentifiers: [\n      899442616\n    ],\n    version: \"1.0A\",\n    designIdentifier: \"18\",\n    status: \"deprecated\"\n  },\n  {\n    id: \"microsoft-research-jmtemperaturehumidity18v11\",\n    name: \"JM Temperature + Humidity\",\n    company: \"Microsoft Research\",\n    description: \"\",\n    repo: \"https://github.com/microsoft/jacdac-msr-modules\",\n    firmwareSource: \"https://github.com/microsoft/jacdac-msr-modules/blob/main/targets/jm-temp-humidity-18-1.1/profile/env3.c\",\n    hardwareDesign: \"https://github.com/microsoft/jacdac-ddk/tree/main/electronics/altium/reference-designs/JacdacRHTemp%2018-1.2\",\n    link: \"https://github.com/microsoft/jacdac-msr-modules\",\n    services: [\n      337754823,\n      382210232\n    ],\n    productIdentifiers: [\n      827772887\n    ],\n    tags: [\n      \"kit\"\n    ],\n    version: \"1.1\",\n    designIdentifier: \"18\"\n  },\n  {\n    id: \"microsoft-research-jmthermocouplemax667573v3873v38\",\n    name: \"JM Thermocouple MAX6675 73 v3.8\",\n    company: \"Microsoft Research\",\n    description: \"JM Thermocouple MAX6675 v3.8\",\n    repo: \"https://github.com/microsoft/jacdac-msr-modules\",\n    firmwareSource: \"https://github.com/microsoft/jacdac-c/blob/main/drivers/max6675.c\",\n    link: \"https://aka.ms/aaaabc\",\n    services: [\n      337754823\n    ],\n    productIdentifiers: [\n      1047456763\n    ],\n    version: \"3.8\",\n    designIdentifier: \"73\"\n  },\n  {\n    id: \"microsoft-research-jmtouchprotov20\",\n    name: \"JM Touch-Proto\",\n    company: \"Microsoft Research\",\n    description: \"A multi-touch sensor based on proto board.\",\n    repo: \"https://github.com/microsoft/jacdac-msr-modules\",\n    firmwareSource: \"https://github.com/microsoft/jacdac-msr-modules/blob/main/targets/jm-v2.0p/profile/multitouch.c\",\n    link: \"https://github.com/microsoft/jacdac-msr-modules\",\n    services: [\n      416636459\n    ],\n    productIdentifiers: [\n      1067172458\n    ],\n    version: \"2.0\",\n    status: \"deprecated\"\n  },\n  {\n    id: \"microsoft-research-jmuviilluminance65v3665v36\",\n    name: \"JM UVI/Illuminance 65 v3.6\",\n    company: \"Microsoft Research\",\n    description: \"JM UVI/Illuminance 65 v3.6\",\n    repo: \"https://github.com/microsoft/jacdac-msr-modules\",\n    firmwareSource: \"https://github.com/microsoft/jacdac-msr-modules/blob/main/targets/jm-v3.6/profile/uv.c\",\n    services: [\n      510577394,\n      527306128\n    ],\n    productIdentifiers: [\n      1021617002\n    ],\n    version: \"3.6\",\n    designIdentifier: \"65\"\n  },\n  {\n    id: \"microsoft-research-mikrobuscarrierboard53v01\",\n    name: \"MikrobusCarrierBoard\",\n    company: \"Microsoft Research\",\n    repo: \"\",\n    services: [],\n    productIdentifiers: [\n      961789360\n    ],\n    version: \"0.1\",\n    designIdentifier: \"53\",\n    status: \"experimental\"\n  },\n  {\n    id: \"microbit-foundation-microbitv2\",\n    name: \"micro:bit V2\",\n    company: \"microbit foundation\",\n    description: \"The new micro:bit V2 has a built-in microphone and speaker to allow sound-sensing and sound-making without the need to attach another device. It also introduces capacitive touch sensing, a power-saving mode and more computing power for the classroom.\",\n    link: \"https://microsoft.github.io/jacdac-docs/overview/kit/oob/\",\n    services: [],\n    productIdentifiers: [\n      854992189,\n      888455511\n    ],\n    transport: {\n      type: \"usb\"\n    },\n    tags: [\n      \"kit\"\n    ],\n    firmwares: [\n      {\n        name: \"Out-Of-the-Box Experience\",\n        url: \"https://github.com/microsoft/pxt-jacdac/releases/latest/download/microbit-oob.hex\",\n        productIdentifier: 888455511\n      }\n    ],\n    bootloader: {\n      driveName: \"MICROBIT\",\n      firmwareFormat: \"hex\"\n    }\n  }\n];\n\n// src/jdom/catalog.ts\nfunction looksRandom(n) {\n  const s = n.toString(16);\n  const h = \"0123456789abcdef\";\n  for (let i = 0; i < h.length; ++i) {\n    const hh = h[i];\n    if (s.indexOf(hh + hh + hh) >= 0)\n      return false;\n  }\n  if (/f00d|dead|deaf|beef/.test(s))\n    return false;\n  return true;\n}\nvar DeviceCatalog = class extends JDEventSource {\n  constructor() {\n    super();\n    this._specifications = devices_default;\n  }\n  update(specifications) {\n    if (JSON.stringify(this._specifications) !== JSON.stringify(specifications)) {\n      this._specifications = specifications.slice(0);\n      this.emit(CHANGE);\n    }\n  }\n  specifications(options) {\n    const { includeDeprecated, includeExperimental } = options || {};\n    let r = this._specifications.slice(0);\n    if (!includeDeprecated)\n      r = r.filter((d) => d.status !== \"deprecated\");\n    if (!includeExperimental)\n      r = r.filter((d) => d.status !== \"experimental\");\n    return r;\n  }\n  specificationFromProductIdentifier(productIdentifier) {\n    if (isNaN(productIdentifier))\n      return void 0;\n    const spec = this._specifications.find((spec2) => {\n      var _a;\n      return ((_a = spec2.productIdentifiers) == null ? void 0 : _a.indexOf(productIdentifier)) > -1;\n    });\n    return spec;\n  }\n  specificationFromIdentifier(id) {\n    if (id === void 0)\n      return void 0;\n    const spec = this._specifications.find((spec2) => spec2.id === id);\n    return spec;\n  }\n  specificationsForService(serviceClass2) {\n    if (isNaN(serviceClass2))\n      return void 0;\n    return this._specifications.filter((spec) => {\n      var _a;\n      return ((_a = spec.services) == null ? void 0 : _a.indexOf(serviceClass2)) > -1;\n    });\n  }\n  vendorIds(type) {\n    return this._specifications.filter((spec) => {\n      var _a;\n      return ((_a = spec.transport) == null ? void 0 : _a.type) === type;\n    }).map((spec) => spec.transport.vendorId).filter((v) => !!v);\n  }\n  matchVendorId(type, id) {\n    if (isNaN(id))\n      return false;\n    const ids = this.vendorIds(type);\n    return ids.indexOf(id) > -1;\n  }\n  uniqueFirmwareId() {\n    const genFirmwareId = () => {\n      const n = cryptoRandomUint32(1);\n      if (n === void 0)\n        return void 0;\n      return n[0] & 268435455 | 805306368;\n    };\n    let id = genFirmwareId();\n    while (id !== void 0 && (!looksRandom(id) || deviceCatalog.specificationFromProductIdentifier(id))) {\n      id = genFirmwareId();\n    }\n    return id !== void 0 && toFullHex([id]);\n  }\n  uniqueServiceId() {\n    const genServId = () => {\n      const n = cryptoRandomUint32(1);\n      if (n === void 0)\n        return void 0;\n      return n[0] & 268435455 | 268435456;\n    };\n    let id = genServId();\n    while (id !== void 0 && (!looksRandom(id) || serviceSpecificationFromClassIdentifier(id))) {\n      id = genServId();\n    }\n    return id !== void 0 && toFullHex([id]);\n  }\n  uniqueDeviceId() {\n    const n = cryptoRandomUint32(2);\n    return n !== void 0 && toFullHex([n[0], n[1]]);\n  }\n};\nvar deviceCatalog = new DeviceCatalog();\n\n// src/jdom/bus.ts\nvar JDBus = class extends JDNode {\n  constructor(transports, options) {\n    super();\n    this._transports = [];\n    this._bridges = [];\n    this._devices = [];\n    this._lastPingLoggerTime = 0;\n    this._lastResetInTime = 0;\n    this._restartCounter = 0;\n    this._minLoggerPriority = 4 /* Silent */;\n    this._gcDevicesFrozen = 0;\n    this._serviceProviders = [];\n    this._streaming = false;\n    this._passive = false;\n    this._client = false;\n    this._dashboard = false;\n    this._proxy = false;\n    const {\n      deviceId,\n      scheduler,\n      parentOrigin,\n      client,\n      disableRoleManager,\n      dashboard,\n      proxy\n    } = options || {};\n    this._roleManagerClient = disableRoleManager ? null : void 0;\n    this.selfDeviceId = deviceId || randomDeviceId();\n    this.scheduler = scheduler || new WallClockScheduler();\n    this.parentOrigin = parentOrigin || \"*\";\n    this._client = !!client;\n    this._dashboard = !!dashboard;\n    this._proxy = !!proxy;\n    this.stats = new BusStatsMonitor(this);\n    this.deviceCatalog = new DeviceCatalog();\n    transports == null ? void 0 : transports.filter((tr) => !!tr).map((tr) => this.addTransport(tr));\n    this.on(SELF_ANNOUNCE, this.handleSelfAnnounce.bind(this));\n    this.on(DEVICE_ANNOUNCE, this.handleRealTimeClockSync.bind(this));\n    this.on(DEVICE_CHANGE, this.handleRoleManager.bind(this));\n    this.start();\n  }\n  configureBroadcastChannel() {\n    if (typeof BroadcastChannel === \"undefined\" || typeof window === \"undefined\")\n      return;\n    const channel = new BroadcastChannel(\"jacdac\");\n    const postConnectionState = () => {\n      channel.postMessage({\n        id: this.selfDevice.shortId,\n        event: CONNECTION_STATE,\n        transports: this._transports.map((tr) => ({\n          type: tr.type,\n          connectionState: tr.connectionState\n        }))\n      });\n    };\n    const unsubConnectionState = this.subscribe(CONNECTION_STATE, postConnectionState);\n    const handleVisibilityChange = () => {\n      channel.postMessage({\n        id: this.selfDevice.shortId,\n        event: \"visibilitychange\",\n        visibilityState: document.visibilityState\n      });\n    };\n    const handleBroadcastMessage = async (msg) => {\n      const { data } = msg;\n      const { event, transports, visibilityState } = data;\n      switch (event) {\n        case \"visibilitychange\": {\n          if (visibilityState === \"visible\")\n            await this.disconnect();\n          else {\n            await this.delay(2e3);\n            await this.connect(true);\n          }\n          break;\n        }\n        case CONNECTION_STATE: {\n          transports.filter((tr) => tr.connectionState === \"connecting\" /* Connecting */).forEach((ctr) => {\n            this.transports.filter((tr) => tr.type === ctr.type).forEach((tr) => tr.disconnect());\n          });\n        }\n      }\n    };\n    channel.addEventListener(\"message\", handleBroadcastMessage, false);\n    document.addEventListener(\"visibilitychange\", handleVisibilityChange);\n    this._unsubscribeBroadcastChannel = () => {\n      unsubConnectionState();\n      document.removeEventListener(\"visibilitychange\", handleVisibilityChange);\n      channel.removeEventListener(\"message\", handleBroadcastMessage);\n      channel.close();\n    };\n    handleVisibilityChange();\n  }\n  get client() {\n    return this._client;\n  }\n  set client(value) {\n    if (!!value !== this._client) {\n      this._client = !!value;\n      this.emit(CHANGE);\n    }\n  }\n  get transports() {\n    return this._transports.slice(0);\n  }\n  addTransport(transport) {\n    if (!transport || this._transports.indexOf(transport) > -1)\n      return;\n    this._transports.push(transport);\n    transport.bus = this;\n    transport.bus.on(CONNECTING, () => this.preConnect(transport));\n  }\n  get bridges() {\n    return this._bridges.slice(0);\n  }\n  addBridge(bridge) {\n    if (this._bridges.indexOf(bridge) < 0) {\n      this._bridges.push(bridge);\n      bridge.bus = this;\n      this.emit(CHANGE);\n    }\n    return () => this.removeBridge(bridge);\n  }\n  removeBridge(bridge) {\n    const i = this._bridges.indexOf(bridge);\n    if (i > -1) {\n      this._bridges.splice(i, 1);\n      bridge.bus = void 0;\n      this.emit(CHANGE);\n    }\n  }\n  get passive() {\n    return this._passive;\n  }\n  set passive(value) {\n    if (value !== this._passive) {\n      this._passive = value;\n      this.emit(CHANGE);\n    }\n  }\n  preConnect(transport) {\n    return Promise.all(this._transports.filter((t) => t !== transport).map((t) => t.disconnect()));\n  }\n  async connect(background) {\n    if (this.connected)\n      return;\n    for (const transport of this._transports) {\n      await transport.connect(background);\n      if (transport.connected)\n        break;\n    }\n    this.emit(CHANGE);\n  }\n  async disconnect() {\n    for (const transport of this._transports) {\n      await transport.disconnect();\n    }\n    this.emit(CHANGE);\n  }\n  start() {\n    this.configureBroadcastChannel();\n    if (!this._announceInterval)\n      this._announceInterval = this.scheduler.setInterval(() => {\n        if (!this.passive)\n          this.emit(SELF_ANNOUNCE);\n      }, 499);\n    this.backgroundRefreshRegisters = true;\n    if (!this._gcInterval)\n      this._gcInterval = this.scheduler.setInterval(() => this.gcDevices(), JD_DEVICE_DISCONNECTED_DELAY);\n  }\n  get running() {\n    return !!this._announceInterval;\n  }\n  async stop() {\n    await this.disconnect();\n    if (this._unsubscribeBroadcastChannel) {\n      this._unsubscribeBroadcastChannel();\n      this._unsubscribeBroadcastChannel = void 0;\n    }\n    if (this._announceInterval) {\n      this.scheduler.clearInterval(this._announceInterval);\n      this._announceInterval = void 0;\n    }\n    this.safeBoot = false;\n    this.backgroundRefreshRegisters = false;\n    if (this._gcInterval) {\n      this.scheduler.clearInterval(this._gcInterval);\n      this._gcInterval = void 0;\n    }\n  }\n  async dispose() {\n    console.debug(`${this.id}: disposing.`);\n    await this.stop();\n    this._transports.forEach((transport) => transport.dispose());\n  }\n  get safeBoot() {\n    return !!this._safeBootInterval;\n  }\n  set safeBoot(enabled) {\n    if (enabled && !this._safeBootInterval) {\n      this._safeBootInterval = this.scheduler.setInterval(() => {\n        if (this._devices.some((d) => d.firmwareUpdater))\n          return;\n        sendStayInBootloaderCommand(this);\n      }, 50);\n      this.emit(CHANGE);\n    } else if (!enabled && this._safeBootInterval) {\n      this.scheduler.clearInterval(this._safeBootInterval);\n      this._safeBootInterval = void 0;\n      this.emit(CHANGE);\n    }\n  }\n  get connected() {\n    return this._transports.some((t) => t.connected);\n  }\n  get disconnected() {\n    return this._transports.every((t) => t.disconnected);\n  }\n  clear(timestamp2 = 0) {\n    var _a;\n    if ((_a = this._serviceProviders) == null ? void 0 : _a.length) {\n      this._serviceProviders.forEach((host) => host.bus = void 0);\n      this._serviceProviders = [];\n    }\n    const devs = this._devices;\n    if (devs == null ? void 0 : devs.length) {\n      this._devices = [];\n      devs.forEach((dev) => {\n        dev.disconnect();\n        this.emit(DEVICE_DISCONNECT, dev);\n        this.emit(DEVICE_CHANGE, dev);\n      });\n    }\n    this.resetTime(timestamp2);\n  }\n  get id() {\n    return this.nodeKind;\n  }\n  get name() {\n    return \"bus\";\n  }\n  get friendlyName() {\n    return this.name;\n  }\n  get qualifiedName() {\n    return this.name;\n  }\n  get nodeKind() {\n    return BUS_NODE_NAME;\n  }\n  get roleManager() {\n    return this._roleManagerClient;\n  }\n  setRoleManagerService(service) {\n    var _a;\n    if (this._roleManagerClient === null)\n      return;\n    if (((_a = this._roleManagerClient) == null ? void 0 : _a.service) === service)\n      return;\n    if (this._roleManagerClient) {\n      this._roleManagerClient.unmount();\n      this._roleManagerClient = void 0;\n    }\n    if (service) {\n      this._roleManagerClient = new RoleManagerClient(service);\n      this._roleManagerClient.startRefreshRoles();\n    }\n    this.emit(ROLE_MANAGER_CHANGE);\n    this.emit(CHANGE);\n  }\n  toString() {\n    var _a, _b;\n    return `bus: ${((_a = this._devices) == null ? void 0 : _a.length) || 0} devices, ${((_b = this._transports) == null ? void 0 : _b.filter((tr) => tr.connected).map((tr) => tr.type).join(\", \")) || \"\"}`;\n  }\n  describe() {\n    return `\ntransport:\n${this._transports.map((tr) => `  ${tr.type}: ${tr.connectionState}`).join(\"\\n\")}\n\n${this.devices({ ignoreInfrastructure: false }).map((dev) => {\n      var _a;\n      return `device: \n  id: ${dev.shortId} (0x${dev.deviceId})\n  product: ${dev.name || \"?\"} (0x${((_a = dev.productIdentifier) == null ? void 0 : _a.toString(16)) || \"?\"})\n  firmware_version: ${dev.firmwareVersion || \"\"}\n  uptime: ${dev.uptime || \"\"}\n  services:\n${dev.services().slice(1).map((srv) => {\n        var _a2;\n        return [\n          `    ${((_a2 = srv.specification) == null ? void 0 : _a2.shortName) || srv.name} (0x${srv.serviceClass.toString(16)})`,\n          ...srv.registers().filter((reg) => !!reg.data).map((reg) => {\n            var _a3;\n            return `        ${((_a3 = reg.specification) == null ? void 0 : _a3.kind) || \"reg\"} ${reg.name}: ${reg.humanValue} (${toHex2(reg.data)})`;\n          }),\n          ...srv.events.map((ev) => `        event ${ev.name}: ${ev.count}`)\n        ].join(\"\\n\");\n      }).join(\"\\n\")}\n`;\n    }).join(\"\\n\")}`;\n  }\n  node(id) {\n    const resolve = () => {\n      var _a, _b, _c, _d, _e, _f, _g, _h;\n      const m = /^(?<type>bus|device|service|register|event|field)(:(?<dev>\\w+)(:(?<srv>\\w+)(:(?<reg>\\w+(:(?<idx>\\w+))?))?)?)?$/.exec(id);\n      if (!m)\n        return void 0;\n      const type = m.groups[\"type\"];\n      const dev = m.groups[\"dev\"];\n      const srv = parseInt(m.groups[\"srv\"], 16);\n      const reg = parseInt(m.groups[\"reg\"], 16);\n      const idx = parseInt(m.groups[\"idx\"], 16);\n      switch (type) {\n        case BUS_NODE_NAME:\n          return this;\n        case DEVICE_NODE_NAME:\n          return this.device(dev, true);\n        case SERVICE_NODE_NAME:\n          return (_a = this.device(dev, true)) == null ? void 0 : _a.service(srv);\n        case REGISTER_NODE_NAME:\n          return (_c = (_b = this.device(dev, true)) == null ? void 0 : _b.service(srv)) == null ? void 0 : _c.register(reg);\n        case EVENT_NODE_NAME:\n          return (_e = (_d = this.device(dev, true)) == null ? void 0 : _d.service(srv)) == null ? void 0 : _e.event(reg);\n        case FIELD_NODE_NAME:\n          return (_h = (_g = (_f = this.device(dev, true)) == null ? void 0 : _f.service(srv)) == null ? void 0 : _g.register(reg)) == null ? void 0 : _h.fields[idx];\n      }\n      console.info(`node ${id} not found`);\n      return void 0;\n    };\n    const node = resolve();\n    return node;\n  }\n  resetTime(delta = 0) {\n    this.scheduler.resetTime(delta);\n    this.emit(CHANGE);\n  }\n  get timestamp() {\n    return this.scheduler.timestamp;\n  }\n  get streaming() {\n    return this._streaming;\n  }\n  set streaming(value) {\n    this._streaming = value;\n  }\n  delay(millis, value) {\n    return new Promise((resolve) => this.scheduler.setTimeout(() => resolve(value), millis));\n  }\n  get minLoggerPriority() {\n    return this._minLoggerPriority;\n  }\n  set minLoggerPriority(priority) {\n    if (priority !== this._minLoggerPriority) {\n      this._lastPingLoggerTime = -Infinity;\n      this._minLoggerPriority = priority;\n      this.emit(CHANGE);\n    }\n  }\n  get parent() {\n    return void 0;\n  }\n  async handleRealTimeClockSync(device) {\n    if (device.hasService(SRV_REAL_TIME_CLOCK))\n      await RealTimeClockServer.syncTime(this);\n  }\n  handleRoleManager() {\n    const service = this.services({ serviceClass: SRV_ROLE_MANAGER })[0];\n    this.setRoleManagerService(service);\n  }\n  async sendPacketAsync(packet) {\n    packet.timestamp = this.timestamp;\n    if (Flags.trace)\n      packet.meta[META_TRACE] = stack();\n    if (this.passive)\n      return;\n    this.emit(PACKET_SEND, packet);\n    await Promise.all(this._transports.map((transport) => transport.sendPacketAsync(packet)));\n  }\n  get firmwareBlobs() {\n    return this._firmwareBlobs;\n  }\n  set firmwareBlobs(blobs) {\n    this._firmwareBlobs = blobs;\n    this.emit(FIRMWARE_BLOBS_CHANGE);\n    this.emit(CHANGE);\n  }\n  devices(options) {\n    if ((options == null ? void 0 : options.serviceName) && (options == null ? void 0 : options.serviceClass) > -1)\n      throw Error(\"serviceClass and serviceName cannot be used together\");\n    const sc = (options == null ? void 0 : options.serviceClass) > -1 ? options == null ? void 0 : options.serviceClass : serviceClass(options == null ? void 0 : options.serviceName);\n    let r = this._devices.slice(0);\n    if (sc > -1)\n      r = r.filter((s) => s.hasService(sc));\n    if (options == null ? void 0 : options.ignoreInfrastructure)\n      r = r.filter((s) => s.deviceId !== this.selfDeviceId && s.serviceClasses.indexOf(SRV_INFRASTRUCTURE) < 0);\n    if (options == null ? void 0 : options.announced)\n      r = r.filter((s) => s.announced);\n    if (options == null ? void 0 : options.ignoreSimulators)\n      r = r.filter((r2) => !this.findServiceProvider(r2.deviceId));\n    if (options == null ? void 0 : options.productIdentifier)\n      r = r.filter((r2) => !!r2.productIdentifier);\n    if (options == null ? void 0 : options.physical)\n      r = r.filter((r2) => !!r2.isPhysical);\n    return r;\n  }\n  serviceProviders() {\n    return this._serviceProviders.slice(0);\n  }\n  findServiceProvider(deviceId) {\n    return this._serviceProviders.find((d) => d.deviceId === deviceId);\n  }\n  addServiceProvider(provider) {\n    if (provider && this._serviceProviders.indexOf(provider) < 0) {\n      this._serviceProviders.push(provider);\n      provider.bus = this;\n      this.emit(SERVICE_PROVIDER_ADDED, provider);\n      this.emit(CHANGE);\n    }\n    return this.device(provider.deviceId);\n  }\n  removeServiceProvider(provider) {\n    if (!provider)\n      return;\n    const i = this._serviceProviders.indexOf(provider);\n    if (i > -1) {\n      this.removeDevice(provider.deviceId);\n      this._serviceProviders.splice(i, 1);\n      provider.bus = void 0;\n      this.emit(SERVICE_PROVIDER_REMOVED, provider);\n      this.emit(CHANGE);\n    }\n  }\n  clearServiceProviders() {\n    this._serviceProviders.forEach((provider) => {\n      this.removeDevice(provider.deviceId);\n      provider.bus = void 0;\n      this.emit(SERVICE_PROVIDER_REMOVED, provider);\n    });\n    this._serviceProviders = [];\n    this.emit(CHANGE);\n  }\n  removeDevice(deviceId) {\n    const devi = this._devices.findIndex((d) => d.deviceId === deviceId);\n    if (devi > -1) {\n      const dev = this._devices[devi];\n      this._devices.splice(devi, 1);\n      dev.disconnect();\n      this.emit(DEVICE_DISCONNECT, dev);\n      this.emit(DEVICE_CHANGE, dev);\n    }\n  }\n  get children() {\n    return this.devices();\n  }\n  services(options) {\n    return arrayConcatMany(this.devices(options).map((d) => d.services(options)));\n  }\n  device(id, skipCreate, pkt) {\n    if (id === \"0000000000000000\" && !skipCreate) {\n      console.warn(\"jacdac: trying to access device 0000000000000000\");\n      return void 0;\n    }\n    let d = this._devices.find((d2) => d2.deviceId == id);\n    if (!d && !skipCreate) {\n      if (this.devicesFrozen) {\n        console.debug(`info`, `devices frozen, dropping ${id}`);\n        return void 0;\n      }\n      d = new JDDevice(this, id, pkt);\n      this._devices.push(d);\n      if (Flags.diagnostics)\n        console.debug(`${id === this.selfDeviceId ? \"self\" : \"new\"} device ${d.shortId} (${id})`);\n      this._devices.sort((l, r) => strcmp(l.deviceId, r.deviceId));\n      this.emit(DEVICE_CONNECT, d);\n      this.emit(DEVICE_CHANGE, d);\n      this.emit(CHANGE);\n    }\n    return d;\n  }\n  pushDeviceFrozen() {\n    this._gcDevicesFrozen++;\n  }\n  popDeviceFrozen() {\n    this._gcDevicesFrozen = Math.max(0, this._gcDevicesFrozen - 1);\n  }\n  get devicesFrozen() {\n    return this._gcDevicesFrozen > 0;\n  }\n  gcDevices() {\n    this.emit(DEVICE_CLEAN);\n    if (this.devicesFrozen) {\n      console.debug(\"devices frozen\");\n      return;\n    }\n    const LOST_DELAY = JD_DEVICE_LOST_DELAY;\n    const DISCONNECTED_DELAY = JD_DEVICE_DISCONNECTED_DELAY;\n    const lostCutoff = this.timestamp - LOST_DELAY;\n    const disconnectedCutoff = this.timestamp - DISCONNECTED_DELAY;\n    for (let i = 0; i < this._devices.length; ++i) {\n      const dev = this._devices[i];\n      if (dev.firmwareUpdater)\n        continue;\n      if (dev.lastSeen < disconnectedCutoff) {\n        this._devices.splice(i, 1);\n        i--;\n        this.disconnectDevice(dev);\n      } else if (dev.lastSeen < lostCutoff) {\n        dev.lost = true;\n      }\n    }\n  }\n  disconnectDevice(dev) {\n    dev.disconnect();\n    this.emit(DEVICE_DISCONNECT, dev);\n    this.emit(DEVICE_CHANGE, dev);\n    this.emit(CHANGE);\n  }\n  processPacket(pkt) {\n    pkt.assignDevice(this);\n    if (!pkt.isMultiCommand && !pkt.device) {\n      if (Flags.diagnostics)\n        console.debug(`unknown pkt device ${pkt.deviceIdentifier}`, {\n          pkt\n        });\n      this.emit(PACKET_RECEIVE_NO_DEVICE, pkt);\n      return;\n    }\n    this.emit(PACKET_PRE_PROCESS, pkt);\n    let isAnnounce = false;\n    if (!pkt.device) {\n    } else if (pkt.isCommand) {\n      if (pkt.deviceIdentifier == this.selfDeviceId) {\n        if (pkt.requiresAck) {\n          const ack = Packet.onlyHeader(pkt.crc);\n          ack.serviceIndex = JD_SERVICE_INDEX_CRC_ACK;\n          ack.deviceIdentifier = this.selfDeviceId;\n          ack.sendReportAsync(this.selfDevice);\n        }\n      }\n      pkt.device.processPacket(pkt);\n    } else {\n      pkt.device.lastSeen = pkt.timestamp;\n      if (pkt.serviceIndex == JD_SERVICE_INDEX_CTRL) {\n        if (pkt.serviceCommand == CMD_ADVERTISEMENT_DATA) {\n          isAnnounce = true;\n          pkt.device.processAnnouncement(pkt);\n        } else if (pkt.isMultiCommand && pkt.serviceCommand == (CMD_SET_REG | 128 /* ResetIn */)) {\n          this._lastResetInTime = this.timestamp;\n        }\n      }\n      pkt.device.processPacket(pkt);\n    }\n    this.emit(PACKET_PROCESS, pkt);\n    if (isAnnounce) {\n      this.emit(PACKET_RECEIVE_ANNOUNCE, pkt);\n    } else {\n      this.emit(PACKET_RECEIVE, pkt);\n      if (pkt.isEvent && !pkt.isRepeatedEvent)\n        this.emit(PACKET_EVENT, pkt);\n      else if (pkt.isReport)\n        this.emit(PACKET_REPORT, pkt);\n    }\n  }\n  get selfDevice() {\n    return this.device(this.selfDeviceId);\n  }\n  handleSelfAnnounce() {\n    return Promise.all([\n      this.sendAnnounce(),\n      this.sendResetIn(),\n      this.sendPingLoggers()\n    ]).then(() => {\n    });\n  }\n  async sendAnnounce() {\n    if (this._restartCounter < 15)\n      this._restartCounter++;\n    const pkt = Packet.jdpacked(CMD_ADVERTISEMENT_DATA, \"u32 r: u32\", [\n      this._restartCounter | (this._client ? 2048 /* IsClient */ : 0) | 512 /* SupportsBroadcast */ | 1024 /* SupportsFrames */ | 256 /* SupportsACK */,\n      [\n        [SRV_INFRASTRUCTURE],\n        this._dashboard ? [SRV_DASHBOARD] : void 0,\n        this._proxy ? [SRV_PROXY] : void 0\n      ].filter((sc) => !!sc)\n    ]);\n    pkt.serviceIndex = JD_SERVICE_INDEX_CTRL;\n    pkt.deviceIdentifier = this.selfDeviceId;\n    await pkt.sendReportAsync(this.selfDevice);\n  }\n  get lastResetInTime() {\n    return this._lastResetInTime;\n  }\n  async sendResetIn() {\n    if (!this.devices({ ignoreInfrastructure: true }).length)\n      return;\n    this._lastResetInTime = this.timestamp;\n    const rst = Packet.jdpacked(CMD_SET_REG | 128 /* ResetIn */, \"u32\", [RESET_IN_TIME_US]);\n    await rst.sendAsMultiCommandAsync(this, SRV_CONTROL);\n  }\n  async sendStopStreaming() {\n    const readingRegisters = this.services({\n      announced: true,\n      ignoreInfrastructure: true\n    }).map((srv) => srv.readingRegister && srv.register(3 /* StreamingSamples */)).filter((reg) => !!reg);\n    await Promise.all(readingRegisters.map((reg) => reg.sendSetPackedAsync([0])));\n  }\n  async sendPingLoggers() {\n    if (this._minLoggerPriority < 4 /* Silent */ && this.timestamp - this._lastPingLoggerTime > PING_LOGGERS_POLL && this.devices({\n      ignoreInfrastructure: true,\n      serviceClass: SRV_LOGGER\n    }).length > 0) {\n      this._lastPingLoggerTime = this.timestamp;\n      const pkt = Packet.jdpacked(CMD_SET_REG | 128 /* MinPriority */, \"u8\", [this._minLoggerPriority]);\n      await pkt.sendAsMultiCommandAsync(this, SRV_LOGGER);\n    }\n  }\n  get backgroundRefreshRegisters() {\n    return !!this._refreshRegistersInterval;\n  }\n  set backgroundRefreshRegisters(enabled) {\n    if (!!enabled !== this.backgroundRefreshRegisters) {\n      if (!enabled) {\n        if (this._refreshRegistersInterval)\n          this.scheduler.clearInterval(this._refreshRegistersInterval);\n        this._refreshRegistersInterval = void 0;\n      } else {\n        this._refreshRegistersInterval = this.scheduler.setInterval(this.handleRefreshRegisters.bind(this), REFRESH_REGISTER_POLL);\n      }\n    }\n  }\n  handleRefreshRegisters() {\n    const devices = this._devices.filter((device) => device.announced && !device.lost && !device.hasService(SRV_PROXY) && !device.firmwareUpdater);\n    if (!devices.length)\n      return;\n    const registers = arrayConcatMany(devices.map((device) => arrayConcatMany(device.services({ specification: true }).map((service) => service.registers().filter((reg) => !reg.notImplemented).filter((reg) => this._streaming && reg.code === 257 /* Reading */ || reg.needsRefresh || reg.listenerCount(REPORT_RECEIVE) > 0 || reg.listenerCount(REPORT_UPDATE) > 0).filter((reg) => !reg.data || !(isConstRegister(reg.specification) || reg.code === 262 /* ReadingError */)).filter((reg) => {\n      var _a;\n      return !((_a = reg.specification) == null ? void 0 : _a.optional) || reg.lastGetAttempts < REGISTER_OPTIONAL_POLL_COUNT;\n    })))));\n    for (const register of registers) {\n      const { lastGetAttempts, service, specification } = register;\n      const noDataYet = !register.data;\n      const age = this.timestamp - register.lastGetTimestamp;\n      const backoff = lastGetAttempts;\n      if (register.needsRefresh && lastGetAttempts == 0) {\n        register.sendGetAsync();\n      } else if (isReading(specification) && isSensor(service.specification)) {\n        const intervalRegister = service.register(4 /* StreamingInterval */);\n        let interval = intervalRegister == null ? void 0 : intervalRegister.uintValue;\n        if (interval === void 0) {\n          const preferredIntervalRegister = service.register(258 /* StreamingPreferredInterval */);\n          const preferredInterval = preferredIntervalRegister == null ? void 0 : preferredIntervalRegister.uintValue;\n          interval = preferredInterval;\n          if (interval === void 0) {\n            if (intervalRegister && !intervalRegister.data && this.timestamp - intervalRegister.lastGetTimestamp > REGISTER_POLL_STREAMING_INTERVAL)\n              intervalRegister.sendGetAsync();\n            if (preferredIntervalRegister && !preferredIntervalRegister.data && this.timestamp - preferredIntervalRegister.lastGetTimestamp > REGISTER_POLL_STREAMING_INTERVAL)\n              preferredIntervalRegister.sendGetAsync();\n          }\n        }\n        if (interval === void 0)\n          interval = specification.preferredInterval || STREAMING_DEFAULT_INTERVAL;\n        const streamingSamplesRegister = service.register(3 /* StreamingSamples */);\n        if (streamingSamplesRegister) {\n          const streamingSamplesAge = this.timestamp - streamingSamplesRegister.lastSetTimestamp;\n          const midSamplesAge = interval * 255 >> 1;\n          if (streamingSamplesAge > midSamplesAge) {\n            streamingSamplesRegister.sendSetPackedAsync([255]);\n          }\n        } else if (noDataYet && age > 500) {\n          register.sendGetAsync();\n        }\n      } else {\n        const volatile = !!(specification == null ? void 0 : specification.volatile);\n        const expiration = volatile ? Math.min(REGISTER_POLL_REPORT_VOLATILE_MAX_INTERVAL, REGISTER_POLL_REPORT_VOLATILE_INTERVAL * (1 << backoff)) : Math.min(REGISTER_POLL_REPORT_MAX_INTERVAL, (noDataYet ? REGISTER_POLL_FIRST_REPORT_INTERVAL : REGISTER_POLL_REPORT_INTERVAL) * (1 << backoff));\n        if (age > expiration) {\n          register.sendGetAsync();\n        }\n      }\n    }\n    this.emit(REFRESH);\n    this._serviceProviders.map((host) => host.emit(REFRESH));\n  }\n  withTimeout(timeout, promise) {\n    return new Promise((resolve, reject) => {\n      let done = false;\n      const tid = setTimeout(() => {\n        if (!done) {\n          done = true;\n          if (!this._transports.some((tr) => tr.connected)) {\n            this.emit(TIMEOUT_DISCONNECT);\n            resolve(void 0);\n          } else {\n            this.emit(TIMEOUT);\n            this.emit(ERROR, \"Timeout (\" + timeout + \"ms)\");\n            resolve(void 0);\n          }\n        }\n      }, timeout);\n      promise.then((v) => {\n        if (!done) {\n          done = true;\n          clearTimeout(tid);\n          resolve(v);\n        } else {\n          this.emit(LATE);\n        }\n      }, (e) => {\n        if (!done) {\n          done = true;\n          clearTimeout(tid);\n          reject(e);\n        }\n      });\n    });\n  }\n};\n\n// src/jdom/trace/traceplayer.ts\nvar TracePlayer = class extends JDClient {\n  constructor(bus, speed = 1) {\n    super();\n    this.bus = bus;\n    this.speed = speed;\n    this._busStartTimestamp = 0;\n    this._index = 0;\n    this._lastProgressEmit = 0;\n    this.tick = this.tick.bind(this);\n    this.mount(() => this.stop());\n  }\n  get running() {\n    return !!this._interval;\n  }\n  get trace() {\n    return this._trace;\n  }\n  set trace(t) {\n    if (t !== this._trace) {\n      this.stop();\n      this._trace = t;\n      this.emit(CHANGE);\n    }\n  }\n  get elapsed() {\n    return (this.bus.timestamp - this._busStartTimestamp) * this.speed;\n  }\n  get progress() {\n    if (!this.trace)\n      return 0;\n    return Math.max(0, Math.min(1, this.elapsed / this.trace.duration));\n  }\n  get length() {\n    var _a;\n    return ((_a = this.trace) == null ? void 0 : _a.length) || 0;\n  }\n  start() {\n    if (this._interval || !this._trace)\n      return;\n    this._busStartTimestamp = this.bus.timestamp;\n    this._index = 0;\n    this._interval = this.bus.scheduler.setInterval(this.tick, 50);\n    this.emit(CHANGE);\n    this.emitProgress(true);\n  }\n  stop() {\n    if (this._interval) {\n      this.bus.scheduler.clearInterval(this._interval);\n      this._interval = void 0;\n      this.emitProgress(true);\n      this.emit(CHANGE);\n    }\n  }\n  tick() {\n    var _a;\n    if (!this._trace)\n      return;\n    const busElapsed = this.elapsed;\n    const packets = this.trace.packets;\n    const packetStart = ((_a = packets[0]) == null ? void 0 : _a.timestamp) || 0;\n    while (this._index < packets.length) {\n      const packet = packets[this._index];\n      const packetElapsed = packet.timestamp - packetStart;\n      if (packetElapsed > busElapsed)\n        break;\n      const pkt = packet.clone();\n      pkt.replay = true;\n      pkt.timestamp = this._busStartTimestamp + packetElapsed;\n      this.bus.processPacket(pkt);\n      this._index++;\n    }\n    this.emitProgress();\n    if (this._index >= packets.length)\n      this.stop();\n  }\n  emitProgress(force) {\n    if (force || this.bus.timestamp - this._lastProgressEmit > 250) {\n      this.emit(PROGRESS, this.progress);\n      this._lastProgressEmit = this.bus.timestamp;\n    }\n  }\n};\n\n// src/jdom/logparser.ts\nfunction parseTrace(contents) {\n  const description = [];\n  const packets = [];\n  contents == null ? void 0 : contents.split(/\\r?\\n/).forEach((ln) => {\n    const m = /^(\\d+.?\\d*)\\s+([a-f0-9]{12,})/i.exec(ln);\n    if (!m) {\n      if (/^\\s+at\\s/.test(ln)) {\n        const lastPacket = packets[packets.length - 1];\n        if (lastPacket) {\n          let trace = lastPacket.meta[META_TRACE] || \"\";\n          trace += ln + \"\\n\";\n          lastPacket.meta[META_TRACE] = trace;\n        }\n      } else {\n        if (packets.length == 0)\n          description.push(ln);\n      }\n      return;\n    }\n    const timestamp2 = parseInt(m[1]);\n    const data = fromHex(m[2]);\n    const pkt = Packet.fromBinary(data, timestamp2);\n    pkt.meta[META_TRACE_DESCRIPTION] = ln.substring(m[0].length).trim();\n    packets.push(pkt);\n  });\n  if (packets.length)\n    return new Trace(packets, {\n      description: description.join(\"\\n\").trim()\n    });\n  else\n    return void 0;\n}\nfunction parseLogicLog(logcontents) {\n  if (!logcontents)\n    return void 0;\n  const res = [];\n  let frameBytes = [];\n  let lastTime = 0;\n  for (const ln of logcontents.split(/\\r?\\n/)) {\n    let m = /^JD (\\d+) ([0-9a-f]+)/i.exec(ln);\n    if (m) {\n      res.push({\n        timestamp: parseInt(m[1]),\n        data: fromHex(m[2])\n      });\n      continue;\n    }\n    m = /^([\\d\\.]+)\\s+([0-9a-f]{32,512})\\s+/i.exec(ln);\n    if (m) {\n      res.push({\n        timestamp: parseFloat(m[1]) | 0,\n        data: fromHex(m[2])\n      });\n      continue;\n    }\n    m = /^([\\d.]+),(?:Async Serial,)?.*(0x[A-F0-9][A-F0-9])/.exec(ln);\n    if (!m)\n      continue;\n    const tm = parseFloat(m[1]);\n    if (lastTime && tm - lastTime > 0.1) {\n      res.push({\n        timestamp: lastTime * 1e3,\n        data: new Uint8Array(frameBytes),\n        info: \"timeout\"\n      });\n      frameBytes = [];\n      lastTime = 0;\n    }\n    lastTime = tm;\n    if (/(framing error|Error)/.test(ln)) {\n      if (frameBytes.length > 0)\n        res.push({\n          timestamp: lastTime * 1e3,\n          data: new Uint8Array(frameBytes)\n        });\n      frameBytes = [];\n      lastTime = 0;\n    } else {\n      frameBytes.push(parseInt(m[2]));\n    }\n  }\n  return res;\n}\nfunction replayLogicLog(bus, frames, speed) {\n  const packets = arrayConcatMany(frames.map((frame) => Packet.fromFrame(frame.data, frame.timestamp)));\n  const player = new TracePlayer(bus, speed);\n  player.trace = new Trace(packets);\n  bus.clear(packets[0].timestamp);\n  player.start();\n}\n\n// src/jdom/speedtest.ts\nasync function packetSpeedTest(dev) {\n  const pingCmd = CMD_GET_REG | 385 /* ProductIdentifier */;\n  dev.on(PACKET_REPORT, onPacket);\n  const t0 = Date.now();\n  let lastSend = Date.now();\n  let numpkt = 0;\n  let timeouts = 0;\n  let numrecv = 0;\n  let done = false;\n  await ask();\n  while (numpkt < 100) {\n    await delay(50);\n    const now = Date.now();\n    if (now - t0 > 3e3)\n      break;\n    if (now - lastSend > 100) {\n      timeouts++;\n      await ask();\n    }\n  }\n  done = true;\n  await delay(250);\n  dev.off(PACKET_REPORT, onPacket);\n  const ms = Date.now() - t0;\n  const pktsPerSecond = numpkt / (ms / 1e3);\n  const dropRate = 100 * (numpkt - numrecv) / numpkt;\n  return {\n    msg: `${pktsPerSecond.toFixed(1)} pkts/s; ${dropRate.toFixed(2)}% dropped`,\n    pktsPerSecond,\n    dropRate\n  };\n  async function ask() {\n    lastSend = Date.now();\n    numpkt++;\n    await dev.sendCtrlCommand(pingCmd);\n  }\n  async function onPacket(p) {\n    if (p.serviceIndex == JD_SERVICE_INDEX_CTRL && p.serviceCommand == pingCmd) {\n      numrecv++;\n      if (!done)\n        await ask();\n    }\n  }\n}\n\n// src/jdom/command.ts\nfunction packArguments(info, args) {\n  let repeatIdx = -1;\n  let numReps = 0;\n  let argIdx = 0;\n  let dst = 0;\n  const buf = new Uint8Array(256);\n  for (let i = 0; i < info.fields.length; ++argIdx, ++i) {\n    if (argIdx >= args.length && numReps > 0)\n      break;\n    const arg0 = argIdx < args.length ? args[argIdx] : 0;\n    const fld = info.fields[i];\n    if (repeatIdx == -1 && fld.startRepeats)\n      repeatIdx = i;\n    const arg1 = fld.type == \"string0\" && typeof arg0 == \"string\" ? arg0 + \"\\0\" : arg0;\n    const arg = typeof arg1 == \"boolean\" ? arg1 ? 1 : 0 : typeof arg1 == \"string\" ? stringToUint8Array(toUTF8(arg1)) : arg1;\n    if (typeof arg == \"number\") {\n      const intVal = scaleFloatToInt(arg, fld);\n      if (fld.storage == 0)\n        throw new Error(`expecting ${fld.type} got number`);\n      const fmt = numberFormatFromStorageType(fld.storage);\n      setNumber(buf, fmt, dst, clampToStorage(intVal, fld.storage));\n      dst += sizeOfNumberFormat(fmt);\n    } else {\n      let size = Math.abs(fld.storage);\n      if (typeof arg1 == \"string\") {\n        if (size == 0)\n          size = arg.length;\n        const argCut = arg.slice(0, size);\n        buf.set(argCut, dst);\n        dst += size;\n      } else if (size == 0 || size == arg.length) {\n        buf.set(arg, dst);\n        dst += arg.length;\n      } else {\n        throw new Error(`expecting ${Math.abs(fld.storage)} bytes; got ${arg.length}`);\n      }\n    }\n    if (dst >= JD_SERIAL_MAX_PAYLOAD_SIZE)\n      throw new Error(`jacdac packet length too large, ${dst} > ${JD_SERIAL_MAX_PAYLOAD_SIZE} bytes`);\n    if (repeatIdx != -1 && i + 1 >= info.fields.length) {\n      i = repeatIdx - 1;\n      numReps++;\n    }\n  }\n  const cmd = isRegister2(info) ? info.identifier | CMD_SET_REG : info.identifier;\n  const pkt = Packet.from(cmd, buf.slice(0, dst));\n  if (info.kind != \"report\")\n    pkt.isCommand = true;\n  return pkt;\n}\n\n// src/jdom/packetfilter.ts\nfunction parsePacketFilter(bus, text) {\n  if (!text) {\n    return {\n      source: text,\n      props: {\n        grouping: true\n      },\n      filter: () => true\n    };\n  }\n  const flags = /* @__PURE__ */ new Set();\n  const serviceClasses = /* @__PURE__ */ new Set();\n  const pkts = /* @__PURE__ */ new Set();\n  const productIdentifiers = /* @__PURE__ */ new Set();\n  let repeatedAnnounce = void 0;\n  let announce = void 0;\n  let resetIn = void 0;\n  let minPriority = void 0;\n  let regGet = void 0;\n  let regSet = void 0;\n  let requiresAck = void 0;\n  let ack = void 0;\n  let log2 = void 0;\n  let before = void 0;\n  let after = void 0;\n  const devices = {};\n  let grouping = true;\n  let pipes = void 0;\n  let port = void 0;\n  let collapseAck = true;\n  let collapsePipes = true;\n  let collapseGets = true;\n  let collapseNotImplemented = true;\n  let errors = void 0;\n  let selfDevice = void 0;\n  text.split(/\\s+/g).forEach((part) => {\n    var _a;\n    const [, prefix, , value] = /([a-z\\-_]+)([:=]([^\\s]+))?/.exec(part) || [];\n    switch (prefix || \"\") {\n      case \"kind\":\n      case \"k\":\n        if (!value)\n          break;\n        flags.add(value.toLowerCase());\n        break;\n      case \"service\":\n      case \"srv\": {\n        if (!value)\n          break;\n        const service = serviceSpecificationFromName(value);\n        const serviceClass2 = (service == null ? void 0 : service.classIdentifier) || parseInt(value, 16);\n        if (serviceClass2 !== void 0 && !isNaN(serviceClass2))\n          serviceClasses.add(serviceClass2);\n        break;\n      }\n      case \"announce\":\n      case \"a\":\n        announce = parseBoolean(value);\n        break;\n      case \"repeated-announce\":\n      case \"ra\":\n        repeatedAnnounce = parseBoolean(value);\n        break;\n      case \"self\":\n        selfDevice = parseBoolean(value);\n        break;\n      case \"reset-in\":\n      case \"ri\":\n      case \"resetin\":\n        resetIn = parseBoolean(value);\n        break;\n      case \"errors\":\n        errors = parseBoolean(value);\n        break;\n      case \"min-priority\":\n      case \"minpri\":\n      case \"minpriority\":\n      case \"mi\":\n        minPriority = parseBoolean(value);\n        break;\n      case \"requires-ack\":\n        requiresAck = parseBoolean(value);\n        break;\n      case \"ack\":\n        ack = parseBoolean(value);\n        break;\n      case \"collapse-ack\":\n        collapseAck = parseBoolean(value);\n        break;\n      case \"collapse-notimpl\":\n      case \"collapse-not-implemeneted\":\n        collapseNotImplemented = parseBoolean(value);\n        break;\n      case \"device\":\n      case \"dev\":\n      case \"to\":\n      case \"from\": {\n        if (!value)\n          break;\n        const deviceId = (_a = bus.devices().find((d) => d.shortId === value || d.name === value)) == null ? void 0 : _a.deviceId;\n        if (deviceId) {\n          const data = devices[deviceId] || (devices[deviceId] = { from: false, to: false });\n          if (prefix === \"from\")\n            data.from = true;\n          else if (prefix === \"to\")\n            data.to = true;\n        }\n        break;\n      }\n      case \"pid\":\n      case \"product-identifier\": {\n        if (!value)\n          return;\n        const pid = parseInt(value.replace(/^0?x/, \"\"), 16);\n        if (!isNaN(pid))\n          productIdentifiers.add(pid);\n        break;\n      }\n      case \"pkt\":\n      case \"reg\":\n      case \"register\":\n      case \"cmd\":\n      case \"command\":\n      case \"ev\":\n      case \"event\": {\n        if (!value)\n          return;\n        const id = parseInt(value.replace(/^0?x/, \"\"), 16);\n        if (!isNaN(id))\n          pkts.add(id.toString(16));\n        pkts.add(value);\n        break;\n      }\n      case \"reg-get\":\n      case \"get\":\n        regGet = parseBoolean(value);\n        break;\n      case \"reg-set\":\n      case \"set\":\n        regSet = parseBoolean(value);\n        break;\n      case \"log\":\n        log2 = parseBoolean(value);\n        break;\n      case \"before\":\n        before = parseTimestamp(value);\n        break;\n      case \"after\":\n        after = parseTimestamp(value);\n        break;\n      case \"grouping\":\n        grouping = parseBoolean(value);\n        break;\n      case \"pipes\":\n        pipes = parseBoolean(value);\n        break;\n      case \"collapse-pipe\":\n      case \"collapse-pipes\":\n        collapsePipes = parseBoolean(value);\n        break;\n      case \"collapse-get\":\n      case \"collapse-gets\":\n        collapseGets = parseBoolean(value);\n        break;\n      case \"port\":\n        port = parseInt(value);\n        break;\n    }\n  });\n  const props = {\n    announce,\n    repeatedAnnounce,\n    resetIn,\n    minPriority,\n    requiresAck,\n    ack,\n    collapseAck,\n    collapseNotImplemented,\n    log: log2,\n    productIdentifiers: !!productIdentifiers.size && Array.from(productIdentifiers.keys()),\n    flags: !!flags.size && Array.from(flags.keys()),\n    regGet,\n    regSet,\n    devices,\n    selfDevice,\n    serviceClasses: !!serviceClasses.size && Array.from(serviceClasses.keys()),\n    pkts: !!pkts.size && Array.from(pkts.keys()),\n    before,\n    after,\n    grouping,\n    pipes,\n    collapsePipes,\n    collapseGets,\n    port,\n    errors\n  };\n  const filter = compileFilter(props);\n  return {\n    source: text,\n    props,\n    filter\n  };\n  function parseBoolean(value) {\n    if (value === \"false\" || value === \"no\")\n      return false;\n    else if (value === \"true\" || value === \"yes\" || !value)\n      return true;\n    else\n      return void 0;\n  }\n  function parseTimestamp(value) {\n    const t = parseInt(value);\n    return isNaN(t) ? void 0 : t;\n  }\n}\nfunction compileFilter(props) {\n  const {\n    announce,\n    repeatedAnnounce,\n    resetIn,\n    minPriority,\n    requiresAck,\n    ack,\n    log: log2,\n    productIdentifiers,\n    flags,\n    regGet,\n    regSet,\n    devices,\n    selfDevice,\n    serviceClasses,\n    pkts,\n    before,\n    after,\n    pipes,\n    port,\n    errors\n  } = props;\n  const filters = [];\n  if (before !== void 0)\n    filters.push((pkt) => pkt.timestamp <= before);\n  if (after !== void 0)\n    filters.push((pkt) => pkt.timestamp >= after);\n  if (announce !== void 0)\n    filters.push((pkt) => pkt.isAnnounce === announce);\n  if (repeatedAnnounce !== void 0)\n    filters.push((pkt) => (!pkt.isAnnounce || pkt.isRepeatedAnnounce) === repeatedAnnounce);\n  if (resetIn !== void 0)\n    filters.push((pkt) => !!(pkt.isRegisterSet && pkt.serviceClass === SRV_CONTROL && pkt.registerIdentifier === 128 /* ResetIn */) === resetIn);\n  if (minPriority !== void 0)\n    filters.push((pkt) => (pkt.isRegisterSet && pkt.serviceClass == SRV_LOGGER && pkt.registerIdentifier === 128 /* MinPriority */) === minPriority);\n  if (requiresAck !== void 0)\n    filters.push((pkt) => pkt.requiresAck === requiresAck);\n  if (ack !== void 0)\n    filters.push((pkt) => pkt.isCRCAck === ack);\n  if (flags)\n    filters.push((pkt) => hasAnyFlag(pkt));\n  if (pipes !== void 0)\n    filters.push((pkt) => pkt.isPipe);\n  if (port !== void 0)\n    filters.push((pkt) => pkt.pipePort === port);\n  if (regGet !== void 0 && regSet !== void 0)\n    filters.push((pkt) => pkt.isRegisterGet === regGet && pkt.isRegisterSet === regSet);\n  else if (regGet !== void 0)\n    filters.push((pkt) => pkt.isRegisterGet === regGet);\n  else if (regSet !== void 0)\n    filters.push((pkt) => pkt.isRegisterSet === regSet);\n  if (log2 !== void 0)\n    filters.push((pkt) => (pkt.serviceClass === SRV_LOGGER && pkt.isReport) === log2);\n  if (selfDevice !== void 0) {\n    filters.push((pkt) => {\n      const { device } = pkt;\n      if (!device)\n        return true;\n      return device === device.bus.selfDevice === selfDevice;\n    });\n  }\n  if (Object.keys(devices).length)\n    filters.push((pkt) => {\n      if (!pkt.device)\n        return false;\n      const f = devices[pkt.device.deviceId];\n      return !!f && (!f.from || !pkt.isCommand) && (!f.to || pkt.isCommand);\n    });\n  if (serviceClasses) {\n    filters.push((pkt) => serviceClasses.some((serviceClass2) => isInstanceOf(pkt.serviceClass, serviceClass2)));\n  }\n  if (pkts) {\n    filters.push((pkt) => {\n      var _a, _b;\n      return pkts.indexOf((_a = pkt.decoded) == null ? void 0 : _a.info.identifier.toString(16)) > -1 || pkts.indexOf((_b = pkt.decoded) == null ? void 0 : _b.info.name) > -1;\n    });\n  }\n  if (productIdentifiers)\n    filters.push((pkt) => {\n      var _a;\n      const fwid = (_a = pkt.device) == null ? void 0 : _a.productIdentifier;\n      return fwid === void 0 || productIdentifiers.indexOf(fwid) > -1;\n    });\n  if (errors !== void 0)\n    filters.push((pkt) => {\n      var _a;\n      return !!((_a = pkt.decoded) == null ? void 0 : _a.error) === errors;\n    });\n  const filter = (pkt) => filters.every((filter2) => filter2(pkt));\n  return filter;\n  function hasAnyFlag(pkt) {\n    var _a;\n    const k = (_a = pkt.decoded) == null ? void 0 : _a.info.kind;\n    return !!k && flags.indexOf(k) > -1;\n  }\n}\n\n// src/jdom/trace/tracerecorder.ts\nvar RECORDING_TRACE_MAX_ITEMS = 1e5;\nvar TraceRecorder = class extends JDClient {\n  constructor(bus) {\n    super();\n    this.bus = bus;\n    this.maxRecordingLength = RECORDING_TRACE_MAX_ITEMS;\n    this.handlePacket = this.handlePacket.bind(this);\n    this.mount(() => {\n      var _a;\n      return (_a = this._subscription) == null ? void 0 : _a.call(this);\n    });\n  }\n  start() {\n    if (this.recording)\n      return;\n    this._subscription = this.bus.subscribe([PACKET_PROCESS, PACKET_SEND], this.handlePacket);\n    this._trace = new Trace([], { maxLength: this.maxRecordingLength });\n    this.emit(START);\n    this.emit(CHANGE);\n  }\n  stop() {\n    var _a;\n    if (!this.recording)\n      return;\n    (_a = this._subscription) == null ? void 0 : _a.call(this);\n    this._subscription = void 0;\n    const t = this._trace;\n    this._trace = void 0;\n    this.emit(STOP);\n    this.emit(CHANGE);\n    return t;\n  }\n  get recording() {\n    return !!this._trace;\n  }\n  get trace() {\n    return this._trace;\n  }\n  handlePacket(pkt) {\n    this._trace.addPacket(pkt);\n    this.emit(PACKET_PROCESS, pkt);\n  }\n};\n\n// src/jdom/trace/traceview.ts\nvar TRACE_MAX_ITEMS = 1e3;\nvar FILTERED_TRACE_MAX_ITEMS = 100;\nvar DUPLICATE_PACKET_MERGE_HORIZON_MAX_DISTANCE = 10;\nvar DUPLICATE_PACKET_MERGE_HORIZON_MAX_TIME = 5e3;\nvar TraceView = class extends JDClient {\n  constructor(bus, filter, throttleDelay = 200) {\n    super();\n    this.bus = bus;\n    this.id = \"v\" + Math.random();\n    this._maxFilteredLength = FILTERED_TRACE_MAX_ITEMS;\n    this._paused = false;\n    this._packetFilter = void 0;\n    this._filteredPackets = [];\n    this.silent = false;\n    this._trace = new Trace([], { maxLength: TRACE_MAX_ITEMS });\n    this.handlePacket = this.handlePacket.bind(this);\n    this.handleFilterUpdate = this.handleFilterUpdate.bind(this);\n    this.notifyPacketsChanged = throttle(() => {\n      if (!this.silent)\n        this.setFilteredPackets();\n    }, throttleDelay);\n    this.mount(this.bus.subscribe([PACKET_PROCESS, PACKET_SEND], this.handlePacket));\n    this.mount(this.bus.subscribe(DEVICE_ANNOUNCE, this.handleFilterUpdate));\n    this.filter = filter;\n  }\n  get paused() {\n    return this._paused;\n  }\n  set paused(v) {\n    if (v !== this._paused) {\n      this._paused = v;\n      if (!this._paused) {\n        this.refreshFilter();\n        this.emit(CHANGE);\n      }\n    }\n  }\n  get trace() {\n    return this._trace;\n  }\n  set trace(t) {\n    if (t !== this._trace) {\n      this._trace = t;\n      this.refreshFilter();\n      this.emit(CHANGE);\n    }\n  }\n  get filteredPackets() {\n    return this._filteredPackets;\n  }\n  get filter() {\n    return this._filter;\n  }\n  set filter(f) {\n    if (f !== this._filter) {\n      this._filter = f;\n      this.refreshFilter();\n      this.emit(CHANGE);\n    }\n  }\n  get maxFilteredLength() {\n    return this._maxFilteredLength;\n  }\n  set maxFilteredLength(v) {\n    if (this._maxFilteredLength !== v) {\n      this._maxFilteredLength = v;\n      this.refreshFilter();\n      this.emit(CHANGE);\n    }\n  }\n  setFilteredPackets() {\n    this._filteredPackets = this._filteredPackets.slice(0, this._filteredPackets.length > this.maxFilteredLength * 1.1 ? this.maxFilteredLength : this._filteredPackets.length);\n    this.emit(CHANGE);\n  }\n  clear() {\n    this.trace = new Trace([], { maxLength: TRACE_MAX_ITEMS });\n    this._filteredPackets = [];\n    this.setFilteredPackets();\n    this.emit(CHANGE);\n  }\n  handleFilterUpdate() {\n    this.refreshFilter();\n  }\n  refreshFilter() {\n    var _a, _b;\n    this.id = \"view\" + Math.random();\n    this._packetFilter = parsePacketFilter(this.bus, this._filter);\n    this._filteredPackets = [];\n    const packets = this.trace.packets;\n    for (let i = packets.length - 1; i >= 0 && this._filteredPackets.length < this.maxFilteredLength; --i) {\n      const pkt = packets[i];\n      if ((_a = this._packetFilter) == null ? void 0 : _a.filter(pkt)) {\n        this.addFilteredPacket(pkt);\n      }\n    }\n    this._filteredPackets = this._filteredPackets.reverse();\n    (_b = this.notifyPacketsChanged) == null ? void 0 : _b.call(this);\n  }\n  handlePacket(pkt) {\n    var _a, _b;\n    if (this._paused)\n      return;\n    this._trace.addPacket(pkt);\n    if ((_a = this._packetFilter) == null ? void 0 : _a.filter(pkt)) {\n      this.addFilteredPacket(pkt);\n      (_b = this.notifyPacketsChanged) == null ? void 0 : _b.call(this);\n    }\n  }\n  addFilteredPacket(packet) {\n    var _a, _b, _c, _d, _e;\n    if (packet.meta[this.id])\n      return;\n    packet.meta[this.id] = true;\n    let filtered = true;\n    const hash2 = toHex2(packet.toBuffer());\n    if ((_a = this._packetFilter) == null ? void 0 : _a.props.grouping) {\n      const old = this._filteredPackets.slice(0, DUPLICATE_PACKET_MERGE_HORIZON_MAX_DISTANCE).find((p) => packet.timestamp - p.packet.timestamp < DUPLICATE_PACKET_MERGE_HORIZON_MAX_TIME && p.hash === hash2);\n      if (old) {\n        old.count++;\n        filtered = false;\n      }\n    }\n    if (packet.isCRCAck) {\n      const pkts = this.trace.packets;\n      const crc2 = packet.serviceCommand;\n      const did = packet.deviceIdentifier;\n      const m = Math.max(0, pkts.length - TRACE_FILTER_HORIZON);\n      for (let i = pkts.length - 1; i >= m; i--) {\n        const old = pkts[i];\n        if (old.requiresAck && old.deviceIdentifier === did && old.crc === crc2) {\n          old.meta[META_ACK] = packet;\n          if ((_b = this._packetFilter) == null ? void 0 : _b.props.collapseAck)\n            filtered = false;\n          break;\n        }\n      }\n    }\n    if (packet.serviceCommand === 3 /* CommandNotImplemented */) {\n      const pkts = this.trace.packets;\n      const [sc, crc2] = packet.jdunpack(\"u16 u16\");\n      const m = Math.max(0, pkts.length - TRACE_FILTER_HORIZON);\n      for (let i = pkts.length - 1; i >= m; i--) {\n        const old = pkts[i];\n        if (old.crc === crc2 && old.serviceCommand === sc) {\n          old.meta[META_NOT_IMPLEMENTED] = packet;\n          if ((_c = this._packetFilter) == null ? void 0 : _c.props.collapseNotImplemented)\n            filtered = false;\n          break;\n        }\n      }\n    }\n    if (packet.isRegisterGet && packet.isReport && !packet.meta[META_GET]) {\n      const pkts = this.trace.packets;\n      const did = packet.deviceIdentifier;\n      const si = packet.serviceIndex;\n      const rid = packet.registerIdentifier;\n      const m = Math.max(0, pkts.length - TRACE_FILTER_HORIZON);\n      for (let i = pkts.length - 1; i >= m; i--) {\n        const old = pkts[i];\n        if (old.isRegisterGet && old.isCommand && old.deviceIdentifier === did && old.serviceIndex === si && old.registerIdentifier === rid) {\n          packet.meta[META_GET] = old;\n          if ((_d = this._packetFilter) == null ? void 0 : _d.props.collapseGets) {\n            this._filteredPackets.splice(i, 1);\n          }\n          break;\n        }\n      }\n    }\n    if (((_e = this._packetFilter) == null ? void 0 : _e.props.collapsePipes) && packet.isPipe && packet.isCommand) {\n      const pkts = this._filteredPackets;\n      const m = Math.min(pkts.length, TRACE_FILTER_HORIZON);\n      const port = packet.pipePort;\n      const did = packet.deviceIdentifier;\n      for (let i = 0; i < m; ++i) {\n        const old = pkts[i].packet;\n        if (old.deviceIdentifier === did && old.pipePort === port) {\n          let pipePackets = old.meta[META_PIPE];\n          if (!pipePackets)\n            pipePackets = old.meta[META_PIPE] = [];\n          pipePackets[packet.pipeCount] = packet;\n          filtered = false;\n          break;\n        }\n      }\n    }\n    if (filtered) {\n      const key = packet.timestamp + hash2;\n      this._filteredPackets.unshift({\n        key,\n        hash: hash2,\n        packet,\n        count: 1\n      });\n    }\n  }\n};\n\n// src/jdom/light.ts\nfunction cmdCode(cmd) {\n  switch (cmd) {\n    case \"setall\":\n      return LIGHT_PROG_SET_ALL;\n    case \"fade\":\n      return LIGHT_PROG_FADE;\n    case \"fadehsv\":\n      return LIGHT_PROG_FADE_HSV;\n    case \"rotfwd\":\n      return LIGHT_PROG_ROTATE_FWD;\n    case \"rotback\":\n      return LIGHT_PROG_ROTATE_BACK;\n    case \"show\":\n    case \"wait\":\n      return LIGHT_PROG_SHOW;\n    case \"range\":\n      return LIGHT_PROG_RANGE;\n    case \"mode\":\n      return LIGHT_PROG_MODE;\n    case \"tmpmode\":\n      return LIGHT_PROG_MODE1;\n    case \"setone\":\n      return LIGHT_PROG_COL1_SET;\n    case \"mult\":\n      return 256;\n    default:\n      return void 0;\n  }\n}\nfunction isWhiteSpace(code) {\n  return code == 32 || code == 13 || code == 10 || code == 9;\n}\nfunction lightEncode(format, args) {\n  const outarr = [];\n  let colors = [];\n  let pos = 0;\n  let currcmd = 0;\n  function pushNumber(n) {\n    if (n == null || (n | 0) != n || n < 0 || n >= 16383)\n      throw new Error(\"number out of range: \" + n);\n    if (n < 128)\n      outarr.push(n);\n    else {\n      outarr.push(128 | n >> 8);\n      outarr.push(n & 255);\n    }\n  }\n  function flush() {\n    if (currcmd == 207) {\n      if (colors.length != 1)\n        throw new Error(\"setone requires 1 color\");\n    } else {\n      if (colors.length == 0)\n        return;\n      if (colors.length <= 3)\n        outarr.push(192 | colors.length);\n      else {\n        outarr.push(192);\n        outarr.push(colors.length);\n      }\n    }\n    for (const c of colors) {\n      outarr.push(c >> 16 & 255);\n      outarr.push(c >> 8 & 255);\n      outarr.push(c >> 0 & 255);\n    }\n    colors = [];\n  }\n  function nextToken() {\n    while (isWhiteSpace(format.charCodeAt(pos)))\n      pos++;\n    const beg = pos;\n    while (pos < format.length && !isWhiteSpace(format.charCodeAt(pos)))\n      pos++;\n    return format.slice(beg, pos);\n  }\n  while (pos < format.length) {\n    const token = nextToken();\n    const t0 = token.charCodeAt(0);\n    if (97 <= t0 && t0 <= 122) {\n      flush();\n      currcmd = cmdCode(token);\n      if (currcmd == void 0)\n        throw new Error(\"unknown light command: \" + token);\n      if (currcmd == 256) {\n        const f = parseFloat(nextToken());\n        if (isNaN(f) || f < 0 || f > 2)\n          throw new Error(\"expecting scale\");\n        outarr.push(216);\n        outarr.push(3);\n        outarr.push(208);\n        const mm = Math.round(128 * f) & 255;\n        outarr.push(193);\n        outarr.push(mm);\n        outarr.push(mm);\n        outarr.push(mm);\n      } else {\n        outarr.push(currcmd);\n      }\n    } else if (48 <= t0 && t0 <= 57) {\n      pushNumber(parseInt(token));\n    } else if (t0 == 37) {\n      if (args.length == 0)\n        throw new Error(\"out of args, %\");\n      const v = args.shift();\n      if (typeof v != \"number\")\n        throw new Error(\"expecting number\");\n      pushNumber(v);\n    } else if (t0 == 35) {\n      if (token.length == 1) {\n        if (args.length == 0)\n          throw new Error(\"out of args, #\");\n        const v = args.shift();\n        if (typeof v === \"number\")\n          colors.push(v);\n        else if (Array.isArray(v))\n          for (const vv of v)\n            colors.push(vv);\n        else\n          throw Error(\"invalid number \" + v);\n      } else {\n        if (token.length == 7) {\n          const b = fromHex(token.slice(1));\n          const c = b[0] << 16 | b[1] << 8 | b[2];\n          colors.push(c);\n        } else {\n          throw new Error(\"invalid color: \" + token);\n        }\n      }\n    }\n  }\n  flush();\n  return new Uint8Array(outarr);\n}\n\n// src/jdom/setting.ts\nfunction localStorageSetting(key) {\n  if (typeof self !== \"undefined\" && self.localStorage) {\n    return {\n      get: () => {\n        var _a;\n        return (_a = self.localStorage.getItem(key)) != null ? _a : void 0;\n      },\n      set: (v) => self.localStorage.setItem(key, v)\n    };\n  }\n  return void 0;\n}\n\n// src/jdom/nodesetting.ts\nvar settingsPath = \"\";\nfunction nodeSetting(key) {\n  let v;\n  let keyPath;\n  const fs = __require(\"fs\");\n  function init() {\n    if (!settingsPath) {\n      const jd = process.env[\"HOME\"] + \"/.jacdac\";\n      try {\n        fs.mkdirSync(jd);\n      } catch {\n      }\n      settingsPath = jd + \"/settings\";\n      try {\n        fs.mkdirSync(settingsPath);\n      } catch {\n      }\n    }\n    if (!keyPath) {\n      keyPath = settingsPath + \"/\" + key.replace(/[^a-z_\\-]/g, (c) => c.charCodeAt(0) + \"\");\n      try {\n        v = fs.readFileSync(keyPath, \"utf8\");\n      } catch {\n        v = void 0;\n      }\n    }\n  }\n  function get() {\n    init();\n    return v;\n  }\n  function set(nv) {\n    init();\n    if (v !== nv) {\n      v = nv;\n      fs.writeFileSync(keyPath, nv, \"utf8\");\n    }\n  }\n  return { get, set };\n}\n\n// src/jdom/servers/rolemanagerserver.ts\nvar Role = class {\n  constructor(name, classIdentifier) {\n    this.name = name;\n    this.classIdentifier = classIdentifier;\n  }\n  clear() {\n    this.device = void 0;\n    this.serviceIndex = void 0;\n  }\n  isAssigned() {\n    return this.device != void 0;\n  }\n  assignment() {\n    if (this.isAssigned())\n      return this.device.deviceId + \":\" + this.serviceIndex;\n    return void 0;\n  }\n  toString() {\n    const binding = this.device ? this.device + \":\" + this.serviceIndex : \"?\";\n    return `${this.name}[${binding}]`;\n  }\n};\nvar RoleManagerServer = class extends JDServiceServer {\n  constructor(bus, roleStore) {\n    super(SRV_ROLE_MANAGER);\n    this.bus = bus;\n    this.roleStore = roleStore;\n    this.roles = [];\n    this.assignmentCache = this.read();\n    this.changed = debounce(this.changed.bind(this), 100);\n    this.addCommand(129 /* SetRole */, this.handleSet.bind(this));\n    this.addCommand(131 /* ListRoles */, this.handleList.bind(this));\n    this.addCommand(132 /* ClearAllRoles */, this.handleClearAssignments.bind(this));\n    const alloc = this.addRegister(385 /* AllRolesAllocated */);\n    alloc.on(REGISTER_PRE_GET, () => {\n      const allDone = this.roles.every((r) => r.isAssigned());\n      alloc.setValues([allDone ? 1 : 0]);\n    });\n    this.autoBindEnabled = this.addRegister(128 /* AutoBind */, [true]);\n    this.initForBus();\n  }\n  changed() {\n    console.log(\"CHANGE: \" + this.roles.join(\", \"));\n    this.emit(CHANGE);\n    this.sendEvent(3 /* Change */);\n  }\n  initForBus() {\n    for (const r of this.roles) {\n      this.setFromCache(r);\n    }\n    this.bus.scheduler.setInterval(() => this.autoBind(), 980);\n    this.bus.on(DEVICE_DISCONNECT, (dev) => {\n      let numCleared = 0;\n      for (const r of this.roles) {\n        if (r.device == dev) {\n          r.clear();\n          numCleared++;\n        }\n      }\n      if (numCleared)\n        this.changed();\n    });\n  }\n  autoBind() {\n    if (!this.autoBindEnabled.values()[0])\n      return;\n    const usedBindings = {};\n    let numUnbound = 0;\n    for (const r of this.roles)\n      if (r.isAssigned())\n        usedBindings[r.assignment()] = true;\n      else\n        numUnbound++;\n    if (numUnbound == 0)\n      return;\n    const devs = this.bus.devices();\n    devs.sort((a, b) => strcmp(a.deviceId, b.deviceId));\n    const assignedRoles = [];\n    const roles = this.roles.slice();\n    roles.sort((a, b) => strcmp(a.name, b.name));\n    for (const r of roles) {\n      if (!r.isAssigned())\n        for (const d of devs) {\n          const len = d.serviceLength;\n          for (let i = 1; i < len; ++i) {\n            if (r.classIdentifier == d.serviceClassAt(i) && !usedBindings[d.deviceId + \":\" + i]) {\n              this.setRoleCore(r.name, d, i);\n              usedBindings[r.assignment()] = true;\n              assignedRoles.push(r);\n            }\n          }\n        }\n    }\n    if (assignedRoles.length) {\n      this.save();\n      this.changed();\n    }\n  }\n  setFromCache(r) {\n    if (r.isAssigned())\n      return;\n    const cached = this.assignmentCache[r.name];\n    if (typeof cached != \"string\")\n      return;\n    const [devId, idx_] = cached.split(\":\");\n    const dev = this.bus.device(devId, true);\n    const idx = parseInt(idx_);\n    if (!dev || !idx)\n      return;\n    if (dev.serviceClassAt(idx) != r.classIdentifier)\n      return;\n    this.setRole(r.name, dev, idx);\n  }\n  deleteRoles() {\n    this.roles = [];\n    this.changed();\n  }\n  clearAssignments() {\n    for (const r of this.roles)\n      r.clear();\n    this.assignmentCache = {};\n    this.save();\n    this.changed();\n  }\n  addRole(name, classIdenitifer) {\n    let r = this.lookup(name);\n    if (!r) {\n      this.roles.push(r = new Role(name, classIdenitifer));\n    } else {\n      if (r.classIdentifier == classIdenitifer)\n        return;\n      r.classIdentifier = classIdenitifer;\n      if (r.device) {\n        delete this.assignmentCache[r.name];\n        this.save();\n      }\n      r.clear();\n    }\n    this.setFromCache(r);\n    this.changed();\n  }\n  setRoleCore(name, dev, serviceIndex) {\n    const r = this.lookup(name);\n    if (r) {\n      if (r.device == dev && r.serviceIndex == serviceIndex)\n        return;\n      for (const role of this.roles) {\n        if (role.device == dev && role.serviceIndex == serviceIndex) {\n          role.clear();\n          delete this.assignmentCache[role.name];\n        }\n      }\n      r.device = dev;\n      r.serviceIndex = serviceIndex;\n      this.assignmentCache[r.name] = r.assignment();\n    }\n  }\n  setRole(name, dev, serviceIndex) {\n    this.setRoleCore(name, dev, serviceIndex);\n    this.save();\n    this.changed();\n  }\n  getRole(name) {\n    const r = this.lookup(name);\n    if (r)\n      return { device: r.device, serviceIndex: r.serviceIndex };\n    else\n      return void 0;\n  }\n  lookup(name) {\n    return this.roles.find((r) => r.name == name);\n  }\n  async handleSet(pkt) {\n    const [deviceId, serviceIdx, role] = pkt.jdunpack(\"b[8] u8 s\");\n    const dev = this.bus.device(toHex2(deviceId), true, pkt);\n    if (dev)\n      this.setRole(role, dev, serviceIdx);\n  }\n  async handleList(pkt) {\n    const pipe = OutPipe.from(this.bus, pkt, true);\n    await pipe.respondForEach(this.roles, (r) => {\n      const id = r.device ? fromHex(r.device.deviceId) : new Uint8Array(8);\n      return jdpack(\"b[8] u32 u8 s\", [id, r.classIdentifier, r.serviceIndex || 0, r.name]);\n    });\n  }\n  handleClearAssignments() {\n    this.clearAssignments();\n  }\n  read() {\n    if (!this.roleStore)\n      return {};\n    try {\n      return JSON.parse(this.roleStore.get() || \"{}\");\n    } catch (e) {\n      console.debug(e);\n      return {};\n    }\n  }\n  save() {\n    var _a;\n    (_a = this.roleStore) == null ? void 0 : _a.set(JSON.stringify(this.assignmentCache));\n  }\n};\n\n// src/jdom/color.ts\nfunction hsvToCss(hue, saturation, value, brightness, monochrome) {\n  const csshue = hue * 360 / 255;\n  const csssat = (monochrome ? 255 : saturation) / 255;\n  const cssval = value / 255;\n  const [h, s, l] = hsv_to_hsl(csshue, csssat, cssval);\n  const mixl = 0.3;\n  const alpha = (mixl + (1 - mixl) * l) * brightness;\n  return `hsla(${h}, ${s * 100}%, ${l * 100}%, ${alpha}`;\n}\nfunction hsv_to_hsl(h, s, v) {\n  const l = (2 - s) * v / 2;\n  if (l != 0) {\n    if (l == 1) {\n      s = 0;\n    } else if (l < 0.5) {\n      s = s * v / (l * 2);\n    } else {\n      s = s * v / (2 - l * 2);\n    }\n  }\n  return [h, s, l];\n}\n\n// src/jdom/bridge.ts\nvar JDBridge = class extends JDClient {\n  constructor(infrastructure = false) {\n    super();\n    this.infrastructure = infrastructure;\n    this.bridgeId = `bridge-` + randomDeviceId();\n    this.packetSent = 0;\n    this.packetProcessed = 0;\n    this.handleSendPacket = this.handleSendPacket.bind(this);\n  }\n  get bus() {\n    return this._bus;\n  }\n  set bus(newBus) {\n    if (newBus !== this._bus) {\n      if (this._bus)\n        this.unmount();\n      this._bus = newBus;\n      if (this._bus) {\n        this.mount(this._bus.subscribe(PACKET_PROCESS, this.handleSendPacket));\n        this.mount(this._bus.subscribe(PACKET_SEND, this.handleSendPacket));\n        this.mount(this._bus.addBridge(this));\n      }\n      this.emit(CHANGE);\n    }\n  }\n  receiveFrame(data) {\n    if (!this._bus)\n      return;\n    const pkts = Packet.fromFrame(data, this.bus.timestamp);\n    this.dispatchPackets(pkts);\n  }\n  receivePacket(data) {\n    if (!this._bus)\n      return;\n    const pkt = Packet.fromBinary(data, this.bus.timestamp);\n    if (pkt)\n      this.dispatchPackets([pkt]);\n  }\n  receiveFrameOrPacket(data, sender) {\n    const timestamp2 = this.bus.timestamp;\n    let pkts = Packet.fromFrame(data, timestamp2);\n    if (!pkts.length) {\n      const pkt = Packet.fromBinary(data, timestamp2);\n      pkts = pkt && [pkt];\n    }\n    this.dispatchPackets(pkts, sender);\n  }\n  dispatchPackets(pkts, sender) {\n    if (!(pkts == null ? void 0 : pkts.length))\n      return;\n    this.packetProcessed += pkts.length;\n    for (const pkt of pkts) {\n      pkt.sender = sender || this.bridgeId;\n      this.bus.sendPacketAsync(pkt);\n      this.bus.processPacket(pkt);\n    }\n  }\n  handleSendPacket(pkt) {\n    if (!this._bus || pkt.sender === this.bridgeId)\n      return;\n    this.packetSent++;\n    this.sendPacket(pkt.toBuffer(), pkt.sender);\n  }\n};\nvar ProxyBridge = class extends JDBridge {\n  constructor(_sendPacket) {\n    super(true);\n    this._sendPacket = _sendPacket;\n  }\n  sendPacket(data, sender) {\n    this._sendPacket(data, sender);\n  }\n};\nfunction createProxyBridge(sendPacket) {\n  return new ProxyBridge(sendPacket);\n}\n\n// src/jdom/clients/settingsclient.ts\nvar SettingsClient = class extends JDServiceClient {\n  constructor(service) {\n    super(service);\n    service.registersUseAcks = true;\n  }\n  async clear() {\n    await this.service.sendCmdAsync(133 /* Clear */);\n  }\n  async listKeys() {\n    const inp = new InPipeReader(this.bus);\n    await this.service.sendPacketAsync(inp.openCommand(130 /* ListKeys */), true);\n    const { output } = await inp.readAll();\n    const keys = output.map((pkt) => pkt.stringData);\n    return keys.filter((k) => !!k);\n  }\n  async list() {\n    const inp = new InPipeReader(this.bus);\n    await this.service.sendPacketAsync(inp.openCommand(131 /* List */), true);\n    const { output } = await inp.readAll();\n    return output.map((pkt) => {\n      const [key, value] = pkt.jdunpack(\"z b\");\n      return key && { key, value };\n    }).filter((kv) => !!kv);\n  }\n  async setValue(key, value) {\n    key = key.trim();\n    if (value === void 0) {\n      await this.deleteValue(key);\n    } else {\n      const pkt = Packet.from(129 /* Set */, jdpack(\"z b\", [key, value]));\n      await this.service.sendPacketAsync(pkt);\n      this.emit(CHANGE);\n    }\n  }\n  async setStringValue(key, value) {\n    await this.setValue(key, value ? stringToBuffer(value) : void 0);\n  }\n  async getValue(key) {\n    if (!key)\n      return void 0;\n    key = key.trim();\n    const pkt = Packet.from(128 /* Get */, jdpack(\"s\", [key]));\n    const resp = await this.service.sendCmdAwaitResponseAsync(pkt);\n    const [rkey, value] = jdunpack(resp.data, \"z b\");\n    if (key !== rkey) {\n      console.error(`device returned different key, got \"${rkey}\", expected \"${key}\"`);\n      return void 0;\n    }\n    return value;\n  }\n  async getStringValue(key) {\n    const value = await this.getValue(key);\n    return value && bufferToString(value);\n  }\n  async deleteValue(key) {\n    if (!key)\n      return;\n    key = key.trim();\n    const pkt = Packet.from(132 /* Delete */, jdpack(\"s\", [key]));\n    await this.service.sendPacketAsync(pkt);\n    this.emit(CHANGE);\n  }\n};\n\n// src/jdom/clients/jacscriptmanagerclient.ts\nvar _JacscriptManagerClient = class extends JDServiceClient {\n  constructor(service) {\n    super(service);\n    const changeEvent = service.event(3 /* ProgramChange */);\n    this.mount(changeEvent.subscribe(EVENT, () => this.emit(CHANGE)));\n    this.mount(changeEvent.subscribe(EVENT, () => this.emit(_JacscriptManagerClient.PROGRAM_CHANGE)));\n    const panicEvent = service.event(128 /* ProgramPanic */);\n    this.mount(panicEvent.subscribe(EVENT, (args) => this.emit(_JacscriptManagerClient.PROGRAM_PANIC, ...args || [])));\n  }\n  async deployBytecode(bytecode, onProgress) {\n    return OutPipe.sendBytes(this.service, 128 /* DeployBytecode */, bytecode, onProgress);\n  }\n  get running() {\n    const reg = this.service.register(128 /* Running */);\n    return reg == null ? void 0 : reg.boolValue;\n  }\n  async setRunning(value) {\n    const reg = this.service.register(128 /* Running */);\n    await reg.sendSetAsync(jdpack(\"u8\", [value ? 1 : 0]));\n  }\n  get autoStart() {\n    const reg = this.service.register(129 /* Autostart */);\n    return reg == null ? void 0 : reg.boolValue;\n  }\n  async setAutoStart(value) {\n    const reg = this.service.register(129 /* Autostart */);\n    await reg.sendSetAsync(jdpack(\"u8\", [value ? 1 : 0]));\n  }\n  get logging() {\n    const reg = this.service.register(130 /* Logging */);\n    return reg == null ? void 0 : reg.boolValue;\n  }\n  async setLogging(value) {\n    const reg = this.service.register(130 /* Logging */);\n    await reg.sendSetAsync(jdpack(\"u8\", [value ? 1 : 0]));\n  }\n  get programSize() {\n    const reg = this.service.register(384 /* ProgramSize */);\n    return reg == null ? void 0 : reg.uintValue;\n  }\n  get programHash() {\n    const reg = this.service.register(385 /* ProgramHash */);\n    return reg == null ? void 0 : reg.uintValue;\n  }\n};\nvar JacscriptManagerClient = _JacscriptManagerClient;\nJacscriptManagerClient.PROGRAM_CHANGE = \"programChange\";\nJacscriptManagerClient.PROGRAM_PANIC = \"programPanic\";\n\n// src/jdom/transport/bluetooth.ts\nvar JD_BLE_FIRST_CHUNK_FLAG = 128;\nfunction isWebBluetoothEnabled() {\n  return !!Flags.webBluetooth;\n}\nfunction isWebBluetoothSupported() {\n  try {\n    return typeof navigator !== \"undefined\" && !!navigator.bluetooth && !!navigator.bluetooth.requestDevice;\n  } catch (e) {\n    return false;\n  }\n}\nfunction bleRequestDevice(options) {\n  var _a, _b;\n  if (!Flags.webBluetooth)\n    return Promise.resolve(void 0);\n  try {\n    console.debug(`bluetooth request`, { options });\n    return (_b = (_a = navigator == null ? void 0 : navigator.bluetooth) == null ? void 0 : _a.requestDevice) == null ? void 0 : _b.call(_a, options);\n  } catch (e) {\n    if (Flags.diagnostics)\n      console.warn(e);\n    return void 0;\n  }\n}\nfunction bleGetDevices() {\n  var _a;\n  if (!Flags.webBluetooth)\n    return Promise.resolve([]);\n  try {\n    return ((_a = navigator == null ? void 0 : navigator.bluetooth) == null ? void 0 : _a.getDevices()) || Promise.resolve([]);\n  } catch (e) {\n    if (Flags.diagnostics)\n      console.warn(e);\n    return Promise.resolve([]);\n  }\n}\nvar BluetoothTransport = class extends Transport {\n  constructor(options) {\n    super(BLUETOOTH_TRANSPORT, { checkPulse: true });\n    this.handleDisconnected = this.handleDisconnected.bind(this);\n    this.handleCharacteristicChanged = this.handleCharacteristicChanged.bind(this);\n  }\n  async transportConnectAsync(background) {\n    var _a;\n    if (background) {\n      const devices = await bleGetDevices();\n      this._device = devices == null ? void 0 : devices[0];\n    } else {\n      const device = await bleRequestDevice({\n        filters: [{ namePrefix: \"BBC micro:bit\" }],\n        optionalServices: [BLUETOOTH_JACDAC_SERVICE]\n      });\n      this._device = device;\n    }\n    if (!((_a = this._device) == null ? void 0 : _a.gatt))\n      throw new Error(\"Device not found\");\n    this._device.addEventListener(\"gattserverdisconnected\", this.handleDisconnected, false);\n    this._server = await this._device.gatt.connect();\n    this._service = await this._server.getPrimaryService(BLUETOOTH_JACDAC_SERVICE);\n    this._rxCharacteristic = await this._service.getCharacteristic(BLUETOOTH_JACDAC_RX_CHARACTERISTIC);\n    this._txCharacteristic = await this._service.getCharacteristic(BLUETOOTH_JACDAC_TX_CHARACTERISTIC);\n    this._rxCharacteristic.addEventListener(\"characteristicvaluechanged\", this.handleCharacteristicChanged, false);\n    await this._rxCharacteristic.startNotifications();\n  }\n  async transportSendPacketAsync(p) {\n    if (!this._txCharacteristic) {\n      console.debug(`trying to send Bluetooth packet while disconnected`);\n      return;\n    }\n    const data = p.toBuffer();\n    const length = data.length;\n    const totalChunks = Math.ceil(data.length / 18);\n    let remainingChunks = totalChunks == 0 ? 0 : totalChunks - 1;\n    let sent = 0;\n    while (sent < length) {\n      const n = Math.min(18, length - sent);\n      const chunk = data.slice(sent, sent + n);\n      const header = new Uint8Array(2);\n      header[0] = totalChunks & 127;\n      if (sent == 0)\n        header[0] |= JD_BLE_FIRST_CHUNK_FLAG;\n      header[1] = remainingChunks;\n      this._txCharacteristic.writeValueWithoutResponse(bufferConcat(header, chunk));\n      sent += n;\n      remainingChunks = remainingChunks == 0 ? 0 : remainingChunks - 1;\n      console.debug(`chunk: ${chunk.toString()} [${remainingChunks} chunks remaining]`);\n    }\n  }\n  async transportDisconnectAsync() {\n    var _a, _b;\n    if (!this._device)\n      return;\n    console.debug(`ble: disconnecting`);\n    try {\n      (_a = this._rxCharacteristic) == null ? void 0 : _a.removeEventListener(\"characteristicvaluechanged\", this.handleCharacteristicChanged);\n      (_b = this._device) == null ? void 0 : _b.removeEventListener(\"gattserverdisconnected\", this.handleDisconnected);\n      this._server.disconnect();\n    } finally {\n      this._rxCharacteristic = void 0;\n      this._txCharacteristic = void 0;\n      this._service = void 0;\n      this._server = void 0;\n      this._device = void 0;\n      this._rxBuffer = void 0;\n    }\n  }\n  handleDisconnected() {\n    this.disconnect();\n  }\n  handleCharacteristicChanged() {\n    const data = new Uint8Array(this._rxCharacteristic.value.buffer);\n    const packetData = data.slice(2);\n    console.debug(`received length ${data.length}`);\n    if (data[0] & JD_BLE_FIRST_CHUNK_FLAG) {\n      if (this._rxBuffer)\n        console.error(`Dropped buffer. Chunks remaining: ${this._rxChunkCounter}`);\n      this._rxBuffer = new Uint8Array();\n      this._rxChunkCounter = data[0] & 127;\n      console.debug(`Initial chunk counter: ${this._rxChunkCounter}`);\n    }\n    this._rxChunkCounter = this._rxChunkCounter == 0 ? 0 : this._rxChunkCounter - 1;\n    console.debug(`after modification chunk counter: ${this._rxChunkCounter}`);\n    if (data[1] !== this._rxChunkCounter)\n      console.error(`Data out of order. Expected chunk: ${this._rxChunkCounter} Got chunk: ${data[1]}`);\n    else\n      this._rxBuffer = bufferConcat(this._rxBuffer, packetData);\n    if (this._rxChunkCounter == 0) {\n      const pkt = Packet.fromBinary(this._rxBuffer, this.bus.timestamp);\n      console.debug(`processed packet ${pkt}`);\n      pkt.sender = BLUETOOTH_TRANSPORT;\n      this.bus.processPacket(pkt);\n      this._rxBuffer = void 0;\n      this._rxChunkCounter = 0;\n    }\n  }\n};\nfunction createBluetoothTransport(options) {\n  return isWebBluetoothSupported() && new BluetoothTransport(options);\n}\n\n// src/jdom/transport/hf2.ts\nvar HF2_DEVICE_MAJOR = 42;\nvar HF2_CMD_BININFO = 1;\nvar HF2_MODE_BOOTLOADER = 1;\nvar HF2_MODE_USERSPACE = 2;\nvar HF2_CMD_INFO = 2;\nvar HF2_CMD_RESET_INTO_APP = 3;\nvar HF2_CMD_RESET_INTO_BOOTLOADER = 4;\nvar HF2_CMD_START_FLASH = 5;\nvar HF2_CMD_WRITE_FLASH_PAGE = 6;\nvar HF2_CMD_CHKSUM_PAGES = 7;\nvar HF2_CMD_READ_WORDS = 8;\nvar HF2_CMD_WRITE_WORDS = 9;\nvar HF2_CMD_DMESG = 16;\nvar HF2_FLAG_SERIAL_OUT = 128;\nvar HF2_FLAG_SERIAL_ERR = 192;\nvar HF2_FLAG_CMDPKT_LAST = 64;\nvar HF2_FLAG_CMDPKT_BODY = 0;\nvar HF2_FLAG_MASK = 192;\nvar HF2_SIZE_MASK = 63;\nvar HF2_STATUS_OK = 0;\nvar HF2_STATUS_INVALID_CMD = 1;\nvar HF2_STATUS_EXEC_ERR = 2;\nvar HF2_STATUS_EVENT = 128;\nvar HF2_EV_MASK = 8388608;\nvar HF2_CMD_JDS_CONFIG = 32;\nvar HF2_CMD_JDS_SEND = 33;\nvar HF2_EV_JDS_PACKET = 8388640;\nvar HF2Proto = class {\n  constructor(io) {\n    this.io = io;\n    this.eventHandlers = {};\n    this.msgs = new PromiseBuffer();\n    this.cmdSeq = Math.random() * 65535 | 0;\n    this.lock = new PromiseQueue();\n    let frames = [];\n    io.onData = (buf) => {\n      const tp = buf[0] & HF2_FLAG_MASK;\n      const len = buf[0] & 63;\n      const frame = new Uint8Array(len);\n      memcpy(frame, 0, buf, 1, len);\n      if (tp & HF2_FLAG_SERIAL_OUT) {\n        this.onSerial(frame, tp == HF2_FLAG_SERIAL_ERR);\n        return;\n      }\n      frames.push(frame);\n      if (tp == HF2_FLAG_CMDPKT_BODY) {\n        return;\n      } else {\n        assert(tp == HF2_FLAG_CMDPKT_LAST);\n        let total = 0;\n        for (const f of frames)\n          total += f.length;\n        const r = new Uint8Array(total);\n        let ptr = 0;\n        for (const f of frames) {\n          memcpy(r, ptr, f);\n          ptr += f.length;\n        }\n        frames = [];\n        if (r[2] & HF2_STATUS_EVENT) {\n          this.handleEvent(r);\n        } else {\n          this.msgs.push(r);\n        }\n      }\n    };\n  }\n  error(m) {\n    var _a;\n    return (_a = this.io) == null ? void 0 : _a.error(m);\n  }\n  talkAsync(cmd, data) {\n    if (!this.io)\n      throwError(\"hf2: rogue instance\");\n    let len = 8;\n    if (data)\n      len += data.length;\n    const pkt = new Uint8Array(len);\n    const seq = ++this.cmdSeq & 65535;\n    write32(pkt, 0, cmd);\n    write16(pkt, 4, seq);\n    write16(pkt, 6, 0);\n    if (data)\n      memcpy(pkt, 8, data, 0, data.length);\n    let numSkipped = 0;\n    const handleReturnAsync = () => this.msgs.shiftAsync(HF2_TIMEOUT).then((res) => {\n      if (read16(res, 0) != seq) {\n        if (numSkipped < 3) {\n          numSkipped++;\n          this.io.log(`message out of sync, (${seq} vs ${read16(res, 0)}); will re-try`);\n          return handleReturnAsync();\n        }\n        this.error(\"out of sync\");\n      }\n      let info = \"\";\n      if (res[3])\n        info = \"; info=\" + res[3];\n      switch (res[2]) {\n        case HF2_STATUS_OK:\n          return res.slice(4);\n        case HF2_STATUS_INVALID_CMD:\n          this.error(\"invalid command\" + info);\n          break;\n        case HF2_STATUS_EXEC_ERR:\n          this.error(\"execution error\" + info);\n          break;\n        default:\n          this.error(\"error \" + res[2] + info);\n          break;\n      }\n      return null;\n    }).catch((e) => {\n      console.debug(`hf2 error: ${e.message}; cmd=${cmd}`);\n      if (this.io) {\n        const code = errorCode(e);\n        if (code !== TIMEOUT_ERROR_CODE)\n          this.error(e);\n      }\n      return null;\n    });\n    return this.lock.enqueue(\"talk\", async () => {\n      if (!this.io)\n        return null;\n      return await this.sendMsgAsync(pkt).then(handleReturnAsync);\n    });\n  }\n  sendMsgAsync(buf, serial = 0) {\n    const frame = new Uint8Array(64);\n    const loop = (pos) => {\n      let len = buf.length - pos;\n      if (len <= 0)\n        return Promise.resolve();\n      if (len > 63) {\n        len = 63;\n        frame[0] = HF2_FLAG_CMDPKT_BODY;\n      } else {\n        frame[0] = HF2_FLAG_CMDPKT_LAST;\n      }\n      if (serial)\n        frame[0] = serial == 1 ? HF2_FLAG_SERIAL_OUT : HF2_FLAG_SERIAL_ERR;\n      frame[0] |= len;\n      for (let i = 0; i < len; ++i)\n        frame[i + 1] = buf[pos + i];\n      if (!this.io)\n        return Promise.resolve();\n      return this.io.sendPacketAsync(frame).then(() => loop(pos + len));\n    };\n    return loop(0);\n  }\n  onEvent(id, f) {\n    assert(!!(id & HF2_EV_MASK));\n    this.eventHandlers[id + \"\"] = f;\n  }\n  onJDMessage(f) {\n    this.talkAsync(HF2_CMD_JDS_CONFIG, encodeU32LE([1]));\n    this.onEvent(HF2_EV_JDS_PACKET, f);\n  }\n  sendJDMessageAsync(buf) {\n    return this.talkAsync(HF2_CMD_JDS_SEND, buf).then(() => {\n    });\n  }\n  handleEvent(buf) {\n    const evid = read32(buf, 0);\n    const f = this.eventHandlers[evid + \"\"];\n    if (f) {\n      f(buf.slice(4));\n    } else {\n      this.io.log(\"unhandled event: \" + evid.toString(16));\n    }\n  }\n  onSerial(data, iserr) {\n  }\n  async postConnectAsync() {\n    await this.checkMode();\n    const buf = await this.talkAsync(HF2_CMD_INFO);\n    this.io.log(\"connected to \" + bufferToString(buf));\n  }\n  async checkMode() {\n    const info = await this.talkAsync(HF2_CMD_BININFO);\n    if (!info)\n      throwError(\"device disconnected\");\n    const mode = read32(info, 0);\n    this.io.log(`mode ${mode}`);\n    if (mode == HF2_MODE_USERSPACE) {\n      this.io.log(`device in user-space mode`);\n    } else if (mode == HF2_MODE_BOOTLOADER) {\n      this.io.log(`device in bootloader mode, reseting into user-space mode`);\n      await this.talkAsync(HF2_CMD_RESET_INTO_APP);\n      throwError(\"Device in bootloader mode\");\n    } else {\n      throwError(\"Unknown device operation mode\");\n    }\n  }\n  async disconnectAsync() {\n    if (this.io) {\n      const io = this.io;\n      this.io = void 0;\n      await io.disconnectAsync();\n    }\n  }\n};\n\n// src/jdom/transport/microbit.ts\nvar MICROBIT_V2_VENDOR_ID = 3368;\nvar MICROBIT_V2_PRODUCT_ID = 516;\nvar CMSISProto = class {\n  constructor(io) {\n    this.io = io;\n    this.q = new PromiseQueue();\n    this.sendQ = [];\n  }\n  startRecvToLoop() {\n    console.assert(!this._lastInterval);\n    let last = this.recvTo;\n    this._lastInterval = setInterval(() => {\n      if (!this.io)\n        this.stopRecvToLoop();\n      if (last && last == this.recvTo) {\n        last();\n      }\n      last = this.recvTo;\n    }, 200);\n  }\n  stopRecvToLoop() {\n    if (this._lastInterval) {\n      clearInterval(this._lastInterval);\n      this._lastInterval = void 0;\n    }\n  }\n  error(msg, code) {\n    var _a;\n    this.stopRecvToLoop();\n    (_a = this.io) == null ? void 0 : _a.error(msg, code);\n    this.xchgAddr = null;\n  }\n  onJDMessage(f) {\n    this._onJDMsg = f;\n  }\n  sendJDMessageAsync(buf) {\n    if (buf.length & 3) {\n      const tmp = new Uint8Array(buf.length + 3 & ~3);\n      tmp.set(buf);\n      buf = tmp;\n    }\n    return new Promise((resolve) => {\n      this.sendQ.push({\n        buf,\n        cb: resolve\n      });\n    });\n  }\n  async disconnectAsync() {\n    if (this.io) {\n      console.debug(`micro:bit: disconnect proto`);\n      this.stopRecvToLoop();\n      this._onJDMsg = () => console.warn(\"rogue jd callback\");\n      const io = this.io;\n      this.io = void 0;\n      if (io)\n        await io.disconnectAsync();\n    }\n  }\n  recvAsync() {\n    return new Promise((resolve, reject) => {\n      if (!this.io) {\n        reject(new Error(\"USB disconnected\"));\n        return;\n      }\n      this.io.recvPacketAsync().then((v) => {\n        const f = resolve;\n        resolve = null;\n        if (f) {\n          this.recvTo = null;\n          f(v);\n        }\n      }, (err) => {\n        if (resolve) {\n          resolve = null;\n          this.recvTo = null;\n          reject(err);\n        }\n      });\n      this.recvTo = () => {\n        if (resolve) {\n          resolve = null;\n          reject(new Error(\"CMSIS recv timeout\"));\n        }\n      };\n    });\n  }\n  talkAsync(cmds) {\n    return this.q.enqueue(\"talk\", async () => {\n      if (!this.io) {\n        this.error(\"micro:bit disconnected\");\n        return;\n      }\n      await this.io.sendPacketAsync(new Uint8Array(cmds));\n      if (!this.io) {\n        this.error(\"micro:bit disconnected\");\n        return;\n      }\n      let response = await this.recvAsync();\n      if (response[0] !== cmds[0]) {\n        const msg = `Bad response for ${cmds[0]} -> ${response[0]}, try again`;\n        console.debug(msg, { cmds, response });\n        try {\n          response = await this.recvAsync();\n        } catch (e) {\n          this.error(msg);\n        }\n        if (response[0] !== cmds[0])\n          this.error(msg);\n      }\n      return response;\n    });\n  }\n  talkHexAsync(str) {\n    return this.talkAsync(fromHex(str.replace(/ /g, \"\")));\n  }\n  decodeString(buf) {\n    const len = buf[1];\n    const ss = buf.slice(2, 2 + len);\n    return uint8ArrayToString(ss);\n  }\n  dapDelay(micros) {\n    const cmd = [9, 0, 0];\n    if (micros > 65535)\n      this.error(\"too large delay\");\n    write16(cmd, 1, micros);\n    return this.talkAsync(cmd);\n  }\n  async setBaudRate() {\n    const setBaud = [130, 0, 0, 0, 0];\n    write32(setBaud, 1, 115200);\n    await this.talkAsync(setBaud);\n  }\n  async xchgLoop() {\n    let currSend;\n    while (this.io) {\n      const now = Date.now();\n      if (Flags.diagnostics && this.lastXchg && now - this.lastXchg > 50) {\n        console.warn(\"slow xchg: \" + (now - this.lastXchg) + \"ms\");\n      }\n      this.lastXchg = now;\n      let numev = 0;\n      let inp = await this.readBytes(this.xchgAddr + 12, 256, true);\n      if (inp[2]) {\n        await this.writeWord(this.xchgAddr + 12, 0);\n        await this.triggerIRQ();\n        inp = inp.slice(0, inp[2] + 12);\n        this._onJDMsg(inp);\n        numev++;\n      }\n      let sendFree = false;\n      if (currSend) {\n        const send = await this.readBytes(this.xchgAddr + 12 + 256, 4);\n        if (!send[2]) {\n          currSend.cb();\n          currSend = null;\n          sendFree = true;\n          numev++;\n        }\n      }\n      if (!currSend && this.sendQ.length) {\n        if (!sendFree) {\n          const send = await this.readBytes(this.xchgAddr + 12 + 256, 4);\n          if (!send[2])\n            sendFree = true;\n        }\n        if (sendFree) {\n          currSend = this.sendQ.shift();\n          const bbody = currSend.buf.slice(4);\n          await this.writeWords(this.xchgAddr + 12 + 256 + 4, new Uint32Array(bbody.buffer));\n          const bhead = currSend.buf.slice(0, 4);\n          await this.writeWords(this.xchgAddr + 12 + 256, new Uint32Array(bhead.buffer));\n          await this.triggerIRQ();\n          this.lastSend = Date.now();\n          numev++;\n        } else {\n          if (this.lastSend) {\n            const d = Date.now() - this.lastSend;\n            if (d > 50) {\n              this.lastSend = 0;\n              console.warn(\"failed to send packet fast enough\");\n            }\n          }\n        }\n      }\n      if (await this.readSerial())\n        numev++;\n      if (numev == 0)\n        await this.dapDelay(1e3);\n    }\n  }\n  async readSerial() {\n    let buf = await this.talkAsync([131]);\n    const len = buf[1];\n    if (len) {\n      buf = buf.slice(2, 2 + len);\n      if (this.pendingSerial)\n        buf = bufferConcat(this.pendingSerial, buf);\n      let ptr = 0;\n      let beg = 0;\n      while (ptr < buf.length) {\n        if (buf[ptr] == 10 || buf[ptr] == 13) {\n          beg = ptr + 1;\n        }\n        ptr++;\n      }\n      buf = buf.slice(beg);\n      this.pendingSerial = buf.length ? buf : null;\n      if (this.pendingSerial)\n        this.lastPendingSerial = Date.now();\n    } else if (this.pendingSerial) {\n      const d = Date.now() - this.lastPendingSerial;\n      if (d > 500) {\n        const s = fromUTF8(uint8ArrayToString(this.pendingSerial));\n        this.pendingSerial = null;\n        console.debug(\"SERIAL[TO]: \" + s);\n      }\n    }\n    return len;\n  }\n  async talkStringAsync(...cmds) {\n    return this.talkAsync(cmds).then((buf) => this.decodeString(buf));\n  }\n  async readDP(reg) {\n    const nums = [5, 0, 1, 2 | reg, 0, 0, 0, 0];\n    const buf = await this.talkAsync(nums);\n    return read32(buf, 3);\n  }\n  async setupTAR(addr) {\n    const nums = [5, 0, 2, 1, 82, 0, 0, 35, 5, 0, 0, 0, 0];\n    write32(nums, 9, addr);\n    await this.talkAsync(nums);\n  }\n  async writeWords(addr, data) {\n    await this.setupTAR(addr);\n    const MAX = 14;\n    let ptr = 0;\n    const reqHd = [6, 0, MAX, 0, 13];\n    for (let i = 0; i < MAX * 4; ++i)\n      reqHd.push(0);\n    const req = new Uint8Array(reqHd);\n    let overhang = 1;\n    let ptrTX = 0;\n    const count = data.length;\n    const dataBytes = new Uint8Array(data.buffer);\n    let lastCh = MAX;\n    await this.q.enqueue(\"talk\", async () => {\n      while (ptr < count) {\n        const ch = Math.min(count - ptrTX, MAX);\n        if (ch) {\n          req[2] = ch;\n          req.set(dataBytes.slice(ptrTX * 4, (ptrTX + ch) * 4), 5);\n          if (!this.io) {\n            this.error(\"disconnected\");\n            return;\n          }\n          await this.io.sendPacketAsync(ch == MAX ? req : req.slice(0, 5 + 4 * ch));\n          ptrTX += ch;\n          lastCh = ch;\n        }\n        if (overhang-- > 0)\n          continue;\n        const buf = await this.recvAsync();\n        if (buf[0] != req[0])\n          this.error(`bad response, ${buf[0]} != ${req[0]}`);\n        if (buf[1] != MAX && buf[1] != lastCh)\n          this.error(`bad response, ${buf[1]} != ${MAX} && ${buf[1]} != ${lastCh}`);\n        ptr += buf[1];\n      }\n    });\n  }\n  async readBytes(addr, count, jdmode = false) {\n    if (addr & 3 || count & 3)\n      this.error(\"unaligned\");\n    const b = await this.readWords(addr, count >> 2, jdmode);\n    return new Uint8Array(b.buffer);\n  }\n  async readWords(addr, count, jdmode = false) {\n    await this.setupTAR(addr);\n    const MAX = 14;\n    const res = new Uint32Array(count);\n    let ptr = 0;\n    const req = new Uint8Array([6, 0, MAX, 0, 15]);\n    let overhang = 1;\n    let ptrTX = 0;\n    let numPending = 0;\n    await this.q.enqueue(\"talk\", async () => {\n      while (ptr < count || numPending) {\n        const ch = Math.min(count - ptrTX, MAX);\n        if (ch > 0) {\n          req[2] = ch;\n          numPending++;\n          if (!this.io) {\n            this.error(\"disconnected\");\n            return;\n          }\n          await this.io.sendPacketAsync(req);\n          ptrTX += ch;\n        }\n        if (overhang-- > 0)\n          continue;\n        const buf = await this.recvAsync();\n        numPending--;\n        if (buf[0] != req[0]) {\n          this.error(\"bad response\");\n          return;\n        }\n        const len = buf[1];\n        const words = new Uint32Array(buf.slice(4, (1 + len) * 4).buffer);\n        if (words.length != len) {\n          this.error(\"bad response2\");\n          return;\n        }\n        res.set(words, ptr);\n        if (jdmode && ptr == 0) {\n          const frmsz = new Uint8Array(res.buffer)[2];\n          const words2 = frmsz + 12 + 3 >> 2;\n          if (count > words2)\n            count = words2;\n        }\n        ptr += words.length;\n      }\n    });\n    return res;\n  }\n  async findExchange() {\n    const memStart = 536870912;\n    const memStop = memStart + 128 * 1024;\n    const checkSize = 1024;\n    let p0 = 536895488;\n    let p1 = 536895488 + checkSize;\n    const check = async (addr) => {\n      if (addr < memStart)\n        return null;\n      if (addr + checkSize > memStop)\n        return null;\n      const buf = await this.readWords(addr, checkSize >> 2);\n      for (let i = 0; i < buf.length; ++i) {\n        if (buf[i] == 2020426826 && buf[i + 1] == 2963718377)\n          return addr + (i << 2);\n      }\n      return 0;\n    };\n    while (true) {\n      const a0 = await check(p0);\n      if (a0)\n        return a0;\n      const a1 = await check(p1);\n      if (a1)\n        return a1;\n      if (a0 === null && a1 === null)\n        return null;\n      p0 -= checkSize;\n      p1 += checkSize;\n    }\n  }\n  async triggerIRQ() {\n    const addr = 3758154240 + (this.irqn >> 5) * 4;\n    const data = new Uint32Array([1 << (this.irqn & 31)]);\n    await this.writeWords(addr, data);\n  }\n  writeWord(addr, val) {\n    return this.writeWords(addr, new Uint32Array([val]));\n  }\n  async reset() {\n    await this.writeWord(3758157308, 0);\n    await this.writeWord(3758157068, 100270080 | 1 << 2);\n  }\n  async postConnectAsync() {\n    this.startRecvToLoop();\n    const devid = await this.talkStringAsync(128);\n    if (/^9902/.test(devid)) {\n      this.error(`micro:bit v1 is not supported. sorry.`, ERROR_MICROBIT_V1);\n      return;\n    }\n    if (!/^990[3456789]/.test(devid)) {\n      this.error(`Invalid Vendor0 response: ` + devid, ERROR_MICROBIT_UNKNOWN);\n      return;\n    }\n    this.io.log(\"DAPLink v\" + await this.talkStringAsync(0, 4));\n    await this.setBaudRate();\n    const freq = [17, 0, 0, 0, 0];\n    write32(freq, 1, 1e7);\n    await this.talkAsync(freq);\n    const inits = [\n      \"02 00\",\n      \"04 00 64 00 00 00\",\n      \"12 38 FF FF FF FF FF FF FF\",\n      \"12 10 9E E7\",\n      \"12 38 FF FF FF FF FF FF FF\",\n      \"12 08 00\",\n      \"05 00 01 02 00 00 00 00\",\n      \"05 00 03 00 04 00 00 00 08 00 00 00 00 04 00 00 00 50\"\n    ];\n    for (const ini of inits)\n      await this.talkHexAsync(ini);\n    for (let i = 0; i < 100; ++i) {\n      const st = await this.readDP(4);\n      const mask = 1 << 29 | 1 << 31;\n      if ((st & mask) == mask)\n        break;\n      await delay(20);\n    }\n    await this.reset();\n    await delay(1e3);\n    const xchg = await this.findExchange();\n    if (xchg === null) {\n      this.error(`exchange address not found; add jacdac to your project`, ERROR_MICROBIT_JACDAC_MISSING);\n      return;\n    }\n    this.xchgAddr = xchg;\n    const info = await this.readBytes(xchg, 16);\n    this.irqn = info[8];\n    if (info[12 + 2] != 255) {\n      this.error(\"invalid memory; try power-cycling the micro:bit\", ERROR_MICROBIT_INVALID_MEMORY);\n      return;\n    }\n    await this.writeWord(xchg + 12, 0);\n    this.io.log(`exchange address: 0x${xchg.toString(16)}; irqn=${this.irqn}`);\n    this.xchgLoop().catch((e) => {\n      if (!isCancelError(e))\n        console.debug(e);\n      this.error((e == null ? void 0 : e.message) || \"an error occured\");\n    });\n  }\n};\n\n// src/jdom/transport/usbio.ts\nvar USB_FILTERS = {\n  filters: [\n    {\n      classCode: 255,\n      subclassCode: HF2_DEVICE_MAJOR\n    },\n    {\n      vendorId: MICROBIT_V2_VENDOR_ID,\n      productId: MICROBIT_V2_PRODUCT_ID\n    }\n  ]\n};\nvar controlTransferGetReport = 1;\nvar controlTransferSetReport = 9;\nvar controlTransferOutReport = 512;\nvar controlTransferInReport = 256;\nvar USBIO = class {\n  constructor(options) {\n    this.options = options;\n    this.readLoopStarted = false;\n    this.ready = false;\n    this.rawMode = false;\n    this.onData = (v) => {\n    };\n    this.onError = (e) => {\n      console.warn(`usb error: ${errorCode(e) || \"\"} ${e ? e.stack : e}`);\n    };\n  }\n  log(msg, v) {\n    if (Flags.diagnostics) {\n      if (v != void 0)\n        console.debug(\"usb: \" + msg, v);\n      else\n        console.debug(\"usb: \" + msg);\n    }\n  }\n  mkProto() {\n    return this.isMicrobit() ? new CMSISProto(this) : new HF2Proto(this);\n  }\n  clearDev() {\n    if (this.dev) {\n      this.dev = null;\n      this.epIn = null;\n      this.epOut = null;\n      this.onData = () => console.warn(\"rogue hf2 onData\");\n    }\n  }\n  disconnectAsync() {\n    this.ready = false;\n    if (!this.dev)\n      return Promise.resolve();\n    console.debug(\"close device\");\n    return this.dev.close().catch((e) => {\n      if (!isCancelError(e))\n        console.debug(e);\n    }).then(() => {\n      this.clearDev();\n      return delay(500);\n    });\n  }\n  recvPacketAsync() {\n    if (!this.rawMode)\n      this.error(\"rawMode required\");\n    return this.recvPacketCoreAsync();\n  }\n  recvPacketCoreAsync() {\n    const final = (res) => {\n      if (res.status != \"ok\")\n        this.error(\"USB IN transfer failed\");\n      const arr = new Uint8Array(res.data.buffer);\n      if (arr.length == 0)\n        return this.recvPacketCoreAsync();\n      return arr;\n    };\n    if (!this.dev)\n      return Promise.reject(new Error(\"Disconnected\"));\n    if (!this.epIn) {\n      return this.dev.controlTransferIn({\n        requestType: \"class\",\n        recipient: \"interface\",\n        request: controlTransferGetReport,\n        value: controlTransferInReport,\n        index: this.iface.interfaceNumber\n      }, 64).then(final);\n    }\n    return this.dev.transferIn(this.epIn.endpointNumber, 64).then(final);\n  }\n  error(msg, code) {\n    const e = new JDError(`device ${this.dev ? this.dev.productName : \"n/a\"} (${msg})`, code);\n    this.onError(e);\n  }\n  async readLoop() {\n    if (this.rawMode || this.readLoopStarted)\n      return;\n    this.readLoopStarted = true;\n    console.debug(\"usb: start read loop\");\n    while (true) {\n      if (!this.ready) {\n        break;\n      }\n      try {\n        const buf = await this.recvPacketCoreAsync();\n        if (buf[0]) {\n          this.onData(buf);\n        } else {\n          await delay(5);\n        }\n      } catch (err) {\n        if (this.dev) {\n          if (!isCancelError(err))\n            this.onError(err);\n          await this.disconnectAsync();\n        }\n        await delay(300);\n      }\n    }\n  }\n  sendPacketAsync(pkt) {\n    if (!this.dev)\n      return Promise.reject(new Error(\"Disconnected\"));\n    assert(pkt.length <= 64);\n    if (!this.epOut) {\n      return this.dev.controlTransferOut({\n        requestType: \"class\",\n        recipient: \"interface\",\n        request: controlTransferSetReport,\n        value: controlTransferOutReport,\n        index: this.iface.interfaceNumber\n      }, pkt).then((res) => {\n        if (res.status != \"ok\")\n          this.error(\"USB CTRL OUT transfer failed\");\n      });\n    }\n    return this.dev.transferOut(this.epOut.endpointNumber, pkt).then((res) => {\n      if (res.status != \"ok\")\n        this.error(\"USB OUT transfer failed\");\n    });\n  }\n  isMicrobit() {\n    return this.dev && this.dev.productId == 516 && this.dev.vendorId == 3368;\n  }\n  checkDevice() {\n    this.iface = void 0;\n    this.altIface = void 0;\n    if (!this.dev)\n      return false;\n    console.debug(\"usb: connect device \" + this.dev.manufacturerName + \" \" + this.dev.productName);\n    const subcl = this.isMicrobit() ? 0 : HF2_DEVICE_MAJOR;\n    for (const iface of this.dev.configuration.interfaces) {\n      const alt = iface.alternates[0];\n      if (alt.interfaceClass == 255 && alt.interfaceSubclass == subcl) {\n        this.iface = iface;\n        this.altIface = alt;\n        break;\n      }\n    }\n    if (this.isMicrobit())\n      this.rawMode = true;\n    return !!this.iface;\n  }\n  async tryReconnectAsync(deviceId) {\n    try {\n      const devices = await this.options.getDevices(USB_FILTERS);\n      this.dev = deviceId ? devices.find((dev) => dev.serialNumber === deviceId) : devices[0];\n    } catch (e) {\n      if (!isCancelError(e))\n        console.debug(e);\n      this.dev = void 0;\n    }\n  }\n  async requestDeviceAsync() {\n    try {\n      this.dev = await this.options.requestDevice(USB_FILTERS);\n    } catch (e) {\n      if (!isCancelError(e))\n        console.debug(e);\n      this.dev = void 0;\n    }\n  }\n  async connectAsync(background, deviceId) {\n    await this.tryReconnectAsync(deviceId);\n    if (!this.dev && !background)\n      await this.requestDeviceAsync();\n    if (!this.dev && background)\n      throwError(\"usb: device not paired\", true);\n    await this.openDeviceAsync();\n    const proto = this.mkProto();\n    try {\n      await proto.postConnectAsync();\n    } catch (e) {\n      if (!isCancelError(e))\n        console.debug(e);\n      await proto.disconnectAsync();\n      throw e;\n    }\n    return proto;\n  }\n  async openDeviceAsync() {\n    if (!this.dev)\n      throwError(\"usb: device not found\", true);\n    if (!this.checkDevice())\n      throwError(\"usb: device does not support HF2\");\n    await this.dev.open();\n    await this.dev.selectConfiguration(1);\n    if (this.altIface.endpoints.length) {\n      this.epIn = this.altIface.endpoints.filter((e) => e.direction == \"in\")[0];\n      this.epOut = this.altIface.endpoints.filter((e) => e.direction == \"out\")[0];\n      assert(this.epIn.packetSize == 64);\n      assert(this.epOut.packetSize == 64);\n    }\n    console.debug(`usb: claim interface ${this.iface.interfaceNumber}`);\n    await this.dev.claimInterface(this.iface.interfaceNumber);\n    console.debug(\"usb: all connected\");\n    this.ready = true;\n    this.readLoop();\n  }\n};\n\n// src/jdom/transport/webserialio.ts\nvar WebSerialIO = class {\n  constructor(bus) {\n    this.bus = bus;\n    this.readLoopStarted = false;\n    this.ready = false;\n    this.onData = (v) => {\n    };\n    this.onError = (e) => {\n      console.warn(`usb error: ${errorCode(e) || \"\"} ${e ? e.stack : e}`);\n    };\n  }\n  log(msg, v) {\n    if (Flags.diagnostics) {\n      if (v != void 0)\n        console.debug(\"usb: \" + msg, v);\n      else\n        console.debug(\"usb: \" + msg);\n    }\n  }\n  mkProto() {\n    return new HF2Proto(this);\n  }\n  clearDev() {\n    if (this.dev) {\n      this.dev = null;\n      this.onData = () => console.warn(\"rogue webserial hf2 onData\");\n    }\n  }\n  disconnectAsync() {\n    this.ready = false;\n    if (!this.dev)\n      return Promise.resolve();\n    console.debug(\"close device\");\n    return this.cancelStreams().catch((e) => {\n      if (!isCancelError(e))\n        console.debug(e);\n    }).then(() => {\n      this.clearDev();\n      return delay(500);\n    });\n  }\n  devInfo() {\n    if (!this.dev)\n      return \"n/a\";\n    const h = (n) => (\"000\" + n.toString(16)).slice(-4);\n    const info = this.dev.getInfo();\n    return h(info.usbVendorId) + \":\" + h(info.usbProductId);\n  }\n  error(msg, code) {\n    const e = new JDError(`serial device ${this.devInfo()} (${msg})`, code);\n    this.onError(e);\n  }\n  async cancelStreams() {\n    if (this.reader)\n      try {\n        await this.reader.cancel();\n        this.reader.releaseLock();\n      } catch {\n      }\n    try {\n      this.writer.releaseLock();\n    } catch {\n    }\n    await this.dev.close();\n  }\n  async readLoop() {\n    var _a, _b;\n    if (this.readLoopStarted)\n      return;\n    this.readLoopStarted = true;\n    console.debug(\"start read loop\");\n    const readpkt = async (reader) => {\n      let value = null;\n      for (; ; ) {\n        const tmp = await reader.read();\n        if (tmp.done || !this.dev)\n          return null;\n        if (!value)\n          value = tmp.value;\n        else\n          value = bufferConcat(value, tmp.value);\n        if (value && (value.length & 63) == 0)\n          return value;\n      }\n    };\n    for (; ; ) {\n      const reader = (_b = (_a = this.dev) == null ? void 0 : _a.readable) == null ? void 0 : _b.getReader();\n      if (!reader) {\n        await delay(100);\n        continue;\n      }\n      this.reader = reader;\n      console.debug(\"start new read loop round\");\n      try {\n        for (; ; ) {\n          const value = await readpkt(reader);\n          if (!value)\n            break;\n          if (value.length > 64)\n            for (let i = 0; i < value.length; i += 64) {\n              this.onData(value.slice(i, i + 64));\n            }\n          else\n            this.onData(value);\n        }\n      } catch (e) {\n        if (this.dev) {\n          if (!isCancelError(e))\n            this.onError(e);\n        }\n        await delay(100);\n      } finally {\n        try {\n          reader.releaseLock();\n        } catch (e) {\n        }\n        await delay(100);\n      }\n    }\n  }\n  sendPacketAsync(pkt) {\n    if (!this.dev || !this.writer)\n      return Promise.reject(new Error(\"Disconnected\"));\n    assert(pkt.length <= 64);\n    if (pkt.length < 64) {\n      const p = pkt;\n      pkt = new Uint8Array(64);\n      pkt.set(p);\n    }\n    return this.writer.write(pkt);\n  }\n  async tryReconnectAsync() {\n    const matchFilter = (port) => {\n      const info = port == null ? void 0 : port.getInfo();\n      const usbVendorId = info == null ? void 0 : info.usbVendorId;\n      return this.bus.deviceCatalog.matchVendorId(\"serial\", usbVendorId);\n    };\n    try {\n      const ports = await navigator.serial.getPorts();\n      const filtered = ports.filter(matchFilter);\n      this.dev = filtered[0];\n    } catch (e) {\n      if (!isCancelError(e))\n        console.debug(e);\n      this.dev = void 0;\n    }\n  }\n  async requestDeviceAsync(deviceId) {\n    const vendorIds = this.bus.deviceCatalog.vendorIds(\"serial\");\n    const WEB_SERIAL_FILTERS = {\n      filters: vendorIds.map((usbVendorId) => ({ usbVendorId }))\n    };\n    try {\n      this.dev = await navigator.serial.requestPort(WEB_SERIAL_FILTERS);\n    } catch (e) {\n      if (!isCancelError(e))\n        console.debug(e);\n      this.dev = void 0;\n    }\n  }\n  async connectAsync(background, deviceId) {\n    await this.tryReconnectAsync();\n    if (!this.dev && !background)\n      await this.requestDeviceAsync(deviceId);\n    if (!this.dev && background)\n      throwError(\"device not paired\", true);\n    await this.openDeviceAsync();\n    const proto = this.mkProto();\n    try {\n      await proto.postConnectAsync();\n    } catch (e) {\n      if (!isCancelError(e))\n        console.debug(e);\n      await proto.disconnectAsync();\n      throw e;\n    }\n    return proto;\n  }\n  async openDeviceAsync() {\n    var _a;\n    if (!this.dev)\n      throwError(\"device not found\", true);\n    await this.dev.open({\n      baudRate: 115200,\n      bufferSize: 32 * 1024\n    });\n    this.writer = (_a = this.dev.writable) == null ? void 0 : _a.getWriter();\n    if (!this.writer)\n      throwError(\"no writer\");\n    this.ready = true;\n    this.readLoop();\n  }\n};\n\n// src/jdom/transport/eventtargetobservable.ts\nvar EventTargetObservable = class {\n  constructor(element, eventName) {\n    this.element = element;\n    this.eventName = eventName;\n  }\n  subscribe(observer) {\n    const handler = (ev) => !!observer.next && observer.next(ev);\n    this.element.addEventListener(this.eventName, handler, false);\n    return {\n      unsubscribe: () => this.element.removeEventListener(this.eventName, handler)\n    };\n  }\n};\n\n// src/jdom/transport/usb.ts\nfunction isWebUSBEnabled() {\n  return !!Flags.webUSB;\n}\nfunction isWebUSBSupported() {\n  try {\n    return typeof navigator !== \"undefined\" && !!navigator.usb && !!navigator.usb.getDevices;\n  } catch (e) {\n    return false;\n  }\n}\nfunction usbRequestDevice(options) {\n  var _a, _b;\n  if (!Flags.webUSB)\n    return Promise.resolve(void 0);\n  try {\n    return (_b = (_a = navigator == null ? void 0 : navigator.usb) == null ? void 0 : _a.requestDevice) == null ? void 0 : _b.call(_a, options);\n  } catch (e) {\n    if (Flags.diagnostics)\n      console.warn(e);\n    return void 0;\n  }\n}\nfunction usbGetDevices() {\n  var _a;\n  if (!Flags.webUSB)\n    return Promise.resolve([]);\n  try {\n    return ((_a = navigator == null ? void 0 : navigator.usb) == null ? void 0 : _a.getDevices()) || Promise.resolve([]);\n  } catch (e) {\n    if (Flags.diagnostics)\n      console.warn(e);\n    return Promise.resolve([]);\n  }\n}\nvar WebUSBTransport = class extends Transport {\n  constructor(options) {\n    super(USB_TRANSPORT, { ...options, checkPulse: true });\n    this.options = options;\n  }\n  async transportConnectAsync(background) {\n    const transport = new USBIO(this.options);\n    transport.onError = (e) => this.errorHandler(USB_TRANSPORT, e);\n    this.hf2 = await transport.connectAsync(background);\n    this.hf2.onJDMessage(this.handleFrame.bind(this));\n  }\n  async transportSendPacketAsync(p) {\n    if (!this.hf2)\n      throw new Error(\"hf2 transport disconnected\");\n    const buf = p.toBuffer();\n    await this.hf2.sendJDMessageAsync(buf);\n  }\n  async transportDisconnectAsync(background) {\n    const h = this.hf2;\n    this.hf2 = void 0;\n    if (h)\n      await h.disconnectAsync();\n  }\n};\nfunction defaultOptions() {\n  return isWebUSBSupported() && {\n    getDevices: usbGetDevices,\n    requestDevice: usbRequestDevice,\n    connectObservable: new EventTargetObservable(navigator.usb, \"connect\"),\n    disconnectObservable: new EventTargetObservable(navigator.usb, \"disconnect\")\n  };\n}\nfunction createUSBTransport(options) {\n  if (!options)\n    options = defaultOptions();\n  return options && new WebUSBTransport(options);\n}\nfunction createUSBBus(usbOptions, options) {\n  return new JDBus([createUSBTransport(usbOptions)], options);\n}\n\n// src/jdom/transport/workertransport.ts\nvar WorkerTransport = class extends Transport {\n  constructor(type, worker, options) {\n    super(type, options);\n    this.type = type;\n    this.worker = worker;\n    this.options = options;\n    this.pending = {};\n    this.worker.addEventListener(\"message\", this.handleMessage.bind(this));\n  }\n  postMessageAsync(msg) {\n    const id = msg.id = \"\" + Math.random();\n    const p = new Promise((resolve, reject) => {\n      this.worker.postMessage(msg);\n      this.pending[id] = { resolve, reject };\n    });\n    return p;\n  }\n  handleMessage(ev) {\n    const data = ev.data;\n    const { jacdac, type } = data || {};\n    if (!jacdac)\n      return;\n    switch (type) {\n      case \"packet\": {\n        const { payload } = data;\n        this.handlePacket(payload);\n        break;\n      }\n      case \"frame\": {\n        const { payload } = data;\n        this.handleFrame(payload);\n        break;\n      }\n      case \"connect\":\n      case \"disconnect\": {\n        const { id, error } = data;\n        const { resolve, reject } = this.pending[id] || {};\n        if (resolve) {\n          if (error)\n            reject(error);\n          else\n            resolve(void 0);\n        }\n        break;\n      }\n      case \"error\": {\n        const { error, background, type: type2 } = data;\n        if (Flags.diagnostics)\n          console.debug(data);\n        if (!background)\n          this.errorHandler(type2, error);\n        break;\n      }\n    }\n  }\n  async transportSendPacketAsync(p) {\n    const buf = p.toBuffer();\n    this.worker.postMessage({\n      jacdac: true,\n      type: \"packet\",\n      payload: buf\n    });\n  }\n  async transportConnectAsync(background) {\n    let deviceId;\n    if (!background) {\n      deviceId = await this.options.requestDevice();\n    }\n    await this.postMessageAsync({\n      jacdac: true,\n      type: \"connect\",\n      deviceId,\n      background\n    });\n  }\n  transportDisconnectAsync(background) {\n    return this.postMessageAsync({\n      jacdac: true,\n      type: \"disconnect\",\n      background\n    });\n  }\n};\nfunction createUSBWorkerTransport(worker) {\n  return isWebUSBEnabled() && new WorkerTransport(USB_TRANSPORT, worker, {\n    checkPulse: true,\n    requestDevice: () => usbRequestDevice(USB_FILTERS).then((dev) => dev == null ? void 0 : dev.serialNumber),\n    connectObservable: new EventTargetObservable(navigator.usb, \"connect\"),\n    disconnectObservable: new EventTargetObservable(navigator.usb, \"disconnect\")\n  });\n}\n\n// src/jdom/transport/webserial.ts\nfunction isWebSerialEnabled() {\n  return !!Flags.webSerial;\n}\nfunction isWebSerialSupported() {\n  try {\n    return typeof navigator !== \"undefined\" && !!navigator.serial && !!navigator.serial.getPorts;\n  } catch (e) {\n    return false;\n  }\n}\nvar WebSerialTransport = class extends Transport {\n  constructor(options) {\n    super(SERIAL_TRANSPORT, { ...options, checkPulse: true });\n    this.mkTransport = options.mkTransport;\n  }\n  async transportConnectAsync(background) {\n    const transport = this.mkTransport(this.bus);\n    transport.onError = (e) => this.errorHandler(SERIAL_TRANSPORT, e);\n    this.hf2 = await transport.connectAsync(background);\n    this.hf2.onJDMessage(this.handleFrame.bind(this));\n  }\n  async transportSendPacketAsync(p) {\n    if (!this.hf2)\n      throw new Error(\"hf2 transport disconnected\");\n    const buf = p.toBuffer();\n    await this.hf2.sendJDMessageAsync(buf);\n  }\n  async transportDisconnectAsync(background) {\n    const h = this.hf2;\n    this.hf2 = void 0;\n    if (h)\n      await h.disconnectAsync();\n  }\n};\nfunction defaultOptions2() {\n  if (!isWebSerialSupported())\n    return void 0;\n  const connectObservable = new EventTargetObservable(navigator.serial, \"connect\");\n  const disconnectObservable = new EventTargetObservable(navigator.serial, \"disconnect\");\n  return {\n    mkTransport: (bus) => new WebSerialIO(bus),\n    connectObservable,\n    disconnectObservable\n  };\n}\nfunction createWebSerialTransport(options) {\n  if (!options)\n    options = defaultOptions2();\n  return options && new WebSerialTransport(options);\n}\n\n// src/jdom/bridges/iframebridge.ts\nvar IFrameBridge = class extends JDBridge {\n  constructor(targetOrigin) {\n    super();\n    this.targetOrigin = targetOrigin;\n    this.handleMessage = this.handleMessage.bind(this);\n    window.addEventListener(\"message\", this.handleMessage, false);\n    this.mount(() => window.removeEventListener(\"message\", this.handleMessage));\n  }\n  handleMessage(msg) {\n    const { data } = msg;\n    if (data.channel === \"jacdac\" && data.type === \"messagepacket\") {\n      const payload = data.data;\n      this.receivePacket(payload);\n    }\n  }\n  sendPacket(data, sender) {\n    const msg = {\n      type: \"messagepacket\",\n      channel: \"jacdac\",\n      data,\n      sender,\n      broadcast: true\n    };\n    window.parent.postMessage(msg, this.targetOrigin);\n  }\n};\nfunction createIFrameBridge(parentOrigin = \"*\") {\n  return inIFrame() && new IFrameBridge(parentOrigin);\n}\nfunction startDevTools() {\n  if (typeof window !== \"undefined\" && !/^https:\\/\\/microsoft.github.io\\/jacdac-docs\\//.test(window.location.href))\n    window.location.href = `https://microsoft.github.io/jacdac-docs/clients/javascript/devtools.html#${window.location.href}`;\n}\n\n// src/jdom/transport/createbus.ts\nfunction createWebBus(options) {\n  const {\n    usbOptions,\n    serialOptions,\n    bluetoothOptions,\n    iframeTargetOrigin,\n    client = true,\n    ...rest\n  } = options || {};\n  const bus = new JDBus([\n    usbOptions !== null ? createUSBTransport(usbOptions) : void 0,\n    serialOptions !== null ? createWebSerialTransport(serialOptions) : void 0,\n    bluetoothOptions !== null ? createBluetoothTransport(bluetoothOptions) : void 0\n  ], { client, ...rest });\n  const iframeBridge = iframeTargetOrigin !== null && createIFrameBridge(iframeTargetOrigin);\n  if (iframeBridge)\n    iframeBridge.bus = bus;\n  return bus;\n}\nfunction isWebTransportSupported() {\n  return isWebUSBSupported() || isWebSerialSupported() || isWebBluetoothSupported();\n}\n\n// src/jdom/rolemanager.ts\nvar RoleManager = class extends JDClient {\n  constructor(bus) {\n    super();\n    this._roles = [];\n    this.bus = bus;\n    this.mount(this.bus.subscribe(DEVICE_ANNOUNCE, this.addServices.bind(this)));\n    this.mount(this.bus.subscribe(DEVICE_DISCONNECT, this.removeServices.bind(this)));\n    this.bindServices();\n  }\n  get isBound() {\n    return this._roles.every(({ service }) => !!service);\n  }\n  roles(bound = void 0) {\n    if (bound !== void 0)\n      return this._roles.filter(({ service }) => !!service === bound);\n    else\n      return this._roles.slice(0);\n  }\n  saveRoles() {\n    return this._roles.map(({ service, ...rest }) => ({\n      ...rest,\n      serviceId: service == null ? void 0 : service.id\n    }));\n  }\n  get hash() {\n    return JSON.stringify(this.saveRoles());\n  }\n  updateRoles(newRoles) {\n    const oldBound = this.isBound;\n    const oldHash = this.hash;\n    const supportedNewRoles = newRoles.filter(({ serviceClass: serviceClass2 }) => serviceSpecificationFromClassIdentifier(serviceClass2));\n    const preferreds = /* @__PURE__ */ new Set();\n    for (const role of supportedNewRoles.filter((r) => !!r.preferredDeviceId)) {\n      const key = role.preferredDeviceId + (role.preferredServiceIndex || -1);\n      if (preferreds.has(key)) {\n        role.preferredDeviceId = void 0;\n        role.preferredServiceIndex = void 0;\n      } else\n        preferreds.add(key);\n    }\n    let i = 0;\n    while (i < this._roles.length) {\n      const role = this._roles[i];\n      if (!supportedNewRoles.find((r) => r.role === role.role)) {\n        this._roles.splice(i, 1);\n        this.emit(ROLE_UNBOUND, role.role);\n      } else {\n        i++;\n      }\n    }\n    for (const newRole of supportedNewRoles) {\n      const existingRole = this._roles.find((r) => r.role === newRole.role);\n      if (!existingRole) {\n        this._roles.push({ ...newRole });\n      } else {\n        const bindingChanged = existingRole.serviceClass !== newRole.serviceClass || existingRole.preferredDeviceId != newRole.preferredDeviceId || existingRole.preferredServiceIndex != newRole.preferredServiceIndex;\n        existingRole.serviceClass = newRole.serviceClass;\n        existingRole.preferredDeviceId = newRole.preferredDeviceId;\n        existingRole.preferredServiceIndex = newRole.preferredServiceIndex;\n        if (existingRole.service && bindingChanged) {\n          existingRole.service = void 0;\n          this.emit(ROLE_UNBOUND, existingRole.role);\n        }\n      }\n      if (newRole.preferredDeviceId) {\n        const otherBinding = this._roles.find((r) => r.service && r.service.device.deviceId === newRole.preferredDeviceId && (isNaN(newRole.preferredServiceIndex) || r.service.serviceIndex === newRole.preferredServiceIndex));\n        if (otherBinding) {\n          otherBinding.service = void 0;\n          this.emit(ROLE_UNBOUND, otherBinding.role);\n        }\n      }\n    }\n    const changed = oldHash !== this.hash;\n    this.bindServices(changed);\n    this.emitBoundEvents(oldBound);\n  }\n  service(role) {\n    var _a;\n    return (_a = this._roles.find((r) => r.role === role)) == null ? void 0 : _a.service;\n  }\n  updateRole(role, serviceClass2, preferredDeviceId, preferredServiceIndex) {\n    const newRoles = this._roles.slice(0).map((r) => ({ ...r }));\n    let binding = newRoles.find((r) => r.role === role);\n    if (binding) {\n      binding.service = void 0;\n      binding.preferredDeviceId = preferredDeviceId;\n      binding.preferredServiceIndex = preferredServiceIndex;\n    } else {\n      binding = {\n        role,\n        serviceClass: serviceClass2,\n        preferredDeviceId,\n        preferredServiceIndex\n      };\n      newRoles.push(binding);\n    }\n    if (preferredDeviceId) {\n      const other = this._roles.find((r) => r !== binding && r.preferredDeviceId === preferredDeviceId && r.preferredServiceIndex === preferredServiceIndex);\n      if (other) {\n        other.preferredDeviceId = void 0;\n        other.preferredServiceIndex = void 0;\n      }\n    }\n    this.updateRoles(newRoles);\n  }\n  emitBoundEvents(oldBound) {\n    const bound = this.isBound;\n    if (oldBound !== bound)\n      this.emit(bound ? BOUND : UNBOUND);\n  }\n  bindRole(role) {\n    const bound = this.roles(true);\n    const unboundServices = this.bus.services({\n      ignoreInfrastructure: true,\n      serviceClass: role.serviceClass\n    }).filter((s) => !bound.find((r) => r.service === s));\n    const boundServices = bound.map((r) => r.service).filter((srv) => !!srv);\n    let theOne = unboundServices[0];\n    if (role.preferredDeviceId) {\n      const newOne = [...unboundServices, ...boundServices].find((s) => s.device.deviceId === role.preferredDeviceId && (isNaN(role.preferredServiceIndex) || role.preferredServiceIndex === s.serviceIndex));\n      if (newOne) {\n        theOne = newOne;\n      }\n    }\n    if (theOne) {\n      role.service = theOne;\n      this.emit(ROLE_BOUND, role.role);\n      return true;\n    } else\n      return false;\n  }\n  bindServices(changed) {\n    const r = this.roles().sort((l, r2) => {\n      let c = 0;\n      if (r2.preferredDeviceId || l.preferredDeviceId)\n        c = -(l.preferredDeviceId || \"\").localeCompare(r2.preferredDeviceId || \"\");\n      if (c != 0)\n        return c;\n      if (!isNaN(l.preferredServiceIndex) || !isNaN(r2.preferredServiceIndex))\n        c = -(l.preferredServiceIndex || 0) + (r2.preferredServiceIndex || 0);\n      return c;\n    });\n    r.forEach((binding) => {\n      if (this.bindRole(binding))\n        changed = true;\n    });\n    if (changed)\n      this.emit(CHANGE);\n  }\n  addServices(dev) {\n    if (dev === this.bus.selfDevice)\n      return;\n    this.bindServices();\n  }\n  removeServices(dev) {\n    let changed = false;\n    this._roles.filter((r) => {\n      var _a;\n      return ((_a = r.service) == null ? void 0 : _a.device) === dev;\n    }).forEach((r) => {\n      r.service = void 0;\n      this.emit(ROLE_UNBOUND, r.role);\n      changed = true;\n    });\n    this.bindServices(changed);\n  }\n  toString() {\n    return this._roles.map(({ role, service }) => `${role}->${service || \"?\"}`).join(\",\");\n  }\n};\nfunction startRoles(bus, bindings, onUpdate, options) {\n  const { incomplete } = options || {};\n  const roleManager = new RoleManager(bus);\n  roleManager.updateRoles(Object.keys(bindings).map((role) => ({\n    role,\n    serviceClass: bindings[role].serviceClass,\n    preferredDeviceId: bindings[role].preferredDeviceId,\n    preferredServiceIndex: bindings[role].preferredServiceIndex\n  })));\n  const roles = () => {\n    const r = {};\n    for (const key in bindings) {\n      const srv = roleManager.service(key);\n      if (srv)\n        r[key] = srv;\n    }\n    return r;\n  };\n  const update = () => {\n    if (!incomplete && !roleManager.isBound)\n      return;\n    onUpdate(roles());\n  };\n  const unsubscribe = roleManager.subscribe(CHANGE, update);\n  update();\n  return unsubscribe;\n}\n\n// src/jdom/sensors.ts\nvar _sensorSpecs;\nfunction sensorSpecifications() {\n  if (!_sensorSpecs) {\n    _sensorSpecs = serviceSpecifications().filter((srv) => !srv.shortName.startsWith(\"_\") && isSensor(srv));\n  }\n  return _sensorSpecs;\n}\nfunction snapshotSensors(bus, sparse) {\n  const r = toMap(sensorSpecifications(), (srv) => srv.camelName, (srv) => {\n    const r2 = bus.services({\n      serviceClass: srv.classIdentifier,\n      ignoreInfrastructure: true,\n      announced: true\n    }).map((srv2) => {\n      var _a;\n      const reg = srv2.readingRegister;\n      const spec = reg.specification;\n      return spec.fields.length === 1 ? ((_a = reg.unpackedValue) == null ? void 0 : _a[0]) || 0 : reg.objectValue || {};\n    });\n    return sparse && !r2.length ? void 0 : r2;\n  }, sparse);\n  return r;\n}\n\n// src/jdom/transport/nodesocket.ts\nvar NodeSocketTransport = class extends Transport {\n  constructor(port = 8082, host = \"localhost\", options) {\n    super(NODESOCKET_TRANSPORT, options);\n    this.port = port;\n    this.host = host;\n  }\n  transportConnectAsync(background) {\n    return new Promise((resolve) => {\n      const net = __require(\"net\");\n      this.sock = net.createConnection(this.port, this.host, resolve);\n      this.sock.on(\"error\", () => this.disconnect(background));\n      this.sock.on(\"end\", () => this.disconnect(background));\n      this.sock.setNoDelay();\n      let acc;\n      this.sock.on(\"data\", (buf) => {\n        if (acc) {\n          buf = bufferConcat(acc, buf);\n          acc = null;\n        } else {\n          buf = new Uint8Array(buf);\n        }\n        while (buf) {\n          const endp = buf[0] + 1;\n          if (buf.length >= endp) {\n            const pkt = buf.slice(1, endp);\n            if (buf.length > endp)\n              buf = buf.slice(endp);\n            else\n              buf = null;\n            this.handlePacket(pkt);\n          } else {\n            acc = buf;\n            buf = null;\n          }\n        }\n      });\n    });\n  }\n  transportSendPacketAsync(p) {\n    const data = p.toBuffer();\n    const buf = new Uint8Array(1 + data.length);\n    buf[0] = data.length;\n    buf.set(data, 1);\n    this.sock.write(buf);\n    return Promise.resolve();\n  }\n  transportDisconnectAsync(background) {\n    var _a;\n    try {\n      (_a = this.sock) == null ? void 0 : _a.end();\n      this.sock = void 0;\n    } catch (e) {\n      if (!background)\n        throw e;\n    }\n    return Promise.resolve();\n  }\n  toString() {\n    var _a;\n    return `socket transport (local port: ${(_a = this.sock) == null ? void 0 : _a.localPort})`;\n  }\n};\nfunction createNodeSocketTransport(port = 8082, host = \"localhost\", options) {\n  return new NodeSocketTransport(port, host, options);\n}\n\n// src/jdom/transport/nodespi.ts\nvar debug2 = (msg) => {\n};\nvar XFER_SIZE = 256;\nvar SPI_TRANSFER_ATTEMPT_COUNT = 10;\nvar SpiTransport = class extends Transport {\n  constructor(rpio, spi, options) {\n    super(\"spi\", options);\n    this.rpio = rpio;\n    this.spi = spi;\n    this.options = options;\n    this.sendQueue = [];\n    this.receiveQueue = [];\n    this.handleRxPinRising = this.handleRxPinRising.bind(this);\n    this.handleTxPinRising = this.handleTxPinRising.bind(this);\n    this.rpio.init({\n      gpiomem: true,\n      mapping: \"physical\"\n    });\n  }\n  async transportConnectAsync(background) {\n    try {\n      await this.internalTransportConnectAsync();\n    } catch (e) {\n      console.debug(e);\n      console.error(\"SPI configuration failed: make sure to install rpio\");\n      this.disconnectRpio();\n      throw e;\n    }\n  }\n  async internalTransportConnectAsync() {\n    debug2(\"spi: connecting...\");\n    const { txReadyPin, rxReadyPin, resetPin } = this.options;\n    const { HIGH, LOW, POLL_HIGH, PULL_DOWN, INPUT, OUTPUT } = this.rpio;\n    debug2(\"spi: setup pins\");\n    this.rpio.open(txReadyPin, INPUT, PULL_DOWN);\n    this.rpio.open(rxReadyPin, INPUT, PULL_DOWN);\n    this.rpio.open(resetPin, OUTPUT);\n    debug2(\"spi: reset bridge\");\n    this.rpio.write(resetPin, LOW);\n    await this.bus.delay(10);\n    this.rpio.write(resetPin, HIGH);\n    this.rpio.mode(resetPin, INPUT);\n    debug2(\"spi: connect spi\");\n    this.spiDevice = this.spi.openSync(0, 0);\n    this.rpio.poll(rxReadyPin, this.handleRxPinRising, POLL_HIGH);\n    this.rpio.poll(txReadyPin, this.handleTxPinRising, POLL_HIGH);\n    debug2(\"spi: ready\");\n    await this.transfer();\n  }\n  async transportDisconnectAsync(background) {\n    this.disconnectRpio();\n  }\n  disconnectRpio() {\n    var _a;\n    try {\n      const { txReadyPin, rxReadyPin, resetPin } = this.options;\n      this.rpio.close(txReadyPin);\n      this.rpio.close(rxReadyPin);\n      this.rpio.close(resetPin);\n      (_a = this.spiDevice) == null ? void 0 : _a.closeSync();\n      this.spiDevice = void 0;\n    } catch (e) {\n      console.debug(e);\n    }\n  }\n  handleRxPinRising() {\n    this.transfer();\n  }\n  handleTxPinRising() {\n    this.transfer();\n  }\n  async transportSendPacketAsync(p) {\n    this.sendQueue.push(p.toBuffer());\n    this.transfer();\n  }\n  async transfer() {\n    let todo = true;\n    while (todo) {\n      todo = await this.transferFrame();\n      while (this.receiveQueue.length > 0) {\n        const frame = this.receiveQueue.shift();\n        this.handleFrame(frame, true);\n      }\n    }\n  }\n  async transferFrame() {\n    const { txReadyPin, rxReadyPin } = this.options;\n    const { HIGH } = this.rpio;\n    const txReady = this.rpio.read(txReadyPin) == HIGH;\n    const rxReady = this.rpio.read(rxReadyPin) == HIGH;\n    const sendtx = this.sendQueue.length > 0 && txReady;\n    if (!sendtx && !rxReady)\n      return false;\n    const txqueue = new Uint8Array(XFER_SIZE);\n    const rxqueue = new Uint8Array(txqueue.length);\n    let txq_ptr = 0;\n    while (this.sendQueue.length > 0 && txq_ptr + this.sendQueue[0].length < XFER_SIZE) {\n      const pkt = this.sendQueue.shift();\n      txqueue.set(pkt, txq_ptr);\n      txq_ptr += pkt.length + 3 & ~3;\n    }\n    if (txq_ptr == 0 && !rxReady)\n      return false;\n    const ok = await this.attemptTransferBuffers(txqueue, rxqueue);\n    if (!ok) {\n      debug2(\"transfer failed\");\n      return false;\n    }\n    if (rxReady) {\n      let framep = 0;\n      while (framep + 4 < XFER_SIZE) {\n        const frame2 = rxqueue[framep + 2];\n        if (frame2 == 0)\n          break;\n        let sz = frame2 + 12;\n        if (framep + sz > XFER_SIZE) {\n          debug2(`packet overflow ${framep} + ${sz} > ${XFER_SIZE}`);\n          break;\n        }\n        const frame0 = rxqueue[framep];\n        const frame1 = rxqueue[framep + 1];\n        const frame3 = rxqueue[framep + 3];\n        if (frame0 == 255 && frame1 == 255 && frame3 == 255) {\n        } else {\n          const computed = crc(rxqueue.slice(framep + 2, framep + sz));\n          const actual = read16(rxqueue, framep);\n          if (computed != actual) {\n            debug2(`invalid crc ${computed} != ${actual}`);\n            break;\n          }\n          const frame = rxqueue.slice(framep, framep + sz);\n          this.receiveQueue.push(frame);\n        }\n        sz = sz + 3 & ~3;\n        framep += sz;\n      }\n    }\n    return true;\n  }\n  async attemptTransferBuffers(txqueue, rxqueue) {\n    for (let i = 0; i < SPI_TRANSFER_ATTEMPT_COUNT; i++) {\n      try {\n        const msg = {\n          sendBuffer: Buffer.from(txqueue),\n          receiveBuffer: Buffer.alloc(rxqueue.length),\n          byteLength: txqueue.length,\n          speedHz: 156e5\n        };\n        this.spiDevice.transferSync([msg]);\n        msg.receiveBuffer.copy(rxqueue, 0, 0, rxqueue.length);\n        return true;\n      } catch (ex) {\n        debug2(ex);\n        await this.bus.delay(1);\n      }\n    }\n    return false;\n  }\n};\nvar RPI_PIN_TX_READY = 18;\nvar RPI_PIN_RX_READY = 22;\nvar RPI_PIN_RST = 15;\nvar RPI_SPI_BUS_ID = 0;\nfunction createNodeSPITransport(rpio, spi, options) {\n  if (!options) {\n    options = {\n      txReadyPin: RPI_PIN_TX_READY,\n      rxReadyPin: RPI_PIN_RX_READY,\n      resetPin: RPI_PIN_RST,\n      spiBusId: RPI_SPI_BUS_ID\n    };\n  }\n  return new SpiTransport(rpio, spi, options);\n}\n\n// src/jdom/transport/nodewebserialio.ts\nvar SCAN_INTERVAL = 2500;\nfunction toPromise(f) {\n  return new Promise((resolve, reject) => f((err, result) => {\n    if (err)\n      reject(err);\n    else\n      resolve(result);\n  }));\n}\nasync function listPorts(bus, serialPort) {\n  const ports = await serialPort.list();\n  return ports.filter((p) => /^PX/.test(p.serialNumber) || bus.deviceCatalog.matchVendorId(\"serial\", parseInt(p.vendorId, 16)));\n}\nasync function cancelStreams(dev) {\n  await toPromise((cb) => {\n    if (!dev.isOpen)\n      cb(void 0, void 0);\n    else\n      dev.close(cb);\n  });\n}\nvar NodeWebSerialIO = class {\n  constructor(bus, SerialPort) {\n    this.bus = bus;\n    this.SerialPort = SerialPort;\n    this.onData = (v) => {\n    };\n    this.onError = (e) => {\n      console.warn(`serial error: ${errorCode(e) || \"\"} ${e ? e.stack : e}`);\n    };\n  }\n  log(msg, v) {\n    if (Flags.diagnostics) {\n      if (v != void 0)\n        console.debug(\"serial: \" + msg, v);\n      else\n        console.debug(\"serial: \" + msg);\n    }\n  }\n  mkProto() {\n    return new HF2Proto(this);\n  }\n  clearDev() {\n    if (this.dev) {\n      this.dev = null;\n      this.port = null;\n    }\n  }\n  disconnectAsync() {\n    const d = this.dev;\n    if (!d)\n      return Promise.resolve();\n    this.clearDev();\n    return cancelStreams(d).catch((e) => {\n      if (!isCancelError(e))\n        console.debug(e);\n    }).then(() => delay(500));\n  }\n  devInfo() {\n    if (!this.port)\n      return \"n/a\";\n    return this.port.vendorId + \":\" + this.port.productId;\n  }\n  error(msg, code) {\n    const e = new JDError(`serial device ${this.devInfo()} (${msg})`, code);\n    this.onError(e);\n  }\n  sendPacketAsync(pkt) {\n    if (!this.dev) {\n      return Promise.resolve();\n    }\n    assert(pkt.length <= 64);\n    if (pkt.length < 64) {\n      const p = pkt;\n      pkt = new Uint8Array(64);\n      pkt.set(p);\n    }\n    return toPromise((cb) => this.dev.write(pkt, void 0, cb));\n  }\n  async tryReconnectAsync(deviceId) {\n    try {\n      this.dev = void 0;\n      this.port = void 0;\n      const ports = await listPorts(this.bus, this.SerialPort);\n      this.port = ports == null ? void 0 : ports[0];\n      if (this.port) {\n        console.debug(`serial: found ${this.port.serialNumber}`);\n        await toPromise((cb) => {\n          this.dev = new this.SerialPort(this.port.path, { baudRate: 115200 }, cb);\n        });\n        let tmpdata;\n        this.dev.on(\"data\", (buf) => {\n          if (tmpdata)\n            buf = bufferConcat(tmpdata, buf);\n          tmpdata = null;\n          if (buf.length & 63) {\n            tmpdata = buf;\n            return;\n          }\n          if (buf.length > 64)\n            for (let i = 0; i < buf.length; i += 64) {\n              this.onData(buf.slice(i, i + 64));\n            }\n          else\n            this.onData(buf);\n        });\n        this.dev.on(\"error\", (err) => {\n          this.error(err.messsage || err + \"\");\n        });\n        this.dev.on(\"close\", () => this.disconnectAsync());\n      }\n    } catch (e) {\n      if (!isCancelError(e))\n        console.debug(e);\n      this.dev = void 0;\n      this.port = void 0;\n    }\n  }\n  async connectAsync(background, deviceId) {\n    await this.tryReconnectAsync(deviceId);\n    if (!this.dev && background)\n      throwError(\"can't find suitable device\", true);\n    if (!this.dev)\n      throwError(\"device not found\", true);\n    console.debug(`serial: found ${this.devInfo()}`);\n    const proto = this.mkProto();\n    try {\n      await proto.postConnectAsync();\n    } catch (e) {\n      if (!isCancelError(e))\n        console.debug(e);\n      await proto.disconnectAsync();\n      throw e;\n    }\n    return proto;\n  }\n};\nvar SerialPortWatch = class extends JDEventSource {\n  constructor(SerialPort) {\n    super();\n    this.SerialPort = SerialPort;\n    this.watch();\n  }\n  watch() {\n    let knownPortIds = [];\n    const interval = setInterval(async () => {\n      if (!this.bus)\n        return;\n      const ports = await listPorts(this.bus, this.SerialPort);\n      const portIds = ports.map((port) => port.serialNumber || port.path);\n      const added = portIds.filter((id) => knownPortIds.indexOf(id) < 0);\n      const removed = knownPortIds.filter((id) => portIds.indexOf(id) < 0);\n      if (added.length || removed.length)\n        console.debug(`detected serial port change + ${added.join(\", \")} - ${removed.join(\", \")}`);\n      knownPortIds = portIds;\n      if (added.length)\n        this.emit(CONNECT);\n      if (removed.length)\n        this.emit(DISCONNECT);\n    }, SCAN_INTERVAL);\n    return {\n      unsubscribe: () => clearInterval(interval)\n    };\n  }\n};\nfunction createNodeWebSerialTransport(SerialPort) {\n  const watch = new SerialPortWatch(SerialPort);\n  const connectObservable = {\n    subscribe: (observer) => ({\n      unsubscribe: watch.subscribe(CONNECT, observer.next)\n    })\n  };\n  const disconnectObservable = {\n    subscribe: (observer) => ({\n      unsubscribe: watch.subscribe(DISCONNECT, observer.next)\n    })\n  };\n  return new WebSerialTransport({\n    mkTransport: (bus) => {\n      watch.bus = bus;\n      return new NodeWebSerialIO(bus, SerialPort);\n    },\n    connectObservable,\n    disconnectObservable\n  });\n}\n\n// src/jdom/transport/nodewebusb.ts\nfunction createNodeUSBOptions(WebUSB) {\n  console.debug(`jacdac: creating usb transport`);\n  async function devicesFound(devices) {\n    for (const device of devices) {\n      const { vendorId, productId, deviceVersionMajor } = device;\n      if (vendorId === MICROBIT_V2_VENDOR_ID && productId === MICROBIT_V2_PRODUCT_ID) {\n        console.debug(`usb: found micro:bit v2`);\n        return device;\n      } else if (deviceVersionMajor == HF2_DEVICE_MAJOR) {\n        for (const iface of device.configuration.interfaces) {\n          const alt = iface.alternates[0];\n          if (alt.interfaceClass == 255 && alt.interfaceSubclass == HF2_DEVICE_MAJOR) {\n            return device;\n          }\n        }\n      }\n    }\n    return void 0;\n  }\n  const usb = new WebUSB({\n    devicesFound,\n    allowAllDevices: true\n  });\n  async function requestDevice(options) {\n    console.debug(`usb: requesting device...`);\n    try {\n      const device = await usb.requestDevice(options);\n      return device;\n    } catch (e) {\n      if (!isCancelError(e))\n        console.debug(e);\n      return void 0;\n    }\n  }\n  async function getDevices(options) {\n    const dev = await requestDevice(options);\n    return dev ? [dev] : [];\n  }\n  const connectObservable = new EventTargetObservable(usb, \"connect\");\n  const disconnectObservable = new EventTargetObservable(usb, \"disconnect\");\n  return {\n    getDevices,\n    requestDevice,\n    connectObservable,\n    disconnectObservable\n  };\n}\n\n// src/servers/gamepadservermanager.ts\nvar GamepadHostManager = class extends JDClient {\n  constructor(bus) {\n    super();\n    this.bus = bus;\n    this.providers = [];\n    this.ticking = false;\n    this.handleGamepadConnected = this.handleGamepadConnected.bind(this);\n    this.handleGamepadDisconnected = this.handleGamepadDisconnected.bind(this);\n    this.mount(this.removeEventListener.bind(this));\n    this.addEventListeners();\n  }\n  static start(bus) {\n    if (typeof window !== \"undefined\" && window.navigator && window.navigator.getGamepads) {\n      return new GamepadHostManager(bus);\n    }\n    return void 0;\n  }\n  addEventListeners() {\n    if (typeof window === \"undefined\")\n      return;\n    window.addEventListener(\"gamepadconnected\", this.handleGamepadConnected, false);\n    window.addEventListener(\"gamepaddisconnected\", this.handleGamepadDisconnected, false);\n  }\n  removeEventListener() {\n    if (typeof window === \"undefined\")\n      return;\n    window.removeEventListener(\"gamepadconnected\", this.handleGamepadConnected);\n    window.removeEventListener(\"gamepaddisconnected\", this.handleGamepadDisconnected);\n  }\n  handleGamepadConnected(event) {\n    console.debug(\"gamepad connected\");\n    if (!this.ticking)\n      this.tick();\n  }\n  handleGamepadDisconnected(event) {\n    console.debug(\"gamepad disconnected\");\n    const { gamepad } = event;\n    const { index } = gamepad;\n    const provider = this.providers[index];\n    if (provider) {\n      this.bus.removeServiceProvider(provider.deviceProvider);\n      this.providers[index] = void 0;\n    }\n    if (!this.ticking)\n      this.tick();\n  }\n  pollGamepads() {\n    try {\n      const r = navigator.getGamepads();\n      return r;\n    } catch (e) {\n      return void 0;\n    }\n  }\n  update() {\n    const gamepads = this.pollGamepads();\n    const now = this.bus.timestamp;\n    for (let i = 0; i < (gamepads == null ? void 0 : gamepads.length); ++i) {\n      const gamepad = gamepads[i];\n      if (!gamepad)\n        continue;\n      let host = this.providers[i];\n      if (!host) {\n        const service = new GamepadServer({\n          variant: 4 /* Gamepad */,\n          buttonsAvailable: GAMEPAD_ARCADE_BUTTONS\n        });\n        const deviceHost = new JDServerServiceProvider(\"gamepad\", [\n          service\n        ]);\n        this.bus.addServiceProvider(deviceHost);\n        this.providers[i] = host = {\n          service,\n          deviceProvider: deviceHost,\n          timestamp: now\n        };\n      }\n      host.timestamp = now;\n      host.service.update(gamepad);\n    }\n  }\n  tick() {\n    this.ticking = true;\n    this.update();\n    if (this.providers.some((h) => h !== void 0))\n      window.requestAnimationFrame(() => this.tick());\n    else\n      this.ticking = false;\n  }\n};\n\n// src/servers/loggerserver.ts\nvar LoggerServer = class extends JDServiceServer {\n  constructor() {\n    super(SRV_LOGGER);\n    this.minPriority = this.addRegister(128 /* MinPriority */, [\n      4 /* Silent */\n    ]);\n  }\n  async report(priority, msg) {\n    const pkt = Packet.jdpacked(priority, \"s\", [msg]);\n    await this.sendPacketAsync(pkt);\n  }\n};\n\n// src/servers/verifiedtelemetryserver.ts\nvar VerifiedTelemetryServer = class extends JDServiceServer {\n  constructor(options) {\n    super(SRV_VERIFIED_TELEMETRY, options);\n    const {\n      fingerprintType = 1 /* FallCurve */,\n      telemetryStatusInterval = 5e3\n    } = options || {};\n    this.telemetryStatus = this.addRegister(384 /* TelemetryStatus */, [1 /* Working */]);\n    this.telemetryStatusInterval = this.addRegister(128 /* TelemetryStatusInterval */, [telemetryStatusInterval]);\n    this.fingerprintType = this.addRegister(385 /* FingerprintType */, [fingerprintType]);\n    this.fingerprintTemplate = this.addRegister(386 /* FingerprintTemplate */, [50, new Uint8Array(0)]);\n    this.addCommand(128 /* ResetFingerprintTemplate */, this.handleResetTelemetryTemplate.bind(this));\n    this.addCommand(129 /* RetrainFingerprintTemplate */, this.handleRetrainTelemetryTemplate.bind(this));\n    this.telemetryStatus.on(CHANGE, () => this.sendEvent(3 /* TelemetryStatusChange */, this.telemetryStatus.data));\n    this.fingerprintTemplate.on(CHANGE, () => this.sendEvent(128 /* FingerprintTemplateChange */));\n  }\n  handleResetTelemetryTemplate() {\n    this.fingerprintTemplate.setValues([50, new Uint8Array(0)]);\n  }\n  handleRetrainTelemetryTemplate() {\n    this.fingerprintTemplate.setValues([50, new Uint8Array(0)]);\n  }\n};\n\n// src/servers/jacscriptmanagerserver.ts\nvar JacscriptManagerServer = class extends JDServiceServer {\n  constructor() {\n    super(SRV_JACSCRIPT_MANAGER);\n    this._bytecode = new Uint8Array(0);\n    this.running = this.addRegister(128 /* Running */, [false]);\n    this.autoStart = this.addRegister(128 /* Running */, [true]);\n    this.logging = this.addRegister(130 /* Logging */, [true]);\n    this.programSize = this.addRegister(384 /* ProgramSize */, [\n      this._bytecode.length\n    ]);\n    this.programHash = this.addRegister(385 /* ProgramHash */, [\n      fnv1(this._bytecode)\n    ]);\n    this.addCommand(128 /* DeployBytecode */, this.handleDeployBytecode.bind(this));\n    this.addCommand(129 /* ReadBytecode */, this.handleReadBytecode.bind(this));\n  }\n  get bytecode() {\n    return this._bytecode;\n  }\n  set bytecode(value) {\n    value = value || new Uint8Array(0);\n    const [hash2] = this.programHash.values();\n    const valueHash = fnv1(value);\n    if (hash2 !== valueHash) {\n      this._bytecode = value;\n      this.programSize.setValues([value.length]);\n      this.programHash.setValues([valueHash]);\n      this.emit(CHANGE);\n      this.sendEvent(3 /* ProgramChange */);\n    }\n  }\n  handleDeployBytecode(pkt) {\n  }\n  async handleReadBytecode(pkt) {\n    const pipe = OutPipe.from(this.device.bus, pkt, true);\n    await pipe.sendBytes(this._bytecode);\n    await pipe.close();\n  }\n};\n\n// src/azure-iot/devicetwin.ts\nvar ServiceTwinRegisterFlag = /* @__PURE__ */ ((ServiceTwinRegisterFlag2) => {\n  ServiceTwinRegisterFlag2[ServiceTwinRegisterFlag2[\"Const\"] = 1] = \"Const\";\n  ServiceTwinRegisterFlag2[ServiceTwinRegisterFlag2[\"Volatile\"] = 2] = \"Volatile\";\n  return ServiceTwinRegisterFlag2;\n})(ServiceTwinRegisterFlag || {});\nfunction serviceSpecificationToServiceTwinSpecification(specification) {\n  if (!specification)\n    return void 0;\n  const {\n    classIdentifier: serviceClass2,\n    camelName: name,\n    packets\n  } = specification;\n  const registers = packets.filter(isHighLevelRegister).map((reg) => {\n    let flags = 0;\n    if (reg.kind == \"const\")\n      flags |= 1 /* Const */;\n    if (reg.volatile)\n      flags |= 2 /* Volatile */;\n    const r = {\n      code: reg.identifier,\n      name: reg.name,\n      flags,\n      packf: reg.packFormat,\n      fields: reg.fields.length > 1 ? reg.fields.map((f) => f.name) : void 0\n    };\n    return r;\n  });\n  const dspec = {\n    serviceClass: serviceClass2,\n    name,\n    registers\n  };\n  return dspec;\n}\nfunction serviceSpecificationsWithServiceTwinSpecification() {\n  const specs = [\n    serviceSpecificationFromClassIdentifier(SRV_CONTROL),\n    ...serviceSpecifications().filter((srv) => !isInfrastructure(srv))\n  ];\n  return specs;\n}\nexport {\n  ACK_MAX_DELAY,\n  ACK_MIN_DELAY,\n  ALIGN,\n  ANNOUNCE,\n  ANNOUNCE_INTERVAL,\n  AccelerometerEvent,\n  AccelerometerReg,\n  AnalogSensorServer,\n  ArcadeGamepadButton,\n  ArcadeGamepadEvent,\n  ArcadeGamepadReg,\n  ArcadeSoundCmd,\n  ArcadeSoundReg,\n  AzureIoTHubHealthServer,\n  AzureIotHubHealthCmd,\n  AzureIotHubHealthConnectionStatus,\n  AzureIotHubHealthEvent,\n  AzureIotHubHealthReg,\n  BLUETOOTH_JACDAC_DIAG_CHARACTERISTIC,\n  BLUETOOTH_JACDAC_RX_CHARACTERISTIC,\n  BLUETOOTH_JACDAC_SERVICE,\n  BLUETOOTH_JACDAC_TX_CHARACTERISTIC,\n  BLUETOOTH_TRANSPORT,\n  BOUND,\n  BUS_NODE_NAME,\n  BarcodeReaderEvent,\n  BarcodeReaderFormat,\n  BarcodeReaderReg,\n  BarometerReg,\n  BaseCmd,\n  BaseEvent,\n  BaseReg,\n  BitRadioCmd,\n  BitRadioReg,\n  BootloaderCmd,\n  BootloaderError,\n  BrailleDisplayReg,\n  BrailleDisplayServer,\n  BridgeReg,\n  ButtonEvent,\n  ButtonReg,\n  ButtonServer,\n  BuzzerCmd,\n  BuzzerReg,\n  BuzzerServer,\n  CHANGE,\n  CLOSE,\n  CMD_ADVERTISEMENT_DATA,\n  CMD_EVENT_CODE_MASK,\n  CMD_EVENT_COUNTER_MASK,\n  CMD_EVENT_COUNTER_POS,\n  CMD_EVENT_MASK,\n  CMD_GET_REG,\n  CMD_REG_MASK,\n  CMD_SET_REG,\n  CMD_TOP_MASK,\n  CMSISProto,\n  COMMAND_NODE_NAME,\n  COMMAND_RECEIVE,\n  CONNECT,\n  CONNECTING,\n  CONNECTION_STATE,\n  CONST_NODE_NAME,\n  CRC_ACK_NODE_NAME,\n  CapacitiveButtonCmd,\n  CapacitiveButtonReg,\n  CharacterScreenReg,\n  CharacterScreenServer,\n  CharacterScreenTextDirection,\n  CharacterScreenVariant,\n  CodalMessageBusCmd,\n  CodalMessageBusEvent,\n  ColorReg,\n  CompassCmd,\n  CompassReg,\n  CompassServer,\n  ConnectionState,\n  ControlAnnounceFlags,\n  ControlCmd,\n  ControlReg,\n  ControlServer,\n  CurrentMeasurementReg,\n  DATA,\n  DEVICE_ANNOUNCE,\n  DEVICE_CHANGE,\n  DEVICE_CLEAN,\n  DEVICE_CONNECT,\n  DEVICE_DISCONNECT,\n  DEVICE_FIRMWARE_INFO,\n  DEVICE_FOUND,\n  DEVICE_IMAGE_HEIGHT,\n  DEVICE_IMAGE_WIDTH,\n  DEVICE_LOST,\n  DEVICE_NODE_NAME,\n  DEVICE_PACKET_ANNOUNCE,\n  DEVICE_RESTART,\n  DISCONNECT,\n  DISCONNECTING,\n  DOCS_ROOT,\n  DeviceCatalog,\n  DeviceStatsMonitor,\n  DistanceReg,\n  DistanceVariant,\n  DmxCmd,\n  DmxReg,\n  DotMatrixReg,\n  DotMatrixServer,\n  DotMatrixVariant,\n  ECO2Reg,\n  ECO2Variant,\n  EMBED_MIN_ASPECT_RATIO,\n  ERROR,\n  ERROR_MICROBIT_INVALID_MEMORY,\n  ERROR_MICROBIT_JACDAC_MISSING,\n  ERROR_MICROBIT_UNKNOWN,\n  ERROR_MICROBIT_V1,\n  ERROR_TRANSPORT_DEVICE_LOCKED,\n  EVENT,\n  EVENT_NODE_NAME,\n  FIELD_NODE_NAME,\n  FIRMWARE_BLOBS_CHANGE,\n  FLASH_MAX_DEVICES,\n  FOUND,\n  FirmwareUpdater,\n  Flags,\n  FlexReg,\n  GAMEPAD_ARCADE_BUTTONS,\n  GAMEPAD_DPAD_AB_BUTTONS,\n  GAMEPAD_DPAD_A_BUTTONS,\n  GAMEPAD_DPAD_BUTTONS,\n  GAMEPAD_GAMEPAD_EXTRA_BUTTONS,\n  GET_ATTEMPT,\n  GLOBALS_UPDATED,\n  GamepadButtons,\n  GamepadEvent,\n  GamepadHostManager,\n  GamepadReg,\n  GamepadServer,\n  GamepadVariant,\n  GyroscopeReg,\n  HF2Proto,\n  HF2_CMD_BININFO,\n  HF2_CMD_CHKSUM_PAGES,\n  HF2_CMD_DMESG,\n  HF2_CMD_INFO,\n  HF2_CMD_JDS_CONFIG,\n  HF2_CMD_JDS_SEND,\n  HF2_CMD_READ_WORDS,\n  HF2_CMD_RESET_INTO_APP,\n  HF2_CMD_RESET_INTO_BOOTLOADER,\n  HF2_CMD_START_FLASH,\n  HF2_CMD_WRITE_FLASH_PAGE,\n  HF2_CMD_WRITE_WORDS,\n  HF2_DEVICE_MAJOR,\n  HF2_EV_JDS_PACKET,\n  HF2_EV_MASK,\n  HF2_FLAG_CMDPKT_BODY,\n  HF2_FLAG_CMDPKT_LAST,\n  HF2_FLAG_MASK,\n  HF2_FLAG_SERIAL_ERR,\n  HF2_FLAG_SERIAL_OUT,\n  HF2_MODE_BOOTLOADER,\n  HF2_MODE_USERSPACE,\n  HF2_SIZE_MASK,\n  HF2_STATUS_EVENT,\n  HF2_STATUS_EXEC_ERR,\n  HF2_STATUS_INVALID_CMD,\n  HF2_STATUS_OK,\n  HF2_TIMEOUT,\n  HIDKeyboardServer,\n  HIDMouseServer,\n  HeartRateReg,\n  HeartRateVariant,\n  HidKeyboardAction,\n  HidKeyboardCmd,\n  HidKeyboardModifiers,\n  HidMouseButton,\n  HidMouseButtonEvent,\n  HidMouseCmd,\n  HumidityReg,\n  IDENTIFY,\n  IDENTIFY_DURATION,\n  IlluminanceReg,\n  InPipe,\n  InPipeReader,\n  IndexedScreenCmd,\n  IndexedScreenReg,\n  JACDAC_ERROR,\n  JDBridge,\n  JDBus,\n  JDClient,\n  JDDevice,\n  JDError,\n  JDEvent,\n  JDEventSource,\n  JDField,\n  JDNode,\n  JDRegister,\n  JDRegisterServer,\n  JDServerServiceProvider,\n  JDService,\n  JDServiceClient,\n  JDServiceMemberNode,\n  JDServiceProvider,\n  JDServiceServer,\n  JDSubscriptionScope,\n  JD_ADVERTISEMENT_0_ACK_SUPPORTED,\n  JD_ADVERTISEMENT_0_COUNTER_MASK,\n  JD_DEVICE_DISCONNECTED_DELAY,\n  JD_DEVICE_LOST_DELAY,\n  JD_FRAME_FLAG_ACK_REQUESTED,\n  JD_FRAME_FLAG_COMMAND,\n  JD_FRAME_FLAG_IDENTIFIER_IS_SERVICE_CLASS,\n  JD_SERIAL_HEADER_SIZE,\n  JD_SERIAL_MAX_PAYLOAD_SIZE,\n  JD_SERVICE_INDEX_CRC_ACK,\n  JD_SERVICE_INDEX_CTRL,\n  JD_SERVICE_INDEX_INV_MASK,\n  JD_SERVICE_INDEX_MASK,\n  JD_SERVICE_INDEX_MAX_NORMAL,\n  JD_SERVICE_INDEX_PIPE,\n  JSONTryParse,\n  JacscriptCloudCmd,\n  JacscriptCloudCommandStatus,\n  JacscriptCloudEvent,\n  JacscriptCloudReg,\n  JacscriptConditionCmd,\n  JacscriptConditionEvent,\n  JacscriptManagerClient,\n  JacscriptManagerCmd,\n  JacscriptManagerEvent,\n  JacscriptManagerMessageFlags,\n  JacscriptManagerReg,\n  JacscriptManagerServer,\n  LATE,\n  LOST,\n  LedCmd,\n  LedDisplayLightType,\n  LedDisplayReg,\n  LedDisplayServer,\n  LedDisplayVariant,\n  LedReg,\n  LedStripCmd,\n  LedStripLightType,\n  LedStripReg,\n  LedStripServer,\n  LedStripVariant,\n  LedVariant,\n  LevelDetector,\n  LightBulbReg,\n  LightLevelReg,\n  LightLevelVariant,\n  LoggerCmd,\n  LoggerPriority,\n  LoggerReg,\n  LoggerServer,\n  MAX_PIXELS_LENGTH,\n  MAX_SERVICES_LENGTH,\n  MESSAGE,\n  META_ACK,\n  META_ACK_FAILED,\n  META_GET,\n  META_NOT_IMPLEMENTED,\n  META_PIPE,\n  META_TRACE,\n  META_TRACE_DESCRIPTION,\n  MICROBIT_V2_PRODUCT_ID,\n  MICROBIT_V2_VENDOR_ID,\n  MagnetometerCmd,\n  MagnetometerReg,\n  MatrixKeypadEvent,\n  MatrixKeypadReg,\n  MatrixKeypadServer,\n  MatrixKeypadVariant,\n  MicrophoneCmd,\n  MicrophoneReg,\n  MidiOutputCmd,\n  MidiOutputReg,\n  ModelRunnerCmd,\n  ModelRunnerModelFormat,\n  ModelRunnerReg,\n  MotionEvent,\n  MotionReg,\n  MotionVariant,\n  MotorReg,\n  MotorServer,\n  NEW_LISTENER,\n  NODESOCKET_TRANSPORT,\n  NumberFormat,\n  OutPipe,\n  PACKETIO_TRANSPORT,\n  PACKET_ANNOUNCE,\n  PACKET_DATA_NORMALIZE,\n  PACKET_EVENT,\n  PACKET_INVALID_CRC,\n  PACKET_INVALID_DATA,\n  PACKET_KIND_ANNOUNCE,\n  PACKET_KIND_EVENT,\n  PACKET_KIND_RO,\n  PACKET_KIND_RW,\n  PACKET_PRE_PROCESS,\n  PACKET_PROCESS,\n  PACKET_RECEIVE,\n  PACKET_RECEIVE_ANNOUNCE,\n  PACKET_RECEIVE_NO_DEVICE,\n  PACKET_REPORT,\n  PACKET_SEND,\n  PACKET_SEND_DISCONNECT,\n  PANIC,\n  PING_LOGGERS_POLL,\n  PIPE_CLOSE_MASK,\n  PIPE_COUNTER_MASK,\n  PIPE_METADATA_MASK,\n  PIPE_NODE_NAME,\n  PIPE_PORT_SHIFT,\n  PIPE_REPORT_NODE_NAME,\n  PROGRESS,\n  Packet,\n  PotentiometerReg,\n  PotentiometerVariant,\n  PowerCmd,\n  PowerEvent,\n  PowerPowerStatus,\n  PowerReg,\n  PowerServer,\n  PowerSupplyReg,\n  PowerSupplyServer,\n  PressureButtonReg,\n  PromiseBuffer,\n  PromiseQueue,\n  ProtoTestCmd,\n  ProtoTestEvent,\n  ProtoTestReg,\n  PulseOximeterReg,\n  READING_SENT,\n  REFRESH,\n  REFRESH_REGISTER_POLL,\n  REGISTER_NODE_NAME,\n  REGISTER_OPTIONAL_POLL_COUNT,\n  REGISTER_POLL_FIRST_REPORT_INTERVAL,\n  REGISTER_POLL_REPORT_INTERVAL,\n  REGISTER_POLL_REPORT_MAX_INTERVAL,\n  REGISTER_POLL_REPORT_VOLATILE_INTERVAL,\n  REGISTER_POLL_REPORT_VOLATILE_MAX_INTERVAL,\n  REGISTER_POLL_STREAMING_INTERVAL,\n  REGISTER_PRE_GET,\n  REGISTER_REFRESH_RETRY_0,\n  REGISTER_REFRESH_RETRY_1,\n  REGISTER_REFRESH_TIMEOUT,\n  REMOVE_LISTENER,\n  RENDER,\n  REPORT_NODE_NAME,\n  REPORT_RECEIVE,\n  REPORT_UPDATE,\n  RESET,\n  RESET_IN_TIME_US,\n  RESTART,\n  ROLE_BOUND,\n  ROLE_CHANGE,\n  ROLE_HAS_NO_SERVICE,\n  ROLE_MANAGER_CHANGE,\n  ROLE_MANAGER_POLL,\n  ROLE_UNBOUND,\n  RainGaugeReg,\n  RainGaugeServer,\n  RandomNumberGeneratorServer,\n  RealTimeClockCmd,\n  RealTimeClockReg,\n  RealTimeClockServer,\n  RealTimeClockVariant,\n  ReflectedLightReg,\n  ReflectedLightServer,\n  ReflectedLightVariant,\n  RegisterType,\n  RelayReg,\n  RelayVariant,\n  RngReg,\n  RngVariant,\n  RoleManager,\n  RoleManagerClient,\n  RoleManagerCmd,\n  RoleManagerEvent,\n  RoleManagerReg,\n  RoleManagerServer,\n  RotaryEncoderReg,\n  RotaryEncoderServer,\n  RoverReg,\n  SELF_ANNOUNCE,\n  SERIAL_TRANSPORT,\n  SERVICE_CLIENT_ADDED,\n  SERVICE_CLIENT_REMOVED,\n  SERVICE_MIXIN_NODE_NAME,\n  SERVICE_NODE_NAME,\n  SERVICE_PROVIDER_ADDED,\n  SERVICE_PROVIDER_REMOVED,\n  SERVICE_TEST_NODE_NAME,\n  SG90_RESPONSE_SPEED,\n  SRV_ACCELEROMETER,\n  SRV_ARCADE_GAMEPAD,\n  SRV_ARCADE_SOUND,\n  SRV_AZURE_IOT_HUB_HEALTH,\n  SRV_BARCODE_READER,\n  SRV_BAROMETER,\n  SRV_BIT_RADIO,\n  SRV_BOOTLOADER,\n  SRV_BRAILLE_DISPLAY,\n  SRV_BRIDGE,\n  SRV_BUTTON,\n  SRV_BUZZER,\n  SRV_CAPACITIVE_BUTTON,\n  SRV_CHARACTER_SCREEN,\n  SRV_CODAL_MESSAGE_BUS,\n  SRV_COLOR,\n  SRV_COMPASS,\n  SRV_CONTROL,\n  SRV_CURRENT_MEASUREMENT,\n  SRV_DASHBOARD,\n  SRV_DISTANCE,\n  SRV_DMX,\n  SRV_DOT_MATRIX,\n  SRV_E_CO2,\n  SRV_FLEX,\n  SRV_GAMEPAD,\n  SRV_GYROSCOPE,\n  SRV_HEART_RATE,\n  SRV_HID_KEYBOARD,\n  SRV_HID_MOUSE,\n  SRV_HUMIDITY,\n  SRV_ILLUMINANCE,\n  SRV_INDEXED_SCREEN,\n  SRV_INFRASTRUCTURE,\n  SRV_JACSCRIPT_CLOUD,\n  SRV_JACSCRIPT_CONDITION,\n  SRV_JACSCRIPT_MANAGER,\n  SRV_LED,\n  SRV_LED_DISPLAY,\n  SRV_LED_STRIP,\n  SRV_LIGHT_BULB,\n  SRV_LIGHT_LEVEL,\n  SRV_LOGGER,\n  SRV_MAGNETOMETER,\n  SRV_MATRIX_KEYPAD,\n  SRV_MICROPHONE,\n  SRV_MIDI_OUTPUT,\n  SRV_MODEL_RUNNER,\n  SRV_MOTION,\n  SRV_MOTOR,\n  SRV_POTENTIOMETER,\n  SRV_POWER,\n  SRV_POWER_SUPPLY,\n  SRV_PRESSURE_BUTTON,\n  SRV_PROTO_TEST,\n  SRV_PROXY,\n  SRV_PULSE_OXIMETER,\n  SRV_RAIN_GAUGE,\n  SRV_REAL_TIME_CLOCK,\n  SRV_REFLECTED_LIGHT,\n  SRV_RELAY,\n  SRV_RNG,\n  SRV_ROLE_MANAGER,\n  SRV_ROTARY_ENCODER,\n  SRV_ROVER,\n  SRV_SENSOR_AGGREGATOR,\n  SRV_SERVO,\n  SRV_SETTINGS,\n  SRV_SEVEN_SEGMENT_DISPLAY,\n  SRV_SOIL_MOISTURE,\n  SRV_SOLENOID,\n  SRV_SOUND_LEVEL,\n  SRV_SOUND_PLAYER,\n  SRV_SOUND_RECORDER_WITH_PLAYBACK,\n  SRV_SOUND_SPECTRUM,\n  SRV_SPEECH_SYNTHESIS,\n  SRV_SWITCH,\n  SRV_TCP,\n  SRV_TEMPERATURE,\n  SRV_TRAFFIC_LIGHT,\n  SRV_TVOC,\n  SRV_UNIQUE_BRAIN,\n  SRV_UV_INDEX,\n  SRV_VERIFIED_TELEMETRY,\n  SRV_VIBRATION_MOTOR,\n  SRV_VOLTAGE_MEASUREMENT,\n  SRV_WATER_LEVEL,\n  SRV_WEIGHT_SCALE,\n  SRV_WIFI,\n  SRV_WIND_DIRECTION,\n  SRV_WIND_SPEED,\n  START,\n  STOP,\n  STREAMING_DEFAULT_INTERVAL,\n  SensorAggregatorReg,\n  SensorAggregatorSampleType,\n  SensorReg,\n  SensorServer,\n  ServiceTwinRegisterFlag,\n  ServoReg,\n  ServoServer,\n  SettingsClient,\n  SettingsCmd,\n  SettingsEvent,\n  SettingsServer,\n  SevenSegmentDisplayCmd,\n  SevenSegmentDisplayReg,\n  SoilMoistureReg,\n  SoilMoistureVariant,\n  SolenoidReg,\n  SolenoidVariant,\n  SoundLevelEvent,\n  SoundLevelReg,\n  SoundPlayerCmd,\n  SoundPlayerReg,\n  SoundPlayerServer,\n  SoundRecorderWithPlaybackCmd,\n  SoundRecorderWithPlaybackReg,\n  SoundRecorderWithPlaybackStatus,\n  SoundSpectrumReg,\n  SpeechSynthesisCmd,\n  SpeechSynthesisReg,\n  SpeechSynthesisServer,\n  SwitchEvent,\n  SwitchReg,\n  SwitchServer,\n  SwitchVariant,\n  SystemCmd,\n  SystemEvent,\n  SystemReadingThreshold,\n  SystemReg,\n  SystemStatusCodes,\n  TIMEOUT,\n  TIMEOUT_DISCONNECT,\n  TIMEOUT_ERROR_CODE,\n  TRACE,\n  TRACE_FILTER_HORIZON,\n  TRANSPORT_CLOSED_ERROR_CODE,\n  TRANSPORT_CONNECT_RETRY_DELAY,\n  TRANSPORT_PULSE_TIMEOUT,\n  TYPESCRIPT_STATIC_NAMESPACE,\n  TcpCmd,\n  TcpPipeCmd,\n  TcpTcpError,\n  TemperatureReg,\n  TemperatureVariant,\n  Trace,\n  TracePlayer,\n  TraceRecorder,\n  TraceView,\n  TrafficLightReg,\n  TrafficLightServer,\n  Transport,\n  TvocReg,\n  UNBOUND,\n  USBIO,\n  USB_FILTERS,\n  USB_TRANSPORT,\n  UvIndexReg,\n  UvIndexVariant,\n  VIRTUAL_DEVICE_NODE_NAME,\n  VerifiedTelemetryCmd,\n  VerifiedTelemetryEvent,\n  VerifiedTelemetryFingerprintType,\n  VerifiedTelemetryReg,\n  VerifiedTelemetryServer,\n  VerifiedTelemetryStatus,\n  VibrationMotorCmd,\n  VibrationMotorServer,\n  VoltageMeasurementReg,\n  VoltageMeasurementVoltageMeasurementType,\n  WEBSOCKET_TRANSPORT,\n  WallClockScheduler,\n  WaterLevelReg,\n  WaterLevelVariant,\n  WebSerialIO,\n  WebSerialTransport,\n  WeightScaleCmd,\n  WeightScaleReg,\n  WeightScaleVariant,\n  WifiAPFlags,\n  WifiCmd,\n  WifiEvent,\n  WifiReg,\n  WifiServer,\n  WindDirectionReg,\n  WindSpeedReg,\n  addCustomServiceSpecification,\n  addServiceProvider,\n  anyRandomUint32,\n  arrayConcatMany,\n  arrayShuffle,\n  assert,\n  bufferConcat,\n  bufferConcatMany,\n  bufferEq,\n  bufferToArray,\n  bufferToString,\n  camelize,\n  capitalize,\n  clampToStorage,\n  cleanStack,\n  clearCustomServiceSpecifications,\n  clone,\n  commandName,\n  concatBufferArray,\n  converters,\n  crc,\n  createBluetoothTransport,\n  createIFrameBridge,\n  createNodeSPITransport,\n  createNodeSocketTransport,\n  createNodeUSBOptions,\n  createNodeWebSerialTransport,\n  createProxyBridge,\n  createUSBBus,\n  createUSBTransport,\n  createUSBWorkerTransport,\n  createWebBus,\n  createWebSerialTransport,\n  cryptoRandomUint32,\n  dashify,\n  dateToClock,\n  debounce,\n  debounceAsync,\n  decodeMember,\n  decodeMembers,\n  decodePacketData,\n  decodeU32LE,\n  delay,\n  dependencyId,\n  deviceCatalog,\n  deviceServiceName,\n  dualDeviceId,\n  ellipse,\n  ellipseFirstSentence,\n  ellipseJoin,\n  encodeU32LE,\n  encodings,\n  errorCode,\n  escapeDeviceIdentifier,\n  escapeDeviceNameIdentifier,\n  flagsToValue,\n  flatClone,\n  fnv1,\n  fromBase64,\n  fromHex,\n  fromUTF8,\n  generateDeviceSpecificationId,\n  getNumber,\n  groupBy,\n  hash,\n  hexDump,\n  hexNum,\n  hsvToCss,\n  humanify,\n  identifierToUrlPath,\n  idiv,\n  inIFrame,\n  intOfBuffer,\n  isAckError,\n  isActuator,\n  isBufferEmpty,\n  isCancelError,\n  isCommand,\n  isConstRegister,\n  isDualDeviceId,\n  isEvent,\n  isHighLevelEvent,\n  isHighLevelRegister,\n  isInfrastructure,\n  isInstanceOf,\n  isIntegerType,\n  isIntensity,\n  isNumericType,\n  isOptionalReadingRegisterCode,\n  isPipeReport,\n  isPipeReportOf,\n  isReadOnlyRegister,\n  isReading,\n  isRegister2 as isRegister,\n  isReportOf,\n  isSensor,\n  isSet,\n  isValue,\n  isValueOrIntensity,\n  isWebBluetoothEnabled,\n  isWebBluetoothSupported,\n  isWebSerialEnabled,\n  isWebSerialSupported,\n  isWebTransportSupported,\n  isWebUSBEnabled,\n  isWebUSBSupported,\n  jdpack,\n  jdpackEqual,\n  jdunpack,\n  jsonCopyFrom,\n  lightEncode,\n  loadServiceSpecifications,\n  localStorageSetting,\n  memberValueToString,\n  memcpy,\n  modifierCodes,\n  nodeSetting,\n  normalizeDeviceSpecification,\n  numberFormatFromStorageType,\n  numberFormatToStorageType,\n  objectToUnpacked,\n  packArguments,\n  packFormat,\n  packInfo,\n  packetSpeedTest,\n  parseDeviceId,\n  parseDualDeviceId,\n  parseFirmwareFile,\n  parseIdentifier,\n  parseLogicLog,\n  parsePacketFilter,\n  parseServiceSpecificationMarkdownToJSON,\n  parseTrace,\n  parseUF2Firmware,\n  pick,\n  prettyDuration,\n  prettyMemberUnit,\n  prettyMicroDuration,\n  prettySize,\n  prettyUnit2 as prettyUnit,\n  printPacket,\n  randomBytes,\n  randomDeviceId,\n  randomRange,\n  randomUInt,\n  range,\n  read16,\n  read32,\n  readBlobToText,\n  readBlobToUint8Array,\n  renderHidMouseButtons,\n  renderKeyboardKey,\n  renderWithPrecision,\n  replayLogicLog,\n  resolveUnit,\n  reverseSelectors,\n  rgbToHtmlColor,\n  roundWithPrecision,\n  scaleFloatToInt,\n  scaleIntToFloat,\n  secondaryUnitConverters,\n  selectors,\n  sendStayInBootloaderCommand,\n  sensorSpecifications,\n  serializeToTrace,\n  serviceClass,\n  serviceMap,\n  serviceName,\n  serviceProviderDefinitionFromServiceClass,\n  serviceProviderDefinitions,\n  serviceShortIdOrClass,\n  serviceSpecificationFromClassIdentifier,\n  serviceSpecificationFromName,\n  serviceSpecificationToServiceTwinSpecification,\n  serviceSpecifications,\n  serviceSpecificationsWithServiceTwinSpecification,\n  setAckError,\n  setNumber,\n  sha256,\n  sha256Hmac,\n  shortDeviceId,\n  signal,\n  sizeOfNumberFormat,\n  snakify,\n  snapshotSensors,\n  splitFilter,\n  stack,\n  startDevTools,\n  startRoles,\n  startServiceProviderFromServiceClass,\n  storageTypeRange,\n  strcmp,\n  stringToBuffer,\n  stringToUint8Array,\n  throttle,\n  throwError,\n  toArray,\n  toAscii,\n  toBase64,\n  toFullHex,\n  toHex2 as toHex,\n  toMap,\n  toUTF8,\n  toggleBit,\n  tonePayload,\n  tryParseMemberValue,\n  uint8ArrayToString,\n  uintOfBuffer,\n  unique,\n  uniqueMap,\n  uniqueName,\n  unitDescription,\n  units,\n  unpackedToObject,\n  updateApplicable,\n  usbRequestDevice,\n  valueToFlags,\n  wrapDecodedMembers,\n  write16,\n  write24,\n  write32\n};\n//# sourceMappingURL=jacdac.mjs.map\n","import React, {\n    createContext,\n    ReactNode,\n    useEffect,\n    useMemo,\n    useRef,\n} from \"react\"\nimport { createWebBus, JDBus } from \"jacdac-ts\"\n\nexport interface JacdacContextProps {\n    bus: JDBus\n}\n\n/**\n * A React context hosting the Jacdac bus.\n */\nconst JacdacContext = createContext<JacdacContextProps>({\n    bus: undefined,\n})\nJacdacContext.displayName = \"Jacdac\"\n\n/**\n * Mounts a Jacdac context with the provided bus.\n * The bus should be instantiated outside of the React tree\n * to work well with hot-reload solution (avoiding the bus to constantly reset)\n */\nexport function JacdacProvider(props: {\n    initialBus?: JDBus\n    connectOnStart?: boolean\n    children: ReactNode\n}) {\n    const { initialBus, connectOnStart, children } = props\n    const bus = useMemo(() => initialBus || createWebBus(), [])\n    const firstConnect = useRef(false)\n\n    useEffect(() => {\n        if (\n            !firstConnect.current &&\n            connectOnStart &&\n            typeof document !== \"undefined\" &&\n            document.visibilityState === \"visible\"\n        ) {\n            firstConnect.current = true\n            bus.connect(true)\n        }\n    }, [])\n\n    return (\n        <JacdacContext.Provider value={{ bus }}>\n            {children}\n        </JacdacContext.Provider>\n    )\n}\n\nexport default JacdacContext\n","import { JDBus } from \"jacdac-ts\"\nimport { useContext } from \"react\"\nimport JacdacContext, { JacdacContextProps } from \"../context/Context\"\n\n/**\n * Grabs the Jacdac singleton bus from the current Jacdac context.\n * Throws an error if bus is missing.\n */\nexport function useBus(): JDBus {\n    const { bus } = useContext<JacdacContextProps>(JacdacContext)\n    if (!bus) throw Error(\"Jacdac bus missing in context\")\n    return bus\n}\n","import { IEventSource } from \"jacdac-ts\"\nimport { useMemo, DependencyList } from \"react\"\nimport { Subscription, useSubscription } from \"use-subscription\"\n\nexport function useEventRaised<TEventSource extends IEventSource, TValue>(\n    eventName: string | string[],\n    node: TEventSource,\n    query?: (n: TEventSource) => TValue,\n    deps?: DependencyList\n): TValue {\n    const subscription = useMemo(\n        () =>\n            <Subscription<TValue>>{\n                getCurrentValue: query\n                    ? () => query(node)\n                    : () => <TValue>undefined,\n                subscribe: callback => {\n                    const unsubscribe = node?.subscribe(eventName, callback)\n                    return () => unsubscribe?.()\n                },\n            },\n        [node, ...(deps || [])]\n    )\n    return useSubscription(subscription)\n}\n","import { DependencyList } from \"react\"\nimport { IEventSource, CHANGE } from \"jacdac-ts\"\nimport { useEventRaised } from \"./useEventRaised\"\n\n/**\n * A hook that tracks the CHANGE event in a Jacdac component and reruns, caches the query.\n * The query is not part of the dependency checking.\n * @param node JDOM element\n * @param query query run whenever a change is signaled by the component\n * @param deps optional list of hooks dependencies\n * @returns\n */\nexport function useChange<TEventSource extends IEventSource, TValue>(\n    node: TEventSource | undefined,\n    query?: (n: TEventSource) => TValue,\n    deps?: DependencyList\n): TValue {\n    return useEventRaised<TEventSource, TValue>(CHANGE, node, query, deps)\n}\n","import { deviceCatalog, DeviceSpecificationOptions } from \"jacdac-ts\"\nimport { useChange } from \"./useChange\"\n\n/**\n * Gets the list of known Jacdac modules from a central repository\n * @param options\n * @returns\n */\nexport function useDeviceSpecifications(\n    options?: DeviceSpecificationOptions\n): jdspec.DeviceSpec[] {\n    const specifications = useChange(\n        deviceCatalog,\n        _ => _.specifications(options),\n        [JSON.stringify(options)]\n    )\n    return specifications\n}\n","import { JDService } from \"jacdac-ts\"\nimport { DependencyList, useMemo } from \"react\"\n\n/**\n * Gets the event JDOM node from the service\n * @param service service JDOM node\n * @param identifier event identifier\n * @returns event JDOM node if any\n */\nexport function useEvent(\n    service: JDService | undefined,\n    identifier: number,\n    deps?: DependencyList\n) {\n    return useMemo(\n        () => service?.event(identifier),\n        [service, identifier, ...(deps || [])]\n    )\n}\n","import { CHANGE, JDService, RoleManager } from \"jacdac-ts\"\nimport { DependencyList, useEffect, useMemo } from \"react\"\nimport { useBus } from \"./useBus\"\nimport { useChange } from \"./useChange\"\n\n/**\n * A hook that allow to create a service role mapping\n * @param bindings\n * @param options make sure to memoize onUpdate\n * @returns\n */\nexport function useRoles<\n    TRoles extends Record<\n        string,\n        {\n            serviceClass: number\n            preferredDeviceId?: string\n            preferredServiceIndex?: number\n        }\n    >\n>(\n    bindings: TRoles,\n    options?: {\n        onUpdate?: (newBindings: TRoles) => void\n        /**\n         * Calls update even if not all role around bound\n         */\n        incomplete?: boolean\n    },\n    deps?: DependencyList\n) {\n    const bus = useBus()\n    const { incomplete, onUpdate } = options || {}\n    const roleManager = useMemo(() => {\n        const r = new RoleManager(bus)\n        r.updateRoles(\n            Object.keys(bindings).map(role => ({\n                role,\n                serviceClass: bindings[role].serviceClass,\n                preferredDeviceId: bindings[role].preferredDeviceId,\n                preferredServiceIndex: bindings[role].preferredServiceIndex,\n            }))\n        )\n        return r\n    }, [bus, bindings, ...(deps || [])])\n\n    // callback to serialize bindings\n    useEffect(\n        () =>\n            onUpdate\n                ? roleManager?.subscribe(CHANGE, () => {\n                      const r: any = {}\n                      const roles = roleManager.saveRoles()\n                      for (const key in bindings) {\n                          const role = roles.find(r => r.role === key)\n                          if (role)\n                              r[key] = {\n                                  serviceClass: role.serviceClass,\n                                  preferredDeviceId: role.preferredDeviceId,\n                                  preferredServiceIndex:\n                                      role.preferredServiceIndex,\n                              }\n                      }\n                      onUpdate(r as TRoles)\n                  })\n                : undefined,\n        [roleManager, bindings, onUpdate, ...(deps || [])]\n    )\n\n    const { roles, updates } = useChange(\n        roleManager,\n        _ => {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            const r: Record<keyof TRoles, JDService> = {} as any\n            const u: Record<keyof TRoles, (service: JDService) => void> =\n                {} as any\n            if (_) {\n                for (const key in bindings) {\n                    const srv = _.service(key)\n                    if (srv && (incomplete || _.isBound)) r[key] = srv\n                    u[key] = (service: JDService) =>\n                        _.updateRole(\n                            key,\n                            service?.serviceClass,\n                            service?.device.deviceId,\n                            service?.serviceIndex\n                        )\n                }\n            }\n            return { roles: r, updates: u }\n        },\n        [...(deps || [])]\n    )\n\n    return { roleManager, roles, updates }\n}\n","import { DeviceFilter, ServiceFilter } from \"jacdac-ts\"\nimport { DependencyList } from \"react\"\nimport { useBus } from \"./useBus\"\nimport { useChange } from \"./useChange\"\n\n/**\n * A hook that returns an updated list of services on the bus.\n * @param options service filters\n * @param deps optional list of dependencies (excluding filter options)\n * @returns list of services matching the filter\n */\nexport function useServices(\n    options?: ServiceFilter & DeviceFilter,\n    deps?: DependencyList\n) {\n    const bus = useBus()\n    const services = useChange(bus, _ => _?.services(options) || [], [\n        JSON.stringify(options),\n        ...(deps || []),\n    ])\n    return services\n}\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/use-subscription.production.min.js');\n} else {\n  module.exports = require('./cjs/use-subscription.development.js');\n}\n","/** @license React vundefined\n * use-subscription.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var e=require(\"object-assign\"),g=require(\"react\");\nexports.useSubscription=function(a){var c=a.getCurrentValue,d=a.subscribe,b=g.useState(function(){return{getCurrentValue:c,subscribe:d,value:c()}});a=b[0];var f=b[1];b=a.value;if(a.getCurrentValue!==c||a.subscribe!==d)b=c(),f({getCurrentValue:c,subscribe:d,value:b});g.useDebugValue(b);g.useEffect(function(){function b(){if(!a){var b=c();f(function(a){return a.getCurrentValue!==c||a.subscribe!==d||a.value===b?a:e({},a,{value:b})})}}var a=!1,h=d(b);b();return function(){a=!0;h()}},[c,d]);return b};\n"],"sourceRoot":""}